!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=12)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=function(){function e(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.group=(t||"").trim().toLowerCase(),this.name=(r||"default").trim(),this.controls=n||[],this.deepLinkParams=[],o&&o.has(this.group)&&(this.deepLinkParams=o.get(this.group)||[])}return n(e,[{key:"addControl",value:function(e){e&&e.name===this.name&&e.group===this.group&&this.controls.push(e)}},{key:"getDeepLink",value:function(){return""}},{key:"getJumpPath",value:function(){var e="",t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if(a.jump){if("top"===a.jump)return"top";var l=document.querySelector(a.jump);if(l){var u=l.getBoundingClientRect();if(u.width||u.height||u.getClientRects().length)if(e){var s=document.querySelector(e);if(!s)continue;var c=s.getBoundingClientRect();u.top<c.top&&(e=a.jump)}else e=a.jump}}}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t&&(this.element=t,this.type=(t.getAttribute("data-jplist-control")||"").trim().toLowerCase(),this.group=(t.getAttribute("data-group")||"").trim().toLowerCase(),this.name=(t.getAttribute("data-name")||t.getAttribute("name")||"default").trim(),this.id=(t.getAttribute("data-id")||"").trim().toLowerCase(),this.jump=(t.getAttribute("data-jump")||"").trim())}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(0)),i=a(r(6));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getSortOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;e=e.concat(a.getSortOptions())}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"addControl",value:function(e){if(e.name!==this.name||e.group!==this.group)return null;var t=new i.default(e.element);return this.controls.push(t),t}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(0)),i=a(r(8));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){if(e.name!==this.name||e.group!==this.group)return null;var t=new i.default(e.element);return this.controls.push(t),t}},{key:"getPathFilterOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;e=e.concat(a.getPathFilterOptions())}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();r(46);var o=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t){if(this.element=t,!this.element)return;this.panels=this.element.querySelectorAll('[data-type="panel"]'),this.element.openedClass=(this.element.getAttribute("data-opened-class")||"jplist-dd-opened").trim();var r=!0,n=!1,o=void 0;try{for(var i,a=this.panels[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.initialContent=l.innerHTML,l.element=t}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}this.contents=this.element.querySelectorAll('[data-type="content"]'),this.handlePanelsClick()}}return n(e,[{key:"handlePanelsClick",value:function(){var e=this;if(this.panels&&!(this.panels.length<=0)){var t=!0,r=!1,n=void 0;try{for(var o,i=function(){var t=o.value;t.addEventListener("click",function(r){var n=!1,o=!0,i=!1,a=void 0;try{for(var l,u=e.contents[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;s.classList.toggle(t.element.openedClass),s.classList.contains(t.element.openedClass)&&(n=!0)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}n?(t.classList.add(t.element.openedClass),t.element.classList.add(t.element.openedClass)):(t.classList.remove(t.element.openedClass),t.element.classList.remove(t.element.openedClass))})},a=this.panels[Symbol.iterator]();!(t=(o=a.next()).done);t=!0)i()}catch(e){r=!0,n=e}finally{try{!t&&a.return&&a.return()}finally{if(r)throw n}}document.addEventListener("click",function(t){e.element.contains(t.target)||e.close()})}}},{key:"setPanelsContent",value:function(e){var t=!0,r=!1,n=void 0;try{for(var o,i=this.panels[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){o.value.innerHTML=e}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}}},{key:"restorePanelsContent",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.panels[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.initialContent&&(i.innerHTML=i.initialContent)}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}}},{key:"close",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.contents[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){n.value.classList.remove(this.panels[0].element.openedClass)}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}var i=!0,a=!1,l=void 0;try{for(var u,s=this.panels[Symbol.iterator]();!(i=(u=s.next()).done);i=!0){var c=u.value;c.classList.remove(c.element.openedClass),c.element.classList.remove(c.element.openedClass)}}catch(e){a=!0,l=e}finally{try{!i&&s.return&&s.return()}finally{if(a)throw l}}}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(0)),i=a(r(30));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getTextFilterOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;e=e.concat(a.getTextFilterOptions())}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"addControl",value:function(e){if(e.name!==this.name||e.group!==this.group)return null;var t=new i.default(e.element);return this.controls.push(t),t}},{key:"getDeepLink",value:function(){var e=this.controls.map(function(e){return e.id&&""!==e.text.trim()?e.id+"="+e.text.trim():""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(1));var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(e){r.path=(e.getAttribute("data-path")||"").trim(),r.dataType=(e.getAttribute("data-type")||"text").trim().toLowerCase(),r.order=(e.getAttribute("data-order")||"asc").trim().toLowerCase(),r.regex=e.getAttribute("data-regex")||"",r.dateTimeFormat=(e.getAttribute("data-date-format")||"").trim().toLowerCase(),r.multipleSortsNumber=r.getMultipleSortsNumber(e);for(var n=1;n<=r.multipleSortsNumber;n++)r["path"+n]=(e.getAttribute("data-path-"+n)||"").trim(),r["dataType"+n]=(e.getAttribute("data-type-"+n)||"text").trim().toLowerCase(),r["order"+n]=(e.getAttribute("data-order-"+n)||"asc").trim().toLowerCase(),r["regex"+n]=e.getAttribute("data-regex-"+n)||"",r["dateTimeFormat"+n]=(e.getAttribute("data-date-format-"+n)||"").trim().toLowerCase()}return r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getMultipleSortsNumber",value:function(e){var t=0,r=!0,n=!1,o=void 0;try{for(var i,a=e.attributes[Symbol.iterator]();!(r=(i=a.next()).done);r=!0)for(var l=i.value,u=null,s=/^data-path-([0-9]+)$/g;u=s.exec(l.nodeName);){var c=Number(u[1]);Number.isInteger(c)&&t++}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return t}},{key:"getSortOptions",value:function(){var e=[];if(this.path){e.push({path:this.path,dataType:this.dataType,order:this.order,ignoreRegex:this.ignoreRegex,dateTimeFormat:this.dateTimeFormat});for(var t=1;t<=this.multipleSortsNumber;t++)e.push({path:this["path"+t],dataType:this["dataType"+t],order:this["order"+t],ignoreRegex:this["ignoreRegex"+t],dateTimeFormat:this["dateTimeFormat"+t]})}return e}},{key:"isEqualTo",value:function(e){for(var t=!0,r=["path","dataType","order","regex","dateTimeFormat"],n=0;n<r.length;n++)t=t&&this[r[n]]===e[r[n]];t=t&&this.multipleSortsNumber===e.multipleSortsNumber;for(var o=1;o<=this.multipleSortsNumber;o++)for(var i=0;i<r.length;i++)t=t&&this[r[i]+o]===e[r[i]+o];return t}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();t.default=function(e){return function(t){function r(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e,t,n,o));return i.group=e,i.name=t,i.checkboxes=[],i.radios=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e),n(r,[{key:"addControl",value:function(e){var t=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"addControl",this).call(this,e);if(n.selected="true"===n.element.getAttribute("data-selected"),n.mode=n.element.getAttribute("data-mode")||"radio",n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.selected="1"===o.value)}"radio"===n.mode&&(this.radios.push(n),this.handleRadios()),"checkbox"===n.mode&&(this.checkboxes.push(n),this.handleCheckboxes()),n.element.addEventListener("click",function(e){if(e.preventDefault(),"checkbox"===n.mode&&(n.selected=!n.selected,t.checkboxes.forEach(function(e){e.isEqualTo(n)&&(e.selected=n.selected)}),t.handleCheckboxes()),"radio"===n.mode){var r=!0,o=!1,i=void 0;try{for(var a,l=t.radios[Symbol.iterator]();!(r=(a=l.next()).done);r=!0)a.value.selected=!1}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}n.selected=!0,t.handleRadios()}window.jplist&&window.jplist.refresh(t.group)})}},{key:"handleCheckboxes",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.checkboxes[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.selected?i.element.classList.add("jplist-selected"):i.element.classList.remove("jplist-selected"),i.element.checked=i.selected}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}}},{key:"getLastSelectedRadio",value:function(){var e=null,t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=a)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"handleRadios",value:function(){if(this.radios.length>0){var e=this.getLastSelectedRadio(),t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected=!1,a.element.classList.remove("jplist-selected")}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}e&&this.radios.forEach(function(t){t.isEqualTo(e)&&(t.selected=!0,t.element.checked=!0,t.element.classList.add("jplist-selected"))})}}},{key:"getDeepLink",value:function(){var e=this.checkboxes.map(function(e){return e.id?e.selected?e.id+"=1":e.id+"=0":""}).filter(function(e){return""!==e}),t=this.radios.map(function(e){return e.id&&e.selected?e.id+"=1":""}).filter(function(e){return""!==e}),r=e.concat(t);return Array.from(new Set(r)).join("&")}}]),r}()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(1));var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return e&&(r.path=(e.getAttribute("data-path")||"").trim(),r.isInverted="true"===(e.getAttribute("data-inverted")||"").toLowerCase().trim()),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getPathFilterOptions",value:function(){return{path:this.path,isInverted:this.isInverted}}},{key:"isEqualTo",value:function(e){return this.path===e.path&&this.isInverted===e.isInverted}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();t.default=function(e){return function(t){function r(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e,t,n,o));return i.group=e,i.name=t,i.checkboxes=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e),n(r,[{key:"addControl",value:function(e){var t=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"addControl",this).call(this,e);if(n.selected=n.element.checked,n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.selected="1"===o.value)}this.checkboxes.push(n),this.handleCheckboxes(),n.element.addEventListener("change",function(e){e.preventDefault(),n.selected=!n.selected,t.checkboxes.forEach(function(e){e.isEqualTo(n)&&(e.selected=n.selected)}),t.handleCheckboxes(),window.jplist&&window.jplist.refresh(t.group)})}},{key:"handleCheckboxes",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.checkboxes[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.selected?i.element.classList.add("jplist-selected"):i.element.classList.remove("jplist-selected"),i.element.checked=i.selected}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}}},{key:"getDeepLink",value:function(){var e=this.checkboxes.map(function(e){return e.id?e.selected?e.id+"=1":e.id+"=0":""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}]),r}()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();t.default=function(e){return function(t){function r(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e,t,n,o));return i.group=e,i.name=t,i.radios=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,e),n(r,[{key:"addControl",value:function(e){var t=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"addControl",this).call(this,e);if(n.selected=n.element.checked,n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.selected="1"===o.value)}this.radios.push(n),this.handleRadios(),n.element.addEventListener("change",function(e){e.preventDefault();var r=!0,o=!1,i=void 0;try{for(var a,l=t.radios[Symbol.iterator]();!(r=(a=l.next()).done);r=!0)a.value.selected=!1}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}n.selected=!0,t.handleRadios(),window.jplist&&window.jplist.refresh(t.group)})}},{key:"getLastSelectedRadio",value:function(){var e=null,t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=a)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"handleRadios",value:function(){if(this.radios.length>0){var e=this.getLastSelectedRadio(),t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected=!1,a.element.classList.remove("jplist-selected")}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}e&&this.radios.forEach(function(t){t.isEqualTo(e)&&(t.selected=!0,t.element.checked=!0,t.element.classList.add("jplist-selected"))})}}},{key:"getDeepLink",value:function(){var e=this.radios.map(function(e){return e.id&&e.selected?e.id+"=1":""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}]),r}()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(0)),i=a(r(40));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){if(e.name!==this.name||e.group!==this.group)return null;var t=new i.default(e.element);return this.controls.push(t),t}},{key:"getRangeFilterOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;e=e.concat(a.getRangeFilterOptions())}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";var n=x(r(13)),o=x(r(20)),i=x(r(21)),a=x(r(22)),l=x(r(23)),u=x(r(24)),s=x(r(25)),c=x(r(26)),f=x(r(29)),d=x(r(31)),p=x(r(32)),h=x(r(33)),v=x(r(34)),y=x(r(35)),b=x(r(36)),g=x(r(37)),m=x(r(38)),w=x(r(39)),O=x(r(41)),_=x(r(43)),j=x(r(4)),P=x(r(44)),k=x(r(45));function x(e){return e&&e.__esModule?e:{default:e}}!function(){if("function"!=typeof window.CustomEvent){var e=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var r=document.createEvent("CustomEvent");return r.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r};e.prototype=window.Event.prototype,window.CustomEvent=e}window.jplist=window.jplist||{},window.jplist.controlTypes=window.jplist.controlTypes||new Map([["hidden-sort",o.default],["sort-buttons",i.default],["radio-buttons-sort",a.default],["checkbox-sort",l.default],["select-sort",u.default],["dropdown-sort",s.default],["pagination",c.default],["textbox-filter",f.default],["checkbox-text-filter",d.default],["radio-buttons-text-filter",p.default],["buttons-text-filter",h.default],["select-filter",v.default],["dropdown-filter",m.default],["checkbox-path-filter",y.default],["radio-buttons-path-filter",b.default],["buttons-path-filter",g.default],["buttons-range-filter",w.default],["slider-range-filter",O.default],["no-results",_.default],["dropdown",j.default],["layout",P.default],["reset",k.default]]);var t=new n.default;window.jplist.init=t.init.bind(t),window.jplist.refresh=t.refresh.bind(t),window.jplist.resetControls=t.resetControls.bind(t)}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(n=(a=l.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{!n&&l.return&&l.return()}finally{if(o)throw i}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=function(e){return e&&e.__esModule?e:{default:e}}(r(14));var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,[{key:"init",value:function(e){this.settings=Object.assign({},{storage:"",storageName:"jplist",cookiesExpiration:-1,deepLinking:!1,hashStart:"#"},e),this.controls=i.default.splitByGroupAndName(this.settings,document.body),this.elements=document.querySelectorAll("[data-jplist-group]"),this.groups=i.default.findGroups(this.elements);for(var t=[].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(document.querySelectorAll("[data-jplist-item]"))),r=0;r<t.length;r++)t[r].jplistIndex=r;this.refresh("")}},{key:"refresh",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";i.default.apply(this.settings,this.controls,this.groups,e)}},{key:"resetControls",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(this.controls){var t=!0,r=!1,o=void 0;try{for(var a,l=this.controls[Symbol.iterator]();!(t=(a=l.next()).done);t=!0){var u=n(a.value,2),s=(u[0],u[1]),c=!0,f=!1,d=void 0;try{for(var p,h=s[Symbol.iterator]();!(c=(p=h.next()).done);c=!0){var v=p.value,y=!0,b=!1,g=void 0;try{for(var m,w=v.controls[Symbol.iterator]();!(y=(m=w.next()).done);y=!0){var O=m.value;O.element&&O.element.initialHTML&&(O.element.outerHTML=O.element.initialHTML)}}catch(e){b=!0,g=e}finally{try{!y&&w.return&&w.return()}finally{if(b)throw g}}}}catch(e){f=!0,d=e}finally{try{!c&&h.return&&h.return()}finally{if(f)throw d}}}}catch(e){r=!0,o=e}finally{try{!t&&l.return&&l.return()}finally{if(r)throw o}}}this.controls=i.default.splitByGroupAndName(this.settings,document.body),this.refresh(e)}}]),e}();t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(n=(a=l.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{!n&&l.return&&l.return()}finally{if(o)throw i}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=f(r(15)),a=f(r(16)),l=f(r(1)),u=f(r(17)),s=f(r(18)),c=f(r(19));function f(e){return e&&e.__esModule?e:{default:e}}function d(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}var p=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,null,[{key:"apply",value:function(t,r,o){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";if(r&&o){var u=!0,f=!1,d=void 0;try{for(var p,h=o[Symbol.iterator]();!(u=(p=h.next()).done);u=!0){var v=n(p.value,2),y=v[0],b=v[1];if(l&&l===y||!l){var g=r.get(y),m=e.collectControlsOptions(g),w=!0,O=!1,_=void 0;try{for(var j,P=b[Symbol.iterator]();!(w=(j=P.next()).done);w=!0){var k=j.value,x=k.items.length,S=e.getItemsFragment(k.items);m.sortOptions&&m.sortOptions.length>0&&(i.default.sort(k.items,m.sortOptions),S=e.getItemsFragment(k.items));var C=k.items;if(m.pathFilterOptions){var E=!0,L=!1,T=void 0;try{for(var N,M=m.pathFilterOptions[Symbol.iterator]();!(E=(N=M.next()).done);E=!0){var A=N.value;x=(C=c.default.pathFilter(C,A.path,A.isInverted)).length,S=e.getItemsFragment(C)}}catch(e){L=!0,T=e}finally{try{!E&&M.return&&M.return()}finally{if(L)throw T}}}if(m.rangeFilterOptions){var F=!0,R=!1,D=void 0;try{for(var B,q=m.rangeFilterOptions[Symbol.iterator]();!(F=(B=q.next()).done);F=!0){var I=B.value;x=(C=c.default.rangeFilter(C,I.path,I.from,I.to,I.min,I.max)).length,S=e.getItemsFragment(C)}}catch(e){R=!0,D=e}finally{try{!F&&q.return&&q.return()}finally{if(R)throw D}}}if(m.textFilterOptions){var H=!0,V=!1,W=void 0;try{for(var G,z=m.textFilterOptions[Symbol.iterator]();!(H=(G=z.next()).done);H=!0){var U=G.value;x=(C=c.default.textFilter(C,U.text,U.path,U.mode,U.ignoreRegex)).length,S=e.getItemsFragment(C)}}catch(e){V=!0,W=e}finally{try{!H&&z.return&&z.return()}finally{if(V)throw W}}}if(m.paginationOptions){var Y=new a.default(m.paginationOptions.currentPage,m.paginationOptions.itemsPerPage,C.length,m.paginationOptions.range);if(g.length>0){var J=!0,X=!1,Z=void 0;try{for(var $,K=g[Symbol.iterator]();!(J=($=K.next()).done);J=!0){var Q=$.value;Q.setPaginationOptions&&Q.setPaginationOptions(Y)}}catch(e){X=!0,Z=e}finally{try{!J&&K.return&&K.return()}finally{if(X)throw Z}}}var ee=C.slice(Y.start,Y.end);x=ee.length,S=e.getItemsFragment(ee)}k.root.appendChild(S),e.sendStateEvent(m,x,g)}}catch(e){O=!0,_=e}finally{try{!w&&P.return&&P.return()}finally{if(O)throw _}}e.jump(g)}}}catch(e){f=!0,d=e}finally{try{!u&&h.return&&h.return()}finally{if(f)throw d}}t.deepLinking?e.updateDeepLink(e.getDeepLink(r,o),t.hashStart):t.storage&&s.default.set(e.getDeepLink(r,o),t.storage,t.storageName,t.cookiesExpiration)}}},{key:"jump",value:function(e){if(e&&!(e.length<=0)){var t=-1,r=!0,n=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value.getJumpPath();if(l){if("top"===l){t=0;break}var u=document.querySelector(l);if(u){var s=u.getBoundingClientRect();if(u.width||u.height||u.getClientRects().length){var c=document.clientTop||document.body.clientTop||0;t<0?t=s.top+window.pageYOffset-c:s.top+window.pageYOffset-c<t&&(t=s.top+window.pageYOffset-c)}}}}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}t>=0&&window.scroll(0,t)}}},{key:"sendStateEvent",value:function(e,t,r){if(r){var n=new CustomEvent("jplist.state");n.jplistState={options:e,itemsNumber:t};var o=!0,i=!1,a=void 0;try{for(var l,u=r[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value,c=!0,f=!1,d=void 0;try{for(var p,h=s.controls[Symbol.iterator]();!(c=(p=h.next()).done);c=!0){p.value.element.dispatchEvent(n)}}catch(e){f=!0,d=e}finally{try{!c&&h.return&&h.return()}finally{if(f)throw d}}}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}}}},{key:"collectControlsOptions",value:function(e){var t={sortOptions:[],paginationOptions:null,textFilterOptions:[],pathFilterOptions:[],rangeFilterOptions:[]};if(!e)return t;var r=!0,n=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.getSortOptions&&(t.sortOptions=t.sortOptions.concat(l.getSortOptions())),l.getTextFilterOptions&&(t.textFilterOptions=t.textFilterOptions.concat(l.getTextFilterOptions())),l.getPathFilterOptions&&(t.pathFilterOptions=t.pathFilterOptions.concat(l.getPathFilterOptions())),l.getRangeFilterOptions&&(t.rangeFilterOptions=t.rangeFilterOptions.concat(l.getRangeFilterOptions())),l.getPaginationOptions&&(t.paginationOptions=l.getPaginationOptions())}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return t}},{key:"getItemsFragment",value:function(e){var t=document.createDocumentFragment(),r=!0,n=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;t.appendChild(l)}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return t}},{key:"updateDeepLink",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#",r=e.replace(t,"").trim();if(r=""===r?t:t+r,window.location.hash!==r){var n=window.location.href.indexOf(t),o=void 0;o=-1===n?window.location.href+r:window.location.href.substring(0,n)+r,"replaceState"in window.history?window.history.replaceState("","",o):window.location.replace(o)}}},{key:"getDeepLink",value:function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,l=t.keys()[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var u=a.value,s=e.get(u),c=[],f=!0,d=!1,p=void 0;try{for(var h,v=s[Symbol.iterator]();!(f=(h=v.next()).done);f=!0){var y=h.value.getDeepLink();y&&c.push(y)}}catch(e){d=!0,p=e}finally{try{!f&&v.return&&v.return()}finally{if(d)throw p}}c.length>0&&(r.push("group="+u),r=r.concat(c))}}catch(e){o=!0,i=e}finally{try{!n&&l.return&&l.return()}finally{if(o)throw i}}return r.join("&")}},{key:"findGroups",value:function(e){var t=new Map;if(!e)return t;var r=[].concat(d(e)),n=!0,o=!1,i=void 0;try{for(var a,l=r[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var u=a.value,s=u.getAttribute("data-jplist-group"),c=[];t.has(s)&&(c=t.get(s)),c.push({root:u,items:[].concat(d(u.querySelectorAll("[data-jplist-item]"))),fragment:document.createDocumentFragment()}),t.set(s,c)}}catch(e){o=!0,i=e}finally{try{!n&&l.return&&l.return()}finally{if(o)throw i}}return t}},{key:"findControls",value:function(e){if(!e)return[];var t=[],r=e.querySelectorAll("[data-jplist-control]");if(r){var n=!0,o=!1,i=void 0;try{for(var a,u=r[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var s=a.value;if(s.getAttribute("data-jplist-control")){s.initialHTML=s.outerHTML;var c=new l.default(s);t.push(c)}}}catch(e){o=!0,i=e}finally{try{!n&&u.return&&u.return()}finally{if(o)throw i}}}return t}},{key:"findControlGroups",value:function(e){var t=new Map;if(e){var r=!0,n=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value,u=[];t.has(l.group)&&(u=t.get(l.group)),u.push(l),t.set(l.group,u)}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}}return t}},{key:"findSameNameControls",value:function(e,t){var r=new Map;if(t){var n=null;if(e.deepLinking)n=u.default.getUrlParams(window.location.hash,e.hashStart);else if(e.storage){var o=s.default.get(e.storage,e.storageName);n=u.default.getUrlParams(o,"")}var i=!0,a=!1,l=void 0;try{for(var c,f=t[Symbol.iterator]();!(i=(c=f.next()).done);i=!0){var d=c.value;if(d.type&&window.jplist.controlTypes.has(d.type)){var p=window.jplist.controlTypes.get(d.type);if(p){var h=null;(h=r.has(d.name)?r.get(d.name):new p(d.group,d.name,[],n)).addControl(d),r.set(d.name,h)}}}}catch(e){a=!0,l=e}finally{try{!i&&f.return&&f.return()}finally{if(a)throw l}}}return r}},{key:"splitByGroupAndName",value:function(t,r){var o=new Map;if(!r)return o;var i=e.findControls(r),a=e.findControlGroups(i),l=!0,u=!1,s=void 0;try{for(var c,f=a[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){var d=n(c.value,2),p=d[0],h=d[1],v=e.findSameNameControls(t,h),y=[],b=!0,g=!1,m=void 0;try{for(var w,O=v.values()[Symbol.iterator]();!(b=(w=O.next()).done);b=!0){var _=w.value;y.push(_)}}catch(e){g=!0,m=e}finally{try{!b&&O.return&&O.return()}finally{if(g)throw m}}o.set(p,y)}}catch(e){u=!0,s=e}finally{try{!l&&f.return&&f.return()}finally{if(u)throw s}}return o}}]),e}();t.default=p},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"sort",value:function(t,r){return!r||r.length<=0?(t.sort(function(t,r){return e.sortByIndex(t,r)}),t):(t.sort(function(t,n){return e.sortHelper(t,n,r,0)}),t)}},{key:"sortHelper",value:function(t,r,n,o){if(!n||n.length<=0||o>=n.length)return 0;var i=0,a=n[o];if("default"!==a.path)switch(a.dataType){case"number":i=e.sortNumbers(t,r,a.path,a.order);break;case"datetime":i=e.sortDateTime(t,r,a.path,a.order,a.dateTimeFormat);break;default:i=e.sortText(t,r,a.path,a.order,a.ignoreRegex)}else i=e.sortByIndex(t,r);return 0===i&&o+1<n.length&&(i=e.sortHelper(t,r,n,o+1)),i}},{key:"sortText",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"asc",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(!e||!t)return 0;var i=r?e.querySelector(r):e,a=r?t.querySelector(r):t;if(!i||!a)return 0;var l=i.textContent.trim().toLowerCase(),u=a.textContent.trim().toLowerCase();if(o){var s=new RegExp(o,"ig");l=l.replace(s,"").trim(),u=u.replace(s,"").trim()}return l===u?0:(n||(n="asc"),"".localeCompare?"asc"===n?l.localeCompare(u):u.localeCompare(l):"asc"===n?l>u?1:-1:l<u?1:-1)}},{key:"sortNumbers",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"asc";if(!e||!t)return 0;var o=r?e.querySelector(r):e,i=r?t.querySelector(r):t;if(!o||!i)return 0;var a=o.textContent.trim().toLowerCase(),l=i.textContent.trim().toLowerCase();return a=parseFloat(a.replace(/[^-0-9.]+/g,"")),l=parseFloat(l.replace(/[^-0-9.]+/g,"")),isNaN(a)||isNaN(l)?isNaN(a)&&isNaN(l)?0:isNaN(a)?1:-1:a===l?0:(n||(n="asc"),"asc"===n?a-l:l-a)}},{key:"sortByIndex",value:function(e,t){if(!e||!t)return 0;var r=Number(e.jplistIndex),n=Number(t.jplistIndex);return isNaN(r)||isNaN(n)?0:r-n}},{key:"sortDateTime",value:function(t,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"asc",i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(!t||!r)return 0;var a=n?t.querySelector(n):t,l=n?r.querySelector(n):r;if(!a||!l)return 0;var u=a.textContent.trim().toLowerCase(),s=l.textContent.trim().toLowerCase(),c=void 0,f=void 0;return(i=i.trim())?(c=e.getDateFromString(u,i),f=e.getDateFromString(s,i)):(c=new Date(Date.parse(u)),f=new Date(Date.parse(s))),c.getTime()===f.getTime()?0:(o||(o="asc"),"asc"===o?c.getTime()>f.getTime()?1:-1:c.getTime()<f.getTime()?1:-1)}},{key:"getDateFromString",value:function(t,r){r=(r=(r=(r=(r=r.replace(/\./g,"\\.")).replace(/\(/g,"\\(")).replace(/\)/g,"\\)")).replace(/\[/g,"\\[")).replace(/\]/g,"\\]");var n=e.getDateWildcardValue(r,"{year}",t);n=Number(n)||1900;var o=e.getDateWildcardValue(r,"{day}",t);o=Number(o)||1;var i=e.getDateWildcardValue(r,"{month}",t);-1===(i=e.getMonthByWildcard(i))&&(i=0);var a=e.getDateWildcardValue(r,"{hour}",t);a=Number(a)||0;var l=e.getDateWildcardValue(r,"{min}",t);l=Number(l)||0;var u=e.getDateWildcardValue(r,"{sec}",t);return u=Number(u)||0,new Date(n,i,o,a,l,u)}},{key:"getDateWildcardValue",value:function(e,t,r){var n=null,o=e.replace(t,"(.*)").replace(/{year}|{month}|{day}|{hour}|{min}|{sec}/g,".*"),i=new RegExp(o,"g").exec(r);return i&&i.length>1&&(n=i[1]),n}},{key:"getMonthByWildcard",value:function(t){t=t?t.trim().toLowerCase():"";var r=Number(t);return isNaN(r)?e.months.findIndex(function(e){return e.find(function(e){return e.trim()===t})}):r-1<0?-1:r-1}},{key:"months",get:function(){return[["january","jan","jan."],["february","feb","feb."],["march","mar","mar."],["april","apr","apr."],["may"],["june","jun."],["july","jul","jul."],["august","aug","aug."],["september","sep","sep."],["october","oct","oct."],["november","nov","nov."],["december","dec","dec."]]}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,r,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.itemsNumber=Number(n)||0,this.itemsPerPage=Number.isInteger(r)?Number(r):this.itemsNumber,0===this.itemsPerPage&&(this.itemsPerPage=n),this.pagesNumber=0===this.itemsPerPage?0:Math.ceil(this.itemsNumber/this.itemsPerPage),this.currentPage=Number(t)||0,this.currentPage>this.pagesNumber-1&&(this.currentPage=0),this.start=this.currentPage*this.itemsPerPage,this.end=this.start+this.itemsPerPage,this.end>this.itemsNumber&&(this.end=this.itemsNumber),this.prevPage=this.currentPage<=0?0:this.currentPage-1,this.nextPage=0===this.pagesNumber?0:this.currentPage>=this.pagesNumber-1?this.pagesNumber-1:this.currentPage+1,this.range=Number(o)||10;var i=Math.ceil((this.range-1)/2);this.rangeStart=this.currentPage-i,this.rangeEnd=Math.min(this.rangeStart+this.range-1,this.pagesNumber-1),this.rangeStart<=0&&(this.rangeStart=0,this.rangeEnd=Math.min(this.range-1,this.pagesNumber-1)),this.rangeEnd>=this.pagesNumber-1&&(this.rangeStart=Math.max(this.pagesNumber-this.range,0),this.rangeEnd=this.pagesNumber-1)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"getParam",value:function(e){if(!e)return null;var t=e.split("=");return t.length<2?null:{key:t[0].trim().toLowerCase(),value:t[1].trim().toLowerCase()}}},{key:"getUrlParams",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#",n=new Map;if(!t)return n;var o=window.decodeURIComponent(t.replace(r,"")).trim().toLowerCase();if(!o)return n;var i=o.split("&"),a="",l=!0,u=!1,s=void 0;try{for(var c,f=i[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){var d=c.value,p=e.getParam(d);if(p)if("group"===p.key)a=p.value,n.has(p.value)||n.set(p.value,[]);else{var h=n.get(a);h&&h.push(p),n.set(a,h)}}}catch(e){u=!0,s=e}finally{try{!l&&f.return&&f.return()}finally{if(u)throw s}}return n}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"isSupported",value:function(e){if("cookies"===e)return!0;try{return e in window&&null!==window[e]}catch(e){return!1}}},{key:"set",value:function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;if("cookies"===r){var i=encodeURIComponent(t),a=new Date;-1===(o=Number(o)||-1)?document.cookie=name+"="+i+";path=/;":(a.setMinutes(a.getMinutes()+o),document.cookie=name+"="+i+";path=/; expires="+a.toUTCString())}else e.isSupported(r)&&(window[r][n]=t)}},{key:"get",value:function(t,r){var n="";if("cookies"===t)for(var o=document.cookie.split(";"),i=0;i<o.length;i++){var a=o[i].substr(0,o[i].indexOf("=")),l=o[i].substr(o[i].indexOf("=")+1);if((a=a.replace(/^\s+|\s+$/g,""))===r){n=decodeURIComponent(l);break}}else e.isSupported(t)&&(n=window[t][r]||"");return n}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,null,[{key:"textFilter",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"contains",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",i=[];if(!e)return[];if("default"===r)return e;var a=t.replace(new RegExp(o,"ig"),"").toLowerCase().trim(),l=!0,u=!1,s=void 0;try{for(var c,f=e[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){var d=c.value,p=r?d.querySelectorAll(r):[d];if(p){var h=!1,v=!0,y=!1,b=void 0;try{for(var g,m=p[Symbol.iterator]();!(v=(g=m.next()).done);v=!0){var w=g.value.textContent.replace(new RegExp(o,"ig"),"").toLowerCase().trim();switch(n){case"startsWith":w.startsWith(a)&&(h=!0);break;case"endsWith":w.endsWith(a)&&(h=!0);break;case"equal":w===a&&(h=!0);break;default:-1!==w.indexOf(a)&&(h=!0)}if(h)break}}catch(e){y=!0,b=e}finally{try{!v&&m.return&&m.return()}finally{if(y)throw b}}h&&i.push(d)}}}catch(e){u=!0,s=e}finally{try{!l&&f.return&&f.return()}finally{if(u)throw s}}return i}},{key:"pathFilter",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=[];if(!e)return[];if("default"===t||!t)return e;var o=!0,i=!1,a=void 0;try{for(var l,u=e[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value,c=s.querySelector(t);(c&&!r||!c&&r)&&n.push(s)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}return n}},{key:"isNumeric",value:function(e){return!isNaN(parseFloat(e))&&isFinite(e)}},{key:"rangeFilter",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments[2],o=arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:n,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:o,l=[];if(!t)return[];if("default"===r)return t;n=Math.max(n,i),o=Math.min(o,a);var u=!0,s=!1,c=void 0;try{for(var f,d=t[Symbol.iterator]();!(u=(f=d.next()).done);u=!0){var p=f.value,h=r?p.querySelectorAll(r):[p];if(h){var v=[],y=!0,b=!1,g=void 0;try{for(var m,w=h[Symbol.iterator]();!(y=(m=w.next()).done);y=!0){var O=m.value,_=Number(O.textContent.trim().replace(/[^-0-9.]+/g,""));isNaN(_)||v.push(_)}}catch(e){b=!0,g=e}finally{try{!y&&w.return&&w.return()}finally{if(b)throw g}}if(v.length>0){var j=Math.max.apply(Math,v),P=Math.min.apply(Math,v),k=!0;e.isNumeric(n)&&n>P&&(k=!1),e.isNumeric(o)&&j>o&&(k=!1),k&&l.push(p)}}}}catch(e){s=!0,c=e}finally{try{!u&&d.return&&d.return()}finally{if(s)throw c}}return l}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(r(2));var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,n.default),t}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(2));var i=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.checkboxes=[],i.radios=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);if(n.selected="true"===n.element.getAttribute("data-selected"),n.mode=n.element.getAttribute("data-mode")||"radio",n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.selected="1"===o.value)}"radio"===n.mode&&(this.radios.push(n),this.handleRadios()),"checkbox"===n.mode&&(this.checkboxes.push(n),this.handleCheckboxes()),n.element.addEventListener("click",function(e){if(e.preventDefault(),"checkbox"===n.mode&&(n.selected=!n.selected,r.checkboxes.forEach(function(e){e.isEqualTo(n)&&(e.selected=n.selected)}),r.handleCheckboxes()),"radio"===n.mode){var t=!0,o=!1,i=void 0;try{for(var a,l=r.radios[Symbol.iterator]();!(t=(a=l.next()).done);t=!0){a.value.selected=!1}}catch(e){o=!0,i=e}finally{try{!t&&l.return&&l.return()}finally{if(o)throw i}}n.selected=!0,r.handleRadios()}window.jplist&&window.jplist.refresh(r.group)})}},{key:"handleCheckboxes",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.checkboxes[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.selected?i.element.classList.add("jplist-selected"):i.element.classList.remove("jplist-selected")}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}}},{key:"getLastSelectedRadio",value:function(){var e=null,t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=a)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"handleRadios",value:function(){if(this.radios.length>0){var e=this.getLastSelectedRadio(),t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected=!1,a.element.classList.remove("jplist-selected")}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}e&&this.radios.forEach(function(t){t.isEqualTo(e)&&(t.selected=!0,t.element.checked=!0,t.element.classList.add("jplist-selected"))})}}},{key:"getSortOptions",value:function(){var e=[],t=!1,r=!0,n=!1,o=void 0;try{for(var i,a=this.checkboxes[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.selected?e=e.concat(l.getSortOptions()):t=!0}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}t&&(e=e.concat([{path:"default"}]));var u=this.getLastSelectedRadio();return u&&(e=e.concat(u.getSortOptions())),e}},{key:"getDeepLink",value:function(){var e=this.checkboxes.map(function(e){return e.id&&e.selected?e.id+"=1":""}).filter(function(e){return""!==e}),t=this.radios.map(function(e){return e.id&&e.selected?e.id+"=1":""}).filter(function(e){return""!==e}),r=e.concat(t);return Array.from(new Set(r)).join("&")}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(2));var i=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.radios=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);if(n.selected=n.element.checked,n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.selected="1"===o.value)}this.radios.push(n),this.handleRadios(),n.element.addEventListener("change",function(e){e.preventDefault();var t=!0,o=!1,i=void 0;try{for(var a,l=r.radios[Symbol.iterator]();!(t=(a=l.next()).done);t=!0){a.value.selected=!1}}catch(e){o=!0,i=e}finally{try{!t&&l.return&&l.return()}finally{if(o)throw i}}n.selected=!0,r.handleRadios(),window.jplist&&window.jplist.refresh(r.group)})}},{key:"getLastSelectedRadio",value:function(){var e=null,t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=a)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"handleRadios",value:function(){if(this.radios.length>0){var e=this.getLastSelectedRadio(),t=!0,r=!1,n=void 0;try{for(var o,i=this.radios[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected=!1,a.element.classList.remove("jplist-selected")}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}e&&this.radios.forEach(function(t){t.isEqualTo(e)&&(t.selected=!0,t.element.checked=!0,t.element.classList.add("jplist-selected"))})}}},{key:"getSortOptions",value:function(){var e=[],t=this.getLastSelectedRadio();return t&&(e=e.concat(t.getSortOptions())),e}},{key:"getDeepLink",value:function(){var e=this.radios.map(function(e){return e.id&&e.selected?e.id+"=1":""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(2));var i=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.checkboxes=[],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);if(n.selected=n.element.checked,n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.selected="1"===o.value)}this.checkboxes.push(n),this.handleCheckboxes(),n.element.addEventListener("change",function(e){e.preventDefault(),n.selected=!n.selected,r.checkboxes.forEach(function(e){e.isEqualTo(n)&&(e.selected=n.selected)}),r.handleCheckboxes(),window.jplist&&window.jplist.refresh(r.group)})}},{key:"handleCheckboxes",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.checkboxes[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var i=n.value;i.selected?i.element.classList.add("jplist-selected"):i.element.classList.remove("jplist-selected"),i.element.checked=i.selected}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}}},{key:"getSortOptions",value:function(){var e=[],t=!1,r=!0,n=!1,o=void 0;try{for(var i,a=this.checkboxes[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.selected?e=e.concat(l.getSortOptions()):t=!0}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return t&&(e=e.concat([{path:"default"}])),e}},{key:"getDeepLink",value:function(){var e=this.checkboxes.map(function(e){return e.id?e.selected?e.id+"=1":e.id+"=0":""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(2)),i=a(r(6));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.options=[],i.selected="",i.id="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e),o=n.element.querySelectorAll("option"),a=!0,l=!1,u=void 0;try{for(var s,c=function(){var e=s.value;e.setAttribute("data-name",r.name),e.setAttribute("data-group",r.group),r.options.find(function(t){return t.element.value===e.value})||r.options.push(new i.default(e))},f=o[Symbol.iterator]();!(a=(s=f.next()).done);a=!0)c()}catch(e){l=!0,u=e}finally{try{!a&&f.return&&f.return()}finally{if(l)throw u}}if(this.selected=n.element.value,n.id){this.id=n.id;var d=this.deepLinkParams.find(function(e){return e.key===n.id});d&&(n.element.value=d.value,this.selected=d.value)}n.element.addEventListener("change",function(e){e.preventDefault(),r.selected=e.target.value;var t=!0,n=!1,o=void 0;try{for(var i,a=r.controls[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){i.value.element.value=r.selected}}catch(e){n=!0,o=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw o}}window.jplist&&window.jplist.refresh(r.group)})}},{key:"getSortOptions",value:function(){var e=this,t=this.options.find(function(t){return t.element.value===e.selected});return t?t.getSortOptions():[]}},{key:"getDeepLink",value:function(){var e=this,t=this.options.find(function(t){return t.element.value===e.selected});return this.id?this.id+"="+t.element.value:""}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=l(r(2)),i=l(r(6)),a=l(r(4));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.selected=null,i.id="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);n.dropdown=new a.default(e.element),n.buttons=[];var o=n.element.querySelectorAll("[data-path]"),l=!0,u=!1,s=void 0;try{for(var c,f=function(){var e=c.value;e.setAttribute("data-name",r.name),e.setAttribute("data-group",r.group);var t=new i.default(e);n.buttons.push(t),t.element.addEventListener("click",function(e){e.preventDefault(),r.selected=t,r.setSelectedButton(n);var o=!0,i=!1,a=void 0;try{for(var l,u=r.controls[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;s.dropdown&&s.dropdown.close()}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}window.jplist&&window.jplist.refresh(r.group)})},d=o[Symbol.iterator]();!(l=(c=d.next()).done);l=!0)f()}catch(e){u=!0,s=e}finally{try{!l&&d.return&&d.return()}finally{if(u)throw s}}if(this.selected=t.getSelectedButton(n.buttons),this.setSelectedButton(n),n.id){this.id=n.id;var p=this.deepLinkParams.find(function(e){return e.key===n.id});if(p){var h=n.buttons.find(function(e){var t=e.element.getAttribute("data-value");return p.value===t?e:null});h&&(this.selected=h,this.setSelectedButton(n))}}}},{key:"getSortOptions",value:function(){return this.selected?this.selected.getSortOptions():[]}},{key:"getDeepLink",value:function(){return this.id&&this.selected&&this.id+"="+this.selected.element.getAttribute("data-value")||""}},{key:"setSelectedButton",value:function(e){var t=this,r=!0,n=!1,o=void 0;try{for(var i,a=this.controls[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;if(l.dropdown){var u=e.buttons.find(function(e){return t.selected.isEqualTo(e)});u&&l.dropdown.setPanelsContent(u.element.textContent)}}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}}}],[{key:"getSelectedButton",value:function(e){if(e.length<=0)return null;var t=!0,r=!1,n=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if("true"===a.element.getAttribute("data-selected"))return a}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e[0]}}]),t}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(27)),i=a(r(4));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.currentPage=0,i.itemsPerPage=0,i.range=0,i.id="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);if(this.currentPage=r.currentPage,this.itemsPerPage=Number(r.itemsPerPage)||0,this.range=r.range,this.restoreFromDeepLink(r),r.pageButtonsHolder=r.element.querySelector('[data-type="pages"]'),r.pageButtonsHolder&&(r.btnTemplate=r.pageButtonsHolder.innerHTML),r.firstButtons=r.element.querySelectorAll('[data-type="first"]'),r.lastButtons=r.element.querySelectorAll('[data-type="last"]'),r.prevButtons=r.element.querySelectorAll('[data-type="prev"]'),r.nextButtons=r.element.querySelectorAll('[data-type="next"]'),t.bindEventHandler(r.firstButtons,"click",this.pageButtonClick.bind(this)),t.bindEventHandler(r.lastButtons,"click",this.pageButtonClick.bind(this)),t.bindEventHandler(r.prevButtons,"click",this.pageButtonClick.bind(this)),t.bindEventHandler(r.nextButtons,"click",this.pageButtonClick.bind(this)),r.itemsPerPageSelects=Array.from(r.element.querySelectorAll('[data-type="items-per-page"]')),this.updateItemsPerPageSelect(r.itemsPerPageSelects),r.itemsPerPageDD=Array.from(r.element.querySelectorAll('[data-type="items-per-page-dd"]')),this.initCustomDropdowns(r.itemsPerPageDD),t.bindEventHandler(r.itemsPerPageSelects,"change",this.selectChange.bind(this)),r.labels=r.element.querySelectorAll('[data-type="info"]'),r.labels){var n=!0,o=!1,i=void 0;try{for(var a,l=r.labels[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var u=a.value;u.template=u.innerHTML}}catch(e){o=!0,i=e}finally{try{!n&&l.return&&l.return()}finally{if(o)throw i}}}}},{key:"updateItemsPerPageSelect",value:function(e){var t=this,r=!0,n=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value,u=Array.from(l.options).find(function(e){return e.value===t.itemsPerPage.toString()});l.value=u&&Number(this.itemsPerPage)||0}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}}},{key:"initCustomDropdowns",value:function(e){var t=this;if(e&&!(e.length<=0)){var r=!0,n=!1,o=void 0;try{for(var a,l=function(){var e=a.value;e.dropdown=new i.default(e),e.buttons=Array.from(e.querySelectorAll("[data-value]"));var r=!0,n=!1,o=void 0;try{for(var l,u=function(){var r=l.value;r.addEventListener("click",function(n){n.preventDefault(),t.itemsPerPage=Number(r.getAttribute("data-value"))||0,t.setSelectedButton(),e.dropdown.close(),window.jplist&&window.jplist.refresh(t.group)})},s=e.buttons[Symbol.iterator]();!(r=(l=s.next()).done);r=!0)u()}catch(e){n=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(n)throw o}}},u=e[Symbol.iterator]();!(r=(a=u.next()).done);r=!0)l()}catch(e){n=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(n)throw o}}this.setSelectedButton()}}},{key:"setSelectedButton",value:function(){var e=this,t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if(a.itemsPerPageDD){var l=!0,u=!1,s=void 0;try{for(var c,f=a.itemsPerPageDD[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){var d=c.value;if(d.buttons){var p=d.buttons.find(function(t){return(Number(t.getAttribute("data-value"))||0)===e.itemsPerPage});p||(p=d.buttons.find(function(e){return 0===(Number(e.getAttribute("data-value"))||0)})),p&&d.dropdown.setPanelsContent(p.textContent)}}}catch(e){u=!0,s=e}finally{try{!l&&f.return&&f.return()}finally{if(u)throw s}}}}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}}},{key:"getPaginationOptions",value:function(){return{itemsPerPage:this.itemsPerPage,currentPage:this.currentPage,range:this.range}}},{key:"setPaginationOptions",value:function(e){var r=this;if(e){this.currentPage=e.currentPage,this.itemsPerPage=e.itemsPerPage;var n=!0,o=!1,i=void 0;try{for(var a,l=this.controls[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var u=a.value;if(u.btnTemplate&&u.pageButtonsHolder){for(;u.pageButtonsHolder.firstChild;)u.pageButtonsHolder.removeChild(u.pageButtonsHolder.firstChild);for(var s=function(e){var t=document.createElement("div");t.innerHTML=u.btnTemplate.replace(new RegExp("{pageNumber}","g"),e+1).trim();var n=t.firstChild,o=n.querySelector('[data-type="page"]');o||(o=n),o.setAttribute("data-page",e.toString()),e===r.currentPage&&(o.classList.add(u.selectedClass),o.setAttribute("data-selected","true")),o.addEventListener("click",function(e){r.pageButtonClick(e,o)}),u.pageButtonsHolder.appendChild(n)},c=e.rangeStart;c<=e.rangeEnd;c++)s(c);t.setPageAttr(u.firstButtons,0,0!==this.currentPage,u.disabledClass),t.setPageAttr(u.lastButtons,e.pagesNumber-1,this.currentPage!==e.pagesNumber-1,u.disabledClass),t.setPageAttr(u.prevButtons,e.prevPage,0!==this.currentPage,u.disabledClass),t.setPageAttr(u.nextButtons,e.nextPage,this.currentPage!==e.pagesNumber-1,u.disabledClass);var f=[{key:"{pageNumber}",value:e.currentPage+1},{key:"{pagesNumber}",value:e.pagesNumber},{key:"{startItem}",value:e.start+1},{key:"{endItem}",value:e.end},{key:"{itemsNumber}",value:e.itemsNumber}];if(u.labels){var d=!0,p=!1,h=void 0;try{for(var v,y=u.labels[Symbol.iterator]();!(d=(v=y.next()).done);d=!0){var b=v.value;if(b.template){var g=b.template,m=!0,w=!1,O=void 0;try{for(var _,j=f[Symbol.iterator]();!(m=(_=j.next()).done);m=!0){var P=_.value;g=g.replace(new RegExp(P.key,"g"),P.value)}}catch(e){w=!0,O=e}finally{try{!m&&j.return&&j.return()}finally{if(w)throw O}}b.innerHTML=g}}}catch(e){p=!0,h=e}finally{try{!d&&y.return&&y.return()}finally{if(p)throw h}}}}}}catch(e){o=!0,i=e}finally{try{!n&&l.return&&l.return()}finally{if(o)throw i}}}}},{key:"pageButtonClick",value:function(e,t){e&&e.preventDefault();var r=t?t.getAttribute("data-page"):e.target.getAttribute("data-page");this.currentPage=Number(r)||0,window.jplist&&window.jplist.refresh(this.group)}},{key:"selectChange",value:function(e){e.preventDefault();var t=Number(e.target.value);if(!isNaN(t)){this.itemsPerPage=t;var r=!0,n=!1,o=void 0;try{for(var i,a=this.controls[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;this.updateItemsPerPageSelect(l.itemsPerPageSelects)}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}}window.jplist&&window.jplist.refresh(this.group)}},{key:"restoreFromDeepLink",value:function(e){if(e.id){this.id=e.id;var t=this.deepLinkParams.find(function(t){return t.key===e.id});if(t){var r=t.value.split("-");if(2!==r.length)return;var n=Number(r[0]),o=Number(r[1]);if(isNaN(n)||isNaN(o))return;this.currentPage=n,this.itemsPerPage=o}}}},{key:"getDeepLink",value:function(){return this.id?this.id+"="+this.currentPage+"-"+this.itemsPerPage:""}}],[{key:"setPageAttr",value:function(e,t,r,n){if(e){var o=!0,i=!1,a=void 0;try{for(var l,u=e[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;s.setAttribute("data-page",t),r?s.classList.remove(n):s.classList.add(n)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}}}},{key:"bindEventHandler",value:function(e,t,r){if(e){var n=!0,o=!1,i=void 0;try{for(var a,l=function(){var e=a.value;e.addEventListener(t,function(t){r(t,e)})},u=e[Symbol.iterator]();!(n=(a=u.next()).done);n=!0)l()}catch(e){o=!0,i=e}finally{try{!n&&u.return&&u.return()}finally{if(o)throw i}}}}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(0)),i=a(r(28));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getPaginationOptions",value:function(){return this.controls.length>0?this.controls[this.controls.length-1].getPaginationOptions():null}},{key:"setPaginationOptions",value:function(e){}},{key:"addControl",value:function(e){if(e.name!==this.name||e.group!==this.group)return null;var t=new i.default(e.element);return this.controls.push(t),t}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(1));var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return e&&(r.itemsPerPage=Number(e.getAttribute("data-items-per-page"))||10,r.currentPage=Number(e.getAttribute("data-current-page"))||0,r.range=Number(e.getAttribute("data-range"))||10,r.disabledClass=(e.getAttribute("data-disabled-class")||"jplist-disabled").trim(),r.selectedClass=(e.getAttribute("data-selected-class")||"jplist-selected").trim()),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getPaginationOptions",value:function(){return{itemsPerPage:this.itemsPerPage,currentPage:this.currentPage,range:this.range}}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(5));var i=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);if(n.id){var o=this.deepLinkParams.find(function(e){return e.key===n.id});o&&(n.text=o.value,n.element.value=o.value)}if(n.element.addEventListener("keyup",function(e){e.preventDefault(),n.text=e.target.value,r.textChanged(n)}),n.clearButtonID=(n.element.getAttribute("data-clear-btn-id")||"").trim(),n.clearButtonID){var i=document.getElementById(n.clearButtonID);i&&i.addEventListener("click",function(e){e.preventDefault(),n.text="",r.textChanged(n)})}}},{key:"textChanged",value:function(e){this.controls.forEach(function(t){t.isEqualTo(e,!1)&&(t.element.value=e.text,t.text=e.text)}),window.jplist&&window.jplist.refresh(this.group)}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(1));var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return e&&(r.path=(e.getAttribute("data-path")||"").trim(),r._text=(e.getAttribute("data-text")||e.value||"").trim(),r.mode=(e.getAttribute("data-mode")||"contains").trim(),r.regex=e.getAttribute("data-regex")||""),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getTextFilterOptions",value:function(){return{path:this.path,text:this.text,mode:this.mode,ignoreRegex:this.regex}}},{key:"isEqualTo",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=this.path===e.path&&this.mode===e.mode&&this.regex===e.regex;return t&&(r=r&&this.text===e.text),r}},{key:"text",set:function(e){this._text=(e||"").trim()},get:function(){return this._text}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(5)),i=a(r(9));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getTextFilterOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.checkboxes[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=e.concat(a.getTextFilterOptions()))}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(5)),i=a(r(10));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getTextFilterOptions",value:function(){var e=[],t=this.getLastSelectedRadio();return t&&(e=e.concat(t.getTextFilterOptions())),e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(5)),i=a(r(7));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getTextFilterOptions",value:function(){var e=[],t=this.getLastSelectedRadio();t&&(e=e.concat(t.getTextFilterOptions()));var r=!0,n=!1,o=void 0;try{for(var i,a=this.checkboxes[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.selected&&(e=e.concat(l.getTextFilterOptions()))}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(3)),i=a(r(8));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.options=[],i.selected="",i.id="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e),o=n.element.querySelectorAll("option"),a=!0,l=!1,u=void 0;try{for(var s,c=function(){var e=s.value;e.setAttribute("data-name",r.name),e.setAttribute("data-group",r.group),r.options.find(function(t){return t.element.value===e.value})||r.options.push(new i.default(e))},f=o[Symbol.iterator]();!(a=(s=f.next()).done);a=!0)c()}catch(e){l=!0,u=e}finally{try{!a&&f.return&&f.return()}finally{if(l)throw u}}if(this.selected=n.element.value,n.id){this.id=n.id;var d=this.deepLinkParams.find(function(e){return e.key===n.id});d&&(n.element.value=d.value,this.selected=d.value)}n.element.addEventListener("change",function(e){e.preventDefault(),r.selected=e.target.value;var t=!0,n=!1,o=void 0;try{for(var i,a=r.controls[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){i.value.element.value=r.selected}}catch(e){n=!0,o=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw o}}window.jplist&&window.jplist.refresh(r.group)})}},{key:"getPathFilterOptions",value:function(){var e=this,t=this.options.find(function(t){return t.element.value===e.selected});return t?[t.getPathFilterOptions()]:[]}},{key:"getDeepLink",value:function(){var e=this,t=this.options.find(function(t){return t.element.value===e.selected});return this.id?this.id+"="+t.element.value:""}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(3)),i=a(r(9));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getPathFilterOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.checkboxes[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=e.concat(a.getPathFilterOptions()))}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(3)),i=a(r(10));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getPathFilterOptions",value:function(){var e=[],t=this.getLastSelectedRadio();return t&&(e=e.concat(t.getPathFilterOptions())),e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(3)),i=a(r(7));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getPathFilterOptions",value:function(){var e=[],t=this.getLastSelectedRadio();t&&(e=e.concat(t.getPathFilterOptions()));var r=!0,n=!1,o=void 0;try{for(var i,a=this.checkboxes[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.selected&&(e=e.concat(l.getPathFilterOptions()))}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=l(r(3)),i=l(r(8)),a=l(r(4));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.selected="",i.id="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e);n.dropdown=new a.default(e.element),n.buttons=[];var o=n.element.querySelectorAll("[data-path]"),l=!0,u=!1,s=void 0;try{for(var c,f=function(){var e=c.value;e.setAttribute("data-name",r.name),e.setAttribute("data-group",r.group);var t=new i.default(e);n.buttons.push(t),t.element.addEventListener("click",function(e){e.preventDefault(),r.selected=t,r.setSelectedButton(n),window.jplist&&window.jplist.refresh(r.group)})},d=o[Symbol.iterator]();!(l=(c=d.next()).done);l=!0)f()}catch(e){u=!0,s=e}finally{try{!l&&d.return&&d.return()}finally{if(u)throw s}}if(this.selected=t.getSelectedButton(n.buttons),this.setSelectedButton(n),n.id){this.id=n.id;var p=this.deepLinkParams.find(function(e){return e.key===n.id});if(p){var h=n.buttons.find(function(e){var t=e.element.getAttribute("data-value");return p.value===t?e:null});h&&(this.selected=h,this.setSelectedButton(n))}}}},{key:"getPathFilterOptions",value:function(){return this.selected?[this.selected.getPathFilterOptions()]:[]}},{key:"getDeepLink",value:function(){return this.id&&this.selected&&this.id+"="+this.selected.element.getAttribute("data-value")||""}},{key:"setSelectedButton",value:function(e){var t=this,r=!0,n=!1,o=void 0;try{for(var i,a=this.controls[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;if(l.dropdown){var u=e.buttons.find(function(e){return t.selected.isEqualTo(e)});u&&l.dropdown.setPanelsContent(u.element.textContent),l.dropdown.close()}}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}}}],[{key:"getSelectedButton",value:function(e){if(e.length<=0)return null;var t=!0,r=!1,n=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if("true"===a.element.getAttribute("data-selected"))return a}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e[0]}}]),t}();t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(11)),i=a(r(7));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,(0,i.default)(o.default)),n(t,[{key:"getRangeFilterOptions",value:function(){var e=[],t=this.getLastSelectedRadio();t&&(e=e.concat(t.getRangeFilterOptions()));var r=!0,n=!1,o=void 0;try{for(var i,a=this.checkboxes[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value;l.selected&&(e=e.concat(l.getRangeFilterOptions()))}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}return e}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(1));var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(e){r.path=(e.getAttribute("data-path")||"").trim();var n=e.getAttribute("data-from");r.from=null===n?-1/0:Number(n),isNaN(r.from)&&(r.from=-1/0);var o=e.getAttribute("data-to");r.to=null===o?1/0:Number(o),isNaN(r.to)&&(r.to=1/0);var i=e.getAttribute("data-min");r.min=null===i?r.from:Number(i),isNaN(r.min)&&(r.min=r.from);var a=e.getAttribute("data-max");r.max=null===a?r.to:Number(a),isNaN(r.max)&&(r.max=r.to)}return r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"getRangeFilterOptions",value:function(){return{path:this.path,min:this.min,from:this.from,to:this.to,max:this.max}}},{key:"isEqualTo",value:function(e){return this.path===e.path&&this.from===e.from&&this.to===e.to&&this.min===e.min&&this.max===e.max}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=a(r(11)),i=a(r(42));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this,n=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e),o=e.element.querySelector('[data-type="slider"]');if(n.val1Elements=e.element.querySelectorAll('[data-type="value-1"]'),n.val2Elements=e.element.querySelectorAll('[data-type="value-2"]'),n.minElements=e.element.querySelectorAll('[data-type="min"]'),n.maxElements=e.element.querySelectorAll('[data-type="max"]'),o){var a=e.element.getAttribute("data-orientation")||"horizontal",l=!0,u=!1,s=void 0;try{for(var c,f=n.minElements[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){c.value.textContent=n.min}}catch(e){u=!0,s=e}finally{try{!l&&f.return&&f.return()}finally{if(u)throw s}}var d=!0,p=!1,h=void 0;try{for(var v,y=n.maxElements[Symbol.iterator]();!(d=(v=y.next()).done);d=!0){v.value.textContent=n.max}}catch(e){p=!0,h=e}finally{try{!d&&y.return&&y.return()}finally{if(p)throw h}}if(n.id){var b=this.deepLinkParams.find(function(e){return e.key===n.id});if(b&&b.value){var g=b.value.split("_");2===g.length&&(n.from=Number(g[0])||0,n.to=Number(g[1])||0)}}n.slider=new i.default(o,"vertical"===a,n.min,n.from,n.to,n.max,function(e,t){var o=!0,i=!1,a=void 0;try{for(var l,u=n.val1Elements[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){l.value.textContent=Math.round(e)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}var s=!0,c=!1,f=void 0;try{for(var d,p=n.val2Elements[Symbol.iterator]();!(s=(d=p.next()).done);s=!0){d.value.textContent=Math.round(t)}}catch(e){c=!0,f=e}finally{try{!s&&p.return&&p.return()}finally{if(c)throw f}}var h=!0,v=!1,y=void 0;try{for(var b,g=r.controls[Symbol.iterator]();!(h=(b=g.next()).done);h=!0){var m=b.value;m.slider&&m.slider.setValues(e,t,!1)}}catch(e){v=!0,y=e}finally{try{!h&&g.return&&g.return()}finally{if(v)throw y}}window.jplist&&window.jplist.refresh(r.group)})}}},{key:"getRangeFilterOptions",value:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if(a.slider&&a.slider.handler1&&a.slider.handler2){var l=a.getRangeFilterOptions();l.from=a.slider.handler1.value,l.to=a.slider.handler2.value,e=e.concat(l)}}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"getDeepLink",value:function(){var e=this.controls.map(function(e){return e.id&&e.slider&&e.slider.handler1&&e.slider.handler2?e.id+"="+e.slider.handler1.value+"_"+e.slider.handler2.value:""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}]),t}();t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();r(51);var o=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:function(e,t){};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t){if(this.element=t,this.element.classList.add("jplist-slider"),!this.element)return;this.isVertical=r,this.callback=l,this.min=n,this.max=a,r&&this.element.classList.add("jplist-slider-vertical"),this.handler1=document.createElement("span"),this.handler1.classList.add("jplist-slider-holder-1"),this.element.appendChild(this.handler1),this.range=document.createElement("span"),this.range.classList.add("jplist-slider-range"),this.element.appendChild(this.range),this.handler1.left=0,this.handler1.top=0,this.handler2=document.createElement("span"),this.handler2.classList.add("jplist-slider-holder-2"),this.element.appendChild(this.handler2),this.handler2.left=0,this.handler2.top=0,this.dragging=null,this.handler1.addEventListener("mousedown",this.start.bind(this)),this.handler2.addEventListener("mousedown",this.start.bind(this)),this.handler1.addEventListener("touchstart",this.start.bind(this)),this.handler2.addEventListener("touchstart",this.start.bind(this)),document.addEventListener("mousemove",this.render.bind(this)),document.addEventListener("touchmove",this.render.bind(this)),window.addEventListener("resize",this.resize.bind(this)),document.addEventListener("mouseup",this.stop.bind(this)),document.addEventListener("touchend",this.stop.bind(this)),document.body.addEventListener("mouseleave",this.stop.bind(this)),this.element.addEventListener("mousedown",this.jump.bind(this)),this.setValues(o,i)}}return n(e,[{key:"setValues",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];t<e&&(t=e);var n=this.getInnerValue(e,this.min,this.max),o=this.getInnerValue(t,this.min,this.max);this.update({x:o,y:o},this.handler2,r),this.update({x:n,y:n},this.handler1,r)}},{key:"getPreviewValue",value:function(e,t,r){var n=t,o=r;return(e-0)/(this.element.getBoundingClientRect()[this.isVertical?"height":"width"]-0)*(o-n)+n}},{key:"getInnerValue",value:function(e,t,r){return(e-t)/(r-t)*(this.element.getBoundingClientRect()[this.isVertical?"height":"width"]-0)+0}},{key:"jump",value:function(e){e.preventDefault();var t=this.getHandlerPos(e);this.isVertical?this.dragging=Math.abs(t.y-this.handler1.top)<Math.abs(t.y-this.handler2.top)?this.handler1:this.handler2:this.dragging=Math.abs(t.x-this.handler1.left)<Math.abs(t.x-this.handler2.left)?this.handler1:this.handler2,this.render(e)}},{key:"setZIndex",value:function(){var e=window.getComputedStyle&&Number(document.defaultView.getComputedStyle(this.handler1,null).getPropertyValue("z-index"))||200,t=window.getComputedStyle&&Number(document.defaultView.getComputedStyle(this.handler2,null).getPropertyValue("z-index"))||200;if(e===t)this.dragging.style["z-index"]=e+1;else{var r=Math.max(e,t),n=Math.min(e,t);this.handler1.style["z-index"]=n,this.handler2.style["z-index"]=n,this.dragging.style["z-index"]=r}}},{key:"start",value:function(e){e.preventDefault(),e.stopPropagation(),this.dragging=e.target,this.setZIndex(),this.render()}},{key:"stop",value:function(e){this.dragging=null}},{key:"resize",value:function(e){this.handler1&&this.handler2&&this.setValues(this.handler1.value,this.handler2.value)}},{key:"render",value:function(e){e&&this.dragging&&this.update(this.getHandlerPos(e),this.dragging)}},{key:"update",value:function(e,t){var r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(t){var n=this.element.getBoundingClientRect(),o=this.isVertical?"height":"width",i=this.isVertical?"y":"x",a=this.isVertical?"top":"left";e[i]<0&&(e[i]=0),e[i]>n[o]&&(e[i]=n[o]),t===this.handler1&&e[i]>=this.handler2[a]&&(e[i]=this.handler2[a]),t===this.handler2&&e[i]<=this.handler1[a]&&(e[i]=this.handler1[a]),t[a]=e[i],t.value=this.getPreviewValue(e[i],this.min,this.max),t.style[a]=e[i]+"px",this.range.style[a]=this.handler1[a]+"px";var l=this.handler2[a]-this.handler1[a];this.range.style[o]=(l>=0?l:0)+"px",this.callback&&r&&this.callback(this.handler1.value,this.handler2.value)}}},{key:"getHandlerPos",value:function(t){var r=this.element.getBoundingClientRect(),n={x:t.touches&&t.touches.length>0?t.touches[0].pageX:t.clientX,y:t.touches&&t.touches.length>0?t.touches[0].pageY:t.clientY},o={x:r.left,y:r.top};return e.sub(n,o)}}],[{key:"sub",value:function(e,t){return{x:e.x-t.x,y:e.y-t.y}}}]),e}();t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(0));var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){(function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e),e.element.addEventListener("jplist.state",function(t){if(t.jplistState){var r=Number(t.jplistState.itemsNumber)||0;e.element.style.display=0===r?"":"none"}},!1)}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(0));var i=function(e){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r,n,o));return i.group=e,i.name=r,i.classNames=new Set,i.selectedClassName="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this;if(function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0}(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e),e.groupClassName=e.element.getAttribute("data-class")||"",e.selected="true"===e.element.getAttribute("data-selected"),e.id){var n=this.deepLinkParams.find(function(t){return t.key===e.id});n&&(e.selected="1"===n.value)}this.classNames.add(e.groupClassName),e.element.addEventListener("click",function(t){t.preventDefault(),r.handleSelectedControls(e.groupClassName),r.handleClasses(),window.jplist&&window.jplist.refresh(r.group)},!1),this.handleClasses()}},{key:"handleClasses",value:function(){var e=document.querySelectorAll('[data-jplist-group="'+this.group+'"]');this.resetAllGroups(e);var r=this.getLatestSelectedControl();r&&(this.handleSelectedControls(r.groupClassName),t.addClassToGroups(r.groupClassName,e))}},{key:"getLatestSelectedControl",value:function(){var e=null,t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.selected&&(e=a)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return!e&&this.controls.length>0&&(e=this.controls[0]),e}},{key:"resetAllGroups",value:function(e){var t=!0,r=!1,n=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value,l=!0,u=!1,s=void 0;try{for(var c,f=this.classNames[Symbol.iterator]();!(l=(c=f.next()).done);l=!0){var d=c.value;a.classList.remove(d)}}catch(e){u=!0,s=e}finally{try{!l&&f.return&&f.return()}finally{if(u)throw s}}}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}}},{key:"handleSelectedControls",value:function(e){var t=!0,r=!1,n=void 0;try{for(var o,i=this.controls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;a.groupClassName===e?(a.selected=!0,a.element.classList.add("jplist-selected")):(a.selected=!1,a.element.classList.remove("jplist-selected"))}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}}},{key:"getDeepLink",value:function(){var e=this.controls.map(function(e){return e.id?e.selected?e.id+"=1":e.id+"=0":""}).filter(function(e){return""!==e});return Array.from(new Set(e)).join("&")}}],[{key:"addClassToGroups",value:function(e,t){var r=!0,n=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){i.value.classList.add(e)}}catch(e){n=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(n)throw o}}}}]),t}();t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(r(0));var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),n(t,[{key:"addControl",value:function(e){var r=this;(function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(n):void 0})(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addControl",this).call(this,e),e.element.addEventListener("click",function(e){e.preventDefault(),window.jplist&&window.jplist.resetControls(r.group)},!1)}}]),t}();t.default=i},function(e,t){},,,,,function(e,t){}]);
//# sourceMappingURL=jplist.min.js.map
/**!
ANDREAS HANDLEBARS
 @license
 handlebars v4.0.10

Copyright (C) 2011-2016 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap ANDREAS HANDLEBARS
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsRuntime = __webpack_require__(2);

	var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

	// Compiler imports

	var _handlebarsCompilerAst = __webpack_require__(35);

	var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

	var _handlebarsCompilerBase = __webpack_require__(36);

	var _handlebarsCompilerCompiler = __webpack_require__(41);

	var _handlebarsCompilerJavascriptCompiler = __webpack_require__(42);

	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

	var _handlebarsCompilerVisitor = __webpack_require__(39);

	var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

	var _handlebarsNoConflict = __webpack_require__(34);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	var _create = _handlebarsRuntime2['default'].create;
	function create() {
	  var hb = _create();

	  hb.compile = function (input, options) {
	    return _handlebarsCompilerCompiler.compile(input, options, hb);
	  };
	  hb.precompile = function (input, options) {
	    return _handlebarsCompilerCompiler.precompile(input, options, hb);
	  };

	  hb.AST = _handlebarsCompilerAst2['default'];
	  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
	  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
	  hb.Parser = _handlebarsCompilerBase.parser;
	  hb.parse = _handlebarsCompilerBase.parse;

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst.Visitor = _handlebarsCompilerVisitor2['default'];

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(4);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(21);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(6);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(22);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(34);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(10);

	var _decorators = __webpack_require__(18);

	var _logger = __webpack_require__(20);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.0.10';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$defineProperty = __webpack_require__(7)['default'];

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  try {
	    if (loc) {
	      this.lineNumber = line;

	      // Work around issue under safari where we can't directly set the column value
	      /* istanbul ignore next */
	      if (_Object$defineProperty) {
	        Object.defineProperty(this, 'column', {
	          value: column,
	          enumerable: true
	        });
	      } else {
	        this.column = column;
	      }
	    }
	  } catch (nop) {
	    /* Ignore if the browser is very particular */
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(8), __esModule: true };

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(9);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;

	var _helpersBlockHelperMissing = __webpack_require__(11);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(12);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(13);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(14);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(15);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(16);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(17);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(19);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$seal = __webpack_require__(23)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(4);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}

	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }

	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;

	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }

	      return obj;
	    },
	    // An empty object to use as replacement for null-contexts
	    nullContext: _Object$seal({}),

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = container.merge(options.decorators, env.decorators);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  // Use the current closure context to save the partial-block if this partial
	  var currentPartialBlock = options.data && options.data['partial-block'];
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    (function () {
	      options.data = _base.createFrame(options.data);
	      // Wrapper function to get access to currentPartialBlock from the closure
	      var fn = options.fn;
	      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        // Restore the partial-block from the closure for the execution of the block
	        // i.e. the part inside the block of the partial call.
	        options.data = _base.createFrame(options.data);
	        options.data['partial-block'] = currentPartialBlock;
	        return fn(context, options);
	      };
	      if (fn.partials) {
	        options.partials = Utils.extend({}, options.partials, fn.partials);
	      }
	    })();
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(24), __esModule: true };

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(25);
	module.exports = __webpack_require__(30).Object.seal;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(26);

	__webpack_require__(27)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(it) : it;
	  };
	});

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(28)
	  , core    = __webpack_require__(30)
	  , fails   = __webpack_require__(33);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(29)
	  , core      = __webpack_require__(30)
	  , ctx       = __webpack_require__(31)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(32);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var AST = {
	  // Public API used to evaluate derived attributes regarding AST nodes
	  helpers: {
	    // a mustache is definitely a helper if:
	    // * it is an eligible helper, and
	    // * it has at least one parameter or hash segment
	    helperExpression: function helperExpression(node) {
	      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
	    },

	    scopedId: function scopedId(path) {
	      return (/^\.|this\b/.test(path.original)
	      );
	    },

	    // an ID is simple if it only has one part, and that part is not
	    // `..` or `this`.
	    simpleId: function simpleId(path) {
	      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
	    }
	  }
	};

	// Must be exported as an object rather than the root of the module as the jison lexer
	// must modify the object to operate properly.
	exports['default'] = AST;
	module.exports = exports['default'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	exports.__esModule = true;
	exports.parse = parse;

	var _parser = __webpack_require__(37);

	var _parser2 = _interopRequireDefault(_parser);

	var _whitespaceControl = __webpack_require__(38);

	var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

	var _helpers = __webpack_require__(40);

	var Helpers = _interopRequireWildcard(_helpers);

	var _utils = __webpack_require__(5);

	exports.parser = _parser2['default'];

	var yy = {};
	_utils.extend(yy, Helpers);

	function parse(input, options) {
	  // Just return if an already-compiled AST was passed in.
	  if (input.type === 'Program') {
	    return input;
	  }

	  _parser2['default'].yy = yy;

	  // Altering the shared object here, but this is ok as parser is a sync operation
	  yy.locInfo = function (locInfo) {
	    return new yy.SourceLocation(options && options.srcName, locInfo);
	  };

	  var strip = new _whitespaceControl2['default'](options);
	  return strip.accept(_parser2['default'].parse(input));
	}

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	// File ignored in coverage tests via setting in .istanbul.yml
	/* Jison generated parser */
	"use strict";

	exports.__esModule = true;
	var handlebars = (function () {
	    var parser = { trace: function trace() {},
	        yy: {},
	        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
	        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
	        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
	        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
	        /**/) {

	            var $0 = $$.length - 1;
	            switch (yystate) {
	                case 1:
	                    return $$[$0 - 1];
	                    break;
	                case 2:
	                    this.$ = yy.prepareProgram($$[$0]);
	                    break;
	                case 3:
	                    this.$ = $$[$0];
	                    break;
	                case 4:
	                    this.$ = $$[$0];
	                    break;
	                case 5:
	                    this.$ = $$[$0];
	                    break;
	                case 6:
	                    this.$ = $$[$0];
	                    break;
	                case 7:
	                    this.$ = $$[$0];
	                    break;
	                case 8:
	                    this.$ = $$[$0];
	                    break;
	                case 9:
	                    this.$ = {
	                        type: 'CommentStatement',
	                        value: yy.stripComment($$[$0]),
	                        strip: yy.stripFlags($$[$0], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 10:
	                    this.$ = {
	                        type: 'ContentStatement',
	                        original: $$[$0],
	                        value: $$[$0],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 11:
	                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 12:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
	                    break;
	                case 13:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
	                    break;
	                case 14:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
	                    break;
	                case 15:
	                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 16:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 17:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 18:
	                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
	                    break;
	                case 19:
	                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
	                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
	                    program.chained = true;

	                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

	                    break;
	                case 20:
	                    this.$ = $$[$0];
	                    break;
	                case 21:
	                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
	                    break;
	                case 22:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 23:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 24:
	                    this.$ = {
	                        type: 'PartialStatement',
	                        name: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        indent: '',
	                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 25:
	                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 26:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
	                    break;
	                case 27:
	                    this.$ = $$[$0];
	                    break;
	                case 28:
	                    this.$ = $$[$0];
	                    break;
	                case 29:
	                    this.$ = {
	                        type: 'SubExpression',
	                        path: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 30:
	                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 31:
	                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 32:
	                    this.$ = yy.id($$[$0 - 1]);
	                    break;
	                case 33:
	                    this.$ = $$[$0];
	                    break;
	                case 34:
	                    this.$ = $$[$0];
	                    break;
	                case 35:
	                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 36:
	                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
	                    break;
	                case 37:
	                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
	                    break;
	                case 38:
	                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
	                    break;
	                case 39:
	                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
	                    break;
	                case 40:
	                    this.$ = $$[$0];
	                    break;
	                case 41:
	                    this.$ = $$[$0];
	                    break;
	                case 42:
	                    this.$ = yy.preparePath(true, $$[$0], this._$);
	                    break;
	                case 43:
	                    this.$ = yy.preparePath(false, $$[$0], this._$);
	                    break;
	                case 44:
	                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
	                    break;
	                case 45:
	                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
	                    break;
	                case 46:
	                    this.$ = [];
	                    break;
	                case 47:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 48:
	                    this.$ = [$$[$0]];
	                    break;
	                case 49:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 50:
	                    this.$ = [];
	                    break;
	                case 51:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 58:
	                    this.$ = [];
	                    break;
	                case 59:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 64:
	                    this.$ = [];
	                    break;
	                case 65:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 70:
	                    this.$ = [];
	                    break;
	                case 71:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 78:
	                    this.$ = [];
	                    break;
	                case 79:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 82:
	                    this.$ = [];
	                    break;
	                case 83:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 86:
	                    this.$ = [];
	                    break;
	                case 87:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 90:
	                    this.$ = [];
	                    break;
	                case 91:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 94:
	                    this.$ = [];
	                    break;
	                case 95:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 98:
	                    this.$ = [$$[$0]];
	                    break;
	                case 99:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 100:
	                    this.$ = [$$[$0]];
	                    break;
	                case 101:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	            }
	        },
	        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
	        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
	        parseError: function parseError(str, hash) {
	            throw new Error(str);
	        },
	        parse: function parse(input) {
	            var self = this,
	                stack = [0],
	                vstack = [null],
	                lstack = [],
	                table = this.table,
	                yytext = "",
	                yylineno = 0,
	                yyleng = 0,
	                recovering = 0,
	                TERROR = 2,
	                EOF = 1;
	            this.lexer.setInput(input);
	            this.lexer.yy = this.yy;
	            this.yy.lexer = this.lexer;
	            this.yy.parser = this;
	            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
	            var yyloc = this.lexer.yylloc;
	            lstack.push(yyloc);
	            var ranges = this.lexer.options && this.lexer.options.ranges;
	            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
	            function popStack(n) {
	                stack.length = stack.length - 2 * n;
	                vstack.length = vstack.length - n;
	                lstack.length = lstack.length - n;
	            }
	            function lex() {
	                var token;
	                token = self.lexer.lex() || 1;
	                if (typeof token !== "number") {
	                    token = self.symbols_[token] || token;
	                }
	                return token;
	            }
	            var symbol,
	                preErrorSymbol,
	                state,
	                action,
	                a,
	                r,
	                yyval = {},
	                p,
	                len,
	                newState,
	                expected;
	            while (true) {
	                state = stack[stack.length - 1];
	                if (this.defaultActions[state]) {
	                    action = this.defaultActions[state];
	                } else {
	                    if (symbol === null || typeof symbol == "undefined") {
	                        symbol = lex();
	                    }
	                    action = table[state] && table[state][symbol];
	                }
	                if (typeof action === "undefined" || !action.length || !action[0]) {
	                    var errStr = "";
	                    if (!recovering) {
	                        expected = [];
	                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
	                            expected.push("'" + this.terminals_[p] + "'");
	                        }
	                        if (this.lexer.showPosition) {
	                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                        } else {
	                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
	                        }
	                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
	                    }
	                }
	                if (action[0] instanceof Array && action.length > 1) {
	                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	                }
	                switch (action[0]) {
	                    case 1:
	                        stack.push(symbol);
	                        vstack.push(this.lexer.yytext);
	                        lstack.push(this.lexer.yylloc);
	                        stack.push(action[1]);
	                        symbol = null;
	                        if (!preErrorSymbol) {
	                            yyleng = this.lexer.yyleng;
	                            yytext = this.lexer.yytext;
	                            yylineno = this.lexer.yylineno;
	                            yyloc = this.lexer.yylloc;
	                            if (recovering > 0) recovering--;
	                        } else {
	                            symbol = preErrorSymbol;
	                            preErrorSymbol = null;
	                        }
	                        break;
	                    case 2:
	                        len = this.productions_[action[1]][1];
	                        yyval.$ = vstack[vstack.length - len];
	                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
	                        if (ranges) {
	                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	                        }
	                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	                        if (typeof r !== "undefined") {
	                            return r;
	                        }
	                        if (len) {
	                            stack = stack.slice(0, -1 * len * 2);
	                            vstack = vstack.slice(0, -1 * len);
	                            lstack = lstack.slice(0, -1 * len);
	                        }
	                        stack.push(this.productions_[action[1]][0]);
	                        vstack.push(yyval.$);
	                        lstack.push(yyval._$);
	                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	                        stack.push(newState);
	                        break;
	                    case 3:
	                        return true;
	                }
	            }
	            return true;
	        }
	    };
	    /* Jison generated lexer */
	    var lexer = (function () {
	        var lexer = { EOF: 1,
	            parseError: function parseError(str, hash) {
	                if (this.yy.parser) {
	                    this.yy.parser.parseError(str, hash);
	                } else {
	                    throw new Error(str);
	                }
	            },
	            setInput: function setInput(input) {
	                this._input = input;
	                this._more = this._less = this.done = false;
	                this.yylineno = this.yyleng = 0;
	                this.yytext = this.matched = this.match = '';
	                this.conditionStack = ['INITIAL'];
	                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
	                if (this.options.ranges) this.yylloc.range = [0, 0];
	                this.offset = 0;
	                return this;
	            },
	            input: function input() {
	                var ch = this._input[0];
	                this.yytext += ch;
	                this.yyleng++;
	                this.offset++;
	                this.match += ch;
	                this.matched += ch;
	                var lines = ch.match(/(?:\r\n?|\n).*/g);
	                if (lines) {
	                    this.yylineno++;
	                    this.yylloc.last_line++;
	                } else {
	                    this.yylloc.last_column++;
	                }
	                if (this.options.ranges) this.yylloc.range[1]++;

	                this._input = this._input.slice(1);
	                return ch;
	            },
	            unput: function unput(ch) {
	                var len = ch.length;
	                var lines = ch.split(/(?:\r\n?|\n)/g);

	                this._input = ch + this._input;
	                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
	                //this.yyleng -= len;
	                this.offset -= len;
	                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	                this.match = this.match.substr(0, this.match.length - 1);
	                this.matched = this.matched.substr(0, this.matched.length - 1);

	                if (lines.length - 1) this.yylineno -= lines.length - 1;
	                var r = this.yylloc.range;

	                this.yylloc = { first_line: this.yylloc.first_line,
	                    last_line: this.yylineno + 1,
	                    first_column: this.yylloc.first_column,
	                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
	                };

	                if (this.options.ranges) {
	                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	                }
	                return this;
	            },
	            more: function more() {
	                this._more = true;
	                return this;
	            },
	            less: function less(n) {
	                this.unput(this.match.slice(n));
	            },
	            pastInput: function pastInput() {
	                var past = this.matched.substr(0, this.matched.length - this.match.length);
	                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
	            },
	            upcomingInput: function upcomingInput() {
	                var next = this.match;
	                if (next.length < 20) {
	                    next += this._input.substr(0, 20 - next.length);
	                }
	                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	            },
	            showPosition: function showPosition() {
	                var pre = this.pastInput();
	                var c = new Array(pre.length + 1).join("-");
	                return pre + this.upcomingInput() + "\n" + c + "^";
	            },
	            next: function next() {
	                if (this.done) {
	                    return this.EOF;
	                }
	                if (!this._input) this.done = true;

	                var token, match, tempMatch, index, col, lines;
	                if (!this._more) {
	                    this.yytext = '';
	                    this.match = '';
	                }
	                var rules = this._currentRules();
	                for (var i = 0; i < rules.length; i++) {
	                    tempMatch = this._input.match(this.rules[rules[i]]);
	                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                        match = tempMatch;
	                        index = i;
	                        if (!this.options.flex) break;
	                    }
	                }
	                if (match) {
	                    lines = match[0].match(/(?:\r\n?|\n).*/g);
	                    if (lines) this.yylineno += lines.length;
	                    this.yylloc = { first_line: this.yylloc.last_line,
	                        last_line: this.yylineno + 1,
	                        first_column: this.yylloc.last_column,
	                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
	                    this.yytext += match[0];
	                    this.match += match[0];
	                    this.matches = match;
	                    this.yyleng = this.yytext.length;
	                    if (this.options.ranges) {
	                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
	                    }
	                    this._more = false;
	                    this._input = this._input.slice(match[0].length);
	                    this.matched += match[0];
	                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
	                    if (this.done && this._input) this.done = false;
	                    if (token) return token;else return;
	                }
	                if (this._input === "") {
	                    return this.EOF;
	                } else {
	                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
	                }
	            },
	            lex: function lex() {
	                var r = this.next();
	                if (typeof r !== 'undefined') {
	                    return r;
	                } else {
	                    return this.lex();
	                }
	            },
	            begin: function begin(condition) {
	                this.conditionStack.push(condition);
	            },
	            popState: function popState() {
	                return this.conditionStack.pop();
	            },
	            _currentRules: function _currentRules() {
	                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	            },
	            topState: function topState() {
	                return this.conditionStack[this.conditionStack.length - 2];
	            },
	            pushState: function begin(condition) {
	                this.begin(condition);
	            } };
	        lexer.options = {};
	        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
	        /**/) {

	            function strip(start, end) {
	                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
	            }

	            var YYSTATE = YY_START;
	            switch ($avoiding_name_collisions) {
	                case 0:
	                    if (yy_.yytext.slice(-2) === "\\\\") {
	                        strip(0, 1);
	                        this.begin("mu");
	                    } else if (yy_.yytext.slice(-1) === "\\") {
	                        strip(0, 1);
	                        this.begin("emu");
	                    } else {
	                        this.begin("mu");
	                    }
	                    if (yy_.yytext) return 15;

	                    break;
	                case 1:
	                    return 15;
	                    break;
	                case 2:
	                    this.popState();
	                    return 15;

	                    break;
	                case 3:
	                    this.begin('raw');return 15;
	                    break;
	                case 4:
	                    this.popState();
	                    // Should be using `this.topState()` below, but it currently
	                    // returns the second top instead of the first top. Opened an
	                    // issue about it at https://github.com/zaach/jison/issues/291
	                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
	                        return 15;
	                    } else {
	                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
	                        return 'END_RAW_BLOCK';
	                    }

	                    break;
	                case 5:
	                    return 15;
	                    break;
	                case 6:
	                    this.popState();
	                    return 14;

	                    break;
	                case 7:
	                    return 65;
	                    break;
	                case 8:
	                    return 68;
	                    break;
	                case 9:
	                    return 19;
	                    break;
	                case 10:
	                    this.popState();
	                    this.begin('raw');
	                    return 23;

	                    break;
	                case 11:
	                    return 55;
	                    break;
	                case 12:
	                    return 60;
	                    break;
	                case 13:
	                    return 29;
	                    break;
	                case 14:
	                    return 47;
	                    break;
	                case 15:
	                    this.popState();return 44;
	                    break;
	                case 16:
	                    this.popState();return 44;
	                    break;
	                case 17:
	                    return 34;
	                    break;
	                case 18:
	                    return 39;
	                    break;
	                case 19:
	                    return 51;
	                    break;
	                case 20:
	                    return 48;
	                    break;
	                case 21:
	                    this.unput(yy_.yytext);
	                    this.popState();
	                    this.begin('com');

	                    break;
	                case 22:
	                    this.popState();
	                    return 14;

	                    break;
	                case 23:
	                    return 48;
	                    break;
	                case 24:
	                    return 73;
	                    break;
	                case 25:
	                    return 72;
	                    break;
	                case 26:
	                    return 72;
	                    break;
	                case 27:
	                    return 87;
	                    break;
	                case 28:
	                    // ignore whitespace
	                    break;
	                case 29:
	                    this.popState();return 54;
	                    break;
	                case 30:
	                    this.popState();return 33;
	                    break;
	                case 31:
	                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
	                    break;
	                case 32:
	                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
	                    break;
	                case 33:
	                    return 85;
	                    break;
	                case 34:
	                    return 82;
	                    break;
	                case 35:
	                    return 82;
	                    break;
	                case 36:
	                    return 83;
	                    break;
	                case 37:
	                    return 84;
	                    break;
	                case 38:
	                    return 81;
	                    break;
	                case 39:
	                    return 75;
	                    break;
	                case 40:
	                    return 77;
	                    break;
	                case 41:
	                    return 72;
	                    break;
	                case 42:
	                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
	                    break;
	                case 43:
	                    return 'INVALID';
	                    break;
	                case 44:
	                    return 5;
	                    break;
	            }
	        };
	        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
	        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
	        return lexer;
	    })();
	    parser.lexer = lexer;
	    function Parser() {
	        this.yy = {};
	    }Parser.prototype = parser;parser.Parser = Parser;
	    return new Parser();
	})();exports["default"] = handlebars;
	module.exports = exports["default"];

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _visitor = __webpack_require__(39);

	var _visitor2 = _interopRequireDefault(_visitor);

	function WhitespaceControl() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  this.options = options;
	}
	WhitespaceControl.prototype = new _visitor2['default']();

	WhitespaceControl.prototype.Program = function (program) {
	  var doStandalone = !this.options.ignoreStandalone;

	  var isRoot = !this.isRootSeen;
	  this.isRootSeen = true;

	  var body = program.body;
	  for (var i = 0, l = body.length; i < l; i++) {
	    var current = body[i],
	        strip = this.accept(current);

	    if (!strip) {
	      continue;
	    }

	    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
	        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
	        openStandalone = strip.openStandalone && _isPrevWhitespace,
	        closeStandalone = strip.closeStandalone && _isNextWhitespace,
	        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

	    if (strip.close) {
	      omitRight(body, i, true);
	    }
	    if (strip.open) {
	      omitLeft(body, i, true);
	    }

	    if (doStandalone && inlineStandalone) {
	      omitRight(body, i);

	      if (omitLeft(body, i)) {
	        // If we are on a standalone node, save the indent info for partials
	        if (current.type === 'PartialStatement') {
	          // Pull out the whitespace from the final line
	          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
	        }
	      }
	    }
	    if (doStandalone && openStandalone) {
	      omitRight((current.program || current.inverse).body);

	      // Strip out the previous content node if it's whitespace only
	      omitLeft(body, i);
	    }
	    if (doStandalone && closeStandalone) {
	      // Always strip the next node
	      omitRight(body, i);

	      omitLeft((current.inverse || current.program).body);
	    }
	  }

	  return program;
	};

	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
	  this.accept(block.program);
	  this.accept(block.inverse);

	  // Find the inverse program that is involed with whitespace stripping.
	  var program = block.program || block.inverse,
	      inverse = block.program && block.inverse,
	      firstInverse = inverse,
	      lastInverse = inverse;

	  if (inverse && inverse.chained) {
	    firstInverse = inverse.body[0].program;

	    // Walk the inverse chain to find the last inverse that is actually in the chain.
	    while (lastInverse.chained) {
	      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
	    }
	  }

	  var strip = {
	    open: block.openStrip.open,
	    close: block.closeStrip.close,

	    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
	    // so our parent can determine if we actually are standalone
	    openStandalone: isNextWhitespace(program.body),
	    closeStandalone: isPrevWhitespace((firstInverse || program).body)
	  };

	  if (block.openStrip.close) {
	    omitRight(program.body, null, true);
	  }

	  if (inverse) {
	    var inverseStrip = block.inverseStrip;

	    if (inverseStrip.open) {
	      omitLeft(program.body, null, true);
	    }

	    if (inverseStrip.close) {
	      omitRight(firstInverse.body, null, true);
	    }
	    if (block.closeStrip.open) {
	      omitLeft(lastInverse.body, null, true);
	    }

	    // Find standalone else statments
	    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
	      omitLeft(program.body);
	      omitRight(firstInverse.body);
	    }
	  } else if (block.closeStrip.open) {
	    omitLeft(program.body, null, true);
	  }

	  return strip;
	};

	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
	  return mustache.strip;
	};

	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
	  /* istanbul ignore next */
	  var strip = node.strip || {};
	  return {
	    inlineStandalone: true,
	    open: strip.open,
	    close: strip.close
	  };
	};

	function isPrevWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = body.length;
	  }

	  // Nodes that end with newlines are considered whitespace (but are special
	  // cased for strip operations)
	  var prev = body[i - 1],
	      sibling = body[i - 2];
	  if (!prev) {
	    return isRoot;
	  }

	  if (prev.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
	  }
	}
	function isNextWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = -1;
	  }

	  var next = body[i + 1],
	      sibling = body[i + 2];
	  if (!next) {
	    return isRoot;
	  }

	  if (next.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
	  }
	}

	// Marks the node to the right of the position as omitted.
	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
	//
	// If i is undefined, then the first child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitRight(body, i, multiple) {
	  var current = body[i == null ? 0 : i + 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
	    return;
	  }

	  var original = current.value;
	  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
	  current.rightStripped = current.value !== original;
	}

	// Marks the node to the left of the position as omitted.
	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
	//
	// If i is undefined then the last child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitLeft(body, i, multiple) {
	  var current = body[i == null ? body.length - 1 : i - 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
	    return;
	  }

	  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
	  var original = current.value;
	  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
	  current.leftStripped = current.value !== original;
	  return current.leftStripped;
	}

	exports['default'] = WhitespaceControl;
	module.exports = exports['default'];

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function Visitor() {
	  this.parents = [];
	}

	Visitor.prototype = {
	  constructor: Visitor,
	  mutating: false,

	  // Visits a given value. If mutating, will replace the value if necessary.
	  acceptKey: function acceptKey(node, name) {
	    var value = this.accept(node[name]);
	    if (this.mutating) {
	      // Hacky sanity check: This may have a few false positives for type for the helper
	      // methods but will generally do the right thing without a lot of overhead.
	      if (value && !Visitor.prototype[value.type]) {
	        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
	      }
	      node[name] = value;
	    }
	  },

	  // Performs an accept operation with added sanity check to ensure
	  // required keys are not removed.
	  acceptRequired: function acceptRequired(node, name) {
	    this.acceptKey(node, name);

	    if (!node[name]) {
	      throw new _exception2['default'](node.type + ' requires ' + name);
	    }
	  },

	  // Traverses a given array. If mutating, empty respnses will be removed
	  // for child elements.
	  acceptArray: function acceptArray(array) {
	    for (var i = 0, l = array.length; i < l; i++) {
	      this.acceptKey(array, i);

	      if (!array[i]) {
	        array.splice(i, 1);
	        i--;
	        l--;
	      }
	    }
	  },

	  accept: function accept(object) {
	    if (!object) {
	      return;
	    }

	    /* istanbul ignore next: Sanity code */
	    if (!this[object.type]) {
	      throw new _exception2['default']('Unknown type: ' + object.type, object);
	    }

	    if (this.current) {
	      this.parents.unshift(this.current);
	    }
	    this.current = object;

	    var ret = this[object.type](object);

	    this.current = this.parents.shift();

	    if (!this.mutating || ret) {
	      return ret;
	    } else if (ret !== false) {
	      return object;
	    }
	  },

	  Program: function Program(program) {
	    this.acceptArray(program.body);
	  },

	  MustacheStatement: visitSubExpression,
	  Decorator: visitSubExpression,

	  BlockStatement: visitBlock,
	  DecoratorBlock: visitBlock,

	  PartialStatement: visitPartial,
	  PartialBlockStatement: function PartialBlockStatement(partial) {
	    visitPartial.call(this, partial);

	    this.acceptKey(partial, 'program');
	  },

	  ContentStatement: function ContentStatement() /* content */{},
	  CommentStatement: function CommentStatement() /* comment */{},

	  SubExpression: visitSubExpression,

	  PathExpression: function PathExpression() /* path */{},

	  StringLiteral: function StringLiteral() /* string */{},
	  NumberLiteral: function NumberLiteral() /* number */{},
	  BooleanLiteral: function BooleanLiteral() /* bool */{},
	  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
	  NullLiteral: function NullLiteral() /* literal */{},

	  Hash: function Hash(hash) {
	    this.acceptArray(hash.pairs);
	  },
	  HashPair: function HashPair(pair) {
	    this.acceptRequired(pair, 'value');
	  }
	};

	function visitSubExpression(mustache) {
	  this.acceptRequired(mustache, 'path');
	  this.acceptArray(mustache.params);
	  this.acceptKey(mustache, 'hash');
	}
	function visitBlock(block) {
	  visitSubExpression.call(this, block);

	  this.acceptKey(block, 'program');
	  this.acceptKey(block, 'inverse');
	}
	function visitPartial(partial) {
	  this.acceptRequired(partial, 'name');
	  this.acceptArray(partial.params);
	  this.acceptKey(partial, 'hash');
	}

	exports['default'] = Visitor;
	module.exports = exports['default'];

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;
	exports.prepareProgram = prepareProgram;
	exports.preparePartialBlock = preparePartialBlock;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function validateClose(open, close) {
	  close = close.path ? close.path.original : close;

	  if (open.path.original !== close) {
	    var errorNode = { loc: open.path.loc };

	    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
	  }
	}

	function SourceLocation(source, locInfo) {
	  this.source = source;
	  this.start = {
	    line: locInfo.first_line,
	    column: locInfo.first_column
	  };
	  this.end = {
	    line: locInfo.last_line,
	    column: locInfo.last_column
	  };
	}

	function id(token) {
	  if (/^\[.*\]$/.test(token)) {
	    return token.substr(1, token.length - 2);
	  } else {
	    return token;
	  }
	}

	function stripFlags(open, close) {
	  return {
	    open: open.charAt(2) === '~',
	    close: close.charAt(close.length - 3) === '~'
	  };
	}

	function stripComment(comment) {
	  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
	}

	function preparePath(data, parts, loc) {
	  loc = this.locInfo(loc);

	  var original = data ? '@' : '',
	      dig = [],
	      depth = 0,
	      depthString = '';

	  for (var i = 0, l = parts.length; i < l; i++) {
	    var part = parts[i].part,

	    // If we have [] syntax then we do not treat path references as operators,
	    // i.e. foo.[this] resolves to approximately context.foo['this']
	    isLiteral = parts[i].original !== part;
	    original += (parts[i].separator || '') + part;

	    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
	      if (dig.length > 0) {
	        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
	      } else if (part === '..') {
	        depth++;
	        depthString += '../';
	      }
	    } else {
	      dig.push(part);
	    }
	  }

	  return {
	    type: 'PathExpression',
	    data: data,
	    depth: depth,
	    parts: dig,
	    original: original,
	    loc: loc
	  };
	}

	function prepareMustache(path, params, hash, open, strip, locInfo) {
	  // Must use charAt to support IE pre-10
	  var escapeFlag = open.charAt(3) || open.charAt(2),
	      escaped = escapeFlag !== '{' && escapeFlag !== '&';

	  var decorator = /\*/.test(open);
	  return {
	    type: decorator ? 'Decorator' : 'MustacheStatement',
	    path: path,
	    params: params,
	    hash: hash,
	    escaped: escaped,
	    strip: strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
	  validateClose(openRawBlock, close);

	  locInfo = this.locInfo(locInfo);
	  var program = {
	    type: 'Program',
	    body: contents,
	    strip: {},
	    loc: locInfo
	  };

	  return {
	    type: 'BlockStatement',
	    path: openRawBlock.path,
	    params: openRawBlock.params,
	    hash: openRawBlock.hash,
	    program: program,
	    openStrip: {},
	    inverseStrip: {},
	    closeStrip: {},
	    loc: locInfo
	  };
	}

	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
	  if (close && close.path) {
	    validateClose(openBlock, close);
	  }

	  var decorator = /\*/.test(openBlock.open);

	  program.blockParams = openBlock.blockParams;

	  var inverse = undefined,
	      inverseStrip = undefined;

	  if (inverseAndProgram) {
	    if (decorator) {
	      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
	    }

	    if (inverseAndProgram.chain) {
	      inverseAndProgram.program.body[0].closeStrip = close.strip;
	    }

	    inverseStrip = inverseAndProgram.strip;
	    inverse = inverseAndProgram.program;
	  }

	  if (inverted) {
	    inverted = inverse;
	    inverse = program;
	    program = inverted;
	  }

	  return {
	    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
	    path: openBlock.path,
	    params: openBlock.params,
	    hash: openBlock.hash,
	    program: program,
	    inverse: inverse,
	    openStrip: openBlock.strip,
	    inverseStrip: inverseStrip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareProgram(statements, loc) {
	  if (!loc && statements.length) {
	    var firstLoc = statements[0].loc,
	        lastLoc = statements[statements.length - 1].loc;

	    /* istanbul ignore else */
	    if (firstLoc && lastLoc) {
	      loc = {
	        source: firstLoc.source,
	        start: {
	          line: firstLoc.start.line,
	          column: firstLoc.start.column
	        },
	        end: {
	          line: lastLoc.end.line,
	          column: lastLoc.end.column
	        }
	      };
	    }
	  }

	  return {
	    type: 'Program',
	    body: statements,
	    strip: {},
	    loc: loc
	  };
	}

	function preparePartialBlock(open, program, close, locInfo) {
	  validateClose(open, close);

	  return {
	    type: 'PartialBlockStatement',
	    name: open.path,
	    params: open.params,
	    hash: open.hash,
	    program: program,
	    openStrip: open.strip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable new-cap */

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _ast = __webpack_require__(35);

	var _ast2 = _interopRequireDefault(_ast);

	var slice = [].slice;

	function Compiler() {}

	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.

	Compiler.prototype = {
	  compiler: Compiler,

	  equals: function equals(other) {
	    var len = this.opcodes.length;
	    if (other.opcodes.length !== len) {
	      return false;
	    }

	    for (var i = 0; i < len; i++) {
	      var opcode = this.opcodes[i],
	          otherOpcode = other.opcodes[i];
	      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
	        return false;
	      }
	    }

	    // We know that length is the same between the two arrays because they are directly tied
	    // to the opcode behavior above.
	    len = this.children.length;
	    for (var i = 0; i < len; i++) {
	      if (!this.children[i].equals(other.children[i])) {
	        return false;
	      }
	    }

	    return true;
	  },

	  guid: 0,

	  compile: function compile(program, options) {
	    this.sourceNode = [];
	    this.opcodes = [];
	    this.children = [];
	    this.options = options;
	    this.stringParams = options.stringParams;
	    this.trackIds = options.trackIds;

	    options.blockParams = options.blockParams || [];

	    // These changes will propagate to the other compiler components
	    var knownHelpers = options.knownHelpers;
	    options.knownHelpers = {
	      'helperMissing': true,
	      'blockHelperMissing': true,
	      'each': true,
	      'if': true,
	      'unless': true,
	      'with': true,
	      'log': true,
	      'lookup': true
	    };
	    if (knownHelpers) {
	      for (var _name in knownHelpers) {
	        /* istanbul ignore else */
	        if (_name in knownHelpers) {
	          this.options.knownHelpers[_name] = knownHelpers[_name];
	        }
	      }
	    }

	    return this.accept(program);
	  },

	  compileProgram: function compileProgram(program) {
	    var childCompiler = new this.compiler(),
	        // eslint-disable-line new-cap
	    result = childCompiler.compile(program, this.options),
	        guid = this.guid++;

	    this.usePartial = this.usePartial || result.usePartial;

	    this.children[guid] = result;
	    this.useDepths = this.useDepths || result.useDepths;

	    return guid;
	  },

	  accept: function accept(node) {
	    /* istanbul ignore next: Sanity code */
	    if (!this[node.type]) {
	      throw new _exception2['default']('Unknown type: ' + node.type, node);
	    }

	    this.sourceNode.unshift(node);
	    var ret = this[node.type](node);
	    this.sourceNode.shift();
	    return ret;
	  },

	  Program: function Program(program) {
	    this.options.blockParams.unshift(program.blockParams);

	    var body = program.body,
	        bodyLength = body.length;
	    for (var i = 0; i < bodyLength; i++) {
	      this.accept(body[i]);
	    }

	    this.options.blockParams.shift();

	    this.isSimple = bodyLength === 1;
	    this.blockParams = program.blockParams ? program.blockParams.length : 0;

	    return this;
	  },

	  BlockStatement: function BlockStatement(block) {
	    transformLiteralToPath(block);

	    var program = block.program,
	        inverse = block.inverse;

	    program = program && this.compileProgram(program);
	    inverse = inverse && this.compileProgram(inverse);

	    var type = this.classifySexpr(block);

	    if (type === 'helper') {
	      this.helperSexpr(block, program, inverse);
	    } else if (type === 'simple') {
	      this.simpleSexpr(block);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('blockValue', block.path.original);
	    } else {
	      this.ambiguousSexpr(block, program, inverse);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('ambiguousBlockValue');
	    }

	    this.opcode('append');
	  },

	  DecoratorBlock: function DecoratorBlock(decorator) {
	    var program = decorator.program && this.compileProgram(decorator.program);
	    var params = this.setupFullMustacheParams(decorator, program, undefined),
	        path = decorator.path;

	    this.useDecorators = true;
	    this.opcode('registerDecorator', params.length, path.original);
	  },

	  PartialStatement: function PartialStatement(partial) {
	    this.usePartial = true;

	    var program = partial.program;
	    if (program) {
	      program = this.compileProgram(partial.program);
	    }

	    var params = partial.params;
	    if (params.length > 1) {
	      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
	    } else if (!params.length) {
	      if (this.options.explicitPartialContext) {
	        this.opcode('pushLiteral', 'undefined');
	      } else {
	        params.push({ type: 'PathExpression', parts: [], depth: 0 });
	      }
	    }

	    var partialName = partial.name.original,
	        isDynamic = partial.name.type === 'SubExpression';
	    if (isDynamic) {
	      this.accept(partial.name);
	    }

	    this.setupFullMustacheParams(partial, program, undefined, true);

	    var indent = partial.indent || '';
	    if (this.options.preventIndent && indent) {
	      this.opcode('appendContent', indent);
	      indent = '';
	    }

	    this.opcode('invokePartial', isDynamic, partialName, indent);
	    this.opcode('append');
	  },
	  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
	    this.PartialStatement(partialBlock);
	  },

	  MustacheStatement: function MustacheStatement(mustache) {
	    this.SubExpression(mustache);

	    if (mustache.escaped && !this.options.noEscape) {
	      this.opcode('appendEscaped');
	    } else {
	      this.opcode('append');
	    }
	  },
	  Decorator: function Decorator(decorator) {
	    this.DecoratorBlock(decorator);
	  },

	  ContentStatement: function ContentStatement(content) {
	    if (content.value) {
	      this.opcode('appendContent', content.value);
	    }
	  },

	  CommentStatement: function CommentStatement() {},

	  SubExpression: function SubExpression(sexpr) {
	    transformLiteralToPath(sexpr);
	    var type = this.classifySexpr(sexpr);

	    if (type === 'simple') {
	      this.simpleSexpr(sexpr);
	    } else if (type === 'helper') {
	      this.helperSexpr(sexpr);
	    } else {
	      this.ambiguousSexpr(sexpr);
	    }
	  },
	  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
	    var path = sexpr.path,
	        name = path.parts[0],
	        isBlock = program != null || inverse != null;

	    this.opcode('getContext', path.depth);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    path.strict = true;
	    this.accept(path);

	    this.opcode('invokeAmbiguous', name, isBlock);
	  },

	  simpleSexpr: function simpleSexpr(sexpr) {
	    var path = sexpr.path;
	    path.strict = true;
	    this.accept(path);
	    this.opcode('resolvePossibleLambda');
	  },

	  helperSexpr: function helperSexpr(sexpr, program, inverse) {
	    var params = this.setupFullMustacheParams(sexpr, program, inverse),
	        path = sexpr.path,
	        name = path.parts[0];

	    if (this.options.knownHelpers[name]) {
	      this.opcode('invokeKnownHelper', params.length, name);
	    } else if (this.options.knownHelpersOnly) {
	      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
	    } else {
	      path.strict = true;
	      path.falsy = true;

	      this.accept(path);
	      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
	    }
	  },

	  PathExpression: function PathExpression(path) {
	    this.addDepth(path.depth);
	    this.opcode('getContext', path.depth);

	    var name = path.parts[0],
	        scoped = _ast2['default'].helpers.scopedId(path),
	        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

	    if (blockParamId) {
	      this.opcode('lookupBlockParam', blockParamId, path.parts);
	    } else if (!name) {
	      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
	      this.opcode('pushContext');
	    } else if (path.data) {
	      this.options.data = true;
	      this.opcode('lookupData', path.depth, path.parts, path.strict);
	    } else {
	      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
	    }
	  },

	  StringLiteral: function StringLiteral(string) {
	    this.opcode('pushString', string.value);
	  },

	  NumberLiteral: function NumberLiteral(number) {
	    this.opcode('pushLiteral', number.value);
	  },

	  BooleanLiteral: function BooleanLiteral(bool) {
	    this.opcode('pushLiteral', bool.value);
	  },

	  UndefinedLiteral: function UndefinedLiteral() {
	    this.opcode('pushLiteral', 'undefined');
	  },

	  NullLiteral: function NullLiteral() {
	    this.opcode('pushLiteral', 'null');
	  },

	  Hash: function Hash(hash) {
	    var pairs = hash.pairs,
	        i = 0,
	        l = pairs.length;

	    this.opcode('pushHash');

	    for (; i < l; i++) {
	      this.pushParam(pairs[i].value);
	    }
	    while (i--) {
	      this.opcode('assignToHash', pairs[i].key);
	    }
	    this.opcode('popHash');
	  },

	  // HELPERS
	  opcode: function opcode(name) {
	    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
	  },

	  addDepth: function addDepth(depth) {
	    if (!depth) {
	      return;
	    }

	    this.useDepths = true;
	  },

	  classifySexpr: function classifySexpr(sexpr) {
	    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

	    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

	    // a mustache is an eligible helper if:
	    // * its id is simple (a single part, not `this` or `..`)
	    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

	    // if a mustache is an eligible helper but not a definite
	    // helper, it is ambiguous, and will be resolved in a later
	    // pass or at runtime.
	    var isEligible = !isBlockParam && (isHelper || isSimple);

	    // if ambiguous, we can possibly resolve the ambiguity now
	    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
	    if (isEligible && !isHelper) {
	      var _name2 = sexpr.path.parts[0],
	          options = this.options;

	      if (options.knownHelpers[_name2]) {
	        isHelper = true;
	      } else if (options.knownHelpersOnly) {
	        isEligible = false;
	      }
	    }

	    if (isHelper) {
	      return 'helper';
	    } else if (isEligible) {
	      return 'ambiguous';
	    } else {
	      return 'simple';
	    }
	  },

	  pushParams: function pushParams(params) {
	    for (var i = 0, l = params.length; i < l; i++) {
	      this.pushParam(params[i]);
	    }
	  },

	  pushParam: function pushParam(val) {
	    var value = val.value != null ? val.value : val.original || '';

	    if (this.stringParams) {
	      if (value.replace) {
	        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
	      }

	      if (val.depth) {
	        this.addDepth(val.depth);
	      }
	      this.opcode('getContext', val.depth || 0);
	      this.opcode('pushStringParam', value, val.type);

	      if (val.type === 'SubExpression') {
	        // SubExpressions get evaluated and passed in
	        // in string params mode.
	        this.accept(val);
	      }
	    } else {
	      if (this.trackIds) {
	        var blockParamIndex = undefined;
	        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
	          blockParamIndex = this.blockParamIndex(val.parts[0]);
	        }
	        if (blockParamIndex) {
	          var blockParamChild = val.parts.slice(1).join('.');
	          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
	        } else {
	          value = val.original || value;
	          if (value.replace) {
	            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
	          }

	          this.opcode('pushId', val.type, value);
	        }
	      }
	      this.accept(val);
	    }
	  },

	  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
	    var params = sexpr.params;
	    this.pushParams(params);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    if (sexpr.hash) {
	      this.accept(sexpr.hash);
	    } else {
	      this.opcode('emptyHash', omitEmpty);
	    }

	    return params;
	  },

	  blockParamIndex: function blockParamIndex(name) {
	    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
	      var blockParams = this.options.blockParams[depth],
	          param = blockParams && _utils.indexOf(blockParams, name);
	      if (blockParams && param >= 0) {
	        return [depth, param];
	      }
	    }
	  }
	};

	function precompile(input, options, env) {
	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
	  }

	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var ast = env.parse(input, options),
	      environment = new env.Compiler().compile(ast, options);
	  return new env.JavaScriptCompiler().compile(environment, options);
	}

	function compile(input, options, env) {
	  if (options === undefined) options = {};

	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
	  }

	  options = _utils.extend({}, options);
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var compiled = undefined;

	  function compileInput() {
	    var ast = env.parse(input, options),
	        environment = new env.Compiler().compile(ast, options),
	        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
	    return env.template(templateSpec);
	  }

	  // Template is only compiled on first use and cached after that point.
	  function ret(context, execOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled.call(this, context, execOptions);
	  }
	  ret._setup = function (setupOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._setup(setupOptions);
	  };
	  ret._child = function (i, data, blockParams, depths) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._child(i, data, blockParams, depths);
	  };
	  return ret;
	}

	function argEquals(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
	    for (var i = 0; i < a.length; i++) {
	      if (!argEquals(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	}

	function transformLiteralToPath(sexpr) {
	  if (!sexpr.path.parts) {
	    var literal = sexpr.path;
	    // Casting to string here to make false and 0 literal values play nicely with the rest
	    // of the system.
	    sexpr.path = {
	      type: 'PathExpression',
	      data: false,
	      depth: 0,
	      parts: [literal.original + ''],
	      original: literal.original + '',
	      loc: literal.loc
	    };
	  }
	}

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _base = __webpack_require__(4);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _codeGen = __webpack_require__(43);

	var _codeGen2 = _interopRequireDefault(_codeGen);

	function Literal(value) {
	  this.value = value;
	}

	function JavaScriptCompiler() {}

	JavaScriptCompiler.prototype = {
	  // PUBLIC API: You can override these methods in a subclass to provide
	  // alternative compiled forms for name lookup and buffering semantics
	  nameLookup: function nameLookup(parent, name /* , type*/) {
	    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
	      return [parent, '.', name];
	    } else {
	      return [parent, '[', JSON.stringify(name), ']'];
	    }
	  },
	  depthedLookup: function depthedLookup(name) {
	    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
	  },

	  compilerInfo: function compilerInfo() {
	    var revision = _base.COMPILER_REVISION,
	        versions = _base.REVISION_CHANGES[revision];
	    return [revision, versions];
	  },

	  appendToBuffer: function appendToBuffer(source, location, explicit) {
	    // Force a source as this simplifies the merge logic.
	    if (!_utils.isArray(source)) {
	      source = [source];
	    }
	    source = this.source.wrap(source, location);

	    if (this.environment.isSimple) {
	      return ['return ', source, ';'];
	    } else if (explicit) {
	      // This is a case where the buffer operation occurs as a child of another
	      // construct, generally braces. We have to explicitly output these buffer
	      // operations to ensure that the emitted code goes in the correct location.
	      return ['buffer += ', source, ';'];
	    } else {
	      source.appendToBuffer = true;
	      return source;
	    }
	  },

	  initializeBuffer: function initializeBuffer() {
	    return this.quotedString('');
	  },
	  // END PUBLIC API

	  compile: function compile(environment, options, context, asObject) {
	    this.environment = environment;
	    this.options = options;
	    this.stringParams = this.options.stringParams;
	    this.trackIds = this.options.trackIds;
	    this.precompile = !asObject;

	    this.name = this.environment.name;
	    this.isChild = !!context;
	    this.context = context || {
	      decorators: [],
	      programs: [],
	      environments: []
	    };

	    this.preamble();

	    this.stackSlot = 0;
	    this.stackVars = [];
	    this.aliases = {};
	    this.registers = { list: [] };
	    this.hashes = [];
	    this.compileStack = [];
	    this.inlineStack = [];
	    this.blockParams = [];

	    this.compileChildren(environment, options);

	    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
	    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

	    var opcodes = environment.opcodes,
	        opcode = undefined,
	        firstLoc = undefined,
	        i = undefined,
	        l = undefined;

	    for (i = 0, l = opcodes.length; i < l; i++) {
	      opcode = opcodes[i];

	      this.source.currentLocation = opcode.loc;
	      firstLoc = firstLoc || opcode.loc;
	      this[opcode.opcode].apply(this, opcode.args);
	    }

	    // Flush any trailing content that might be pending.
	    this.source.currentLocation = firstLoc;
	    this.pushSource('');

	    /* istanbul ignore next */
	    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
	      throw new _exception2['default']('Compile completed with content left on stack');
	    }

	    if (!this.decorators.isEmpty()) {
	      this.useDecorators = true;

	      this.decorators.prepend('var decorators = container.decorators;\n');
	      this.decorators.push('return fn;');

	      if (asObject) {
	        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
	      } else {
	        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
	        this.decorators.push('}\n');
	        this.decorators = this.decorators.merge();
	      }
	    } else {
	      this.decorators = undefined;
	    }

	    var fn = this.createFunctionContext(asObject);
	    if (!this.isChild) {
	      var ret = {
	        compiler: this.compilerInfo(),
	        main: fn
	      };

	      if (this.decorators) {
	        ret.main_d = this.decorators; // eslint-disable-line camelcase
	        ret.useDecorators = true;
	      }

	      var _context = this.context;
	      var programs = _context.programs;
	      var decorators = _context.decorators;

	      for (i = 0, l = programs.length; i < l; i++) {
	        if (programs[i]) {
	          ret[i] = programs[i];
	          if (decorators[i]) {
	            ret[i + '_d'] = decorators[i];
	            ret.useDecorators = true;
	          }
	        }
	      }

	      if (this.environment.usePartial) {
	        ret.usePartial = true;
	      }
	      if (this.options.data) {
	        ret.useData = true;
	      }
	      if (this.useDepths) {
	        ret.useDepths = true;
	      }
	      if (this.useBlockParams) {
	        ret.useBlockParams = true;
	      }
	      if (this.options.compat) {
	        ret.compat = true;
	      }

	      if (!asObject) {
	        ret.compiler = JSON.stringify(ret.compiler);

	        this.source.currentLocation = { start: { line: 1, column: 0 } };
	        ret = this.objectLiteral(ret);

	        if (options.srcName) {
	          ret = ret.toStringWithSourceMap({ file: options.destName });
	          ret.map = ret.map && ret.map.toString();
	        } else {
	          ret = ret.toString();
	        }
	      } else {
	        ret.compilerOptions = this.options;
	      }

	      return ret;
	    } else {
	      return fn;
	    }
	  },

	  preamble: function preamble() {
	    // track the last context pushed into place to allow skipping the
	    // getContext opcode when it would be a noop
	    this.lastContext = 0;
	    this.source = new _codeGen2['default'](this.options.srcName);
	    this.decorators = new _codeGen2['default'](this.options.srcName);
	  },

	  createFunctionContext: function createFunctionContext(asObject) {
	    var varDeclarations = '';

	    var locals = this.stackVars.concat(this.registers.list);
	    if (locals.length > 0) {
	      varDeclarations += ', ' + locals.join(', ');
	    }

	    // Generate minimizer alias mappings
	    //
	    // When using true SourceNodes, this will update all references to the given alias
	    // as the source nodes are reused in situ. For the non-source node compilation mode,
	    // aliases will not be used, but this case is already being run on the client and
	    // we aren't concern about minimizing the template size.
	    var aliasCount = 0;
	    for (var alias in this.aliases) {
	      // eslint-disable-line guard-for-in
	      var node = this.aliases[alias];

	      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
	        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
	        node.children[0] = 'alias' + aliasCount;
	      }
	    }

	    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

	    if (this.useBlockParams || this.useDepths) {
	      params.push('blockParams');
	    }
	    if (this.useDepths) {
	      params.push('depths');
	    }

	    // Perform a second pass over the output to merge content when possible
	    var source = this.mergeSource(varDeclarations);

	    if (asObject) {
	      params.push(source);

	      return Function.apply(this, params);
	    } else {
	      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
	    }
	  },
	  mergeSource: function mergeSource(varDeclarations) {
	    var isSimple = this.environment.isSimple,
	        appendOnly = !this.forceBuffer,
	        appendFirst = undefined,
	        sourceSeen = undefined,
	        bufferStart = undefined,
	        bufferEnd = undefined;
	    this.source.each(function (line) {
	      if (line.appendToBuffer) {
	        if (bufferStart) {
	          line.prepend('  + ');
	        } else {
	          bufferStart = line;
	        }
	        bufferEnd = line;
	      } else {
	        if (bufferStart) {
	          if (!sourceSeen) {
	            appendFirst = true;
	          } else {
	            bufferStart.prepend('buffer += ');
	          }
	          bufferEnd.add(';');
	          bufferStart = bufferEnd = undefined;
	        }

	        sourceSeen = true;
	        if (!isSimple) {
	          appendOnly = false;
	        }
	      }
	    });

	    if (appendOnly) {
	      if (bufferStart) {
	        bufferStart.prepend('return ');
	        bufferEnd.add(';');
	      } else if (!sourceSeen) {
	        this.source.push('return "";');
	      }
	    } else {
	      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

	      if (bufferStart) {
	        bufferStart.prepend('return buffer + ');
	        bufferEnd.add(';');
	      } else {
	        this.source.push('return buffer;');
	      }
	    }

	    if (varDeclarations) {
	      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
	    }

	    return this.source.merge();
	  },

	  // [blockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // On stack, after: return value of blockHelperMissing
	  //
	  // The purpose of this opcode is to take a block of the form
	  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
	  // replace it on the stack with the result of properly
	  // invoking blockHelperMissing.
	  blockValue: function blockValue(name) {
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs(name, 0, params);

	    var blockName = this.popStack();
	    params.splice(1, 0, blockName);

	    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
	  },

	  // [ambiguousBlockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // Compiler value, before: lastHelper=value of last found helper, if any
	  // On stack, after, if no lastHelper: same as [blockValue]
	  // On stack, after, if lastHelper: value
	  ambiguousBlockValue: function ambiguousBlockValue() {
	    // We're being a bit cheeky and reusing the options value from the prior exec
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs('', 0, params, true);

	    this.flushInline();

	    var current = this.topStack();
	    params.splice(1, 0, current);

	    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
	  },

	  // [appendContent]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  //
	  // Appends the string value of `content` to the current buffer
	  appendContent: function appendContent(content) {
	    if (this.pendingContent) {
	      content = this.pendingContent + content;
	    } else {
	      this.pendingLocation = this.source.currentLocation;
	    }

	    this.pendingContent = content;
	  },

	  // [append]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Coerces `value` to a String and appends it to the current buffer.
	  //
	  // If `value` is truthy, or 0, it is coerced into a string and appended
	  // Otherwise, the empty string is appended
	  append: function append() {
	    if (this.isInline()) {
	      this.replaceStack(function (current) {
	        return [' != null ? ', current, ' : ""'];
	      });

	      this.pushSource(this.appendToBuffer(this.popStack()));
	    } else {
	      var local = this.popStack();
	      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
	      if (this.environment.isSimple) {
	        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
	      }
	    }
	  },

	  // [appendEscaped]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Escape `value` and append it to the buffer
	  appendEscaped: function appendEscaped() {
	    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
	  },

	  // [getContext]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  // Compiler value, after: lastContext=depth
	  //
	  // Set the value of the `lastContext` compiler value to the depth
	  getContext: function getContext(depth) {
	    this.lastContext = depth;
	  },

	  // [pushContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext, ...
	  //
	  // Pushes the value of the current context onto the stack.
	  pushContext: function pushContext() {
	    this.pushStackLiteral(this.contextName(this.lastContext));
	  },

	  // [lookupOnContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext[name], ...
	  //
	  // Looks up the value of `name` on the current context and pushes
	  // it onto the stack.
	  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
	    var i = 0;

	    if (!scoped && this.options.compat && !this.lastContext) {
	      // The depthed query is expected to handle the undefined logic for the root level that
	      // is implemented below, so we evaluate that directly in compat mode
	      this.push(this.depthedLookup(parts[i++]));
	    } else {
	      this.pushContext();
	    }

	    this.resolvePath('context', parts, i, falsy, strict);
	  },

	  // [lookupBlockParam]
	  //
	  // On stack, before: ...
	  // On stack, after: blockParam[name], ...
	  //
	  // Looks up the value of `parts` on the given block param and pushes
	  // it onto the stack.
	  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
	    this.useBlockParams = true;

	    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
	    this.resolvePath('context', parts, 1);
	  },

	  // [lookupData]
	  //
	  // On stack, before: ...
	  // On stack, after: data, ...
	  //
	  // Push the data lookup operator
	  lookupData: function lookupData(depth, parts, strict) {
	    if (!depth) {
	      this.pushStackLiteral('data');
	    } else {
	      this.pushStackLiteral('container.data(data, ' + depth + ')');
	    }

	    this.resolvePath('data', parts, 0, true, strict);
	  },

	  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
	    // istanbul ignore next

	    var _this = this;

	    if (this.options.strict || this.options.assumeObjects) {
	      this.push(strictLookup(this.options.strict && strict, this, parts, type));
	      return;
	    }

	    var len = parts.length;
	    for (; i < len; i++) {
	      /* eslint-disable no-loop-func */
	      this.replaceStack(function (current) {
	        var lookup = _this.nameLookup(current, parts[i], type);
	        // We want to ensure that zero and false are handled properly if the context (falsy flag)
	        // needs to have the special handling for these values.
	        if (!falsy) {
	          return [' != null ? ', lookup, ' : ', current];
	        } else {
	          // Otherwise we can use generic falsy handling
	          return [' && ', lookup];
	        }
	      });
	      /* eslint-enable no-loop-func */
	    }
	  },

	  // [resolvePossibleLambda]
	  //
	  // On stack, before: value, ...
	  // On stack, after: resolved value, ...
	  //
	  // If the `value` is a lambda, replace it on the stack by
	  // the return value of the lambda
	  resolvePossibleLambda: function resolvePossibleLambda() {
	    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
	  },

	  // [pushStringParam]
	  //
	  // On stack, before: ...
	  // On stack, after: string, currentContext, ...
	  //
	  // This opcode is designed for use in string mode, which
	  // provides the string value of a parameter along with its
	  // depth rather than resolving it immediately.
	  pushStringParam: function pushStringParam(string, type) {
	    this.pushContext();
	    this.pushString(type);

	    // If it's a subexpression, the string result
	    // will be pushed after this opcode.
	    if (type !== 'SubExpression') {
	      if (typeof string === 'string') {
	        this.pushString(string);
	      } else {
	        this.pushStackLiteral(string);
	      }
	    }
	  },

	  emptyHash: function emptyHash(omitEmpty) {
	    if (this.trackIds) {
	      this.push('{}'); // hashIds
	    }
	    if (this.stringParams) {
	      this.push('{}'); // hashContexts
	      this.push('{}'); // hashTypes
	    }
	    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
	  },
	  pushHash: function pushHash() {
	    if (this.hash) {
	      this.hashes.push(this.hash);
	    }
	    this.hash = { values: [], types: [], contexts: [], ids: [] };
	  },
	  popHash: function popHash() {
	    var hash = this.hash;
	    this.hash = this.hashes.pop();

	    if (this.trackIds) {
	      this.push(this.objectLiteral(hash.ids));
	    }
	    if (this.stringParams) {
	      this.push(this.objectLiteral(hash.contexts));
	      this.push(this.objectLiteral(hash.types));
	    }

	    this.push(this.objectLiteral(hash.values));
	  },

	  // [pushString]
	  //
	  // On stack, before: ...
	  // On stack, after: quotedString(string), ...
	  //
	  // Push a quoted version of `string` onto the stack
	  pushString: function pushString(string) {
	    this.pushStackLiteral(this.quotedString(string));
	  },

	  // [pushLiteral]
	  //
	  // On stack, before: ...
	  // On stack, after: value, ...
	  //
	  // Pushes a value onto the stack. This operation prevents
	  // the compiler from creating a temporary variable to hold
	  // it.
	  pushLiteral: function pushLiteral(value) {
	    this.pushStackLiteral(value);
	  },

	  // [pushProgram]
	  //
	  // On stack, before: ...
	  // On stack, after: program(guid), ...
	  //
	  // Push a program expression onto the stack. This takes
	  // a compile-time guid and converts it into a runtime-accessible
	  // expression.
	  pushProgram: function pushProgram(guid) {
	    if (guid != null) {
	      this.pushStackLiteral(this.programExpression(guid));
	    } else {
	      this.pushStackLiteral(null);
	    }
	  },

	  // [registerDecorator]
	  //
	  // On stack, before: hash, program, params..., ...
	  // On stack, after: ...
	  //
	  // Pops off the decorator's parameters, invokes the decorator,
	  // and inserts the decorator into the decorators list.
	  registerDecorator: function registerDecorator(paramSize, name) {
	    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
	        options = this.setupHelperArgs(name, paramSize);

	    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
	  },

	  // [invokeHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // Pops off the helper's parameters, invokes the helper,
	  // and pushes the helper's return value onto the stack.
	  //
	  // If the helper is not found, `helperMissing` is called.
	  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
	    var nonHelper = this.popStack(),
	        helper = this.setupHelper(paramSize, name),
	        simple = isSimple ? [helper.name, ' || '] : '';

	    var lookup = ['('].concat(simple, nonHelper);
	    if (!this.options.strict) {
	      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
	    }
	    lookup.push(')');

	    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
	  },

	  // [invokeKnownHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // This operation is used when the helper is known to exist,
	  // so a `helperMissing` fallback is not required.
	  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
	    var helper = this.setupHelper(paramSize, name);
	    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
	  },

	  // [invokeAmbiguous]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of disambiguation
	  //
	  // This operation is used when an expression like `{{foo}}`
	  // is provided, but we don't know at compile-time whether it
	  // is a helper or a path.
	  //
	  // This operation emits more code than the other options,
	  // and can be avoided by passing the `knownHelpers` and
	  // `knownHelpersOnly` flags at compile-time.
	  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
	    this.useRegister('helper');

	    var nonHelper = this.popStack();

	    this.emptyHash();
	    var helper = this.setupHelper(0, name, helperCall);

	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

	    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
	    if (!this.options.strict) {
	      lookup[0] = '(helper = ';
	      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
	    }

	    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
	  },

	  // [invokePartial]
	  //
	  // On stack, before: context, ...
	  // On stack after: result of partial invocation
	  //
	  // This operation pops off a context, invokes a partial with that context,
	  // and pushes the result of the invocation back.
	  invokePartial: function invokePartial(isDynamic, name, indent) {
	    var params = [],
	        options = this.setupParams(name, 1, params);

	    if (isDynamic) {
	      name = this.popStack();
	      delete options.name;
	    }

	    if (indent) {
	      options.indent = JSON.stringify(indent);
	    }
	    options.helpers = 'helpers';
	    options.partials = 'partials';
	    options.decorators = 'container.decorators';

	    if (!isDynamic) {
	      params.unshift(this.nameLookup('partials', name, 'partial'));
	    } else {
	      params.unshift(name);
	    }

	    if (this.options.compat) {
	      options.depths = 'depths';
	    }
	    options = this.objectLiteral(options);
	    params.push(options);

	    this.push(this.source.functionCall('container.invokePartial', '', params));
	  },

	  // [assignToHash]
	  //
	  // On stack, before: value, ..., hash, ...
	  // On stack, after: ..., hash, ...
	  //
	  // Pops a value off the stack and assigns it to the current hash
	  assignToHash: function assignToHash(key) {
	    var value = this.popStack(),
	        context = undefined,
	        type = undefined,
	        id = undefined;

	    if (this.trackIds) {
	      id = this.popStack();
	    }
	    if (this.stringParams) {
	      type = this.popStack();
	      context = this.popStack();
	    }

	    var hash = this.hash;
	    if (context) {
	      hash.contexts[key] = context;
	    }
	    if (type) {
	      hash.types[key] = type;
	    }
	    if (id) {
	      hash.ids[key] = id;
	    }
	    hash.values[key] = value;
	  },

	  pushId: function pushId(type, name, child) {
	    if (type === 'BlockParam') {
	      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
	    } else if (type === 'PathExpression') {
	      this.pushString(name);
	    } else if (type === 'SubExpression') {
	      this.pushStackLiteral('true');
	    } else {
	      this.pushStackLiteral('null');
	    }
	  },

	  // HELPERS

	  compiler: JavaScriptCompiler,

	  compileChildren: function compileChildren(environment, options) {
	    var children = environment.children,
	        child = undefined,
	        compiler = undefined;

	    for (var i = 0, l = children.length; i < l; i++) {
	      child = children[i];
	      compiler = new this.compiler(); // eslint-disable-line new-cap

	      var existing = this.matchExistingProgram(child);

	      if (existing == null) {
	        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
	        var index = this.context.programs.length;
	        child.index = index;
	        child.name = 'program' + index;
	        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
	        this.context.decorators[index] = compiler.decorators;
	        this.context.environments[index] = child;

	        this.useDepths = this.useDepths || compiler.useDepths;
	        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
	        child.useDepths = this.useDepths;
	        child.useBlockParams = this.useBlockParams;
	      } else {
	        child.index = existing.index;
	        child.name = 'program' + existing.index;

	        this.useDepths = this.useDepths || existing.useDepths;
	        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
	      }
	    }
	  },
	  matchExistingProgram: function matchExistingProgram(child) {
	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
	      var environment = this.context.environments[i];
	      if (environment && environment.equals(child)) {
	        return environment;
	      }
	    }
	  },

	  programExpression: function programExpression(guid) {
	    var child = this.environment.children[guid],
	        programParams = [child.index, 'data', child.blockParams];

	    if (this.useBlockParams || this.useDepths) {
	      programParams.push('blockParams');
	    }
	    if (this.useDepths) {
	      programParams.push('depths');
	    }

	    return 'container.program(' + programParams.join(', ') + ')';
	  },

	  useRegister: function useRegister(name) {
	    if (!this.registers[name]) {
	      this.registers[name] = true;
	      this.registers.list.push(name);
	    }
	  },

	  push: function push(expr) {
	    if (!(expr instanceof Literal)) {
	      expr = this.source.wrap(expr);
	    }

	    this.inlineStack.push(expr);
	    return expr;
	  },

	  pushStackLiteral: function pushStackLiteral(item) {
	    this.push(new Literal(item));
	  },

	  pushSource: function pushSource(source) {
	    if (this.pendingContent) {
	      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
	      this.pendingContent = undefined;
	    }

	    if (source) {
	      this.source.push(source);
	    }
	  },

	  replaceStack: function replaceStack(callback) {
	    var prefix = ['('],
	        stack = undefined,
	        createdStack = undefined,
	        usedLiteral = undefined;

	    /* istanbul ignore next */
	    if (!this.isInline()) {
	      throw new _exception2['default']('replaceStack on non-inline');
	    }

	    // We want to merge the inline statement into the replacement statement via ','
	    var top = this.popStack(true);

	    if (top instanceof Literal) {
	      // Literals do not need to be inlined
	      stack = [top.value];
	      prefix = ['(', stack];
	      usedLiteral = true;
	    } else {
	      // Get or create the current stack name for use by the inline
	      createdStack = true;
	      var _name = this.incrStack();

	      prefix = ['((', this.push(_name), ' = ', top, ')'];
	      stack = this.topStack();
	    }

	    var item = callback.call(this, stack);

	    if (!usedLiteral) {
	      this.popStack();
	    }
	    if (createdStack) {
	      this.stackSlot--;
	    }
	    this.push(prefix.concat(item, ')'));
	  },

	  incrStack: function incrStack() {
	    this.stackSlot++;
	    if (this.stackSlot > this.stackVars.length) {
	      this.stackVars.push('stack' + this.stackSlot);
	    }
	    return this.topStackName();
	  },
	  topStackName: function topStackName() {
	    return 'stack' + this.stackSlot;
	  },
	  flushInline: function flushInline() {
	    var inlineStack = this.inlineStack;
	    this.inlineStack = [];
	    for (var i = 0, len = inlineStack.length; i < len; i++) {
	      var entry = inlineStack[i];
	      /* istanbul ignore if */
	      if (entry instanceof Literal) {
	        this.compileStack.push(entry);
	      } else {
	        var stack = this.incrStack();
	        this.pushSource([stack, ' = ', entry, ';']);
	        this.compileStack.push(stack);
	      }
	    }
	  },
	  isInline: function isInline() {
	    return this.inlineStack.length;
	  },

	  popStack: function popStack(wrapped) {
	    var inline = this.isInline(),
	        item = (inline ? this.inlineStack : this.compileStack).pop();

	    if (!wrapped && item instanceof Literal) {
	      return item.value;
	    } else {
	      if (!inline) {
	        /* istanbul ignore next */
	        if (!this.stackSlot) {
	          throw new _exception2['default']('Invalid stack pop');
	        }
	        this.stackSlot--;
	      }
	      return item;
	    }
	  },

	  topStack: function topStack() {
	    var stack = this.isInline() ? this.inlineStack : this.compileStack,
	        item = stack[stack.length - 1];

	    /* istanbul ignore if */
	    if (item instanceof Literal) {
	      return item.value;
	    } else {
	      return item;
	    }
	  },

	  contextName: function contextName(context) {
	    if (this.useDepths && context) {
	      return 'depths[' + context + ']';
	    } else {
	      return 'depth' + context;
	    }
	  },

	  quotedString: function quotedString(str) {
	    return this.source.quotedString(str);
	  },

	  objectLiteral: function objectLiteral(obj) {
	    return this.source.objectLiteral(obj);
	  },

	  aliasable: function aliasable(name) {
	    var ret = this.aliases[name];
	    if (ret) {
	      ret.referenceCount++;
	      return ret;
	    }

	    ret = this.aliases[name] = this.source.wrap(name);
	    ret.aliasable = true;
	    ret.referenceCount = 1;

	    return ret;
	  },

	  setupHelper: function setupHelper(paramSize, name, blockHelper) {
	    var params = [],
	        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
	    var foundHelper = this.nameLookup('helpers', name, 'helper'),
	        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

	    return {
	      params: params,
	      paramsInit: paramsInit,
	      name: foundHelper,
	      callParams: [callContext].concat(params)
	    };
	  },

	  setupParams: function setupParams(helper, paramSize, params) {
	    var options = {},
	        contexts = [],
	        types = [],
	        ids = [],
	        objectArgs = !params,
	        param = undefined;

	    if (objectArgs) {
	      params = [];
	    }

	    options.name = this.quotedString(helper);
	    options.hash = this.popStack();

	    if (this.trackIds) {
	      options.hashIds = this.popStack();
	    }
	    if (this.stringParams) {
	      options.hashTypes = this.popStack();
	      options.hashContexts = this.popStack();
	    }

	    var inverse = this.popStack(),
	        program = this.popStack();

	    // Avoid setting fn and inverse if neither are set. This allows
	    // helpers to do a check for `if (options.fn)`
	    if (program || inverse) {
	      options.fn = program || 'container.noop';
	      options.inverse = inverse || 'container.noop';
	    }

	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
	    // so we need to pop them off the stack in reverse order
	    var i = paramSize;
	    while (i--) {
	      param = this.popStack();
	      params[i] = param;

	      if (this.trackIds) {
	        ids[i] = this.popStack();
	      }
	      if (this.stringParams) {
	        types[i] = this.popStack();
	        contexts[i] = this.popStack();
	      }
	    }

	    if (objectArgs) {
	      options.args = this.source.generateArray(params);
	    }

	    if (this.trackIds) {
	      options.ids = this.source.generateArray(ids);
	    }
	    if (this.stringParams) {
	      options.types = this.source.generateArray(types);
	      options.contexts = this.source.generateArray(contexts);
	    }

	    if (this.options.data) {
	      options.data = 'data';
	    }
	    if (this.useBlockParams) {
	      options.blockParams = 'blockParams';
	    }
	    return options;
	  },

	  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
	    var options = this.setupParams(helper, paramSize, params);
	    options = this.objectLiteral(options);
	    if (useRegister) {
	      this.useRegister('options');
	      params.push('options');
	      return ['options=', options];
	    } else if (params) {
	      params.push(options);
	      return '';
	    } else {
	      return options;
	    }
	  }
	};

	(function () {
	  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

	  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

	  for (var i = 0, l = reservedWords.length; i < l; i++) {
	    compilerWords[reservedWords[i]] = true;
	  }
	})();

	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
	  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};

	function strictLookup(requireTerminal, compiler, parts, type) {
	  var stack = compiler.popStack(),
	      i = 0,
	      len = parts.length;
	  if (requireTerminal) {
	    len--;
	  }

	  for (; i < len; i++) {
	    stack = compiler.nameLookup(stack, parts[i], type);
	  }

	  if (requireTerminal) {
	    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
	  } else {
	    return stack;
	  }
	}

	exports['default'] = JavaScriptCompiler;
	module.exports = exports['default'];

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* global define */
	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var SourceNode = undefined;

	try {
	  /* istanbul ignore next */
	  if (false) {
	    // We don't support this in AMD environments. For these environments, we asusme that
	    // they are running on the browser and thus have no need for the source-map library.
	    var SourceMap = require('source-map');
	    SourceNode = SourceMap.SourceNode;
	  }
	} catch (err) {}
	/* NOP */

	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
	  SourceNode = function (line, column, srcFile, chunks) {
	    this.src = '';
	    if (chunks) {
	      this.add(chunks);
	    }
	  };
	  /* istanbul ignore next */
	  SourceNode.prototype = {
	    add: function add(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src += chunks;
	    },
	    prepend: function prepend(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src = chunks + this.src;
	    },
	    toStringWithSourceMap: function toStringWithSourceMap() {
	      return { code: this.toString() };
	    },
	    toString: function toString() {
	      return this.src;
	    }
	  };
	}

	function castChunk(chunk, codeGen, loc) {
	  if (_utils.isArray(chunk)) {
	    var ret = [];

	    for (var i = 0, len = chunk.length; i < len; i++) {
	      ret.push(codeGen.wrap(chunk[i], loc));
	    }
	    return ret;
	  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
	    // Handle primitives that the SourceNode will throw up on
	    return chunk + '';
	  }
	  return chunk;
	}

	function CodeGen(srcFile) {
	  this.srcFile = srcFile;
	  this.source = [];
	}

	CodeGen.prototype = {
	  isEmpty: function isEmpty() {
	    return !this.source.length;
	  },
	  prepend: function prepend(source, loc) {
	    this.source.unshift(this.wrap(source, loc));
	  },
	  push: function push(source, loc) {
	    this.source.push(this.wrap(source, loc));
	  },

	  merge: function merge() {
	    var source = this.empty();
	    this.each(function (line) {
	      source.add(['  ', line, '\n']);
	    });
	    return source;
	  },

	  each: function each(iter) {
	    for (var i = 0, len = this.source.length; i < len; i++) {
	      iter(this.source[i]);
	    }
	  },

	  empty: function empty() {
	    var loc = this.currentLocation || { start: {} };
	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
	  },
	  wrap: function wrap(chunk) {
	    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

	    if (chunk instanceof SourceNode) {
	      return chunk;
	    }

	    chunk = castChunk(chunk, this, loc);

	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
	  },

	  functionCall: function functionCall(fn, type, params) {
	    params = this.generateList(params);
	    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
	  },

	  quotedString: function quotedString(str) {
	    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
	    .replace(/\u2029/g, '\\u2029') + '"';
	  },

	  objectLiteral: function objectLiteral(obj) {
	    var pairs = [];

	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        var value = castChunk(obj[key], this);
	        if (value !== 'undefined') {
	          pairs.push([this.quotedString(key), ':', value]);
	        }
	      }
	    }

	    var ret = this.generateList(pairs);
	    ret.prepend('{');
	    ret.add('}');
	    return ret;
	  },

	  generateList: function generateList(entries) {
	    var ret = this.empty();

	    for (var i = 0, len = entries.length; i < len; i++) {
	      if (i) {
	        ret.add(',');
	      }

	      ret.add(castChunk(entries[i], this));
	    }

	    return ret;
	  },

	  generateArray: function generateArray(entries) {
	    var ret = this.generateList(entries);
	    ret.prepend('[');
	    ret.add(']');

	    return ret;
	  }
	};

	exports['default'] = CodeGen;
	module.exports = exports['default'];

/***/ })
/******/ ])
});
;
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.dragdrop=e():t.dragdrop=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"start",function(){return i});var r=n(1),o=n(4),i=(n.n(o),r.a)},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.d(e,"a",function(){return c});var a=n(2),s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=function(t){function e(){r(this,e);var t=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));t.elements=t.getElements();for(var n=arguments.length,i=Array(n),a=0;a<n;a++)i[a]=arguments[a];return t.treatParams(i),t.targets=document.querySelectorAll(t.elements.targets),t.elements=document.querySelectorAll(t.elements.element),t.orders=[],t.onInit(),t}return i(e,t),u(e,[{key:"getElements",value:function(){return{element:".dragdrop",targets:".dragdrop-target"}}},{key:"mergeElements",value:function(t){Object.assign(this.elements,t)}},{key:"treatParams",value:function(t){1==t.length?"object"===s(t[0])?this.mergeElements(t[0]):"function"==typeof t[0]&&t[0](document,this):t.length>1&&"object"==s(t[0])&&(this.mergeElements(t[0]),t[1](document,this))}},{key:"dispatchEventsTarget",value:function(){var t=this,e=1;[].forEach.call(this.targets,function(n){n.setAttribute("dragdrop","target"),n.setAttribute("dragdrop-order",e),n.id="dragdrop-target-"+e,t.drop(n),t.dragover(n),t.dragleave(n),t.dragend(n),e++})}},{key:"dispatchEventsElements",value:function(){var t=this,e=1;[].forEach.call(this.elements,function(n){n.setAttribute("dragdrop","element"),n.setAttribute("draggable","true"),n.id="dragdrop-"+e,t.dragstart(n),e++})}},{key:"onInit",value:function(){this.dispatchEventsTarget(),this.dispatchEventsElements(),this.getOrders()}}]),e}(a.a)},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.d(e,"a",function(){return u});var a=n(3),s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=function(t){function e(){return r(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return i(e,t),s(e,[{key:"dragstart",value:function(t){var e=this;t.addEventListener("dragstart",function(t){var n=this.parentNode;e.opacityOn(this),t.dataTransfer.setData("parent",n.id),t.dataTransfer.setData("text/plain",this.id)})}},{key:"drop",value:function(t){var e=this;t.addEventListener("drop",function(t){var n=t.dataTransfer.getData("text"),r=document.getElementById(n);e.opacityOff(),e.changePosition(t,this.childNodes),this.appendChild(r),this.classList.contains("over")||this.classList.add("over"),e.getOrders()})}},{key:"dragover",value:function(t){t.addEventListener("dragover",function(t){t.preventDefault(),this.classList.contains("over")||this.classList.add("over")})}},{key:"dragleave",value:function(t){t.addEventListener("dragleave",function(t){this.classList.contains("over")&&this.classList.remove("over")})}},{key:"dragend",value:function(t){t.addEventListener("dragend",function(t){this.classList.contains("over")&&this.classList.remove("over")})}}]),e}(a.a)},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.d(e,"a",function(){return i});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(){function t(){r(this,t)}return o(t,[{key:"getOrders",value:function(){var t=this;this.orders=[],[].forEach.call(this.targets,function(e){e.childNodes.length&&e.childNodes.forEach(function(n){if(n.tagName){var r=n.getAttribute("data-id")||0,o=parseInt(e.getAttribute("dragdrop-order"));t.orders.push({elementId:r,order:o})}})})}},{key:"changePosition",value:function(t,e){if(e.length){var n=t.dataTransfer.getData("parent"),r=document.getElementById(n);e.forEach(function(t){t.tagName&&r.appendChild(t)})}}},{key:"opacityOn",value:function(t){[].forEach.call(this.elements,function(e){e==t||e.classList.contains("out")||e.classList.add("out")})}},{key:"opacityOff",value:function(){[].forEach.call(this.elements,function(t){t.classList.contains("out")&&t.classList.remove("out")})}},{key:"reOrder",value:function(t){var e=event.dataTransfer.getData("parent"),n=this.getTargetPosition(t.id),r=this.getTargetPosition(e);if(n>r)for(var o=r;o<n;o++)console.log(this.targets[o]);else for(var i=r;i>n;i--)console.log(this.targets[i-1])}},{key:"getTargetPosition",value:function(t){return t.split("-")[2]}}]),t}()},function(t,e,n){var r=n(5);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0};o.transform=void 0;n(7)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){e=t.exports=n(6)(void 0),e.push([t.i,"[dragdrop] {\n    transition: all 0.4s ease-out;\n    -moz-transition: all 0.4s ease-out;\n    -webkit-transition: all 0.4s ease-out;\n    cursor: move;\n}\n\n[dragdrop].out {\n    opacity: 0.5;\n}\n\n[dragdrop].over {\n    border: 3px dashed #333;\n    transform: scale(1.03);\n    -moz-transform: scale(1.03);\n    -webkit-transform: scale(1.03);\n}",""])},function(t,e){function n(t,e){var n=t[1]||"",o=t[3];if(!o)return n;if(e&&"function"==typeof btoa){var i=r(o);return[n].concat(o.sources.map(function(t){return"/*# sourceURL="+o.sourceRoot+t+" */"})).concat([i]).join("\n")}return[n].join("\n")}function r(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r=n(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=h[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(f(r.parts[i],e))}else{for(var a=[],i=0;i<r.parts.length;i++)a.push(f(r.parts[i],e));h[r.id]={id:r.id,refs:1,parts:a}}}}function o(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s=i[1],u=i[2],c=i[3],f={css:s,media:u,sourceMap:c};r[a]?r[a].parts.push(f):n.push(r[a]={id:a,parts:[f]})}return n}function i(t,e){var n=y(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=m[m.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),m.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=y(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function a(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=m.indexOf(t);e>=0&&m.splice(e,1)}function s(t){var e=document.createElement("style");return t.attrs.type="text/css",c(e,t.attrs),i(t,e),e}function u(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",c(e,t.attrs),i(t,e),e}function c(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function f(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var c=b++;n=g||(g=s(e)),r=l.bind(null,n,c,!1),o=l.bind(null,n,c,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=u(e),r=p.bind(null,n,e),o=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(e),r=d.bind(null,n),o=function(){a(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}function l(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=O(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function p(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=w(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},v=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),y=function(t){var e={};return function(n){if(void 0===e[n]){var r=t.call(this,n);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[n]=r}return e[n]}}(function(t){return document.querySelector(t)}),g=null,b=0,m=[],w=n(8);t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");e=e||{},e.attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||(e.singleton=v()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=o(t,e);return r(n,e),function(t){for(var i=[],a=0;a<n.length;a++){var s=n[a],u=h[s.id];u.refs--,i.push(u)}if(t){r(o(t,e),e)}for(var a=0;a<i.length;a++){var u=i[a];if(0===u.refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete h[u.id]}}}};var O=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return t;var i;return i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}}])});
/*
    JavaScript autoComplete v1.0.4
    Copyright (c) 2014 Simon Steinberger / Pixabay
    GitHub: https://github.com/Pixabay/JavaScript-autoComplete
    License: http://www.opensource.org/licenses/mit-license.php
*/

var autoComplete = (function(){
    // "use strict";
    function autoComplete(options){
        if (!document.querySelector) return;

        // helpers
        function hasClass(el, className){ return el.classList ? el.classList.contains(className) : new RegExp('\\b'+ className+'\\b').test(el.className); }

        function addEvent(el, type, handler){
            if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
        }
        function removeEvent(el, type, handler){
            // if (el.removeEventListener) not working in IE11
            if (el.detachEvent) el.detachEvent('on'+type, handler); else el.removeEventListener(type, handler);
        }
        function live(elClass, event, cb, context){
            addEvent(context || document, event, function(e){
                var found, el = e.target || e.srcElement;
                while (el && !(found = hasClass(el, elClass))) el = el.parentElement;
                if (found) cb.call(el, e);
            });
        }

        var o = {
            selector: 0,
            source: 0,
            minChars: 3,
            delay: 150,
            offsetLeft: 0,
            offsetTop: 1,
            cache: 1,
            menuClass: '',
            renderItem: function (item, search){
                // escape special characters
                search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
                return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
            },
            onSelect: function(e, term, item){}
        };
        for (var k in options) { if (options.hasOwnProperty(k)) o[k] = options[k]; }

        // init
        var elems = typeof o.selector == 'object' ? [o.selector] : document.querySelectorAll(o.selector);
        for (var i=0; i<elems.length; i++) {
            var that = elems[i];

            // create suggestions container "sc"
            that.sc = document.createElement('div');
            that.sc.className = 'autocomplete-suggestions '+o.menuClass;

            that.autocompleteAttr = that.getAttribute('autocomplete');
            that.setAttribute('autocomplete', 'off');
            that.cache = {};
            that.last_val = '';

            that.updateSC = function(resize, next){
                var rect = that.getBoundingClientRect();
                that.sc.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';
                that.sc.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';
                that.sc.style.width = Math.round(rect.right - rect.left) + 'px'; // outerWidth
                if (!resize) {
                    that.sc.style.display = 'block';
                    if (!that.sc.maxHeight) { that.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(that.sc, null) : that.sc.currentStyle).maxHeight); }
                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = that.sc.querySelector('.autocomplete-suggestion').offsetHeight;
                    if (that.sc.suggestionHeight)
                        if (!next) that.sc.scrollTop = 0;
                        else {
                            var scrTop = that.sc.scrollTop, selTop = next.getBoundingClientRect().top - that.sc.getBoundingClientRect().top;
                            if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)
                                that.sc.scrollTop = selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight;
                            else if (selTop < 0)
                                that.sc.scrollTop = selTop + scrTop;
                        }
                }
            }
            addEvent(window, 'resize', that.updateSC);
            document.body.appendChild(that.sc);

            live('autocomplete-suggestion', 'mouseleave', function(e){
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) setTimeout(function(){ sel.className = sel.className.replace('selected', ''); }, 20);
            }, that.sc);

            live('autocomplete-suggestion', 'mouseover', function(e){
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel) sel.className = sel.className.replace('selected', '');
                this.className += ' selected';
            }, that.sc);

            live('autocomplete-suggestion', 'mousedown', function(e){
                if (hasClass(this, 'autocomplete-suggestion')) { // else outside click
                    var v = this.getAttribute('data-val');
                    that.value = v;
                    o.onSelect(e, v, this);
                    that.sc.style.display = 'none';
                }
            }, that.sc);

            that.blurHandler = function(){
                try { var over_sb = document.querySelector('.autocomplete-suggestions:hover'); } catch(e){ var over_sb = 0; }
                if (!over_sb) {
                    that.last_val = that.value;
                    that.sc.style.display = 'none';
                    setTimeout(function(){ that.sc.style.display = 'none'; }, 350); // hide suggestions on fast input
                } else if (that !== document.activeElement) setTimeout(function(){ that.focus(); }, 20);
            };
            addEvent(that, 'blur', that.blurHandler);

            var suggest = function(data){
                var val = that.value;
                that.cache[val] = data;
                if (data.length && val.length >= o.minChars) {
                    var s = '';
                    for (var i=0;i<data.length;i++) s += o.renderItem(data[i], val);
                    that.sc.innerHTML = s;
                    that.updateSC(0);
                }
                else
                    that.sc.style.display = 'none';
            }

            that.keydownHandler = function(e){
                var key = window.event ? e.keyCode : e.which;
                // down (40), up (38)
                if ((key == 40 || key == 38) && that.sc.innerHTML) {
                    var next, sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (!sel) {
                        next = (key == 40) ? that.sc.querySelector('.autocomplete-suggestion') : that.sc.childNodes[that.sc.childNodes.length - 1]; // first : last
                        next.className += ' selected';
                        that.value = next.getAttribute('data-val');
                    } else {
                        next = (key == 40) ? sel.nextSibling : sel.previousSibling;
                        if (next) {
                            sel.className = sel.className.replace('selected', '');
                            next.className += ' selected';
                            that.value = next.getAttribute('data-val');
                        }
                        else { sel.className = sel.className.replace('selected', ''); that.value = that.last_val; next = 0; }
                    }
                    that.updateSC(0, next);
                    return false;
                }
                // esc
                else if (key == 27) { that.value = that.last_val; that.sc.style.display = 'none'; }
                // enter
                else if (key == 13 || key == 9) {
                    var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (sel && that.sc.style.display != 'none') { o.onSelect(e, sel.getAttribute('data-val'), sel); setTimeout(function(){ that.sc.style.display = 'none'; }, 20); }
                }
            };
            addEvent(that, 'keydown', that.keydownHandler);

            that.keyupHandler = function(e){
                var key = window.event ? e.keyCode : e.which;
                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {
                    var val = that.value;
                    if (val.length >= o.minChars) {
                        if (val != that.last_val) {
                            that.last_val = val;
                            clearTimeout(that.timer);
                            if (o.cache) {
                                if (val in that.cache) { suggest(that.cache[val]); return; }
                                // no requests if previous suggestions were empty
                                for (var i=1; i<val.length-o.minChars; i++) {
                                    var part = val.slice(0, val.length-i);
                                    if (part in that.cache && !that.cache[part].length) { suggest([]); return; }
                                }
                            }
                            that.timer = setTimeout(function(){ o.source(val, suggest) }, o.delay);
                        }
                    } else {
                        that.last_val = val;
                        that.sc.style.display = 'none';
                    }
                }
            };
            addEvent(that, 'keyup', that.keyupHandler);

            that.focusHandler = function(e){
                that.last_val = '\n';
                that.keyupHandler(e)
            };
            if (!o.minChars) addEvent(that, 'focus', that.focusHandler);
        }

        // public destroy method
        this.destroy = function(){
            for (var i=0; i<elems.length; i++) {
                var that = elems[i];
                removeEvent(window, 'resize', that.updateSC);
                removeEvent(that, 'blur', that.blurHandler);
                removeEvent(that, 'focus', that.focusHandler);
                removeEvent(that, 'keydown', that.keydownHandler);
                removeEvent(that, 'keyup', that.keyupHandler);
                if (that.autocompleteAttr)
                    that.setAttribute('autocomplete', that.autocompleteAttr);
                else
                    that.removeAttribute('autocomplete');
                document.body.removeChild(that.sc);
                that = null;
            }
        };
    }
    return autoComplete;
})();

(function(){
    if (typeof define === 'function' && define.amd)
        define('autoComplete', function () { return autoComplete; });
    else if (typeof module !== 'undefined' && module.exports)
        module.exports = autoComplete;
    else
        window.autoComplete = autoComplete;
})();

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t) {
  var e = {};function i(n) {
    if (e[n]) return e[n].exports;var s = e[n] = { i: n, l: !1, exports: {} };return t[n].call(s.exports, s, s.exports, i), s.l = !0, s.exports;
  }i.m = t, i.c = e, i.d = function (t, e, n) {
    i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });
  }, i.r = function (t) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 });
  }, i.t = function (t, e) {
    if (1 & e && (t = i(t)), 8 & e) return t;if (4 & e && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t && t.__esModule) return t;var n = Object.create(null);if (i.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var s in t) {
      i.d(n, s, function (e) {
        return t[e];
      }.bind(null, s));
    }return n;
  }, i.n = function (t) {
    var e = t && t.__esModule ? function () {
      return t.default;
    } : function () {
      return t;
    };return i.d(e, "a", e), e;
  }, i.o = function (t, e) {
    return Object.prototype.hasOwnProperty.call(t, e);
  }, i.p = "", i(i.s = 12);
}([function (t, e, i) {
  var n;
  /*!
   * jQuery JavaScript Library v3.3.1
   * https://jquery.com/
   *
   * Includes Sizzle.js
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2018-01-20T17:24Z
   */
  /*!
   * jQuery JavaScript Library v3.3.1
   * https://jquery.com/
   *
   * Includes Sizzle.js
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2018-01-20T17:24Z
   */
  !function (e, i) {
    "use strict";
    "object" == _typeof(t.exports) ? t.exports = e.document ? i(e, !0) : function (t) {
      if (!t.document) throw new Error("jQuery requires a window with a document");return i(t);
    } : i(e);
  }("undefined" != typeof window ? window : this, function (i, s) {
    "use strict";
    var r = [],
        o = i.document,
        a = Object.getPrototypeOf,
        l = r.slice,
        u = r.concat,
        c = r.push,
        h = r.indexOf,
        d = {},
        p = d.toString,
        f = d.hasOwnProperty,
        g = f.toString,
        m = g.call(Object),
        v = {},
        _ = function _(t) {
      return "function" == typeof t && "number" != typeof t.nodeType;
    },
        b = function b(t) {
      return null != t && t === t.window;
    },
        y = { type: !0, src: !0, noModule: !0 };function k(t, e, i) {
      var n,
          s = (e = e || o).createElement("script");if (s.text = t, i) for (n in y) {
        i[n] && (s[n] = i[n]);
      }e.head.appendChild(s).parentNode.removeChild(s);
    }function w(t) {
      return null == t ? t + "" : "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) || "function" == typeof t ? d[p.call(t)] || "object" : typeof t === "undefined" ? "undefined" : _typeof(t);
    }var x = function x(t, e) {
      return new x.fn.init(t, e);
    },
        C = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function D(t) {
      var e = !!t && "length" in t && t.length,
          i = w(t);return !_(t) && !b(t) && ("array" === i || 0 === e || "number" == typeof e && e > 0 && e - 1 in t);
    }x.fn = x.prototype = { jquery: "3.3.1", constructor: x, length: 0, toArray: function toArray() {
        return l.call(this);
      }, get: function get(t) {
        return null == t ? l.call(this) : t < 0 ? this[t + this.length] : this[t];
      }, pushStack: function pushStack(t) {
        var e = x.merge(this.constructor(), t);return e.prevObject = this, e;
      }, each: function each(t) {
        return x.each(this, t);
      }, map: function map(t) {
        return this.pushStack(x.map(this, function (e, i) {
          return t.call(e, i, e);
        }));
      }, slice: function slice() {
        return this.pushStack(l.apply(this, arguments));
      }, first: function first() {
        return this.eq(0);
      }, last: function last() {
        return this.eq(-1);
      }, eq: function eq(t) {
        var e = this.length,
            i = +t + (t < 0 ? e : 0);return this.pushStack(i >= 0 && i < e ? [this[i]] : []);
      }, end: function end() {
        return this.prevObject || this.constructor();
      }, push: c, sort: r.sort, splice: r.splice }, x.extend = x.fn.extend = function () {
      var t,
          e,
          i,
          n,
          s,
          r,
          o = arguments[0] || {},
          a = 1,
          l = arguments.length,
          u = !1;for ("boolean" == typeof o && (u = o, o = arguments[a] || {}, a++), "object" == (typeof o === "undefined" ? "undefined" : _typeof(o)) || _(o) || (o = {}), a === l && (o = this, a--); a < l; a++) {
        if (null != (t = arguments[a])) for (e in t) {
          i = o[e], o !== (n = t[e]) && (u && n && (x.isPlainObject(n) || (s = Array.isArray(n))) ? (s ? (s = !1, r = i && Array.isArray(i) ? i : []) : r = i && x.isPlainObject(i) ? i : {}, o[e] = x.extend(u, r, n)) : void 0 !== n && (o[e] = n));
        }
      }return o;
    }, x.extend({ expando: "jQuery" + ("3.3.1" + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(t) {
        throw new Error(t);
      }, noop: function noop() {}, isPlainObject: function isPlainObject(t) {
        var e, i;return !(!t || "[object Object]" !== p.call(t)) && (!(e = a(t)) || "function" == typeof (i = f.call(e, "constructor") && e.constructor) && g.call(i) === m);
      }, isEmptyObject: function isEmptyObject(t) {
        var e;for (e in t) {
          return !1;
        }return !0;
      }, globalEval: function globalEval(t) {
        k(t);
      }, each: function each(t, e) {
        var i,
            n = 0;if (D(t)) for (i = t.length; n < i && !1 !== e.call(t[n], n, t[n]); n++) {} else for (n in t) {
          if (!1 === e.call(t[n], n, t[n])) break;
        }return t;
      }, trim: function trim(t) {
        return null == t ? "" : (t + "").replace(C, "");
      }, makeArray: function makeArray(t, e) {
        var i = e || [];return null != t && (D(Object(t)) ? x.merge(i, "string" == typeof t ? [t] : t) : c.call(i, t)), i;
      }, inArray: function inArray(t, e, i) {
        return null == e ? -1 : h.call(e, t, i);
      }, merge: function merge(t, e) {
        for (var i = +e.length, n = 0, s = t.length; n < i; n++) {
          t[s++] = e[n];
        }return t.length = s, t;
      }, grep: function grep(t, e, i) {
        for (var n = [], s = 0, r = t.length, o = !i; s < r; s++) {
          !e(t[s], s) !== o && n.push(t[s]);
        }return n;
      }, map: function map(t, e, i) {
        var n,
            s,
            r = 0,
            o = [];if (D(t)) for (n = t.length; r < n; r++) {
          null != (s = e(t[r], r, i)) && o.push(s);
        } else for (r in t) {
          null != (s = e(t[r], r, i)) && o.push(s);
        }return u.apply([], o);
      }, guid: 1, support: v }), "function" == typeof Symbol && (x.fn[Symbol.iterator] = r[Symbol.iterator]), x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (t, e) {
      d["[object " + e + "]"] = e.toLowerCase();
    });var S =
    /*!
     * Sizzle CSS Selector Engine v2.3.3
     * https://sizzlejs.com/
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2016-08-08
     */
    function (t) {
      var e,
          i,
          n,
          s,
          r,
          o,
          a,
          l,
          u,
          c,
          h,
          d,
          p,
          f,
          g,
          m,
          v,
          _,
          b,
          y = "sizzle" + 1 * new Date(),
          k = t.document,
          w = 0,
          x = 0,
          C = ot(),
          D = ot(),
          S = ot(),
          T = function T(t, e) {
        return t === e && (h = !0), 0;
      },
          I = {}.hasOwnProperty,
          A = [],
          j = A.pop,
          M = A.push,
          P = A.push,
          E = A.slice,
          O = function O(t, e) {
        for (var i = 0, n = t.length; i < n; i++) {
          if (t[i] === e) return i;
        }return -1;
      },
          H = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
          N = "[\\x20\\t\\r\\n\\f]",
          B = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
          F = "\\[" + N + "*(" + B + ")(?:" + N + "*([*^$|!~]?=)" + N + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + B + "))|)" + N + "*\\]",
          L = ":(" + B + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + F + ")*)|.*)\\)|)",
          z = new RegExp(N + "+", "g"),
          W = new RegExp("^" + N + "+|((?:^|[^\\\\])(?:\\\\.)*)" + N + "+$", "g"),
          R = new RegExp("^" + N + "*," + N + "*"),
          $ = new RegExp("^" + N + "*([>+~]|" + N + ")" + N + "*"),
          q = new RegExp("=" + N + "*([^\\]'\"]*?)" + N + "*\\]", "g"),
          U = new RegExp(L),
          K = new RegExp("^" + B + "$"),
          Y = { ID: new RegExp("^#(" + B + ")"), CLASS: new RegExp("^\\.(" + B + ")"), TAG: new RegExp("^(" + B + "|[*])"), ATTR: new RegExp("^" + F), PSEUDO: new RegExp("^" + L), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + N + "*(even|odd|(([+-]|)(\\d*)n|)" + N + "*(?:([+-]|)" + N + "*(\\d+)|))" + N + "*\\)|)", "i"), bool: new RegExp("^(?:" + H + ")$", "i"), needsContext: new RegExp("^" + N + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + N + "*((?:-\\d)?\\d*)" + N + "*\\)|)(?=[^-]|$)", "i") },
          V = /^(?:input|select|textarea|button)$/i,
          G = /^h\d$/i,
          X = /^[^{]+\{\s*\[native \w/,
          J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
          Z = /[+~]/,
          Q = new RegExp("\\\\([\\da-f]{1,6}" + N + "?|(" + N + ")|.)", "ig"),
          tt = function tt(t, e, i) {
        var n = "0x" + e - 65536;return n != n || i ? e : n < 0 ? String.fromCharCode(n + 65536) : String.fromCharCode(n >> 10 | 55296, 1023 & n | 56320);
      },
          et = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
          it = function it(t, e) {
        return e ? "\0" === t ? "�" : t.slice(0, -1) + "\\" + t.charCodeAt(t.length - 1).toString(16) + " " : "\\" + t;
      },
          nt = function nt() {
        d();
      },
          st = _t(function (t) {
        return !0 === t.disabled && ("form" in t || "label" in t);
      }, { dir: "parentNode", next: "legend" });try {
        P.apply(A = E.call(k.childNodes), k.childNodes), A[k.childNodes.length].nodeType;
      } catch (t) {
        P = { apply: A.length ? function (t, e) {
            M.apply(t, E.call(e));
          } : function (t, e) {
            for (var i = t.length, n = 0; t[i++] = e[n++];) {}t.length = i - 1;
          } };
      }function rt(t, e, n, s) {
        var r,
            a,
            u,
            c,
            h,
            f,
            v,
            _ = e && e.ownerDocument,
            w = e ? e.nodeType : 9;if (n = n || [], "string" != typeof t || !t || 1 !== w && 9 !== w && 11 !== w) return n;if (!s && ((e ? e.ownerDocument || e : k) !== p && d(e), e = e || p, g)) {
          if (11 !== w && (h = J.exec(t))) if (r = h[1]) {
            if (9 === w) {
              if (!(u = e.getElementById(r))) return n;if (u.id === r) return n.push(u), n;
            } else if (_ && (u = _.getElementById(r)) && b(e, u) && u.id === r) return n.push(u), n;
          } else {
            if (h[2]) return P.apply(n, e.getElementsByTagName(t)), n;if ((r = h[3]) && i.getElementsByClassName && e.getElementsByClassName) return P.apply(n, e.getElementsByClassName(r)), n;
          }if (i.qsa && !S[t + " "] && (!m || !m.test(t))) {
            if (1 !== w) _ = e, v = t;else if ("object" !== e.nodeName.toLowerCase()) {
              for ((c = e.getAttribute("id")) ? c = c.replace(et, it) : e.setAttribute("id", c = y), a = (f = o(t)).length; a--;) {
                f[a] = "#" + c + " " + vt(f[a]);
              }v = f.join(","), _ = Z.test(t) && gt(e.parentNode) || e;
            }if (v) try {
              return P.apply(n, _.querySelectorAll(v)), n;
            } catch (t) {} finally {
              c === y && e.removeAttribute("id");
            }
          }
        }return l(t.replace(W, "$1"), e, n, s);
      }function ot() {
        var t = [];return function e(i, s) {
          return t.push(i + " ") > n.cacheLength && delete e[t.shift()], e[i + " "] = s;
        };
      }function at(t) {
        return t[y] = !0, t;
      }function lt(t) {
        var e = p.createElement("fieldset");try {
          return !!t(e);
        } catch (t) {
          return !1;
        } finally {
          e.parentNode && e.parentNode.removeChild(e), e = null;
        }
      }function ut(t, e) {
        for (var i = t.split("|"), s = i.length; s--;) {
          n.attrHandle[i[s]] = e;
        }
      }function ct(t, e) {
        var i = e && t,
            n = i && 1 === t.nodeType && 1 === e.nodeType && t.sourceIndex - e.sourceIndex;if (n) return n;if (i) for (; i = i.nextSibling;) {
          if (i === e) return -1;
        }return t ? 1 : -1;
      }function ht(t) {
        return function (e) {
          return "input" === e.nodeName.toLowerCase() && e.type === t;
        };
      }function dt(t) {
        return function (e) {
          var i = e.nodeName.toLowerCase();return ("input" === i || "button" === i) && e.type === t;
        };
      }function pt(t) {
        return function (e) {
          return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && st(e) === t : e.disabled === t : "label" in e && e.disabled === t;
        };
      }function ft(t) {
        return at(function (e) {
          return e = +e, at(function (i, n) {
            for (var s, r = t([], i.length, e), o = r.length; o--;) {
              i[s = r[o]] && (i[s] = !(n[s] = i[s]));
            }
          });
        });
      }function gt(t) {
        return t && void 0 !== t.getElementsByTagName && t;
      }for (e in i = rt.support = {}, r = rt.isXML = function (t) {
        var e = t && (t.ownerDocument || t).documentElement;return !!e && "HTML" !== e.nodeName;
      }, d = rt.setDocument = function (t) {
        var e,
            s,
            o = t ? t.ownerDocument || t : k;return o !== p && 9 === o.nodeType && o.documentElement ? (f = (p = o).documentElement, g = !r(p), k !== p && (s = p.defaultView) && s.top !== s && (s.addEventListener ? s.addEventListener("unload", nt, !1) : s.attachEvent && s.attachEvent("onunload", nt)), i.attributes = lt(function (t) {
          return t.className = "i", !t.getAttribute("className");
        }), i.getElementsByTagName = lt(function (t) {
          return t.appendChild(p.createComment("")), !t.getElementsByTagName("*").length;
        }), i.getElementsByClassName = X.test(p.getElementsByClassName), i.getById = lt(function (t) {
          return f.appendChild(t).id = y, !p.getElementsByName || !p.getElementsByName(y).length;
        }), i.getById ? (n.filter.ID = function (t) {
          var e = t.replace(Q, tt);return function (t) {
            return t.getAttribute("id") === e;
          };
        }, n.find.ID = function (t, e) {
          if (void 0 !== e.getElementById && g) {
            var i = e.getElementById(t);return i ? [i] : [];
          }
        }) : (n.filter.ID = function (t) {
          var e = t.replace(Q, tt);return function (t) {
            var i = void 0 !== t.getAttributeNode && t.getAttributeNode("id");return i && i.value === e;
          };
        }, n.find.ID = function (t, e) {
          if (void 0 !== e.getElementById && g) {
            var i,
                n,
                s,
                r = e.getElementById(t);if (r) {
              if ((i = r.getAttributeNode("id")) && i.value === t) return [r];for (s = e.getElementsByName(t), n = 0; r = s[n++];) {
                if ((i = r.getAttributeNode("id")) && i.value === t) return [r];
              }
            }return [];
          }
        }), n.find.TAG = i.getElementsByTagName ? function (t, e) {
          return void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t) : i.qsa ? e.querySelectorAll(t) : void 0;
        } : function (t, e) {
          var i,
              n = [],
              s = 0,
              r = e.getElementsByTagName(t);if ("*" === t) {
            for (; i = r[s++];) {
              1 === i.nodeType && n.push(i);
            }return n;
          }return r;
        }, n.find.CLASS = i.getElementsByClassName && function (t, e) {
          if (void 0 !== e.getElementsByClassName && g) return e.getElementsByClassName(t);
        }, v = [], m = [], (i.qsa = X.test(p.querySelectorAll)) && (lt(function (t) {
          f.appendChild(t).innerHTML = "<a id='" + y + "'></a><select id='" + y + "-\r\\' msallowcapture=''><option selected=''></option></select>", t.querySelectorAll("[msallowcapture^='']").length && m.push("[*^$]=" + N + "*(?:''|\"\")"), t.querySelectorAll("[selected]").length || m.push("\\[" + N + "*(?:value|" + H + ")"), t.querySelectorAll("[id~=" + y + "-]").length || m.push("~="), t.querySelectorAll(":checked").length || m.push(":checked"), t.querySelectorAll("a#" + y + "+*").length || m.push(".#.+[+~]");
        }), lt(function (t) {
          t.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e = p.createElement("input");e.setAttribute("type", "hidden"), t.appendChild(e).setAttribute("name", "D"), t.querySelectorAll("[name=d]").length && m.push("name" + N + "*[*^$|!~]?="), 2 !== t.querySelectorAll(":enabled").length && m.push(":enabled", ":disabled"), f.appendChild(t).disabled = !0, 2 !== t.querySelectorAll(":disabled").length && m.push(":enabled", ":disabled"), t.querySelectorAll("*,:x"), m.push(",.*:");
        })), (i.matchesSelector = X.test(_ = f.matches || f.webkitMatchesSelector || f.mozMatchesSelector || f.oMatchesSelector || f.msMatchesSelector)) && lt(function (t) {
          i.disconnectedMatch = _.call(t, "*"), _.call(t, "[s!='']:x"), v.push("!=", L);
        }), m = m.length && new RegExp(m.join("|")), v = v.length && new RegExp(v.join("|")), e = X.test(f.compareDocumentPosition), b = e || X.test(f.contains) ? function (t, e) {
          var i = 9 === t.nodeType ? t.documentElement : t,
              n = e && e.parentNode;return t === n || !(!n || 1 !== n.nodeType || !(i.contains ? i.contains(n) : t.compareDocumentPosition && 16 & t.compareDocumentPosition(n)));
        } : function (t, e) {
          if (e) for (; e = e.parentNode;) {
            if (e === t) return !0;
          }return !1;
        }, T = e ? function (t, e) {
          if (t === e) return h = !0, 0;var n = !t.compareDocumentPosition - !e.compareDocumentPosition;return n || (1 & (n = (t.ownerDocument || t) === (e.ownerDocument || e) ? t.compareDocumentPosition(e) : 1) || !i.sortDetached && e.compareDocumentPosition(t) === n ? t === p || t.ownerDocument === k && b(k, t) ? -1 : e === p || e.ownerDocument === k && b(k, e) ? 1 : c ? O(c, t) - O(c, e) : 0 : 4 & n ? -1 : 1);
        } : function (t, e) {
          if (t === e) return h = !0, 0;var i,
              n = 0,
              s = t.parentNode,
              r = e.parentNode,
              o = [t],
              a = [e];if (!s || !r) return t === p ? -1 : e === p ? 1 : s ? -1 : r ? 1 : c ? O(c, t) - O(c, e) : 0;if (s === r) return ct(t, e);for (i = t; i = i.parentNode;) {
            o.unshift(i);
          }for (i = e; i = i.parentNode;) {
            a.unshift(i);
          }for (; o[n] === a[n];) {
            n++;
          }return n ? ct(o[n], a[n]) : o[n] === k ? -1 : a[n] === k ? 1 : 0;
        }, p) : p;
      }, rt.matches = function (t, e) {
        return rt(t, null, null, e);
      }, rt.matchesSelector = function (t, e) {
        if ((t.ownerDocument || t) !== p && d(t), e = e.replace(q, "='$1']"), i.matchesSelector && g && !S[e + " "] && (!v || !v.test(e)) && (!m || !m.test(e))) try {
          var n = _.call(t, e);if (n || i.disconnectedMatch || t.document && 11 !== t.document.nodeType) return n;
        } catch (t) {}return rt(e, p, null, [t]).length > 0;
      }, rt.contains = function (t, e) {
        return (t.ownerDocument || t) !== p && d(t), b(t, e);
      }, rt.attr = function (t, e) {
        (t.ownerDocument || t) !== p && d(t);var s = n.attrHandle[e.toLowerCase()],
            r = s && I.call(n.attrHandle, e.toLowerCase()) ? s(t, e, !g) : void 0;return void 0 !== r ? r : i.attributes || !g ? t.getAttribute(e) : (r = t.getAttributeNode(e)) && r.specified ? r.value : null;
      }, rt.escape = function (t) {
        return (t + "").replace(et, it);
      }, rt.error = function (t) {
        throw new Error("Syntax error, unrecognized expression: " + t);
      }, rt.uniqueSort = function (t) {
        var e,
            n = [],
            s = 0,
            r = 0;if (h = !i.detectDuplicates, c = !i.sortStable && t.slice(0), t.sort(T), h) {
          for (; e = t[r++];) {
            e === t[r] && (s = n.push(r));
          }for (; s--;) {
            t.splice(n[s], 1);
          }
        }return c = null, t;
      }, s = rt.getText = function (t) {
        var e,
            i = "",
            n = 0,
            r = t.nodeType;if (r) {
          if (1 === r || 9 === r || 11 === r) {
            if ("string" == typeof t.textContent) return t.textContent;for (t = t.firstChild; t; t = t.nextSibling) {
              i += s(t);
            }
          } else if (3 === r || 4 === r) return t.nodeValue;
        } else for (; e = t[n++];) {
          i += s(e);
        }return i;
      }, (n = rt.selectors = { cacheLength: 50, createPseudo: at, match: Y, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(t) {
            return t[1] = t[1].replace(Q, tt), t[3] = (t[3] || t[4] || t[5] || "").replace(Q, tt), "~=" === t[2] && (t[3] = " " + t[3] + " "), t.slice(0, 4);
          }, CHILD: function CHILD(t) {
            return t[1] = t[1].toLowerCase(), "nth" === t[1].slice(0, 3) ? (t[3] || rt.error(t[0]), t[4] = +(t[4] ? t[5] + (t[6] || 1) : 2 * ("even" === t[3] || "odd" === t[3])), t[5] = +(t[7] + t[8] || "odd" === t[3])) : t[3] && rt.error(t[0]), t;
          }, PSEUDO: function PSEUDO(t) {
            var e,
                i = !t[6] && t[2];return Y.CHILD.test(t[0]) ? null : (t[3] ? t[2] = t[4] || t[5] || "" : i && U.test(i) && (e = o(i, !0)) && (e = i.indexOf(")", i.length - e) - i.length) && (t[0] = t[0].slice(0, e), t[2] = i.slice(0, e)), t.slice(0, 3));
          } }, filter: { TAG: function TAG(t) {
            var e = t.replace(Q, tt).toLowerCase();return "*" === t ? function () {
              return !0;
            } : function (t) {
              return t.nodeName && t.nodeName.toLowerCase() === e;
            };
          }, CLASS: function CLASS(t) {
            var e = C[t + " "];return e || (e = new RegExp("(^|" + N + ")" + t + "(" + N + "|$)")) && C(t, function (t) {
              return e.test("string" == typeof t.className && t.className || void 0 !== t.getAttribute && t.getAttribute("class") || "");
            });
          }, ATTR: function ATTR(t, e, i) {
            return function (n) {
              var s = rt.attr(n, t);return null == s ? "!=" === e : !e || (s += "", "=" === e ? s === i : "!=" === e ? s !== i : "^=" === e ? i && 0 === s.indexOf(i) : "*=" === e ? i && s.indexOf(i) > -1 : "$=" === e ? i && s.slice(-i.length) === i : "~=" === e ? (" " + s.replace(z, " ") + " ").indexOf(i) > -1 : "|=" === e && (s === i || s.slice(0, i.length + 1) === i + "-"));
            };
          }, CHILD: function CHILD(t, e, i, n, s) {
            var r = "nth" !== t.slice(0, 3),
                o = "last" !== t.slice(-4),
                a = "of-type" === e;return 1 === n && 0 === s ? function (t) {
              return !!t.parentNode;
            } : function (e, i, l) {
              var u,
                  c,
                  h,
                  d,
                  p,
                  f,
                  g = r !== o ? "nextSibling" : "previousSibling",
                  m = e.parentNode,
                  v = a && e.nodeName.toLowerCase(),
                  _ = !l && !a,
                  b = !1;if (m) {
                if (r) {
                  for (; g;) {
                    for (d = e; d = d[g];) {
                      if (a ? d.nodeName.toLowerCase() === v : 1 === d.nodeType) return !1;
                    }f = g = "only" === t && !f && "nextSibling";
                  }return !0;
                }if (f = [o ? m.firstChild : m.lastChild], o && _) {
                  for (b = (p = (u = (c = (h = (d = m)[y] || (d[y] = {}))[d.uniqueID] || (h[d.uniqueID] = {}))[t] || [])[0] === w && u[1]) && u[2], d = p && m.childNodes[p]; d = ++p && d && d[g] || (b = p = 0) || f.pop();) {
                    if (1 === d.nodeType && ++b && d === e) {
                      c[t] = [w, p, b];break;
                    }
                  }
                } else if (_ && (b = p = (u = (c = (h = (d = e)[y] || (d[y] = {}))[d.uniqueID] || (h[d.uniqueID] = {}))[t] || [])[0] === w && u[1]), !1 === b) for (; (d = ++p && d && d[g] || (b = p = 0) || f.pop()) && ((a ? d.nodeName.toLowerCase() !== v : 1 !== d.nodeType) || !++b || (_ && ((c = (h = d[y] || (d[y] = {}))[d.uniqueID] || (h[d.uniqueID] = {}))[t] = [w, b]), d !== e));) {}return (b -= s) === n || b % n == 0 && b / n >= 0;
              }
            };
          }, PSEUDO: function PSEUDO(t, e) {
            var i,
                s = n.pseudos[t] || n.setFilters[t.toLowerCase()] || rt.error("unsupported pseudo: " + t);return s[y] ? s(e) : s.length > 1 ? (i = [t, t, "", e], n.setFilters.hasOwnProperty(t.toLowerCase()) ? at(function (t, i) {
              for (var n, r = s(t, e), o = r.length; o--;) {
                t[n = O(t, r[o])] = !(i[n] = r[o]);
              }
            }) : function (t) {
              return s(t, 0, i);
            }) : s;
          } }, pseudos: { not: at(function (t) {
            var e = [],
                i = [],
                n = a(t.replace(W, "$1"));return n[y] ? at(function (t, e, i, s) {
              for (var r, o = n(t, null, s, []), a = t.length; a--;) {
                (r = o[a]) && (t[a] = !(e[a] = r));
              }
            }) : function (t, s, r) {
              return e[0] = t, n(e, null, r, i), e[0] = null, !i.pop();
            };
          }), has: at(function (t) {
            return function (e) {
              return rt(t, e).length > 0;
            };
          }), contains: at(function (t) {
            return t = t.replace(Q, tt), function (e) {
              return (e.textContent || e.innerText || s(e)).indexOf(t) > -1;
            };
          }), lang: at(function (t) {
            return K.test(t || "") || rt.error("unsupported lang: " + t), t = t.replace(Q, tt).toLowerCase(), function (e) {
              var i;do {
                if (i = g ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (i = i.toLowerCase()) === t || 0 === i.indexOf(t + "-");
              } while ((e = e.parentNode) && 1 === e.nodeType);return !1;
            };
          }), target: function target(e) {
            var i = t.location && t.location.hash;return i && i.slice(1) === e.id;
          }, root: function root(t) {
            return t === f;
          }, focus: function focus(t) {
            return t === p.activeElement && (!p.hasFocus || p.hasFocus()) && !!(t.type || t.href || ~t.tabIndex);
          }, enabled: pt(!1), disabled: pt(!0), checked: function checked(t) {
            var e = t.nodeName.toLowerCase();return "input" === e && !!t.checked || "option" === e && !!t.selected;
          }, selected: function selected(t) {
            return t.parentNode && t.parentNode.selectedIndex, !0 === t.selected;
          }, empty: function empty(t) {
            for (t = t.firstChild; t; t = t.nextSibling) {
              if (t.nodeType < 6) return !1;
            }return !0;
          }, parent: function parent(t) {
            return !n.pseudos.empty(t);
          }, header: function header(t) {
            return G.test(t.nodeName);
          }, input: function input(t) {
            return V.test(t.nodeName);
          }, button: function button(t) {
            var e = t.nodeName.toLowerCase();return "input" === e && "button" === t.type || "button" === e;
          }, text: function text(t) {
            var e;return "input" === t.nodeName.toLowerCase() && "text" === t.type && (null == (e = t.getAttribute("type")) || "text" === e.toLowerCase());
          }, first: ft(function () {
            return [0];
          }), last: ft(function (t, e) {
            return [e - 1];
          }), eq: ft(function (t, e, i) {
            return [i < 0 ? i + e : i];
          }), even: ft(function (t, e) {
            for (var i = 0; i < e; i += 2) {
              t.push(i);
            }return t;
          }), odd: ft(function (t, e) {
            for (var i = 1; i < e; i += 2) {
              t.push(i);
            }return t;
          }), lt: ft(function (t, e, i) {
            for (var n = i < 0 ? i + e : i; --n >= 0;) {
              t.push(n);
            }return t;
          }), gt: ft(function (t, e, i) {
            for (var n = i < 0 ? i + e : i; ++n < e;) {
              t.push(n);
            }return t;
          }) } }).pseudos.nth = n.pseudos.eq, { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
        n.pseudos[e] = ht(e);
      }for (e in { submit: !0, reset: !0 }) {
        n.pseudos[e] = dt(e);
      }function mt() {}function vt(t) {
        for (var e = 0, i = t.length, n = ""; e < i; e++) {
          n += t[e].value;
        }return n;
      }function _t(t, e, i) {
        var n = e.dir,
            s = e.next,
            r = s || n,
            o = i && "parentNode" === r,
            a = x++;return e.first ? function (e, i, s) {
          for (; e = e[n];) {
            if (1 === e.nodeType || o) return t(e, i, s);
          }return !1;
        } : function (e, i, l) {
          var u,
              c,
              h,
              d = [w, a];if (l) {
            for (; e = e[n];) {
              if ((1 === e.nodeType || o) && t(e, i, l)) return !0;
            }
          } else for (; e = e[n];) {
            if (1 === e.nodeType || o) if (c = (h = e[y] || (e[y] = {}))[e.uniqueID] || (h[e.uniqueID] = {}), s && s === e.nodeName.toLowerCase()) e = e[n] || e;else {
              if ((u = c[r]) && u[0] === w && u[1] === a) return d[2] = u[2];if (c[r] = d, d[2] = t(e, i, l)) return !0;
            }
          }return !1;
        };
      }function bt(t) {
        return t.length > 1 ? function (e, i, n) {
          for (var s = t.length; s--;) {
            if (!t[s](e, i, n)) return !1;
          }return !0;
        } : t[0];
      }function yt(t, e, i, n, s) {
        for (var r, o = [], a = 0, l = t.length, u = null != e; a < l; a++) {
          (r = t[a]) && (i && !i(r, n, s) || (o.push(r), u && e.push(a)));
        }return o;
      }function kt(t, e, i, n, s, r) {
        return n && !n[y] && (n = kt(n)), s && !s[y] && (s = kt(s, r)), at(function (r, o, a, l) {
          var u,
              c,
              h,
              d = [],
              p = [],
              f = o.length,
              g = r || function (t, e, i) {
            for (var n = 0, s = e.length; n < s; n++) {
              rt(t, e[n], i);
            }return i;
          }(e || "*", a.nodeType ? [a] : a, []),
              m = !t || !r && e ? g : yt(g, d, t, a, l),
              v = i ? s || (r ? t : f || n) ? [] : o : m;if (i && i(m, v, a, l), n) for (u = yt(v, p), n(u, [], a, l), c = u.length; c--;) {
            (h = u[c]) && (v[p[c]] = !(m[p[c]] = h));
          }if (r) {
            if (s || t) {
              if (s) {
                for (u = [], c = v.length; c--;) {
                  (h = v[c]) && u.push(m[c] = h);
                }s(null, v = [], u, l);
              }for (c = v.length; c--;) {
                (h = v[c]) && (u = s ? O(r, h) : d[c]) > -1 && (r[u] = !(o[u] = h));
              }
            }
          } else v = yt(v === o ? v.splice(f, v.length) : v), s ? s(null, o, v, l) : P.apply(o, v);
        });
      }function wt(t) {
        for (var e, i, s, r = t.length, o = n.relative[t[0].type], a = o || n.relative[" "], l = o ? 1 : 0, c = _t(function (t) {
          return t === e;
        }, a, !0), h = _t(function (t) {
          return O(e, t) > -1;
        }, a, !0), d = [function (t, i, n) {
          var s = !o && (n || i !== u) || ((e = i).nodeType ? c(t, i, n) : h(t, i, n));return e = null, s;
        }]; l < r; l++) {
          if (i = n.relative[t[l].type]) d = [_t(bt(d), i)];else {
            if ((i = n.filter[t[l].type].apply(null, t[l].matches))[y]) {
              for (s = ++l; s < r && !n.relative[t[s].type]; s++) {}return kt(l > 1 && bt(d), l > 1 && vt(t.slice(0, l - 1).concat({ value: " " === t[l - 2].type ? "*" : "" })).replace(W, "$1"), i, l < s && wt(t.slice(l, s)), s < r && wt(t = t.slice(s)), s < r && vt(t));
            }d.push(i);
          }
        }return bt(d);
      }return mt.prototype = n.filters = n.pseudos, n.setFilters = new mt(), o = rt.tokenize = function (t, e) {
        var i,
            s,
            r,
            o,
            a,
            l,
            u,
            c = D[t + " "];if (c) return e ? 0 : c.slice(0);for (a = t, l = [], u = n.preFilter; a;) {
          for (o in i && !(s = R.exec(a)) || (s && (a = a.slice(s[0].length) || a), l.push(r = [])), i = !1, (s = $.exec(a)) && (i = s.shift(), r.push({ value: i, type: s[0].replace(W, " ") }), a = a.slice(i.length)), n.filter) {
            !(s = Y[o].exec(a)) || u[o] && !(s = u[o](s)) || (i = s.shift(), r.push({ value: i, type: o, matches: s }), a = a.slice(i.length));
          }if (!i) break;
        }return e ? a.length : a ? rt.error(t) : D(t, l).slice(0);
      }, a = rt.compile = function (t, e) {
        var i,
            s = [],
            r = [],
            a = S[t + " "];if (!a) {
          for (e || (e = o(t)), i = e.length; i--;) {
            (a = wt(e[i]))[y] ? s.push(a) : r.push(a);
          }(a = S(t, function (t, e) {
            var i = e.length > 0,
                s = t.length > 0,
                r = function r(_r2, o, a, l, c) {
              var h,
                  f,
                  m,
                  v = 0,
                  _ = "0",
                  b = _r2 && [],
                  y = [],
                  k = u,
                  x = _r2 || s && n.find.TAG("*", c),
                  C = w += null == k ? 1 : Math.random() || .1,
                  D = x.length;for (c && (u = o === p || o || c); _ !== D && null != (h = x[_]); _++) {
                if (s && h) {
                  for (f = 0, o || h.ownerDocument === p || (d(h), a = !g); m = t[f++];) {
                    if (m(h, o || p, a)) {
                      l.push(h);break;
                    }
                  }c && (w = C);
                }i && ((h = !m && h) && v--, _r2 && b.push(h));
              }if (v += _, i && _ !== v) {
                for (f = 0; m = e[f++];) {
                  m(b, y, o, a);
                }if (_r2) {
                  if (v > 0) for (; _--;) {
                    b[_] || y[_] || (y[_] = j.call(l));
                  }y = yt(y);
                }P.apply(l, y), c && !_r2 && y.length > 0 && v + e.length > 1 && rt.uniqueSort(l);
              }return c && (w = C, u = k), b;
            };return i ? at(r) : r;
          }(r, s))).selector = t;
        }return a;
      }, l = rt.select = function (t, e, i, s) {
        var r,
            l,
            u,
            c,
            h,
            d = "function" == typeof t && t,
            p = !s && o(t = d.selector || t);if (i = i || [], 1 === p.length) {
          if ((l = p[0] = p[0].slice(0)).length > 2 && "ID" === (u = l[0]).type && 9 === e.nodeType && g && n.relative[l[1].type]) {
            if (!(e = (n.find.ID(u.matches[0].replace(Q, tt), e) || [])[0])) return i;d && (e = e.parentNode), t = t.slice(l.shift().value.length);
          }for (r = Y.needsContext.test(t) ? 0 : l.length; r-- && (u = l[r], !n.relative[c = u.type]);) {
            if ((h = n.find[c]) && (s = h(u.matches[0].replace(Q, tt), Z.test(l[0].type) && gt(e.parentNode) || e))) {
              if (l.splice(r, 1), !(t = s.length && vt(l))) return P.apply(i, s), i;break;
            }
          }
        }return (d || a(t, p))(s, e, !g, i, !e || Z.test(t) && gt(e.parentNode) || e), i;
      }, i.sortStable = y.split("").sort(T).join("") === y, i.detectDuplicates = !!h, d(), i.sortDetached = lt(function (t) {
        return 1 & t.compareDocumentPosition(p.createElement("fieldset"));
      }), lt(function (t) {
        return t.innerHTML = "<a href='#'></a>", "#" === t.firstChild.getAttribute("href");
      }) || ut("type|href|height|width", function (t, e, i) {
        if (!i) return t.getAttribute(e, "type" === e.toLowerCase() ? 1 : 2);
      }), i.attributes && lt(function (t) {
        return t.innerHTML = "<input/>", t.firstChild.setAttribute("value", ""), "" === t.firstChild.getAttribute("value");
      }) || ut("value", function (t, e, i) {
        if (!i && "input" === t.nodeName.toLowerCase()) return t.defaultValue;
      }), lt(function (t) {
        return null == t.getAttribute("disabled");
      }) || ut(H, function (t, e, i) {
        var n;if (!i) return !0 === t[e] ? e.toLowerCase() : (n = t.getAttributeNode(e)) && n.specified ? n.value : null;
      }), rt;
    }(i);x.find = S, x.expr = S.selectors, x.expr[":"] = x.expr.pseudos, x.uniqueSort = x.unique = S.uniqueSort, x.text = S.getText, x.isXMLDoc = S.isXML, x.contains = S.contains, x.escapeSelector = S.escape;var T = function T(t, e, i) {
      for (var n = [], s = void 0 !== i; (t = t[e]) && 9 !== t.nodeType;) {
        if (1 === t.nodeType) {
          if (s && x(t).is(i)) break;n.push(t);
        }
      }return n;
    },
        I = function I(t, e) {
      for (var i = []; t; t = t.nextSibling) {
        1 === t.nodeType && t !== e && i.push(t);
      }return i;
    },
        A = x.expr.match.needsContext;function j(t, e) {
      return t.nodeName && t.nodeName.toLowerCase() === e.toLowerCase();
    }var M = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(t, e, i) {
      return _(e) ? x.grep(t, function (t, n) {
        return !!e.call(t, n, t) !== i;
      }) : e.nodeType ? x.grep(t, function (t) {
        return t === e !== i;
      }) : "string" != typeof e ? x.grep(t, function (t) {
        return h.call(e, t) > -1 !== i;
      }) : x.filter(e, t, i);
    }x.filter = function (t, e, i) {
      var n = e[0];return i && (t = ":not(" + t + ")"), 1 === e.length && 1 === n.nodeType ? x.find.matchesSelector(n, t) ? [n] : [] : x.find.matches(t, x.grep(e, function (t) {
        return 1 === t.nodeType;
      }));
    }, x.fn.extend({ find: function find(t) {
        var e,
            i,
            n = this.length,
            s = this;if ("string" != typeof t) return this.pushStack(x(t).filter(function () {
          for (e = 0; e < n; e++) {
            if (x.contains(s[e], this)) return !0;
          }
        }));for (i = this.pushStack([]), e = 0; e < n; e++) {
          x.find(t, s[e], i);
        }return n > 1 ? x.uniqueSort(i) : i;
      }, filter: function filter(t) {
        return this.pushStack(P(this, t || [], !1));
      }, not: function not(t) {
        return this.pushStack(P(this, t || [], !0));
      }, is: function is(t) {
        return !!P(this, "string" == typeof t && A.test(t) ? x(t) : t || [], !1).length;
      } });var E,
        O = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init = function (t, e, i) {
      var n, s;if (!t) return this;if (i = i || E, "string" == typeof t) {
        if (!(n = "<" === t[0] && ">" === t[t.length - 1] && t.length >= 3 ? [null, t, null] : O.exec(t)) || !n[1] && e) return !e || e.jquery ? (e || i).find(t) : this.constructor(e).find(t);if (n[1]) {
          if (e = e instanceof x ? e[0] : e, x.merge(this, x.parseHTML(n[1], e && e.nodeType ? e.ownerDocument || e : o, !0)), M.test(n[1]) && x.isPlainObject(e)) for (n in e) {
            _(this[n]) ? this[n](e[n]) : this.attr(n, e[n]);
          }return this;
        }return (s = o.getElementById(n[2])) && (this[0] = s, this.length = 1), this;
      }return t.nodeType ? (this[0] = t, this.length = 1, this) : _(t) ? void 0 !== i.ready ? i.ready(t) : t(x) : x.makeArray(t, this);
    }).prototype = x.fn, E = x(o);var H = /^(?:parents|prev(?:Until|All))/,
        N = { children: !0, contents: !0, next: !0, prev: !0 };function B(t, e) {
      for (; (t = t[e]) && 1 !== t.nodeType;) {}return t;
    }x.fn.extend({ has: function has(t) {
        var e = x(t, this),
            i = e.length;return this.filter(function () {
          for (var t = 0; t < i; t++) {
            if (x.contains(this, e[t])) return !0;
          }
        });
      }, closest: function closest(t, e) {
        var i,
            n = 0,
            s = this.length,
            r = [],
            o = "string" != typeof t && x(t);if (!A.test(t)) for (; n < s; n++) {
          for (i = this[n]; i && i !== e; i = i.parentNode) {
            if (i.nodeType < 11 && (o ? o.index(i) > -1 : 1 === i.nodeType && x.find.matchesSelector(i, t))) {
              r.push(i);break;
            }
          }
        }return this.pushStack(r.length > 1 ? x.uniqueSort(r) : r);
      }, index: function index(t) {
        return t ? "string" == typeof t ? h.call(x(t), this[0]) : h.call(this, t.jquery ? t[0] : t) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }, add: function add(t, e) {
        return this.pushStack(x.uniqueSort(x.merge(this.get(), x(t, e))));
      }, addBack: function addBack(t) {
        return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
      } }), x.each({ parent: function parent(t) {
        var e = t.parentNode;return e && 11 !== e.nodeType ? e : null;
      }, parents: function parents(t) {
        return T(t, "parentNode");
      }, parentsUntil: function parentsUntil(t, e, i) {
        return T(t, "parentNode", i);
      }, next: function next(t) {
        return B(t, "nextSibling");
      }, prev: function prev(t) {
        return B(t, "previousSibling");
      }, nextAll: function nextAll(t) {
        return T(t, "nextSibling");
      }, prevAll: function prevAll(t) {
        return T(t, "previousSibling");
      }, nextUntil: function nextUntil(t, e, i) {
        return T(t, "nextSibling", i);
      }, prevUntil: function prevUntil(t, e, i) {
        return T(t, "previousSibling", i);
      }, siblings: function siblings(t) {
        return I((t.parentNode || {}).firstChild, t);
      }, children: function children(t) {
        return I(t.firstChild);
      }, contents: function contents(t) {
        return j(t, "iframe") ? t.contentDocument : (j(t, "template") && (t = t.content || t), x.merge([], t.childNodes));
      } }, function (t, e) {
      x.fn[t] = function (i, n) {
        var s = x.map(this, e, i);return "Until" !== t.slice(-5) && (n = i), n && "string" == typeof n && (s = x.filter(n, s)), this.length > 1 && (N[t] || x.uniqueSort(s), H.test(t) && s.reverse()), this.pushStack(s);
      };
    });var F = /[^\x20\t\r\n\f]+/g;function L(t) {
      return t;
    }function z(t) {
      throw t;
    }function W(t, e, i, n) {
      var s;try {
        t && _(s = t.promise) ? s.call(t).done(e).fail(i) : t && _(s = t.then) ? s.call(t, e, i) : e.apply(void 0, [t].slice(n));
      } catch (t) {
        i.apply(void 0, [t]);
      }
    }x.Callbacks = function (t) {
      t = "string" == typeof t ? function (t) {
        var e = {};return x.each(t.match(F) || [], function (t, i) {
          e[i] = !0;
        }), e;
      }(t) : x.extend({}, t);var e,
          i,
          n,
          s,
          r = [],
          o = [],
          a = -1,
          l = function l() {
        for (s = s || t.once, n = e = !0; o.length; a = -1) {
          for (i = o.shift(); ++a < r.length;) {
            !1 === r[a].apply(i[0], i[1]) && t.stopOnFalse && (a = r.length, i = !1);
          }
        }t.memory || (i = !1), e = !1, s && (r = i ? [] : "");
      },
          u = { add: function add() {
          return r && (i && !e && (a = r.length - 1, o.push(i)), function e(i) {
            x.each(i, function (i, n) {
              _(n) ? t.unique && u.has(n) || r.push(n) : n && n.length && "string" !== w(n) && e(n);
            });
          }(arguments), i && !e && l()), this;
        }, remove: function remove() {
          return x.each(arguments, function (t, e) {
            for (var i; (i = x.inArray(e, r, i)) > -1;) {
              r.splice(i, 1), i <= a && a--;
            }
          }), this;
        }, has: function has(t) {
          return t ? x.inArray(t, r) > -1 : r.length > 0;
        }, empty: function empty() {
          return r && (r = []), this;
        }, disable: function disable() {
          return s = o = [], r = i = "", this;
        }, disabled: function disabled() {
          return !r;
        }, lock: function lock() {
          return s = o = [], i || e || (r = i = ""), this;
        }, locked: function locked() {
          return !!s;
        }, fireWith: function fireWith(t, i) {
          return s || (i = [t, (i = i || []).slice ? i.slice() : i], o.push(i), e || l()), this;
        }, fire: function fire() {
          return u.fireWith(this, arguments), this;
        }, fired: function fired() {
          return !!n;
        } };return u;
    }, x.extend({ Deferred: function Deferred(t) {
        var e = [["notify", "progress", x.Callbacks("memory"), x.Callbacks("memory"), 2], ["resolve", "done", x.Callbacks("once memory"), x.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", x.Callbacks("once memory"), x.Callbacks("once memory"), 1, "rejected"]],
            n = "pending",
            s = { state: function state() {
            return n;
          }, always: function always() {
            return r.done(arguments).fail(arguments), this;
          }, catch: function _catch(t) {
            return s.then(null, t);
          }, pipe: function pipe() {
            var t = arguments;return x.Deferred(function (i) {
              x.each(e, function (e, n) {
                var s = _(t[n[4]]) && t[n[4]];r[n[1]](function () {
                  var t = s && s.apply(this, arguments);t && _(t.promise) ? t.promise().progress(i.notify).done(i.resolve).fail(i.reject) : i[n[0] + "With"](this, s ? [t] : arguments);
                });
              }), t = null;
            }).promise();
          }, then: function then(t, n, s) {
            var r = 0;function o(t, e, n, s) {
              return function () {
                var a = this,
                    l = arguments,
                    u = function u() {
                  var i, u;if (!(t < r)) {
                    if ((i = n.apply(a, l)) === e.promise()) throw new TypeError("Thenable self-resolution");u = i && ("object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) || "function" == typeof i) && i.then, _(u) ? s ? u.call(i, o(r, e, L, s), o(r, e, z, s)) : (r++, u.call(i, o(r, e, L, s), o(r, e, z, s), o(r, e, L, e.notifyWith))) : (n !== L && (a = void 0, l = [i]), (s || e.resolveWith)(a, l));
                  }
                },
                    c = s ? u : function () {
                  try {
                    u();
                  } catch (i) {
                    x.Deferred.exceptionHook && x.Deferred.exceptionHook(i, c.stackTrace), t + 1 >= r && (n !== z && (a = void 0, l = [i]), e.rejectWith(a, l));
                  }
                };t ? c() : (x.Deferred.getStackHook && (c.stackTrace = x.Deferred.getStackHook()), i.setTimeout(c));
              };
            }return x.Deferred(function (i) {
              e[0][3].add(o(0, i, _(s) ? s : L, i.notifyWith)), e[1][3].add(o(0, i, _(t) ? t : L)), e[2][3].add(o(0, i, _(n) ? n : z));
            }).promise();
          }, promise: function promise(t) {
            return null != t ? x.extend(t, s) : s;
          } },
            r = {};return x.each(e, function (t, i) {
          var o = i[2],
              a = i[5];s[i[1]] = o.add, a && o.add(function () {
            n = a;
          }, e[3 - t][2].disable, e[3 - t][3].disable, e[0][2].lock, e[0][3].lock), o.add(i[3].fire), r[i[0]] = function () {
            return r[i[0] + "With"](this === r ? void 0 : this, arguments), this;
          }, r[i[0] + "With"] = o.fireWith;
        }), s.promise(r), t && t.call(r, r), r;
      }, when: function when(t) {
        var e = arguments.length,
            i = e,
            n = Array(i),
            s = l.call(arguments),
            r = x.Deferred(),
            o = function o(t) {
          return function (i) {
            n[t] = this, s[t] = arguments.length > 1 ? l.call(arguments) : i, --e || r.resolveWith(n, s);
          };
        };if (e <= 1 && (W(t, r.done(o(i)).resolve, r.reject, !e), "pending" === r.state() || _(s[i] && s[i].then))) return r.then();for (; i--;) {
          W(s[i], o(i), r.reject);
        }return r.promise();
      } });var R = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook = function (t, e) {
      i.console && i.console.warn && t && R.test(t.name) && i.console.warn("jQuery.Deferred exception: " + t.message, t.stack, e);
    }, x.readyException = function (t) {
      i.setTimeout(function () {
        throw t;
      });
    };var $ = x.Deferred();function q() {
      o.removeEventListener("DOMContentLoaded", q), i.removeEventListener("load", q), x.ready();
    }x.fn.ready = function (t) {
      return $.then(t).catch(function (t) {
        x.readyException(t);
      }), this;
    }, x.extend({ isReady: !1, readyWait: 1, ready: function ready(t) {
        (!0 === t ? --x.readyWait : x.isReady) || (x.isReady = !0, !0 !== t && --x.readyWait > 0 || $.resolveWith(o, [x]));
      } }), x.ready.then = $.then, "complete" === o.readyState || "loading" !== o.readyState && !o.documentElement.doScroll ? i.setTimeout(x.ready) : (o.addEventListener("DOMContentLoaded", q), i.addEventListener("load", q));var U = function U(t, e, i, n, s, r, o) {
      var a = 0,
          l = t.length,
          u = null == i;if ("object" === w(i)) for (a in s = !0, i) {
        U(t, e, a, i[a], !0, r, o);
      } else if (void 0 !== n && (s = !0, _(n) || (o = !0), u && (o ? (e.call(t, n), e = null) : (u = e, e = function e(t, _e2, i) {
        return u.call(x(t), i);
      })), e)) for (; a < l; a++) {
        e(t[a], i, o ? n : n.call(t[a], a, e(t[a], i)));
      }return s ? t : u ? e.call(t) : l ? e(t[0], i) : r;
    },
        K = /^-ms-/,
        Y = /-([a-z])/g;function V(t, e) {
      return e.toUpperCase();
    }function G(t) {
      return t.replace(K, "ms-").replace(Y, V);
    }var X = function X(t) {
      return 1 === t.nodeType || 9 === t.nodeType || !+t.nodeType;
    };function J() {
      this.expando = x.expando + J.uid++;
    }J.uid = 1, J.prototype = { cache: function cache(t) {
        var e = t[this.expando];return e || (e = {}, X(t) && (t.nodeType ? t[this.expando] = e : Object.defineProperty(t, this.expando, { value: e, configurable: !0 }))), e;
      }, set: function set(t, e, i) {
        var n,
            s = this.cache(t);if ("string" == typeof e) s[G(e)] = i;else for (n in e) {
          s[G(n)] = e[n];
        }return s;
      }, get: function get(t, e) {
        return void 0 === e ? this.cache(t) : t[this.expando] && t[this.expando][G(e)];
      }, access: function access(t, e, i) {
        return void 0 === e || e && "string" == typeof e && void 0 === i ? this.get(t, e) : (this.set(t, e, i), void 0 !== i ? i : e);
      }, remove: function remove(t, e) {
        var i,
            n = t[this.expando];if (void 0 !== n) {
          if (void 0 !== e) {
            i = (e = Array.isArray(e) ? e.map(G) : (e = G(e)) in n ? [e] : e.match(F) || []).length;for (; i--;) {
              delete n[e[i]];
            }
          }(void 0 === e || x.isEmptyObject(n)) && (t.nodeType ? t[this.expando] = void 0 : delete t[this.expando]);
        }
      }, hasData: function hasData(t) {
        var e = t[this.expando];return void 0 !== e && !x.isEmptyObject(e);
      } };var Z = new J(),
        Q = new J(),
        tt = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        et = /[A-Z]/g;function it(t, e, i) {
      var n;if (void 0 === i && 1 === t.nodeType) if (n = "data-" + e.replace(et, "-$&").toLowerCase(), "string" == typeof (i = t.getAttribute(n))) {
        try {
          i = function (t) {
            return "true" === t || "false" !== t && ("null" === t ? null : t === +t + "" ? +t : tt.test(t) ? JSON.parse(t) : t);
          }(i);
        } catch (t) {}Q.set(t, e, i);
      } else i = void 0;return i;
    }x.extend({ hasData: function hasData(t) {
        return Q.hasData(t) || Z.hasData(t);
      }, data: function data(t, e, i) {
        return Q.access(t, e, i);
      }, removeData: function removeData(t, e) {
        Q.remove(t, e);
      }, _data: function _data(t, e, i) {
        return Z.access(t, e, i);
      }, _removeData: function _removeData(t, e) {
        Z.remove(t, e);
      } }), x.fn.extend({ data: function data(t, e) {
        var i,
            n,
            s,
            r = this[0],
            o = r && r.attributes;if (void 0 === t) {
          if (this.length && (s = Q.get(r), 1 === r.nodeType && !Z.get(r, "hasDataAttrs"))) {
            for (i = o.length; i--;) {
              o[i] && 0 === (n = o[i].name).indexOf("data-") && (n = G(n.slice(5)), it(r, n, s[n]));
            }Z.set(r, "hasDataAttrs", !0);
          }return s;
        }return "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? this.each(function () {
          Q.set(this, t);
        }) : U(this, function (e) {
          var i;if (r && void 0 === e) return void 0 !== (i = Q.get(r, t)) ? i : void 0 !== (i = it(r, t)) ? i : void 0;this.each(function () {
            Q.set(this, t, e);
          });
        }, null, e, arguments.length > 1, null, !0);
      }, removeData: function removeData(t) {
        return this.each(function () {
          Q.remove(this, t);
        });
      } }), x.extend({ queue: function queue(t, e, i) {
        var n;if (t) return e = (e || "fx") + "queue", n = Z.get(t, e), i && (!n || Array.isArray(i) ? n = Z.access(t, e, x.makeArray(i)) : n.push(i)), n || [];
      }, dequeue: function dequeue(t, e) {
        e = e || "fx";var i = x.queue(t, e),
            n = i.length,
            s = i.shift(),
            r = x._queueHooks(t, e);"inprogress" === s && (s = i.shift(), n--), s && ("fx" === e && i.unshift("inprogress"), delete r.stop, s.call(t, function () {
          x.dequeue(t, e);
        }, r)), !n && r && r.empty.fire();
      }, _queueHooks: function _queueHooks(t, e) {
        var i = e + "queueHooks";return Z.get(t, i) || Z.access(t, i, { empty: x.Callbacks("once memory").add(function () {
            Z.remove(t, [e + "queue", i]);
          }) });
      } }), x.fn.extend({ queue: function queue(t, e) {
        var i = 2;return "string" != typeof t && (e = t, t = "fx", i--), arguments.length < i ? x.queue(this[0], t) : void 0 === e ? this : this.each(function () {
          var i = x.queue(this, t, e);x._queueHooks(this, t), "fx" === t && "inprogress" !== i[0] && x.dequeue(this, t);
        });
      }, dequeue: function dequeue(t) {
        return this.each(function () {
          x.dequeue(this, t);
        });
      }, clearQueue: function clearQueue(t) {
        return this.queue(t || "fx", []);
      }, promise: function promise(t, e) {
        var i,
            n = 1,
            s = x.Deferred(),
            r = this,
            o = this.length,
            a = function a() {
          --n || s.resolveWith(r, [r]);
        };for ("string" != typeof t && (e = t, t = void 0), t = t || "fx"; o--;) {
          (i = Z.get(r[o], t + "queueHooks")) && i.empty && (n++, i.empty.add(a));
        }return a(), s.promise(e);
      } });var nt = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        st = new RegExp("^(?:([+-])=|)(" + nt + ")([a-z%]*)$", "i"),
        rt = ["Top", "Right", "Bottom", "Left"],
        ot = function ot(t, e) {
      return "none" === (t = e || t).style.display || "" === t.style.display && x.contains(t.ownerDocument, t) && "none" === x.css(t, "display");
    },
        at = function at(t, e, i, n) {
      var s,
          r,
          o = {};for (r in e) {
        o[r] = t.style[r], t.style[r] = e[r];
      }for (r in s = i.apply(t, n || []), e) {
        t.style[r] = o[r];
      }return s;
    };function lt(t, e, i, n) {
      var s,
          r,
          o = 20,
          a = n ? function () {
        return n.cur();
      } : function () {
        return x.css(t, e, "");
      },
          l = a(),
          u = i && i[3] || (x.cssNumber[e] ? "" : "px"),
          c = (x.cssNumber[e] || "px" !== u && +l) && st.exec(x.css(t, e));if (c && c[3] !== u) {
        for (l /= 2, u = u || c[3], c = +l || 1; o--;) {
          x.style(t, e, c + u), (1 - r) * (1 - (r = a() / l || .5)) <= 0 && (o = 0), c /= r;
        }c *= 2, x.style(t, e, c + u), i = i || [];
      }return i && (c = +c || +l || 0, s = i[1] ? c + (i[1] + 1) * i[2] : +i[2], n && (n.unit = u, n.start = c, n.end = s)), s;
    }var ut = {};function ct(t) {
      var e,
          i = t.ownerDocument,
          n = t.nodeName,
          s = ut[n];return s || (e = i.body.appendChild(i.createElement(n)), s = x.css(e, "display"), e.parentNode.removeChild(e), "none" === s && (s = "block"), ut[n] = s, s);
    }function ht(t, e) {
      for (var i, n, s = [], r = 0, o = t.length; r < o; r++) {
        (n = t[r]).style && (i = n.style.display, e ? ("none" === i && (s[r] = Z.get(n, "display") || null, s[r] || (n.style.display = "")), "" === n.style.display && ot(n) && (s[r] = ct(n))) : "none" !== i && (s[r] = "none", Z.set(n, "display", i)));
      }for (r = 0; r < o; r++) {
        null != s[r] && (t[r].style.display = s[r]);
      }return t;
    }x.fn.extend({ show: function show() {
        return ht(this, !0);
      }, hide: function hide() {
        return ht(this);
      }, toggle: function toggle(t) {
        return "boolean" == typeof t ? t ? this.show() : this.hide() : this.each(function () {
          ot(this) ? x(this).show() : x(this).hide();
        });
      } });var dt = /^(?:checkbox|radio)$/i,
        pt = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        ft = /^$|^module$|\/(?:java|ecma)script/i,
        gt = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };function mt(t, e) {
      var i;return i = void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e || "*") : void 0 !== t.querySelectorAll ? t.querySelectorAll(e || "*") : [], void 0 === e || e && j(t, e) ? x.merge([t], i) : i;
    }function vt(t, e) {
      for (var i = 0, n = t.length; i < n; i++) {
        Z.set(t[i], "globalEval", !e || Z.get(e[i], "globalEval"));
      }
    }gt.optgroup = gt.option, gt.tbody = gt.tfoot = gt.colgroup = gt.caption = gt.thead, gt.th = gt.td;var _t,
        bt,
        yt = /<|&#?\w+;/;function kt(t, e, i, n, s) {
      for (var r, o, a, l, u, c, h = e.createDocumentFragment(), d = [], p = 0, f = t.length; p < f; p++) {
        if ((r = t[p]) || 0 === r) if ("object" === w(r)) x.merge(d, r.nodeType ? [r] : r);else if (yt.test(r)) {
          for (o = o || h.appendChild(e.createElement("div")), a = (pt.exec(r) || ["", ""])[1].toLowerCase(), l = gt[a] || gt._default, o.innerHTML = l[1] + x.htmlPrefilter(r) + l[2], c = l[0]; c--;) {
            o = o.lastChild;
          }x.merge(d, o.childNodes), (o = h.firstChild).textContent = "";
        } else d.push(e.createTextNode(r));
      }for (h.textContent = "", p = 0; r = d[p++];) {
        if (n && x.inArray(r, n) > -1) s && s.push(r);else if (u = x.contains(r.ownerDocument, r), o = mt(h.appendChild(r), "script"), u && vt(o), i) for (c = 0; r = o[c++];) {
          ft.test(r.type || "") && i.push(r);
        }
      }return h;
    }_t = o.createDocumentFragment().appendChild(o.createElement("div")), (bt = o.createElement("input")).setAttribute("type", "radio"), bt.setAttribute("checked", "checked"), bt.setAttribute("name", "t"), _t.appendChild(bt), v.checkClone = _t.cloneNode(!0).cloneNode(!0).lastChild.checked, _t.innerHTML = "<textarea>x</textarea>", v.noCloneChecked = !!_t.cloneNode(!0).lastChild.defaultValue;var wt = o.documentElement,
        xt = /^key/,
        Ct = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        Dt = /^([^.]*)(?:\.(.+)|)/;function St() {
      return !0;
    }function Tt() {
      return !1;
    }function It() {
      try {
        return o.activeElement;
      } catch (t) {}
    }function At(t, e, i, n, s, r) {
      var o, a;if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
        for (a in "string" != typeof i && (n = n || i, i = void 0), e) {
          At(t, a, i, n, e[a], r);
        }return t;
      }if (null == n && null == s ? (s = i, n = i = void 0) : null == s && ("string" == typeof i ? (s = n, n = void 0) : (s = n, n = i, i = void 0)), !1 === s) s = Tt;else if (!s) return t;return 1 === r && (o = s, (s = function s(t) {
        return x().off(t), o.apply(this, arguments);
      }).guid = o.guid || (o.guid = x.guid++)), t.each(function () {
        x.event.add(this, e, s, n, i);
      });
    }x.event = { global: {}, add: function add(t, e, i, n, s) {
        var r,
            o,
            a,
            l,
            u,
            c,
            h,
            d,
            p,
            f,
            g,
            m = Z.get(t);if (m) for (i.handler && (i = (r = i).handler, s = r.selector), s && x.find.matchesSelector(wt, s), i.guid || (i.guid = x.guid++), (l = m.events) || (l = m.events = {}), (o = m.handle) || (o = m.handle = function (e) {
          return void 0 !== x && x.event.triggered !== e.type ? x.event.dispatch.apply(t, arguments) : void 0;
        }), u = (e = (e || "").match(F) || [""]).length; u--;) {
          p = g = (a = Dt.exec(e[u]) || [])[1], f = (a[2] || "").split(".").sort(), p && (h = x.event.special[p] || {}, p = (s ? h.delegateType : h.bindType) || p, h = x.event.special[p] || {}, c = x.extend({ type: p, origType: g, data: n, handler: i, guid: i.guid, selector: s, needsContext: s && x.expr.match.needsContext.test(s), namespace: f.join(".") }, r), (d = l[p]) || ((d = l[p] = []).delegateCount = 0, h.setup && !1 !== h.setup.call(t, n, f, o) || t.addEventListener && t.addEventListener(p, o)), h.add && (h.add.call(t, c), c.handler.guid || (c.handler.guid = i.guid)), s ? d.splice(d.delegateCount++, 0, c) : d.push(c), x.event.global[p] = !0);
        }
      }, remove: function remove(t, e, i, n, s) {
        var r,
            o,
            a,
            l,
            u,
            c,
            h,
            d,
            p,
            f,
            g,
            m = Z.hasData(t) && Z.get(t);if (m && (l = m.events)) {
          for (u = (e = (e || "").match(F) || [""]).length; u--;) {
            if (p = g = (a = Dt.exec(e[u]) || [])[1], f = (a[2] || "").split(".").sort(), p) {
              for (h = x.event.special[p] || {}, d = l[p = (n ? h.delegateType : h.bindType) || p] || [], a = a[2] && new RegExp("(^|\\.)" + f.join("\\.(?:.*\\.|)") + "(\\.|$)"), o = r = d.length; r--;) {
                c = d[r], !s && g !== c.origType || i && i.guid !== c.guid || a && !a.test(c.namespace) || n && n !== c.selector && ("**" !== n || !c.selector) || (d.splice(r, 1), c.selector && d.delegateCount--, h.remove && h.remove.call(t, c));
              }o && !d.length && (h.teardown && !1 !== h.teardown.call(t, f, m.handle) || x.removeEvent(t, p, m.handle), delete l[p]);
            } else for (p in l) {
              x.event.remove(t, p + e[u], i, n, !0);
            }
          }x.isEmptyObject(l) && Z.remove(t, "handle events");
        }
      }, dispatch: function dispatch(t) {
        var e,
            i,
            n,
            s,
            r,
            o,
            a = x.event.fix(t),
            l = new Array(arguments.length),
            u = (Z.get(this, "events") || {})[a.type] || [],
            c = x.event.special[a.type] || {};for (l[0] = a, e = 1; e < arguments.length; e++) {
          l[e] = arguments[e];
        }if (a.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, a)) {
          for (o = x.event.handlers.call(this, a, u), e = 0; (s = o[e++]) && !a.isPropagationStopped();) {
            for (a.currentTarget = s.elem, i = 0; (r = s.handlers[i++]) && !a.isImmediatePropagationStopped();) {
              a.rnamespace && !a.rnamespace.test(r.namespace) || (a.handleObj = r, a.data = r.data, void 0 !== (n = ((x.event.special[r.origType] || {}).handle || r.handler).apply(s.elem, l)) && !1 === (a.result = n) && (a.preventDefault(), a.stopPropagation()));
            }
          }return c.postDispatch && c.postDispatch.call(this, a), a.result;
        }
      }, handlers: function handlers(t, e) {
        var i,
            n,
            s,
            r,
            o,
            a = [],
            l = e.delegateCount,
            u = t.target;if (l && u.nodeType && !("click" === t.type && t.button >= 1)) for (; u !== this; u = u.parentNode || this) {
          if (1 === u.nodeType && ("click" !== t.type || !0 !== u.disabled)) {
            for (r = [], o = {}, i = 0; i < l; i++) {
              void 0 === o[s = (n = e[i]).selector + " "] && (o[s] = n.needsContext ? x(s, this).index(u) > -1 : x.find(s, this, null, [u]).length), o[s] && r.push(n);
            }r.length && a.push({ elem: u, handlers: r });
          }
        }return u = this, l < e.length && a.push({ elem: u, handlers: e.slice(l) }), a;
      }, addProp: function addProp(t, e) {
        Object.defineProperty(x.Event.prototype, t, { enumerable: !0, configurable: !0, get: _(e) ? function () {
            if (this.originalEvent) return e(this.originalEvent);
          } : function () {
            if (this.originalEvent) return this.originalEvent[t];
          }, set: function set(e) {
            Object.defineProperty(this, t, { enumerable: !0, configurable: !0, writable: !0, value: e });
          } });
      }, fix: function fix(t) {
        return t[x.expando] ? t : new x.Event(t);
      }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
            if (this !== It() && this.focus) return this.focus(), !1;
          }, delegateType: "focusin" }, blur: { trigger: function trigger() {
            if (this === It() && this.blur) return this.blur(), !1;
          }, delegateType: "focusout" }, click: { trigger: function trigger() {
            if ("checkbox" === this.type && this.click && j(this, "input")) return this.click(), !1;
          }, _default: function _default(t) {
            return j(t.target, "a");
          } }, beforeunload: { postDispatch: function postDispatch(t) {
            void 0 !== t.result && t.originalEvent && (t.originalEvent.returnValue = t.result);
          } } } }, x.removeEvent = function (t, e, i) {
      t.removeEventListener && t.removeEventListener(e, i);
    }, x.Event = function (t, e) {
      if (!(this instanceof x.Event)) return new x.Event(t, e);t && t.type ? (this.originalEvent = t, this.type = t.type, this.isDefaultPrevented = t.defaultPrevented || void 0 === t.defaultPrevented && !1 === t.returnValue ? St : Tt, this.target = t.target && 3 === t.target.nodeType ? t.target.parentNode : t.target, this.currentTarget = t.currentTarget, this.relatedTarget = t.relatedTarget) : this.type = t, e && x.extend(this, e), this.timeStamp = t && t.timeStamp || Date.now(), this[x.expando] = !0;
    }, x.Event.prototype = { constructor: x.Event, isDefaultPrevented: Tt, isPropagationStopped: Tt, isImmediatePropagationStopped: Tt, isSimulated: !1, preventDefault: function preventDefault() {
        var t = this.originalEvent;this.isDefaultPrevented = St, t && !this.isSimulated && t.preventDefault();
      }, stopPropagation: function stopPropagation() {
        var t = this.originalEvent;this.isPropagationStopped = St, t && !this.isSimulated && t.stopPropagation();
      }, stopImmediatePropagation: function stopImmediatePropagation() {
        var t = this.originalEvent;this.isImmediatePropagationStopped = St, t && !this.isSimulated && t.stopImmediatePropagation(), this.stopPropagation();
      } }, x.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, char: !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function which(t) {
        var e = t.button;return null == t.which && xt.test(t.type) ? null != t.charCode ? t.charCode : t.keyCode : !t.which && void 0 !== e && Ct.test(t.type) ? 1 & e ? 1 : 2 & e ? 3 : 4 & e ? 2 : 0 : t.which;
      } }, x.event.addProp), x.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (t, e) {
      x.event.special[t] = { delegateType: e, bindType: e, handle: function handle(t) {
          var i,
              n = t.relatedTarget,
              s = t.handleObj;return n && (n === this || x.contains(this, n)) || (t.type = s.origType, i = s.handler.apply(this, arguments), t.type = e), i;
        } };
    }), x.fn.extend({ on: function on(t, e, i, n) {
        return At(this, t, e, i, n);
      }, one: function one(t, e, i, n) {
        return At(this, t, e, i, n, 1);
      }, off: function off(t, e, i) {
        var n, s;if (t && t.preventDefault && t.handleObj) return n = t.handleObj, x(t.delegateTarget).off(n.namespace ? n.origType + "." + n.namespace : n.origType, n.selector, n.handler), this;if ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t))) {
          for (s in t) {
            this.off(s, e, t[s]);
          }return this;
        }return !1 !== e && "function" != typeof e || (i = e, e = void 0), !1 === i && (i = Tt), this.each(function () {
          x.event.remove(this, t, i, e);
        });
      } });var jt = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        Mt = /<script|<style|<link/i,
        Pt = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Et = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ot(t, e) {
      return j(t, "table") && j(11 !== e.nodeType ? e : e.firstChild, "tr") && x(t).children("tbody")[0] || t;
    }function Ht(t) {
      return t.type = (null !== t.getAttribute("type")) + "/" + t.type, t;
    }function Nt(t) {
      return "true/" === (t.type || "").slice(0, 5) ? t.type = t.type.slice(5) : t.removeAttribute("type"), t;
    }function Bt(t, e) {
      var i, n, s, r, o, a, l, u;if (1 === e.nodeType) {
        if (Z.hasData(t) && (r = Z.access(t), o = Z.set(e, r), u = r.events)) for (s in delete o.handle, o.events = {}, u) {
          for (i = 0, n = u[s].length; i < n; i++) {
            x.event.add(e, s, u[s][i]);
          }
        }Q.hasData(t) && (a = Q.access(t), l = x.extend({}, a), Q.set(e, l));
      }
    }function Ft(t, e, i, n) {
      e = u.apply([], e);var s,
          r,
          o,
          a,
          l,
          c,
          h = 0,
          d = t.length,
          p = d - 1,
          f = e[0],
          g = _(f);if (g || d > 1 && "string" == typeof f && !v.checkClone && Pt.test(f)) return t.each(function (s) {
        var r = t.eq(s);g && (e[0] = f.call(this, s, r.html())), Ft(r, e, i, n);
      });if (d && (r = (s = kt(e, t[0].ownerDocument, !1, t, n)).firstChild, 1 === s.childNodes.length && (s = r), r || n)) {
        for (a = (o = x.map(mt(s, "script"), Ht)).length; h < d; h++) {
          l = s, h !== p && (l = x.clone(l, !0, !0), a && x.merge(o, mt(l, "script"))), i.call(t[h], l, h);
        }if (a) for (c = o[o.length - 1].ownerDocument, x.map(o, Nt), h = 0; h < a; h++) {
          l = o[h], ft.test(l.type || "") && !Z.access(l, "globalEval") && x.contains(c, l) && (l.src && "module" !== (l.type || "").toLowerCase() ? x._evalUrl && x._evalUrl(l.src) : k(l.textContent.replace(Et, ""), c, l));
        }
      }return t;
    }function Lt(t, e, i) {
      for (var n, s = e ? x.filter(e, t) : t, r = 0; null != (n = s[r]); r++) {
        i || 1 !== n.nodeType || x.cleanData(mt(n)), n.parentNode && (i && x.contains(n.ownerDocument, n) && vt(mt(n, "script")), n.parentNode.removeChild(n));
      }return t;
    }x.extend({ htmlPrefilter: function htmlPrefilter(t) {
        return t.replace(jt, "<$1></$2>");
      }, clone: function clone(t, e, i) {
        var n,
            s,
            r,
            o,
            a,
            l,
            u,
            c = t.cloneNode(!0),
            h = x.contains(t.ownerDocument, t);if (!(v.noCloneChecked || 1 !== t.nodeType && 11 !== t.nodeType || x.isXMLDoc(t))) for (o = mt(c), n = 0, s = (r = mt(t)).length; n < s; n++) {
          a = r[n], l = o[n], u = void 0, "input" === (u = l.nodeName.toLowerCase()) && dt.test(a.type) ? l.checked = a.checked : "input" !== u && "textarea" !== u || (l.defaultValue = a.defaultValue);
        }if (e) if (i) for (r = r || mt(t), o = o || mt(c), n = 0, s = r.length; n < s; n++) {
          Bt(r[n], o[n]);
        } else Bt(t, c);return (o = mt(c, "script")).length > 0 && vt(o, !h && mt(t, "script")), c;
      }, cleanData: function cleanData(t) {
        for (var e, i, n, s = x.event.special, r = 0; void 0 !== (i = t[r]); r++) {
          if (X(i)) {
            if (e = i[Z.expando]) {
              if (e.events) for (n in e.events) {
                s[n] ? x.event.remove(i, n) : x.removeEvent(i, n, e.handle);
              }i[Z.expando] = void 0;
            }i[Q.expando] && (i[Q.expando] = void 0);
          }
        }
      } }), x.fn.extend({ detach: function detach(t) {
        return Lt(this, t, !0);
      }, remove: function remove(t) {
        return Lt(this, t);
      }, text: function text(t) {
        return U(this, function (t) {
          return void 0 === t ? x.text(this) : this.empty().each(function () {
            1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = t);
          });
        }, null, t, arguments.length);
      }, append: function append() {
        return Ft(this, arguments, function (t) {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Ot(this, t).appendChild(t);
        });
      }, prepend: function prepend() {
        return Ft(this, arguments, function (t) {
          if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var e = Ot(this, t);e.insertBefore(t, e.firstChild);
          }
        });
      }, before: function before() {
        return Ft(this, arguments, function (t) {
          this.parentNode && this.parentNode.insertBefore(t, this);
        });
      }, after: function after() {
        return Ft(this, arguments, function (t) {
          this.parentNode && this.parentNode.insertBefore(t, this.nextSibling);
        });
      }, empty: function empty() {
        for (var t, e = 0; null != (t = this[e]); e++) {
          1 === t.nodeType && (x.cleanData(mt(t, !1)), t.textContent = "");
        }return this;
      }, clone: function clone(t, e) {
        return t = null != t && t, e = null == e ? t : e, this.map(function () {
          return x.clone(this, t, e);
        });
      }, html: function html(t) {
        return U(this, function (t) {
          var e = this[0] || {},
              i = 0,
              n = this.length;if (void 0 === t && 1 === e.nodeType) return e.innerHTML;if ("string" == typeof t && !Mt.test(t) && !gt[(pt.exec(t) || ["", ""])[1].toLowerCase()]) {
            t = x.htmlPrefilter(t);try {
              for (; i < n; i++) {
                1 === (e = this[i] || {}).nodeType && (x.cleanData(mt(e, !1)), e.innerHTML = t);
              }e = 0;
            } catch (t) {}
          }e && this.empty().append(t);
        }, null, t, arguments.length);
      }, replaceWith: function replaceWith() {
        var t = [];return Ft(this, arguments, function (e) {
          var i = this.parentNode;x.inArray(this, t) < 0 && (x.cleanData(mt(this)), i && i.replaceChild(e, this));
        }, t);
      } }), x.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (t, e) {
      x.fn[t] = function (t) {
        for (var i, n = [], s = x(t), r = s.length - 1, o = 0; o <= r; o++) {
          i = o === r ? this : this.clone(!0), x(s[o])[e](i), c.apply(n, i.get());
        }return this.pushStack(n);
      };
    });var zt = new RegExp("^(" + nt + ")(?!px)[a-z%]+$", "i"),
        Wt = function Wt(t) {
      var e = t.ownerDocument.defaultView;return e && e.opener || (e = i), e.getComputedStyle(t);
    },
        Rt = new RegExp(rt.join("|"), "i");function $t(t, e, i) {
      var n,
          s,
          r,
          o,
          a = t.style;return (i = i || Wt(t)) && ("" !== (o = i.getPropertyValue(e) || i[e]) || x.contains(t.ownerDocument, t) || (o = x.style(t, e)), !v.pixelBoxStyles() && zt.test(o) && Rt.test(e) && (n = a.width, s = a.minWidth, r = a.maxWidth, a.minWidth = a.maxWidth = a.width = o, o = i.width, a.width = n, a.minWidth = s, a.maxWidth = r)), void 0 !== o ? o + "" : o;
    }function qt(t, e) {
      return { get: function get() {
          if (!t()) return (this.get = e).apply(this, arguments);delete this.get;
        } };
    }!function () {
      function t() {
        if (c) {
          u.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", c.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", wt.appendChild(u).appendChild(c);var t = i.getComputedStyle(c);n = "1%" !== t.top, l = 12 === e(t.marginLeft), c.style.right = "60%", a = 36 === e(t.right), s = 36 === e(t.width), c.style.position = "absolute", r = 36 === c.offsetWidth || "absolute", wt.removeChild(u), c = null;
        }
      }function e(t) {
        return Math.round(parseFloat(t));
      }var n,
          s,
          r,
          a,
          l,
          u = o.createElement("div"),
          c = o.createElement("div");c.style && (c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", v.clearCloneStyle = "content-box" === c.style.backgroundClip, x.extend(v, { boxSizingReliable: function boxSizingReliable() {
          return t(), s;
        }, pixelBoxStyles: function pixelBoxStyles() {
          return t(), a;
        }, pixelPosition: function pixelPosition() {
          return t(), n;
        }, reliableMarginLeft: function reliableMarginLeft() {
          return t(), l;
        }, scrollboxSize: function scrollboxSize() {
          return t(), r;
        } }));
    }();var Ut = /^(none|table(?!-c[ea]).+)/,
        Kt = /^--/,
        Yt = { position: "absolute", visibility: "hidden", display: "block" },
        Vt = { letterSpacing: "0", fontWeight: "400" },
        Gt = ["Webkit", "Moz", "ms"],
        Xt = o.createElement("div").style;function Jt(t) {
      var e = x.cssProps[t];return e || (e = x.cssProps[t] = function (t) {
        if (t in Xt) return t;for (var e = t[0].toUpperCase() + t.slice(1), i = Gt.length; i--;) {
          if ((t = Gt[i] + e) in Xt) return t;
        }
      }(t) || t), e;
    }function Zt(t, e, i) {
      var n = st.exec(e);return n ? Math.max(0, n[2] - (i || 0)) + (n[3] || "px") : e;
    }function Qt(t, e, i, n, s, r) {
      var o = "width" === e ? 1 : 0,
          a = 0,
          l = 0;if (i === (n ? "border" : "content")) return 0;for (; o < 4; o += 2) {
        "margin" === i && (l += x.css(t, i + rt[o], !0, s)), n ? ("content" === i && (l -= x.css(t, "padding" + rt[o], !0, s)), "margin" !== i && (l -= x.css(t, "border" + rt[o] + "Width", !0, s))) : (l += x.css(t, "padding" + rt[o], !0, s), "padding" !== i ? l += x.css(t, "border" + rt[o] + "Width", !0, s) : a += x.css(t, "border" + rt[o] + "Width", !0, s));
      }return !n && r >= 0 && (l += Math.max(0, Math.ceil(t["offset" + e[0].toUpperCase() + e.slice(1)] - r - l - a - .5))), l;
    }function te(t, e, i) {
      var n = Wt(t),
          s = $t(t, e, n),
          r = "border-box" === x.css(t, "boxSizing", !1, n),
          o = r;if (zt.test(s)) {
        if (!i) return s;s = "auto";
      }return o = o && (v.boxSizingReliable() || s === t.style[e]), ("auto" === s || !parseFloat(s) && "inline" === x.css(t, "display", !1, n)) && (s = t["offset" + e[0].toUpperCase() + e.slice(1)], o = !0), (s = parseFloat(s) || 0) + Qt(t, e, i || (r ? "border" : "content"), o, n, s) + "px";
    }function ee(t, e, i, n, s) {
      return new ee.prototype.init(t, e, i, n, s);
    }x.extend({ cssHooks: { opacity: { get: function get(t, e) {
            if (e) {
              var i = $t(t, "opacity");return "" === i ? "1" : i;
            }
          } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: {}, style: function style(t, e, i, n) {
        if (t && 3 !== t.nodeType && 8 !== t.nodeType && t.style) {
          var s,
              r,
              o,
              a = G(e),
              l = Kt.test(e),
              u = t.style;if (l || (e = Jt(a)), o = x.cssHooks[e] || x.cssHooks[a], void 0 === i) return o && "get" in o && void 0 !== (s = o.get(t, !1, n)) ? s : u[e];"string" === (r = typeof i === "undefined" ? "undefined" : _typeof(i)) && (s = st.exec(i)) && s[1] && (i = lt(t, e, s), r = "number"), null != i && i == i && ("number" === r && (i += s && s[3] || (x.cssNumber[a] ? "" : "px")), v.clearCloneStyle || "" !== i || 0 !== e.indexOf("background") || (u[e] = "inherit"), o && "set" in o && void 0 === (i = o.set(t, i, n)) || (l ? u.setProperty(e, i) : u[e] = i));
        }
      }, css: function css(t, e, i, n) {
        var s,
            r,
            o,
            a = G(e);return Kt.test(e) || (e = Jt(a)), (o = x.cssHooks[e] || x.cssHooks[a]) && "get" in o && (s = o.get(t, !0, i)), void 0 === s && (s = $t(t, e, n)), "normal" === s && e in Vt && (s = Vt[e]), "" === i || i ? (r = parseFloat(s), !0 === i || isFinite(r) ? r || 0 : s) : s;
      } }), x.each(["height", "width"], function (t, e) {
      x.cssHooks[e] = { get: function get(t, i, n) {
          if (i) return !Ut.test(x.css(t, "display")) || t.getClientRects().length && t.getBoundingClientRect().width ? te(t, e, n) : at(t, Yt, function () {
            return te(t, e, n);
          });
        }, set: function set(t, i, n) {
          var s,
              r = Wt(t),
              o = "border-box" === x.css(t, "boxSizing", !1, r),
              a = n && Qt(t, e, n, o, r);return o && v.scrollboxSize() === r.position && (a -= Math.ceil(t["offset" + e[0].toUpperCase() + e.slice(1)] - parseFloat(r[e]) - Qt(t, e, "border", !1, r) - .5)), a && (s = st.exec(i)) && "px" !== (s[3] || "px") && (t.style[e] = i, i = x.css(t, e)), Zt(0, i, a);
        } };
    }), x.cssHooks.marginLeft = qt(v.reliableMarginLeft, function (t, e) {
      if (e) return (parseFloat($t(t, "marginLeft")) || t.getBoundingClientRect().left - at(t, { marginLeft: 0 }, function () {
        return t.getBoundingClientRect().left;
      })) + "px";
    }), x.each({ margin: "", padding: "", border: "Width" }, function (t, e) {
      x.cssHooks[t + e] = { expand: function expand(i) {
          for (var n = 0, s = {}, r = "string" == typeof i ? i.split(" ") : [i]; n < 4; n++) {
            s[t + rt[n] + e] = r[n] || r[n - 2] || r[0];
          }return s;
        } }, "margin" !== t && (x.cssHooks[t + e].set = Zt);
    }), x.fn.extend({ css: function css(t, e) {
        return U(this, function (t, e, i) {
          var n,
              s,
              r = {},
              o = 0;if (Array.isArray(e)) {
            for (n = Wt(t), s = e.length; o < s; o++) {
              r[e[o]] = x.css(t, e[o], !1, n);
            }return r;
          }return void 0 !== i ? x.style(t, e, i) : x.css(t, e);
        }, t, e, arguments.length > 1);
      } }), x.Tween = ee, ee.prototype = { constructor: ee, init: function init(t, e, i, n, s, r) {
        this.elem = t, this.prop = i, this.easing = s || x.easing._default, this.options = e, this.start = this.now = this.cur(), this.end = n, this.unit = r || (x.cssNumber[i] ? "" : "px");
      }, cur: function cur() {
        var t = ee.propHooks[this.prop];return t && t.get ? t.get(this) : ee.propHooks._default.get(this);
      }, run: function run(t) {
        var e,
            i = ee.propHooks[this.prop];return this.options.duration ? this.pos = e = x.easing[this.easing](t, this.options.duration * t, 0, 1, this.options.duration) : this.pos = e = t, this.now = (this.end - this.start) * e + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), i && i.set ? i.set(this) : ee.propHooks._default.set(this), this;
      } }, ee.prototype.init.prototype = ee.prototype, ee.propHooks = { _default: { get: function get(t) {
          var e;return 1 !== t.elem.nodeType || null != t.elem[t.prop] && null == t.elem.style[t.prop] ? t.elem[t.prop] : (e = x.css(t.elem, t.prop, "")) && "auto" !== e ? e : 0;
        }, set: function set(t) {
          x.fx.step[t.prop] ? x.fx.step[t.prop](t) : 1 !== t.elem.nodeType || null == t.elem.style[x.cssProps[t.prop]] && !x.cssHooks[t.prop] ? t.elem[t.prop] = t.now : x.style(t.elem, t.prop, t.now + t.unit);
        } } }, ee.propHooks.scrollTop = ee.propHooks.scrollLeft = { set: function set(t) {
        t.elem.nodeType && t.elem.parentNode && (t.elem[t.prop] = t.now);
      } }, x.easing = { linear: function linear(t) {
        return t;
      }, swing: function swing(t) {
        return .5 - Math.cos(t * Math.PI) / 2;
      }, _default: "swing" }, x.fx = ee.prototype.init, x.fx.step = {};var ie,
        ne,
        se = /^(?:toggle|show|hide)$/,
        re = /queueHooks$/;function oe() {
      ne && (!1 === o.hidden && i.requestAnimationFrame ? i.requestAnimationFrame(oe) : i.setTimeout(oe, x.fx.interval), x.fx.tick());
    }function ae() {
      return i.setTimeout(function () {
        ie = void 0;
      }), ie = Date.now();
    }function le(t, e) {
      var i,
          n = 0,
          s = { height: t };for (e = e ? 1 : 0; n < 4; n += 2 - e) {
        s["margin" + (i = rt[n])] = s["padding" + i] = t;
      }return e && (s.opacity = s.width = t), s;
    }function ue(t, e, i) {
      for (var n, s = (ce.tweeners[e] || []).concat(ce.tweeners["*"]), r = 0, o = s.length; r < o; r++) {
        if (n = s[r].call(i, e, t)) return n;
      }
    }function ce(t, e, i) {
      var n,
          s,
          r = 0,
          o = ce.prefilters.length,
          a = x.Deferred().always(function () {
        delete l.elem;
      }),
          l = function l() {
        if (s) return !1;for (var e = ie || ae(), i = Math.max(0, u.startTime + u.duration - e), n = 1 - (i / u.duration || 0), r = 0, o = u.tweens.length; r < o; r++) {
          u.tweens[r].run(n);
        }return a.notifyWith(t, [u, n, i]), n < 1 && o ? i : (o || a.notifyWith(t, [u, 1, 0]), a.resolveWith(t, [u]), !1);
      },
          u = a.promise({ elem: t, props: x.extend({}, e), opts: x.extend(!0, { specialEasing: {}, easing: x.easing._default }, i), originalProperties: e, originalOptions: i, startTime: ie || ae(), duration: i.duration, tweens: [], createTween: function createTween(e, i) {
          var n = x.Tween(t, u.opts, e, i, u.opts.specialEasing[e] || u.opts.easing);return u.tweens.push(n), n;
        }, stop: function stop(e) {
          var i = 0,
              n = e ? u.tweens.length : 0;if (s) return this;for (s = !0; i < n; i++) {
            u.tweens[i].run(1);
          }return e ? (a.notifyWith(t, [u, 1, 0]), a.resolveWith(t, [u, e])) : a.rejectWith(t, [u, e]), this;
        } }),
          c = u.props;for (!function (t, e) {
        var i, n, s, r, o;for (i in t) {
          if (s = e[n = G(i)], r = t[i], Array.isArray(r) && (s = r[1], r = t[i] = r[0]), i !== n && (t[n] = r, delete t[i]), (o = x.cssHooks[n]) && ("expand" in o)) for (i in r = o.expand(r), delete t[n], r) {
            (i in t) || (t[i] = r[i], e[i] = s);
          } else e[n] = s;
        }
      }(c, u.opts.specialEasing); r < o; r++) {
        if (n = ce.prefilters[r].call(u, t, c, u.opts)) return _(n.stop) && (x._queueHooks(u.elem, u.opts.queue).stop = n.stop.bind(n)), n;
      }return x.map(c, ue, u), _(u.opts.start) && u.opts.start.call(t, u), u.progress(u.opts.progress).done(u.opts.done, u.opts.complete).fail(u.opts.fail).always(u.opts.always), x.fx.timer(x.extend(l, { elem: t, anim: u, queue: u.opts.queue })), u;
    }x.Animation = x.extend(ce, { tweeners: { "*": [function (t, e) {
          var i = this.createTween(t, e);return lt(i.elem, t, st.exec(e), i), i;
        }] }, tweener: function tweener(t, e) {
        _(t) ? (e = t, t = ["*"]) : t = t.match(F);for (var i, n = 0, s = t.length; n < s; n++) {
          i = t[n], ce.tweeners[i] = ce.tweeners[i] || [], ce.tweeners[i].unshift(e);
        }
      }, prefilters: [function (t, e, i) {
        var n,
            s,
            r,
            o,
            a,
            l,
            u,
            c,
            h = "width" in e || "height" in e,
            d = this,
            p = {},
            f = t.style,
            g = t.nodeType && ot(t),
            m = Z.get(t, "fxshow");for (n in i.queue || (null == (o = x._queueHooks(t, "fx")).unqueued && (o.unqueued = 0, a = o.empty.fire, o.empty.fire = function () {
          o.unqueued || a();
        }), o.unqueued++, d.always(function () {
          d.always(function () {
            o.unqueued--, x.queue(t, "fx").length || o.empty.fire();
          });
        })), e) {
          if (s = e[n], se.test(s)) {
            if (delete e[n], r = r || "toggle" === s, s === (g ? "hide" : "show")) {
              if ("show" !== s || !m || void 0 === m[n]) continue;g = !0;
            }p[n] = m && m[n] || x.style(t, n);
          }
        }if ((l = !x.isEmptyObject(e)) || !x.isEmptyObject(p)) for (n in h && 1 === t.nodeType && (i.overflow = [f.overflow, f.overflowX, f.overflowY], null == (u = m && m.display) && (u = Z.get(t, "display")), "none" === (c = x.css(t, "display")) && (u ? c = u : (ht([t], !0), u = t.style.display || u, c = x.css(t, "display"), ht([t]))), ("inline" === c || "inline-block" === c && null != u) && "none" === x.css(t, "float") && (l || (d.done(function () {
          f.display = u;
        }), null == u && (c = f.display, u = "none" === c ? "" : c)), f.display = "inline-block")), i.overflow && (f.overflow = "hidden", d.always(function () {
          f.overflow = i.overflow[0], f.overflowX = i.overflow[1], f.overflowY = i.overflow[2];
        })), l = !1, p) {
          l || (m ? "hidden" in m && (g = m.hidden) : m = Z.access(t, "fxshow", { display: u }), r && (m.hidden = !g), g && ht([t], !0), d.done(function () {
            for (n in g || ht([t]), Z.remove(t, "fxshow"), p) {
              x.style(t, n, p[n]);
            }
          })), l = ue(g ? m[n] : 0, n, d), n in m || (m[n] = l.start, g && (l.end = l.start, l.start = 0));
        }
      }], prefilter: function prefilter(t, e) {
        e ? ce.prefilters.unshift(t) : ce.prefilters.push(t);
      } }), x.speed = function (t, e, i) {
      var n = t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? x.extend({}, t) : { complete: i || !i && e || _(t) && t, duration: t, easing: i && e || e && !_(e) && e };return x.fx.off ? n.duration = 0 : "number" != typeof n.duration && (n.duration in x.fx.speeds ? n.duration = x.fx.speeds[n.duration] : n.duration = x.fx.speeds._default), null != n.queue && !0 !== n.queue || (n.queue = "fx"), n.old = n.complete, n.complete = function () {
        _(n.old) && n.old.call(this), n.queue && x.dequeue(this, n.queue);
      }, n;
    }, x.fn.extend({ fadeTo: function fadeTo(t, e, i, n) {
        return this.filter(ot).css("opacity", 0).show().end().animate({ opacity: e }, t, i, n);
      }, animate: function animate(t, e, i, n) {
        var s = x.isEmptyObject(t),
            r = x.speed(e, i, n),
            o = function o() {
          var e = ce(this, x.extend({}, t), r);(s || Z.get(this, "finish")) && e.stop(!0);
        };return o.finish = o, s || !1 === r.queue ? this.each(o) : this.queue(r.queue, o);
      }, stop: function stop(t, e, i) {
        var n = function n(t) {
          var e = t.stop;delete t.stop, e(i);
        };return "string" != typeof t && (i = e, e = t, t = void 0), e && !1 !== t && this.queue(t || "fx", []), this.each(function () {
          var e = !0,
              s = null != t && t + "queueHooks",
              r = x.timers,
              o = Z.get(this);if (s) o[s] && o[s].stop && n(o[s]);else for (s in o) {
            o[s] && o[s].stop && re.test(s) && n(o[s]);
          }for (s = r.length; s--;) {
            r[s].elem !== this || null != t && r[s].queue !== t || (r[s].anim.stop(i), e = !1, r.splice(s, 1));
          }!e && i || x.dequeue(this, t);
        });
      }, finish: function finish(t) {
        return !1 !== t && (t = t || "fx"), this.each(function () {
          var e,
              i = Z.get(this),
              n = i[t + "queue"],
              s = i[t + "queueHooks"],
              r = x.timers,
              o = n ? n.length : 0;for (i.finish = !0, x.queue(this, t, []), s && s.stop && s.stop.call(this, !0), e = r.length; e--;) {
            r[e].elem === this && r[e].queue === t && (r[e].anim.stop(!0), r.splice(e, 1));
          }for (e = 0; e < o; e++) {
            n[e] && n[e].finish && n[e].finish.call(this);
          }delete i.finish;
        });
      } }), x.each(["toggle", "show", "hide"], function (t, e) {
      var i = x.fn[e];x.fn[e] = function (t, n, s) {
        return null == t || "boolean" == typeof t ? i.apply(this, arguments) : this.animate(le(e, !0), t, n, s);
      };
    }), x.each({ slideDown: le("show"), slideUp: le("hide"), slideToggle: le("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (t, e) {
      x.fn[t] = function (t, i, n) {
        return this.animate(e, t, i, n);
      };
    }), x.timers = [], x.fx.tick = function () {
      var t,
          e = 0,
          i = x.timers;for (ie = Date.now(); e < i.length; e++) {
        (t = i[e])() || i[e] !== t || i.splice(e--, 1);
      }i.length || x.fx.stop(), ie = void 0;
    }, x.fx.timer = function (t) {
      x.timers.push(t), x.fx.start();
    }, x.fx.interval = 13, x.fx.start = function () {
      ne || (ne = !0, oe());
    }, x.fx.stop = function () {
      ne = null;
    }, x.fx.speeds = { slow: 600, fast: 200, _default: 400 }, x.fn.delay = function (t, e) {
      return t = x.fx && x.fx.speeds[t] || t, e = e || "fx", this.queue(e, function (e, n) {
        var s = i.setTimeout(e, t);n.stop = function () {
          i.clearTimeout(s);
        };
      });
    }, function () {
      var t = o.createElement("input"),
          e = o.createElement("select").appendChild(o.createElement("option"));t.type = "checkbox", v.checkOn = "" !== t.value, v.optSelected = e.selected, (t = o.createElement("input")).value = "t", t.type = "radio", v.radioValue = "t" === t.value;
    }();var he,
        de = x.expr.attrHandle;x.fn.extend({ attr: function attr(t, e) {
        return U(this, x.attr, t, e, arguments.length > 1);
      }, removeAttr: function removeAttr(t) {
        return this.each(function () {
          x.removeAttr(this, t);
        });
      } }), x.extend({ attr: function attr(t, e, i) {
        var n,
            s,
            r = t.nodeType;if (3 !== r && 8 !== r && 2 !== r) return void 0 === t.getAttribute ? x.prop(t, e, i) : (1 === r && x.isXMLDoc(t) || (s = x.attrHooks[e.toLowerCase()] || (x.expr.match.bool.test(e) ? he : void 0)), void 0 !== i ? null === i ? void x.removeAttr(t, e) : s && "set" in s && void 0 !== (n = s.set(t, i, e)) ? n : (t.setAttribute(e, i + ""), i) : s && "get" in s && null !== (n = s.get(t, e)) ? n : null == (n = x.find.attr(t, e)) ? void 0 : n);
      }, attrHooks: { type: { set: function set(t, e) {
            if (!v.radioValue && "radio" === e && j(t, "input")) {
              var i = t.value;return t.setAttribute("type", e), i && (t.value = i), e;
            }
          } } }, removeAttr: function removeAttr(t, e) {
        var i,
            n = 0,
            s = e && e.match(F);if (s && 1 === t.nodeType) for (; i = s[n++];) {
          t.removeAttribute(i);
        }
      } }), he = { set: function set(t, e, i) {
        return !1 === e ? x.removeAttr(t, i) : t.setAttribute(i, i), i;
      } }, x.each(x.expr.match.bool.source.match(/\w+/g), function (t, e) {
      var i = de[e] || x.find.attr;de[e] = function (t, e, n) {
        var s,
            r,
            o = e.toLowerCase();return n || (r = de[o], de[o] = s, s = null != i(t, e, n) ? o : null, de[o] = r), s;
      };
    });var pe = /^(?:input|select|textarea|button)$/i,
        fe = /^(?:a|area)$/i;function ge(t) {
      return (t.match(F) || []).join(" ");
    }function me(t) {
      return t.getAttribute && t.getAttribute("class") || "";
    }function ve(t) {
      return Array.isArray(t) ? t : "string" == typeof t && t.match(F) || [];
    }x.fn.extend({ prop: function prop(t, e) {
        return U(this, x.prop, t, e, arguments.length > 1);
      }, removeProp: function removeProp(t) {
        return this.each(function () {
          delete this[x.propFix[t] || t];
        });
      } }), x.extend({ prop: function prop(t, e, i) {
        var n,
            s,
            r = t.nodeType;if (3 !== r && 8 !== r && 2 !== r) return 1 === r && x.isXMLDoc(t) || (e = x.propFix[e] || e, s = x.propHooks[e]), void 0 !== i ? s && "set" in s && void 0 !== (n = s.set(t, i, e)) ? n : t[e] = i : s && "get" in s && null !== (n = s.get(t, e)) ? n : t[e];
      }, propHooks: { tabIndex: { get: function get(t) {
            var e = x.find.attr(t, "tabindex");return e ? parseInt(e, 10) : pe.test(t.nodeName) || fe.test(t.nodeName) && t.href ? 0 : -1;
          } } }, propFix: { for: "htmlFor", class: "className" } }), v.optSelected || (x.propHooks.selected = { get: function get(t) {
        var e = t.parentNode;return e && e.parentNode && e.parentNode.selectedIndex, null;
      }, set: function set(t) {
        var e = t.parentNode;e && (e.selectedIndex, e.parentNode && e.parentNode.selectedIndex);
      } }), x.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
      x.propFix[this.toLowerCase()] = this;
    }), x.fn.extend({ addClass: function addClass(t) {
        var e,
            i,
            n,
            s,
            r,
            o,
            a,
            l = 0;if (_(t)) return this.each(function (e) {
          x(this).addClass(t.call(this, e, me(this)));
        });if ((e = ve(t)).length) for (; i = this[l++];) {
          if (s = me(i), n = 1 === i.nodeType && " " + ge(s) + " ") {
            for (o = 0; r = e[o++];) {
              n.indexOf(" " + r + " ") < 0 && (n += r + " ");
            }s !== (a = ge(n)) && i.setAttribute("class", a);
          }
        }return this;
      }, removeClass: function removeClass(t) {
        var e,
            i,
            n,
            s,
            r,
            o,
            a,
            l = 0;if (_(t)) return this.each(function (e) {
          x(this).removeClass(t.call(this, e, me(this)));
        });if (!arguments.length) return this.attr("class", "");if ((e = ve(t)).length) for (; i = this[l++];) {
          if (s = me(i), n = 1 === i.nodeType && " " + ge(s) + " ") {
            for (o = 0; r = e[o++];) {
              for (; n.indexOf(" " + r + " ") > -1;) {
                n = n.replace(" " + r + " ", " ");
              }
            }s !== (a = ge(n)) && i.setAttribute("class", a);
          }
        }return this;
      }, toggleClass: function toggleClass(t, e) {
        var i = typeof t === "undefined" ? "undefined" : _typeof(t),
            n = "string" === i || Array.isArray(t);return "boolean" == typeof e && n ? e ? this.addClass(t) : this.removeClass(t) : _(t) ? this.each(function (i) {
          x(this).toggleClass(t.call(this, i, me(this), e), e);
        }) : this.each(function () {
          var e, s, r, o;if (n) for (s = 0, r = x(this), o = ve(t); e = o[s++];) {
            r.hasClass(e) ? r.removeClass(e) : r.addClass(e);
          } else void 0 !== t && "boolean" !== i || ((e = me(this)) && Z.set(this, "__className__", e), this.setAttribute && this.setAttribute("class", e || !1 === t ? "" : Z.get(this, "__className__") || ""));
        });
      }, hasClass: function hasClass(t) {
        var e,
            i,
            n = 0;for (e = " " + t + " "; i = this[n++];) {
          if (1 === i.nodeType && (" " + ge(me(i)) + " ").indexOf(e) > -1) return !0;
        }return !1;
      } });var _e = /\r/g;x.fn.extend({ val: function val(t) {
        var e,
            i,
            n,
            s = this[0];return arguments.length ? (n = _(t), this.each(function (i) {
          var s;1 === this.nodeType && (null == (s = n ? t.call(this, i, x(this).val()) : t) ? s = "" : "number" == typeof s ? s += "" : Array.isArray(s) && (s = x.map(s, function (t) {
            return null == t ? "" : t + "";
          })), (e = x.valHooks[this.type] || x.valHooks[this.nodeName.toLowerCase()]) && "set" in e && void 0 !== e.set(this, s, "value") || (this.value = s));
        })) : s ? (e = x.valHooks[s.type] || x.valHooks[s.nodeName.toLowerCase()]) && "get" in e && void 0 !== (i = e.get(s, "value")) ? i : "string" == typeof (i = s.value) ? i.replace(_e, "") : null == i ? "" : i : void 0;
      } }), x.extend({ valHooks: { option: { get: function get(t) {
            var e = x.find.attr(t, "value");return null != e ? e : ge(x.text(t));
          } }, select: { get: function get(t) {
            var e,
                i,
                n,
                s = t.options,
                r = t.selectedIndex,
                o = "select-one" === t.type,
                a = o ? null : [],
                l = o ? r + 1 : s.length;for (n = r < 0 ? l : o ? r : 0; n < l; n++) {
              if (((i = s[n]).selected || n === r) && !i.disabled && (!i.parentNode.disabled || !j(i.parentNode, "optgroup"))) {
                if (e = x(i).val(), o) return e;a.push(e);
              }
            }return a;
          }, set: function set(t, e) {
            for (var i, n, s = t.options, r = x.makeArray(e), o = s.length; o--;) {
              ((n = s[o]).selected = x.inArray(x.valHooks.option.get(n), r) > -1) && (i = !0);
            }return i || (t.selectedIndex = -1), r;
          } } } }), x.each(["radio", "checkbox"], function () {
      x.valHooks[this] = { set: function set(t, e) {
          if (Array.isArray(e)) return t.checked = x.inArray(x(t).val(), e) > -1;
        } }, v.checkOn || (x.valHooks[this].get = function (t) {
        return null === t.getAttribute("value") ? "on" : t.value;
      });
    }), v.focusin = "onfocusin" in i;var be = /^(?:focusinfocus|focusoutblur)$/,
        ye = function ye(t) {
      t.stopPropagation();
    };x.extend(x.event, { trigger: function trigger(t, e, n, s) {
        var r,
            a,
            l,
            u,
            c,
            h,
            d,
            p,
            g = [n || o],
            m = f.call(t, "type") ? t.type : t,
            v = f.call(t, "namespace") ? t.namespace.split(".") : [];if (a = p = l = n = n || o, 3 !== n.nodeType && 8 !== n.nodeType && !be.test(m + x.event.triggered) && (m.indexOf(".") > -1 && (v = m.split("."), m = v.shift(), v.sort()), c = m.indexOf(":") < 0 && "on" + m, (t = t[x.expando] ? t : new x.Event(m, "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t)).isTrigger = s ? 2 : 3, t.namespace = v.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + v.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = n), e = null == e ? [t] : x.makeArray(e, [t]), d = x.event.special[m] || {}, s || !d.trigger || !1 !== d.trigger.apply(n, e))) {
          if (!s && !d.noBubble && !b(n)) {
            for (u = d.delegateType || m, be.test(u + m) || (a = a.parentNode); a; a = a.parentNode) {
              g.push(a), l = a;
            }l === (n.ownerDocument || o) && g.push(l.defaultView || l.parentWindow || i);
          }for (r = 0; (a = g[r++]) && !t.isPropagationStopped();) {
            p = a, t.type = r > 1 ? u : d.bindType || m, (h = (Z.get(a, "events") || {})[t.type] && Z.get(a, "handle")) && h.apply(a, e), (h = c && a[c]) && h.apply && X(a) && (t.result = h.apply(a, e), !1 === t.result && t.preventDefault());
          }return t.type = m, s || t.isDefaultPrevented() || d._default && !1 !== d._default.apply(g.pop(), e) || !X(n) || c && _(n[m]) && !b(n) && ((l = n[c]) && (n[c] = null), x.event.triggered = m, t.isPropagationStopped() && p.addEventListener(m, ye), n[m](), t.isPropagationStopped() && p.removeEventListener(m, ye), x.event.triggered = void 0, l && (n[c] = l)), t.result;
        }
      }, simulate: function simulate(t, e, i) {
        var n = x.extend(new x.Event(), i, { type: t, isSimulated: !0 });x.event.trigger(n, null, e);
      } }), x.fn.extend({ trigger: function trigger(t, e) {
        return this.each(function () {
          x.event.trigger(t, e, this);
        });
      }, triggerHandler: function triggerHandler(t, e) {
        var i = this[0];if (i) return x.event.trigger(t, e, i, !0);
      } }), v.focusin || x.each({ focus: "focusin", blur: "focusout" }, function (t, e) {
      var i = function i(t) {
        x.event.simulate(e, t.target, x.event.fix(t));
      };x.event.special[e] = { setup: function setup() {
          var n = this.ownerDocument || this,
              s = Z.access(n, e);s || n.addEventListener(t, i, !0), Z.access(n, e, (s || 0) + 1);
        }, teardown: function teardown() {
          var n = this.ownerDocument || this,
              s = Z.access(n, e) - 1;s ? Z.access(n, e, s) : (n.removeEventListener(t, i, !0), Z.remove(n, e));
        } };
    });var ke = i.location,
        we = Date.now(),
        xe = /\?/;x.parseXML = function (t) {
      var e;if (!t || "string" != typeof t) return null;try {
        e = new i.DOMParser().parseFromString(t, "text/xml");
      } catch (t) {
        e = void 0;
      }return e && !e.getElementsByTagName("parsererror").length || x.error("Invalid XML: " + t), e;
    };var Ce = /\[\]$/,
        De = /\r?\n/g,
        Se = /^(?:submit|button|image|reset|file)$/i,
        Te = /^(?:input|select|textarea|keygen)/i;function Ie(t, e, i, n) {
      var s;if (Array.isArray(e)) x.each(e, function (e, s) {
        i || Ce.test(t) ? n(t, s) : Ie(t + "[" + ("object" == (typeof s === "undefined" ? "undefined" : _typeof(s)) && null != s ? e : "") + "]", s, i, n);
      });else if (i || "object" !== w(e)) n(t, e);else for (s in e) {
        Ie(t + "[" + s + "]", e[s], i, n);
      }
    }x.param = function (t, e) {
      var i,
          n = [],
          s = function s(t, e) {
        var i = _(e) ? e() : e;n[n.length] = encodeURIComponent(t) + "=" + encodeURIComponent(null == i ? "" : i);
      };if (Array.isArray(t) || t.jquery && !x.isPlainObject(t)) x.each(t, function () {
        s(this.name, this.value);
      });else for (i in t) {
        Ie(i, t[i], e, s);
      }return n.join("&");
    }, x.fn.extend({ serialize: function serialize() {
        return x.param(this.serializeArray());
      }, serializeArray: function serializeArray() {
        return this.map(function () {
          var t = x.prop(this, "elements");return t ? x.makeArray(t) : this;
        }).filter(function () {
          var t = this.type;return this.name && !x(this).is(":disabled") && Te.test(this.nodeName) && !Se.test(t) && (this.checked || !dt.test(t));
        }).map(function (t, e) {
          var i = x(this).val();return null == i ? null : Array.isArray(i) ? x.map(i, function (t) {
            return { name: e.name, value: t.replace(De, "\r\n") };
          }) : { name: e.name, value: i.replace(De, "\r\n") };
        }).get();
      } });var Ae = /%20/g,
        je = /#.*$/,
        Me = /([?&])_=[^&]*/,
        Pe = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Ee = /^(?:GET|HEAD)$/,
        Oe = /^\/\//,
        He = {},
        Ne = {},
        Be = "*/".concat("*"),
        Fe = o.createElement("a");function Le(t) {
      return function (e, i) {
        "string" != typeof e && (i = e, e = "*");var n,
            s = 0,
            r = e.toLowerCase().match(F) || [];if (_(i)) for (; n = r[s++];) {
          "+" === n[0] ? (n = n.slice(1) || "*", (t[n] = t[n] || []).unshift(i)) : (t[n] = t[n] || []).push(i);
        }
      };
    }function ze(t, e, i, n) {
      var s = {},
          r = t === Ne;function o(a) {
        var l;return s[a] = !0, x.each(t[a] || [], function (t, a) {
          var u = a(e, i, n);return "string" != typeof u || r || s[u] ? r ? !(l = u) : void 0 : (e.dataTypes.unshift(u), o(u), !1);
        }), l;
      }return o(e.dataTypes[0]) || !s["*"] && o("*");
    }function We(t, e) {
      var i,
          n,
          s = x.ajaxSettings.flatOptions || {};for (i in e) {
        void 0 !== e[i] && ((s[i] ? t : n || (n = {}))[i] = e[i]);
      }return n && x.extend(!0, t, n), t;
    }Fe.href = ke.href, x.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: ke.href, type: "GET", isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ke.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Be, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": x.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(t, e) {
        return e ? We(We(t, x.ajaxSettings), e) : We(x.ajaxSettings, t);
      }, ajaxPrefilter: Le(He), ajaxTransport: Le(Ne), ajax: function ajax(t, e) {
        "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (e = t, t = void 0), e = e || {};var n,
            s,
            r,
            a,
            l,
            u,
            c,
            h,
            d,
            p,
            f = x.ajaxSetup({}, e),
            g = f.context || f,
            m = f.context && (g.nodeType || g.jquery) ? x(g) : x.event,
            v = x.Deferred(),
            _ = x.Callbacks("once memory"),
            b = f.statusCode || {},
            y = {},
            k = {},
            w = "canceled",
            C = { readyState: 0, getResponseHeader: function getResponseHeader(t) {
            var e;if (c) {
              if (!a) for (a = {}; e = Pe.exec(r);) {
                a[e[1].toLowerCase()] = e[2];
              }e = a[t.toLowerCase()];
            }return null == e ? null : e;
          }, getAllResponseHeaders: function getAllResponseHeaders() {
            return c ? r : null;
          }, setRequestHeader: function setRequestHeader(t, e) {
            return null == c && (t = k[t.toLowerCase()] = k[t.toLowerCase()] || t, y[t] = e), this;
          }, overrideMimeType: function overrideMimeType(t) {
            return null == c && (f.mimeType = t), this;
          }, statusCode: function statusCode(t) {
            var e;if (t) if (c) C.always(t[C.status]);else for (e in t) {
              b[e] = [b[e], t[e]];
            }return this;
          }, abort: function abort(t) {
            var e = t || w;return n && n.abort(e), D(0, e), this;
          } };if (v.promise(C), f.url = ((t || f.url || ke.href) + "").replace(Oe, ke.protocol + "//"), f.type = e.method || e.type || f.method || f.type, f.dataTypes = (f.dataType || "*").toLowerCase().match(F) || [""], null == f.crossDomain) {
          u = o.createElement("a");try {
            u.href = f.url, u.href = u.href, f.crossDomain = Fe.protocol + "//" + Fe.host != u.protocol + "//" + u.host;
          } catch (t) {
            f.crossDomain = !0;
          }
        }if (f.data && f.processData && "string" != typeof f.data && (f.data = x.param(f.data, f.traditional)), ze(He, f, e, C), c) return C;for (d in (h = x.event && f.global) && 0 == x.active++ && x.event.trigger("ajaxStart"), f.type = f.type.toUpperCase(), f.hasContent = !Ee.test(f.type), s = f.url.replace(je, ""), f.hasContent ? f.data && f.processData && 0 === (f.contentType || "").indexOf("application/x-www-form-urlencoded") && (f.data = f.data.replace(Ae, "+")) : (p = f.url.slice(s.length), f.data && (f.processData || "string" == typeof f.data) && (s += (xe.test(s) ? "&" : "?") + f.data, delete f.data), !1 === f.cache && (s = s.replace(Me, "$1"), p = (xe.test(s) ? "&" : "?") + "_=" + we++ + p), f.url = s + p), f.ifModified && (x.lastModified[s] && C.setRequestHeader("If-Modified-Since", x.lastModified[s]), x.etag[s] && C.setRequestHeader("If-None-Match", x.etag[s])), (f.data && f.hasContent && !1 !== f.contentType || e.contentType) && C.setRequestHeader("Content-Type", f.contentType), C.setRequestHeader("Accept", f.dataTypes[0] && f.accepts[f.dataTypes[0]] ? f.accepts[f.dataTypes[0]] + ("*" !== f.dataTypes[0] ? ", " + Be + "; q=0.01" : "") : f.accepts["*"]), f.headers) {
          C.setRequestHeader(d, f.headers[d]);
        }if (f.beforeSend && (!1 === f.beforeSend.call(g, C, f) || c)) return C.abort();if (w = "abort", _.add(f.complete), C.done(f.success), C.fail(f.error), n = ze(Ne, f, e, C)) {
          if (C.readyState = 1, h && m.trigger("ajaxSend", [C, f]), c) return C;f.async && f.timeout > 0 && (l = i.setTimeout(function () {
            C.abort("timeout");
          }, f.timeout));try {
            c = !1, n.send(y, D);
          } catch (t) {
            if (c) throw t;D(-1, t);
          }
        } else D(-1, "No Transport");function D(t, e, o, a) {
          var u,
              d,
              p,
              y,
              k,
              w = e;c || (c = !0, l && i.clearTimeout(l), n = void 0, r = a || "", C.readyState = t > 0 ? 4 : 0, u = t >= 200 && t < 300 || 304 === t, o && (y = function (t, e, i) {
            for (var n, s, r, o, a = t.contents, l = t.dataTypes; "*" === l[0];) {
              l.shift(), void 0 === n && (n = t.mimeType || e.getResponseHeader("Content-Type"));
            }if (n) for (s in a) {
              if (a[s] && a[s].test(n)) {
                l.unshift(s);break;
              }
            }if (l[0] in i) r = l[0];else {
              for (s in i) {
                if (!l[0] || t.converters[s + " " + l[0]]) {
                  r = s;break;
                }o || (o = s);
              }r = r || o;
            }if (r) return r !== l[0] && l.unshift(r), i[r];
          }(f, C, o)), y = function (t, e, i, n) {
            var s,
                r,
                o,
                a,
                l,
                u = {},
                c = t.dataTypes.slice();if (c[1]) for (o in t.converters) {
              u[o.toLowerCase()] = t.converters[o];
            }for (r = c.shift(); r;) {
              if (t.responseFields[r] && (i[t.responseFields[r]] = e), !l && n && t.dataFilter && (e = t.dataFilter(e, t.dataType)), l = r, r = c.shift()) if ("*" === r) r = l;else if ("*" !== l && l !== r) {
                if (!(o = u[l + " " + r] || u["* " + r])) for (s in u) {
                  if ((a = s.split(" "))[1] === r && (o = u[l + " " + a[0]] || u["* " + a[0]])) {
                    !0 === o ? o = u[s] : !0 !== u[s] && (r = a[0], c.unshift(a[1]));break;
                  }
                }if (!0 !== o) if (o && t.throws) e = o(e);else try {
                  e = o(e);
                } catch (t) {
                  return { state: "parsererror", error: o ? t : "No conversion from " + l + " to " + r };
                }
              }
            }return { state: "success", data: e };
          }(f, y, C, u), u ? (f.ifModified && ((k = C.getResponseHeader("Last-Modified")) && (x.lastModified[s] = k), (k = C.getResponseHeader("etag")) && (x.etag[s] = k)), 204 === t || "HEAD" === f.type ? w = "nocontent" : 304 === t ? w = "notmodified" : (w = y.state, d = y.data, u = !(p = y.error))) : (p = w, !t && w || (w = "error", t < 0 && (t = 0))), C.status = t, C.statusText = (e || w) + "", u ? v.resolveWith(g, [d, w, C]) : v.rejectWith(g, [C, w, p]), C.statusCode(b), b = void 0, h && m.trigger(u ? "ajaxSuccess" : "ajaxError", [C, f, u ? d : p]), _.fireWith(g, [C, w]), h && (m.trigger("ajaxComplete", [C, f]), --x.active || x.event.trigger("ajaxStop")));
        }return C;
      }, getJSON: function getJSON(t, e, i) {
        return x.get(t, e, i, "json");
      }, getScript: function getScript(t, e) {
        return x.get(t, void 0, e, "script");
      } }), x.each(["get", "post"], function (t, e) {
      x[e] = function (t, i, n, s) {
        return _(i) && (s = s || n, n = i, i = void 0), x.ajax(x.extend({ url: t, type: e, dataType: s, data: i, success: n }, x.isPlainObject(t) && t));
      };
    }), x._evalUrl = function (t) {
      return x.ajax({ url: t, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, throws: !0 });
    }, x.fn.extend({ wrapAll: function wrapAll(t) {
        var e;return this[0] && (_(t) && (t = t.call(this[0])), e = x(t, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && e.insertBefore(this[0]), e.map(function () {
          for (var t = this; t.firstElementChild;) {
            t = t.firstElementChild;
          }return t;
        }).append(this)), this;
      }, wrapInner: function wrapInner(t) {
        return _(t) ? this.each(function (e) {
          x(this).wrapInner(t.call(this, e));
        }) : this.each(function () {
          var e = x(this),
              i = e.contents();i.length ? i.wrapAll(t) : e.append(t);
        });
      }, wrap: function wrap(t) {
        var e = _(t);return this.each(function (i) {
          x(this).wrapAll(e ? t.call(this, i) : t);
        });
      }, unwrap: function unwrap(t) {
        return this.parent(t).not("body").each(function () {
          x(this).replaceWith(this.childNodes);
        }), this;
      } }), x.expr.pseudos.hidden = function (t) {
      return !x.expr.pseudos.visible(t);
    }, x.expr.pseudos.visible = function (t) {
      return !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length);
    }, x.ajaxSettings.xhr = function () {
      try {
        return new i.XMLHttpRequest();
      } catch (t) {}
    };var Re = { 0: 200, 1223: 204 },
        $e = x.ajaxSettings.xhr();v.cors = !!$e && "withCredentials" in $e, v.ajax = $e = !!$e, x.ajaxTransport(function (t) {
      var _e3, n;if (v.cors || $e && !t.crossDomain) return { send: function send(s, r) {
          var o,
              a = t.xhr();if (a.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (o in t.xhrFields) {
            a[o] = t.xhrFields[o];
          }for (o in t.mimeType && a.overrideMimeType && a.overrideMimeType(t.mimeType), t.crossDomain || s["X-Requested-With"] || (s["X-Requested-With"] = "XMLHttpRequest"), s) {
            a.setRequestHeader(o, s[o]);
          }_e3 = function e(t) {
            return function () {
              _e3 && (_e3 = n = a.onload = a.onerror = a.onabort = a.ontimeout = a.onreadystatechange = null, "abort" === t ? a.abort() : "error" === t ? "number" != typeof a.status ? r(0, "error") : r(a.status, a.statusText) : r(Re[a.status] || a.status, a.statusText, "text" !== (a.responseType || "text") || "string" != typeof a.responseText ? { binary: a.response } : { text: a.responseText }, a.getAllResponseHeaders()));
            };
          }, a.onload = _e3(), n = a.onerror = a.ontimeout = _e3("error"), void 0 !== a.onabort ? a.onabort = n : a.onreadystatechange = function () {
            4 === a.readyState && i.setTimeout(function () {
              _e3 && n();
            });
          }, _e3 = _e3("abort");try {
            a.send(t.hasContent && t.data || null);
          } catch (t) {
            if (_e3) throw t;
          }
        }, abort: function abort() {
          _e3 && _e3();
        } };
    }), x.ajaxPrefilter(function (t) {
      t.crossDomain && (t.contents.script = !1);
    }), x.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function textScript(t) {
          return x.globalEval(t), t;
        } } }), x.ajaxPrefilter("script", function (t) {
      void 0 === t.cache && (t.cache = !1), t.crossDomain && (t.type = "GET");
    }), x.ajaxTransport("script", function (t) {
      var e, i;if (t.crossDomain) return { send: function send(n, s) {
          e = x("<script>").prop({ charset: t.scriptCharset, src: t.url }).on("load error", i = function (_i2) {
            function i(_x) {
              return _i2.apply(this, arguments);
            }

            i.toString = function () {
              return _i2.toString();
            };

            return i;
          }(function (t) {
            e.remove(), i = null, t && s("error" === t.type ? 404 : 200, t.type);
          })), o.head.appendChild(e[0]);
        }, abort: function abort() {
          i && i();
        } };
    });var qe,
        Ue = [],
        Ke = /(=)\?(?=&|$)|\?\?/;x.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
        var t = Ue.pop() || x.expando + "_" + we++;return this[t] = !0, t;
      } }), x.ajaxPrefilter("json jsonp", function (t, e, n) {
      var s,
          r,
          o,
          a = !1 !== t.jsonp && (Ke.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Ke.test(t.data) && "data");if (a || "jsonp" === t.dataTypes[0]) return s = t.jsonpCallback = _(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, a ? t[a] = t[a].replace(Ke, "$1" + s) : !1 !== t.jsonp && (t.url += (xe.test(t.url) ? "&" : "?") + t.jsonp + "=" + s), t.converters["script json"] = function () {
        return o || x.error(s + " was not called"), o[0];
      }, t.dataTypes[0] = "json", r = i[s], i[s] = function () {
        o = arguments;
      }, n.always(function () {
        void 0 === r ? x(i).removeProp(s) : i[s] = r, t[s] && (t.jsonpCallback = e.jsonpCallback, Ue.push(s)), o && _(r) && r(o[0]), o = r = void 0;
      }), "script";
    }), v.createHTMLDocument = ((qe = o.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 2 === qe.childNodes.length), x.parseHTML = function (t, e, i) {
      return "string" != typeof t ? [] : ("boolean" == typeof e && (i = e, e = !1), e || (v.createHTMLDocument ? ((n = (e = o.implementation.createHTMLDocument("")).createElement("base")).href = o.location.href, e.head.appendChild(n)) : e = o), r = !i && [], (s = M.exec(t)) ? [e.createElement(s[1])] : (s = kt([t], e, r), r && r.length && x(r).remove(), x.merge([], s.childNodes)));var n, s, r;
    }, x.fn.load = function (t, e, i) {
      var n,
          s,
          r,
          o = this,
          a = t.indexOf(" ");return a > -1 && (n = ge(t.slice(a)), t = t.slice(0, a)), _(e) ? (i = e, e = void 0) : e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && (s = "POST"), o.length > 0 && x.ajax({ url: t, type: s || "GET", dataType: "html", data: e }).done(function (t) {
        r = arguments, o.html(n ? x("<div>").append(x.parseHTML(t)).find(n) : t);
      }).always(i && function (t, e) {
        o.each(function () {
          i.apply(this, r || [t.responseText, e, t]);
        });
      }), this;
    }, x.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (t, e) {
      x.fn[e] = function (t) {
        return this.on(e, t);
      };
    }), x.expr.pseudos.animated = function (t) {
      return x.grep(x.timers, function (e) {
        return t === e.elem;
      }).length;
    }, x.offset = { setOffset: function setOffset(t, e, i) {
        var n,
            s,
            r,
            o,
            a,
            l,
            u = x.css(t, "position"),
            c = x(t),
            h = {};"static" === u && (t.style.position = "relative"), a = c.offset(), r = x.css(t, "top"), l = x.css(t, "left"), ("absolute" === u || "fixed" === u) && (r + l).indexOf("auto") > -1 ? (o = (n = c.position()).top, s = n.left) : (o = parseFloat(r) || 0, s = parseFloat(l) || 0), _(e) && (e = e.call(t, i, x.extend({}, a))), null != e.top && (h.top = e.top - a.top + o), null != e.left && (h.left = e.left - a.left + s), "using" in e ? e.using.call(t, h) : c.css(h);
      } }, x.fn.extend({ offset: function offset(t) {
        if (arguments.length) return void 0 === t ? this : this.each(function (e) {
          x.offset.setOffset(this, t, e);
        });var e,
            i,
            n = this[0];return n ? n.getClientRects().length ? (e = n.getBoundingClientRect(), i = n.ownerDocument.defaultView, { top: e.top + i.pageYOffset, left: e.left + i.pageXOffset }) : { top: 0, left: 0 } : void 0;
      }, position: function position() {
        if (this[0]) {
          var t,
              e,
              i,
              n = this[0],
              s = { top: 0, left: 0 };if ("fixed" === x.css(n, "position")) e = n.getBoundingClientRect();else {
            for (e = this.offset(), i = n.ownerDocument, t = n.offsetParent || i.documentElement; t && (t === i.body || t === i.documentElement) && "static" === x.css(t, "position");) {
              t = t.parentNode;
            }t && t !== n && 1 === t.nodeType && ((s = x(t).offset()).top += x.css(t, "borderTopWidth", !0), s.left += x.css(t, "borderLeftWidth", !0));
          }return { top: e.top - s.top - x.css(n, "marginTop", !0), left: e.left - s.left - x.css(n, "marginLeft", !0) };
        }
      }, offsetParent: function offsetParent() {
        return this.map(function () {
          for (var t = this.offsetParent; t && "static" === x.css(t, "position");) {
            t = t.offsetParent;
          }return t || wt;
        });
      } }), x.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (t, e) {
      var i = "pageYOffset" === e;x.fn[t] = function (n) {
        return U(this, function (t, n, s) {
          var r;if (b(t) ? r = t : 9 === t.nodeType && (r = t.defaultView), void 0 === s) return r ? r[e] : t[n];r ? r.scrollTo(i ? r.pageXOffset : s, i ? s : r.pageYOffset) : t[n] = s;
        }, t, n, arguments.length);
      };
    }), x.each(["top", "left"], function (t, e) {
      x.cssHooks[e] = qt(v.pixelPosition, function (t, i) {
        if (i) return i = $t(t, e), zt.test(i) ? x(t).position()[e] + "px" : i;
      });
    }), x.each({ Height: "height", Width: "width" }, function (t, e) {
      x.each({ padding: "inner" + t, content: e, "": "outer" + t }, function (i, n) {
        x.fn[n] = function (s, r) {
          var o = arguments.length && (i || "boolean" != typeof s),
              a = i || (!0 === s || !0 === r ? "margin" : "border");return U(this, function (e, i, s) {
            var r;return b(e) ? 0 === n.indexOf("outer") ? e["inner" + t] : e.document.documentElement["client" + t] : 9 === e.nodeType ? (r = e.documentElement, Math.max(e.body["scroll" + t], r["scroll" + t], e.body["offset" + t], r["offset" + t], r["client" + t])) : void 0 === s ? x.css(e, i, a) : x.style(e, i, s, a);
          }, e, o ? s : void 0, o);
        };
      });
    }), x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (t, e) {
      x.fn[e] = function (t, i) {
        return arguments.length > 0 ? this.on(e, null, t, i) : this.trigger(e);
      };
    }), x.fn.extend({ hover: function hover(t, e) {
        return this.mouseenter(t).mouseleave(e || t);
      } }), x.fn.extend({ bind: function bind(t, e, i) {
        return this.on(t, null, e, i);
      }, unbind: function unbind(t, e) {
        return this.off(t, null, e);
      }, delegate: function delegate(t, e, i, n) {
        return this.on(e, t, i, n);
      }, undelegate: function undelegate(t, e, i) {
        return 1 === arguments.length ? this.off(t, "**") : this.off(e, t || "**", i);
      } }), x.proxy = function (t, e) {
      var i, n, s;if ("string" == typeof e && (i = t[e], e = t, t = i), _(t)) return n = l.call(arguments, 2), (s = function s() {
        return t.apply(e || this, n.concat(l.call(arguments)));
      }).guid = t.guid = t.guid || x.guid++, s;
    }, x.holdReady = function (t) {
      t ? x.readyWait++ : x.ready(!0);
    }, x.isArray = Array.isArray, x.parseJSON = JSON.parse, x.nodeName = j, x.isFunction = _, x.isWindow = b, x.camelCase = G, x.type = w, x.now = Date.now, x.isNumeric = function (t) {
      var e = x.type(t);return ("number" === e || "string" === e) && !isNaN(t - parseFloat(t));
    }, void 0 === (n = function () {
      return x;
    }.apply(e, [])) || (t.exports = n);var Ye = i.jQuery,
        Ve = i.$;return x.noConflict = function (t) {
      return i.$ === x && (i.$ = Ve), t && i.jQuery === x && (i.jQuery = Ye), x;
    }, s || (i.jQuery = i.$ = x), x;
  });
}, function (t, e) {
  t.exports = { config: function () {
      var t = "https://www2.barnensbibliotek.se",
          e = "https://www.barnensbibliotek.se",
          i = "/devkey/alf/?type=jsonp&callback=?",
          n = "/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/";return { apiserver: t, dnnURL: e, localOrServerURL: "", htmltemplateurl: e + n, devkey: "alf", handlebartemplate: { hb_booklist_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/boklistor_lista.txt", hb_skrivbokenlist_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/skrivboken_lista.txt", hb_skrivbokModalView_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/skrivbokModal_View.txt", hb_boktipslist_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/boktips_lista.txt", hb_boktipsModalView_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/boktipsModal_View.txt", hb_bibblomonlist_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/Bibblomon_lista.txt", hb_bibblomonItem_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/Bibblomon_Item.txt", hb_skribokenbadges_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/badges_skrivboken_lista.txt", hb_boktipsbadges_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/badges_boktips_lista.txt", hb_specialbadges_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/badges_special_lista.txt", hb_highscorebadges_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/badges_highscore_lista.txt", hb_settingsAvatar_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/settings_avatar_lista.txt", hb_settingsSkins_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/settings_skin_lista.txt", hb_laserjustnu_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/laserjustnu_item.txt", hb_userlatestboktips_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/boktipsSingel_Item.txt", hb_PrintModalVal_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/print_modalVal.txt", hb_PrintBoklist_tmp: "https://www.barnensbibliotek.se/Portals/_default/Skins/bb_DAGOBAH_krypin/htmltemplates/print_Boklistor.txt" }, api: { boklistor: { getuserboklist: function getuserboklist(e) {
              return t + "/Api_v3.1/booklist/uid/" + e + i;
            }, adduserbokitem: function adduserbokitem(e, n, s) {
              return t + "/Api_v3.1/booklist/typ/addbook/blistid/" + e + "/value/" + n + "/uid/" + s + i;
            }, deluserbokitem: function deluserbokitem(e, n, s) {
              return t + "/Api_v3.1/booklist/typ/delbook/blistid/" + e + "/value/" + n + "/uid/" + s + i;
            }, addbooklist: function addbooklist(e, n) {
              return t + "/Api_v3.1/booklist/typ/addbooklist/blistid/0/value/" + e + "/uid/" + n + i;
            }, editbooklist: function editbooklist(e, n, s) {
              return t + "/Api_v3.1/booklist/typ/editbooklist/blistid/" + e + "/value/" + n + "/uid/" + s + i;
            }, delbooklist: function delbooklist(e, n) {
              return t + "/Api_v3.1/booklist/typ/delbooklist/blistid/" + e + "/value/0/uid/" + n + i;
            }, printUrl: function printUrl(t) {
              return e + "/DesktopModules/barnensbiblService/krypinboklistorPrint/boklistPrintTemplate.html?uid=" + t.userid + "&listid=" + t.booklistid + "&bg=" + t.bgimg + "&col=" + t.color + "&font=" + t.font;
            } }, skrivbokenlistor: { getuserskribokenlist: function getuserskribokenlist(e) {
              return t + "/Api_v3.1/skrivboken/cmdtyp/ByUserID/val/" + e + "/typ/2/ap/0/pub/0" + i;
            }, getuserskribokenByID: function getuserskribokenByID(e, n) {
              return t + "/Api_v3.1/skrivboken/cmdtyp/BySkrivid/val/" + e + "/typ/" + n + "/ap/0/pub/0" + i;
            }, addskribokenItem: function addskribokenItem() {
              return t + "/Api_v3.1/skrivboken/typ/addskrivboken/devkey/alf";
            }, editskribokenItem: function editskribokenItem() {
              return t + "/Api_v3.1/skrivboken/typ/editskrivboken/devkey/alf";
            }, delskribokenItem: function delskribokenItem() {
              return t + "/Api_v3.1/skrivboken/typ/deleteskrivbok/devkey/alf";
            } }, boktipslistor: { getuserboktipslist: function getuserboktipslist(e) {
              return t + "/Api_v3.1/boktips/typ/ByUserId/val/" + e + "/txtval/0" + i;
            }, getuserboktipsByTipID: function getuserboktipsByTipID(e, n) {
              return t + "/Api_v3.1/boktips/typ/ByTipId/val/" + e + "/txtval/0" + i;
            }, getbookContextByBookID: function getbookContextByBookID(e) {
              return t + "/Api_v3.1/boktips/typ/ByBookId/val/" + e + "/txtval/0" + i;
            }, addboktipsItem: function addboktipsItem() {
              return t + "/Api_v3.1/boktips/typ/addboktips/devkey/alf";
            }, editboktipsItem: function editboktipsItem() {
              return t + "/Api_v3.1/boktips/typ/editboktips/devkey/alf";
            }, delboktipsItem: function delboktipsItem() {
              return t + "/Api_v3.1/boktips/typ/deleteboktips/devkey/alf";
            } }, bibblomonlistor: { getuserbibblomonlist: function getuserbibblomonlist(e) {
              return t + "/Api_v3.1/bibblomon/cmdtyp/usrmon/uid/" + e + "/monid/0/devkey/alf/?type=jsonp";
            } }, scoreboard: { getuserbadgeslist: function getuserbadgeslist(e) {
              return t + "/Api_v3.1/award/cmdtyp/byuserid/uid/" + e + "/ag/0/devkey/alf/?type=jsonp";
            } }, autocomplete: { geturl: function geturl(e) {
              return t + "/Api_v3.1/katalogen/cmdtyp/autocomplete/antal/" + e + "/devkey/alf/?type=json";
            } }, installningar: { src: function src(e) {
              return t + "/Api_v3.1/settings/cmdtyp/get/uid/" + e + "/setid/0/setval/0/devkey/alf/?type=jsonp";
            }, curAvatarsrc: "/Portals/_default/Skins/bb_DAGOBAH_krypin/images/avatars/", curSkinsrc: "/Portals/_default/Skins/bb_DAGOBAH_krypin/images/bakgrunder/", updatesettings: function updatesettings(e, i, n) {
              return t + "/Api_v3.1/settings/cmdtyp/settings/uid/" + e + "/setid/" + i + "/setval/" + n + "/devkey/alf/?type=jsonp";
            }, avatarimgsrc: "/Portals/_default/Skins/bb_DAGOBAH_krypin/images/avatars/", laserjustnu: function laserjustnu(e) {
              return t + "/Api_v3.1/settings/cmdtyp/getlasernu/uid/" + e + "/setid/0/setval/0/devkey/alf/?type=jsonp";
            }, userlatestboktips: function userlatestboktips(e) {
              return t + "/Api_v3.1/boktips/typ/ByUserIdLatest/val/" + e + "/txtval/0/devkey/alf/?type=jsonp";
            } }, devkeyend: i }, userinfo: { avatarimg: "", avatarid: "", defaultavatarimg: "", defaultavatarid: "", skin: "", skinid: "", defaultskinimg: "", defaultskinclass: "", defaultskinid: "", userid: "", rollid: "" }, debug: "false" };
    }(), skrivbokimages: { catimgbase: "/DesktopModules/bb_aj_Skrivboken_Krypin/images/", catimagesrc: [{ catid: "001", catname: "Bild saknas", imgsrc: "foto_saknas.jpg" }, { catid: "0", catname: "&Ouml;vrigt", imgsrc: "skrivbok_default256_36.png" }, { catid: "1", catname: "&Ouml;vrigt", imgsrc: "skrivbok_ovrigt256_36.png" }, { catid: "2", catname: "&Ouml;vrigt", imgsrc: "skrivbok_ovrigt256_36.png" }, { catid: "3", catname: "Ber&auml;ttelse", imgsrc: "skrivbok_berattelse-256_36.png" }, { catid: "4", catname: "Dikt", imgsrc: "skrivbok_dikt-256_36.png" }, { catid: "5", catname: "Tankar", imgsrc: "skrivbok_tankar256_36.png" }, { catid: "6", catname: "&Ouml;vrigt", imgsrc: "skrivbok_ovrigt256_36.png" }, { catid: "8", catname: "Deckare", imgsrc: "skrivbok_deckare256_36.png" }, { catid: "9", catname: "Djur", imgsrc: "skrivbok_djur256_36.png" }, { catid: "10", catname: "Fantasy", imgsrc: "skrivbok_fantasy256_36.png" }, { catid: "11", catname: "Skr&auml;ck", imgsrc: "skrivbok_skrack256_36.png" }, { catid: "12", catname: "K&auml;rlek", imgsrc: "skrivbok_karlek256_36.png" }, { catid: "13", catname: "Ramsa", imgsrc: "skrivbok_ramsa256_36.png" }, { catid: "15", catname: "Sorgligt", imgsrc: "skrivbok_sorgligt256_36.png" }, { catid: "16", catname: "Humor", imgsrc: "skrivbok_skratta256_36.png" }, { catid: "17", catname: "Sp&auml;nning", imgsrc: "skrivbok_spanning256_36.png" }, { catid: "18", catname: "Sp&ouml;ken", imgsrc: "skrivbok_spoken256_36.png" }, { catid: "19", catname: "&Auml;ventyr", imgsrc: "skrivbok_aventyr256_36.png" }, { catid: "21", catname: "Hastar", imgsrc: "skrivbok_hastar256_36.png" }] }, usermessages: function () {
      var t = function t(_t2) {
        try {
          return decodeURIComponent(escape(_t2));
        } catch (e) {
          return String.prototype.replaceAll = function (t, e, i) {
            return this.replace(new RegExp(t.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), i ? "gi" : "g"), "string" == typeof e ? e.replace(/\$/g, "$$$$") : e);
          }, _t2 = (_t2 = (_t2 = (_t2 = (_t2 = (_t2 = _t2.replaceAll("Ä", String.fromCharCode(196))).replaceAll("Å", String.fromCharCode(197))).replaceAll("Ö", String.fromCharCode(214))).replaceAll("ä", String.fromCharCode(228))).replaceAll("å", String.fromCharCode(229))).replaceAll("ö", String.fromCharCode(246));
        }
      };return { installningar: { confirmSave: t("Är du säker på att du vill spara ändringarna?") }, skrivbok: { confirmAlert: t("Du måste fylla i alla uppgifter"), confirmAdd: t("Är du säker på att du vill lägga till texten?"), confirmEdit: t("Är du säker på att du vill ändra i texten?"), confirmDel: t("Är du säker på att du vill ta bort texten?") }, boktips: { confirmAlert: t("Du måste fylla i alla uppgifter"), confirmAdd: t("Är du säker på att du vill lägga till boktipset?"), confirmEdit: t("Är du säker på att du vill ändra i boktipset?"), confirmDel: t("Är du säker på att du vill ta bort boktipset?") }, boklist: { confirmAlert: t("Du måste skriva något!"), confirmAdd: t("Vill du lägga till denna boklista?"), confirmEdit: t("Vill du byta namn på boklistan?"), confirmDel: "Vill du ta bort boklistan?" }, laserjustnu: { confirmRemove: t("Är du säker?") } };
    }() };
}, function (t, e, i) {
  (function (t, n) {
    var s;
    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright JS Foundation and other contributors <https://js.foundation/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */(function () {
      var r,
          o = 200,
          a = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
          l = "Expected a function",
          u = "__lodash_hash_undefined__",
          c = 500,
          h = "__lodash_placeholder__",
          d = 1,
          p = 2,
          f = 4,
          g = 1,
          m = 2,
          v = 1,
          _ = 2,
          b = 4,
          y = 8,
          k = 16,
          w = 32,
          x = 64,
          C = 128,
          D = 256,
          S = 512,
          T = 30,
          I = "...",
          A = 800,
          j = 16,
          M = 1,
          P = 2,
          E = 1 / 0,
          O = 9007199254740991,
          H = 1.7976931348623157e308,
          N = NaN,
          B = 4294967295,
          F = B - 1,
          L = B >>> 1,
          z = [["ary", C], ["bind", v], ["bindKey", _], ["curry", y], ["curryRight", k], ["flip", S], ["partial", w], ["partialRight", x], ["rearg", D]],
          W = "[object Arguments]",
          R = "[object Array]",
          $ = "[object AsyncFunction]",
          q = "[object Boolean]",
          U = "[object Date]",
          K = "[object DOMException]",
          Y = "[object Error]",
          V = "[object Function]",
          G = "[object GeneratorFunction]",
          X = "[object Map]",
          J = "[object Number]",
          Z = "[object Null]",
          Q = "[object Object]",
          tt = "[object Proxy]",
          et = "[object RegExp]",
          it = "[object Set]",
          nt = "[object String]",
          st = "[object Symbol]",
          rt = "[object Undefined]",
          ot = "[object WeakMap]",
          at = "[object WeakSet]",
          lt = "[object ArrayBuffer]",
          ut = "[object DataView]",
          ct = "[object Float32Array]",
          ht = "[object Float64Array]",
          dt = "[object Int8Array]",
          pt = "[object Int16Array]",
          ft = "[object Int32Array]",
          gt = "[object Uint8Array]",
          mt = "[object Uint8ClampedArray]",
          vt = "[object Uint16Array]",
          _t = "[object Uint32Array]",
          bt = /\b__p \+= '';/g,
          yt = /\b(__p \+=) '' \+/g,
          kt = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
          wt = /&(?:amp|lt|gt|quot|#39);/g,
          xt = /[&<>"']/g,
          Ct = RegExp(wt.source),
          Dt = RegExp(xt.source),
          St = /<%-([\s\S]+?)%>/g,
          Tt = /<%([\s\S]+?)%>/g,
          It = /<%=([\s\S]+?)%>/g,
          At = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          jt = /^\w*$/,
          Mt = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
          Pt = /[\\^$.*+?()[\]{}|]/g,
          Et = RegExp(Pt.source),
          Ot = /^\s+|\s+$/g,
          Ht = /^\s+/,
          Nt = /\s+$/,
          Bt = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          Ft = /\{\n\/\* \[wrapped with (.+)\] \*/,
          Lt = /,? & /,
          zt = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
          Wt = /\\(\\)?/g,
          Rt = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
          $t = /\w*$/,
          qt = /^[-+]0x[0-9a-f]+$/i,
          Ut = /^0b[01]+$/i,
          Kt = /^\[object .+?Constructor\]$/,
          Yt = /^0o[0-7]+$/i,
          Vt = /^(?:0|[1-9]\d*)$/,
          Gt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
          Xt = /($^)/,
          Jt = /['\n\r\u2028\u2029\\]/g,
          Zt = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
          Qt = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
          te = "[\\ud800-\\udfff]",
          ee = "[" + Qt + "]",
          ie = "[" + Zt + "]",
          ne = "\\d+",
          se = "[\\u2700-\\u27bf]",
          re = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
          oe = "[^\\ud800-\\udfff" + Qt + ne + "\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
          ae = "\\ud83c[\\udffb-\\udfff]",
          le = "[^\\ud800-\\udfff]",
          ue = "(?:\\ud83c[\\udde6-\\uddff]){2}",
          ce = "[\\ud800-\\udbff][\\udc00-\\udfff]",
          he = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
          de = "(?:" + re + "|" + oe + ")",
          pe = "(?:" + he + "|" + oe + ")",
          fe = "(?:" + ie + "|" + ae + ")" + "?",
          ge = "[\\ufe0e\\ufe0f]?" + fe + ("(?:\\u200d(?:" + [le, ue, ce].join("|") + ")[\\ufe0e\\ufe0f]?" + fe + ")*"),
          me = "(?:" + [se, ue, ce].join("|") + ")" + ge,
          ve = "(?:" + [le + ie + "?", ie, ue, ce, te].join("|") + ")",
          _e = RegExp("['’]", "g"),
          be = RegExp(ie, "g"),
          ye = RegExp(ae + "(?=" + ae + ")|" + ve + ge, "g"),
          ke = RegExp([he + "?" + re + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + [ee, he, "$"].join("|") + ")", pe + "+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + [ee, he + de, "$"].join("|") + ")", he + "?" + de + "+(?:['’](?:d|ll|m|re|s|t|ve))?", he + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", ne, me].join("|"), "g"),
          we = RegExp("[\\u200d\\ud800-\\udfff" + Zt + "\\ufe0e\\ufe0f]"),
          xe = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
          Ce = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
          De = -1,
          Se = {};Se[ct] = Se[ht] = Se[dt] = Se[pt] = Se[ft] = Se[gt] = Se[mt] = Se[vt] = Se[_t] = !0, Se[W] = Se[R] = Se[lt] = Se[q] = Se[ut] = Se[U] = Se[Y] = Se[V] = Se[X] = Se[J] = Se[Q] = Se[et] = Se[it] = Se[nt] = Se[ot] = !1;var Te = {};Te[W] = Te[R] = Te[lt] = Te[ut] = Te[q] = Te[U] = Te[ct] = Te[ht] = Te[dt] = Te[pt] = Te[ft] = Te[X] = Te[J] = Te[Q] = Te[et] = Te[it] = Te[nt] = Te[st] = Te[gt] = Te[mt] = Te[vt] = Te[_t] = !0, Te[Y] = Te[V] = Te[ot] = !1;var Ie = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" },
          Ae = parseFloat,
          je = parseInt,
          Me = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t && t.Object === Object && t,
          Pe = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
          Ee = Me || Pe || Function("return this")(),
          Oe = e && !e.nodeType && e,
          He = Oe && "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n && !n.nodeType && n,
          Ne = He && He.exports === Oe,
          Be = Ne && Me.process,
          Fe = function () {
        try {
          var t = He && He.require && He.require("util").types;return t || Be && Be.binding && Be.binding("util");
        } catch (t) {}
      }(),
          Le = Fe && Fe.isArrayBuffer,
          ze = Fe && Fe.isDate,
          We = Fe && Fe.isMap,
          Re = Fe && Fe.isRegExp,
          $e = Fe && Fe.isSet,
          qe = Fe && Fe.isTypedArray;function Ue(t, e, i) {
        switch (i.length) {case 0:
            return t.call(e);case 1:
            return t.call(e, i[0]);case 2:
            return t.call(e, i[0], i[1]);case 3:
            return t.call(e, i[0], i[1], i[2]);}return t.apply(e, i);
      }function Ke(t, e, i, n) {
        for (var s = -1, r = null == t ? 0 : t.length; ++s < r;) {
          var o = t[s];e(n, o, i(o), t);
        }return n;
      }function Ye(t, e) {
        for (var i = -1, n = null == t ? 0 : t.length; ++i < n && !1 !== e(t[i], i, t);) {}return t;
      }function Ve(t, e) {
        for (var i = null == t ? 0 : t.length; i-- && !1 !== e(t[i], i, t);) {}return t;
      }function Ge(t, e) {
        for (var i = -1, n = null == t ? 0 : t.length; ++i < n;) {
          if (!e(t[i], i, t)) return !1;
        }return !0;
      }function Xe(t, e) {
        for (var i = -1, n = null == t ? 0 : t.length, s = 0, r = []; ++i < n;) {
          var o = t[i];e(o, i, t) && (r[s++] = o);
        }return r;
      }function Je(t, e) {
        return !!(null == t ? 0 : t.length) && ai(t, e, 0) > -1;
      }function Ze(t, e, i) {
        for (var n = -1, s = null == t ? 0 : t.length; ++n < s;) {
          if (i(e, t[n])) return !0;
        }return !1;
      }function Qe(t, e) {
        for (var i = -1, n = null == t ? 0 : t.length, s = Array(n); ++i < n;) {
          s[i] = e(t[i], i, t);
        }return s;
      }function ti(t, e) {
        for (var i = -1, n = e.length, s = t.length; ++i < n;) {
          t[s + i] = e[i];
        }return t;
      }function ei(t, e, i, n) {
        var s = -1,
            r = null == t ? 0 : t.length;for (n && r && (i = t[++s]); ++s < r;) {
          i = e(i, t[s], s, t);
        }return i;
      }function ii(t, e, i, n) {
        var s = null == t ? 0 : t.length;for (n && s && (i = t[--s]); s--;) {
          i = e(i, t[s], s, t);
        }return i;
      }function ni(t, e) {
        for (var i = -1, n = null == t ? 0 : t.length; ++i < n;) {
          if (e(t[i], i, t)) return !0;
        }return !1;
      }var si = hi("length");function ri(t, e, i) {
        var n;return i(t, function (t, i, s) {
          if (e(t, i, s)) return n = i, !1;
        }), n;
      }function oi(t, e, i, n) {
        for (var s = t.length, r = i + (n ? 1 : -1); n ? r-- : ++r < s;) {
          if (e(t[r], r, t)) return r;
        }return -1;
      }function ai(t, e, i) {
        return e == e ? function (t, e, i) {
          var n = i - 1,
              s = t.length;for (; ++n < s;) {
            if (t[n] === e) return n;
          }return -1;
        }(t, e, i) : oi(t, ui, i);
      }function li(t, e, i, n) {
        for (var s = i - 1, r = t.length; ++s < r;) {
          if (n(t[s], e)) return s;
        }return -1;
      }function ui(t) {
        return t != t;
      }function ci(t, e) {
        var i = null == t ? 0 : t.length;return i ? fi(t, e) / i : N;
      }function hi(t) {
        return function (e) {
          return null == e ? r : e[t];
        };
      }function di(t) {
        return function (e) {
          return null == t ? r : t[e];
        };
      }function pi(t, e, i, n, s) {
        return s(t, function (t, s, r) {
          i = n ? (n = !1, t) : e(i, t, s, r);
        }), i;
      }function fi(t, e) {
        for (var i, n = -1, s = t.length; ++n < s;) {
          var o = e(t[n]);o !== r && (i = i === r ? o : i + o);
        }return i;
      }function gi(t, e) {
        for (var i = -1, n = Array(t); ++i < t;) {
          n[i] = e(i);
        }return n;
      }function mi(t) {
        return function (e) {
          return t(e);
        };
      }function vi(t, e) {
        return Qe(e, function (e) {
          return t[e];
        });
      }function _i(t, e) {
        return t.has(e);
      }function bi(t, e) {
        for (var i = -1, n = t.length; ++i < n && ai(e, t[i], 0) > -1;) {}return i;
      }function yi(t, e) {
        for (var i = t.length; i-- && ai(e, t[i], 0) > -1;) {}return i;
      }var ki = di({ "À": "A", "Á": "A", "Â": "A", "Ã": "A", "Ä": "A", "Å": "A", "à": "a", "á": "a", "â": "a", "ã": "a", "ä": "a", "å": "a", "Ç": "C", "ç": "c", "Ð": "D", "ð": "d", "È": "E", "É": "E", "Ê": "E", "Ë": "E", "è": "e", "é": "e", "ê": "e", "ë": "e", "Ì": "I", "Í": "I", "Î": "I", "Ï": "I", "ì": "i", "í": "i", "î": "i", "ï": "i", "Ñ": "N", "ñ": "n", "Ò": "O", "Ó": "O", "Ô": "O", "Õ": "O", "Ö": "O", "Ø": "O", "ò": "o", "ó": "o", "ô": "o", "õ": "o", "ö": "o", "ø": "o", "Ù": "U", "Ú": "U", "Û": "U", "Ü": "U", "ù": "u", "ú": "u", "û": "u", "ü": "u", "Ý": "Y", "ý": "y", "ÿ": "y", "Æ": "Ae", "æ": "ae", "Þ": "Th", "þ": "th", "ß": "ss", "Ā": "A", "Ă": "A", "Ą": "A", "ā": "a", "ă": "a", "ą": "a", "Ć": "C", "Ĉ": "C", "Ċ": "C", "Č": "C", "ć": "c", "ĉ": "c", "ċ": "c", "č": "c", "Ď": "D", "Đ": "D", "ď": "d", "đ": "d", "Ē": "E", "Ĕ": "E", "Ė": "E", "Ę": "E", "Ě": "E", "ē": "e", "ĕ": "e", "ė": "e", "ę": "e", "ě": "e", "Ĝ": "G", "Ğ": "G", "Ġ": "G", "Ģ": "G", "ĝ": "g", "ğ": "g", "ġ": "g", "ģ": "g", "Ĥ": "H", "Ħ": "H", "ĥ": "h", "ħ": "h", "Ĩ": "I", "Ī": "I", "Ĭ": "I", "Į": "I", "İ": "I", "ĩ": "i", "ī": "i", "ĭ": "i", "į": "i", "ı": "i", "Ĵ": "J", "ĵ": "j", "Ķ": "K", "ķ": "k", "ĸ": "k", "Ĺ": "L", "Ļ": "L", "Ľ": "L", "Ŀ": "L", "Ł": "L", "ĺ": "l", "ļ": "l", "ľ": "l", "ŀ": "l", "ł": "l", "Ń": "N", "Ņ": "N", "Ň": "N", "Ŋ": "N", "ń": "n", "ņ": "n", "ň": "n", "ŋ": "n", "Ō": "O", "Ŏ": "O", "Ő": "O", "ō": "o", "ŏ": "o", "ő": "o", "Ŕ": "R", "Ŗ": "R", "Ř": "R", "ŕ": "r", "ŗ": "r", "ř": "r", "Ś": "S", "Ŝ": "S", "Ş": "S", "Š": "S", "ś": "s", "ŝ": "s", "ş": "s", "š": "s", "Ţ": "T", "Ť": "T", "Ŧ": "T", "ţ": "t", "ť": "t", "ŧ": "t", "Ũ": "U", "Ū": "U", "Ŭ": "U", "Ů": "U", "Ű": "U", "Ų": "U", "ũ": "u", "ū": "u", "ŭ": "u", "ů": "u", "ű": "u", "ų": "u", "Ŵ": "W", "ŵ": "w", "Ŷ": "Y", "ŷ": "y", "Ÿ": "Y", "Ź": "Z", "Ż": "Z", "Ž": "Z", "ź": "z", "ż": "z", "ž": "z", "Ĳ": "IJ", "ĳ": "ij", "Œ": "Oe", "œ": "oe", "ŉ": "'n", "ſ": "s" }),
          wi = di({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" });function xi(t) {
        return "\\" + Ie[t];
      }function Ci(t) {
        return we.test(t);
      }function Di(t) {
        var e = -1,
            i = Array(t.size);return t.forEach(function (t, n) {
          i[++e] = [n, t];
        }), i;
      }function Si(t, e) {
        return function (i) {
          return t(e(i));
        };
      }function Ti(t, e) {
        for (var i = -1, n = t.length, s = 0, r = []; ++i < n;) {
          var o = t[i];o !== e && o !== h || (t[i] = h, r[s++] = i);
        }return r;
      }function Ii(t) {
        var e = -1,
            i = Array(t.size);return t.forEach(function (t) {
          i[++e] = t;
        }), i;
      }function Ai(t) {
        var e = -1,
            i = Array(t.size);return t.forEach(function (t) {
          i[++e] = [t, t];
        }), i;
      }function ji(t) {
        return Ci(t) ? function (t) {
          var e = ye.lastIndex = 0;for (; ye.test(t);) {
            ++e;
          }return e;
        }(t) : si(t);
      }function Mi(t) {
        return Ci(t) ? function (t) {
          return t.match(ye) || [];
        }(t) : function (t) {
          return t.split("");
        }(t);
      }var Pi = di({ "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" });var Ei = function t(e) {
        var i,
            n = (e = null == e ? Ee : Ei.defaults(Ee.Object(), e, Ei.pick(Ee, Ce))).Array,
            s = e.Date,
            Zt = e.Error,
            Qt = e.Function,
            te = e.Math,
            ee = e.Object,
            ie = e.RegExp,
            ne = e.String,
            se = e.TypeError,
            re = n.prototype,
            oe = Qt.prototype,
            ae = ee.prototype,
            le = e["__core-js_shared__"],
            ue = oe.toString,
            ce = ae.hasOwnProperty,
            he = 0,
            de = (i = /[^.]+$/.exec(le && le.keys && le.keys.IE_PROTO || "")) ? "Symbol(src)_1." + i : "",
            pe = ae.toString,
            fe = ue.call(ee),
            ge = Ee._,
            me = ie("^" + ue.call(ce).replace(Pt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
            ve = Ne ? e.Buffer : r,
            ye = e.Symbol,
            we = e.Uint8Array,
            Ie = ve ? ve.allocUnsafe : r,
            Me = Si(ee.getPrototypeOf, ee),
            Pe = ee.create,
            Oe = ae.propertyIsEnumerable,
            He = re.splice,
            Be = ye ? ye.isConcatSpreadable : r,
            Fe = ye ? ye.iterator : r,
            si = ye ? ye.toStringTag : r,
            di = function () {
          try {
            var t = Fr(ee, "defineProperty");return t({}, "", {}), t;
          } catch (t) {}
        }(),
            Oi = e.clearTimeout !== Ee.clearTimeout && e.clearTimeout,
            Hi = s && s.now !== Ee.Date.now && s.now,
            Ni = e.setTimeout !== Ee.setTimeout && e.setTimeout,
            Bi = te.ceil,
            Fi = te.floor,
            Li = ee.getOwnPropertySymbols,
            zi = ve ? ve.isBuffer : r,
            Wi = e.isFinite,
            Ri = re.join,
            $i = Si(ee.keys, ee),
            qi = te.max,
            Ui = te.min,
            Ki = s.now,
            Yi = e.parseInt,
            Vi = te.random,
            Gi = re.reverse,
            Xi = Fr(e, "DataView"),
            Ji = Fr(e, "Map"),
            Zi = Fr(e, "Promise"),
            Qi = Fr(e, "Set"),
            tn = Fr(e, "WeakMap"),
            en = Fr(ee, "create"),
            nn = tn && new tn(),
            sn = {},
            rn = co(Xi),
            on = co(Ji),
            an = co(Zi),
            ln = co(Qi),
            un = co(tn),
            cn = ye ? ye.prototype : r,
            hn = cn ? cn.valueOf : r,
            dn = cn ? cn.toString : r;function pn(t) {
          if (Ia(t) && !va(t) && !(t instanceof vn)) {
            if (t instanceof mn) return t;if (ce.call(t, "__wrapped__")) return ho(t);
          }return new mn(t);
        }var fn = function () {
          function t() {}return function (e) {
            if (!Ta(e)) return {};if (Pe) return Pe(e);t.prototype = e;var i = new t();return t.prototype = r, i;
          };
        }();function gn() {}function mn(t, e) {
          this.__wrapped__ = t, this.__actions__ = [], this.__chain__ = !!e, this.__index__ = 0, this.__values__ = r;
        }function vn(t) {
          this.__wrapped__ = t, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = B, this.__views__ = [];
        }function _n(t) {
          var e = -1,
              i = null == t ? 0 : t.length;for (this.clear(); ++e < i;) {
            var n = t[e];this.set(n[0], n[1]);
          }
        }function bn(t) {
          var e = -1,
              i = null == t ? 0 : t.length;for (this.clear(); ++e < i;) {
            var n = t[e];this.set(n[0], n[1]);
          }
        }function yn(t) {
          var e = -1,
              i = null == t ? 0 : t.length;for (this.clear(); ++e < i;) {
            var n = t[e];this.set(n[0], n[1]);
          }
        }function kn(t) {
          var e = -1,
              i = null == t ? 0 : t.length;for (this.__data__ = new yn(); ++e < i;) {
            this.add(t[e]);
          }
        }function wn(t) {
          var e = this.__data__ = new bn(t);this.size = e.size;
        }function xn(t, e) {
          var i = va(t),
              n = !i && ma(t),
              s = !i && !n && ka(t),
              r = !i && !n && !s && Na(t),
              o = i || n || s || r,
              a = o ? gi(t.length, ne) : [],
              l = a.length;for (var u in t) {
            !e && !ce.call(t, u) || o && ("length" == u || s && ("offset" == u || "parent" == u) || r && ("buffer" == u || "byteLength" == u || "byteOffset" == u) || Ur(u, l)) || a.push(u);
          }return a;
        }function Cn(t) {
          var e = t.length;return e ? t[ks(0, e - 1)] : r;
        }function Dn(t, e) {
          return ao(ir(t), On(e, 0, t.length));
        }function Sn(t) {
          return ao(ir(t));
        }function Tn(t, e, i) {
          (i === r || pa(t[e], i)) && (i !== r || e in t) || Pn(t, e, i);
        }function In(t, e, i) {
          var n = t[e];ce.call(t, e) && pa(n, i) && (i !== r || e in t) || Pn(t, e, i);
        }function An(t, e) {
          for (var i = t.length; i--;) {
            if (pa(t[i][0], e)) return i;
          }return -1;
        }function jn(t, e, i, n) {
          return Ln(t, function (t, s, r) {
            e(n, t, i(t), r);
          }), n;
        }function Mn(t, e) {
          return t && nr(e, sl(e), t);
        }function Pn(t, e, i) {
          "__proto__" == e && di ? di(t, e, { configurable: !0, enumerable: !0, value: i, writable: !0 }) : t[e] = i;
        }function En(t, e) {
          for (var i = -1, s = e.length, o = n(s), a = null == t; ++i < s;) {
            o[i] = a ? r : Qa(t, e[i]);
          }return o;
        }function On(t, e, i) {
          return t == t && (i !== r && (t = t <= i ? t : i), e !== r && (t = t >= e ? t : e)), t;
        }function Hn(t, e, i, n, s, o) {
          var a,
              l = e & d,
              u = e & p,
              c = e & f;if (i && (a = s ? i(t, n, s, o) : i(t)), a !== r) return a;if (!Ta(t)) return t;var h = va(t);if (h) {
            if (a = function (t) {
              var e = t.length,
                  i = new t.constructor(e);return e && "string" == typeof t[0] && ce.call(t, "index") && (i.index = t.index, i.input = t.input), i;
            }(t), !l) return ir(t, a);
          } else {
            var g = Wr(t),
                m = g == V || g == G;if (ka(t)) return Xs(t, l);if (g == Q || g == W || m && !s) {
              if (a = u || m ? {} : $r(t), !l) return u ? function (t, e) {
                return nr(t, zr(t), e);
              }(t, function (t, e) {
                return t && nr(e, rl(e), t);
              }(a, t)) : function (t, e) {
                return nr(t, Lr(t), e);
              }(t, Mn(a, t));
            } else {
              if (!Te[g]) return s ? t : {};a = function (t, e, i) {
                var n,
                    s,
                    r,
                    o = t.constructor;switch (e) {case lt:
                    return Js(t);case q:case U:
                    return new o(+t);case ut:
                    return function (t, e) {
                      var i = e ? Js(t.buffer) : t.buffer;return new t.constructor(i, t.byteOffset, t.byteLength);
                    }(t, i);case ct:case ht:case dt:case pt:case ft:case gt:case mt:case vt:case _t:
                    return Zs(t, i);case X:
                    return new o();case J:case nt:
                    return new o(t);case et:
                    return (r = new (s = t).constructor(s.source, $t.exec(s))).lastIndex = s.lastIndex, r;case it:
                    return new o();case st:
                    return n = t, hn ? ee(hn.call(n)) : {};}
              }(t, g, l);
            }
          }o || (o = new wn());var v = o.get(t);if (v) return v;if (o.set(t, a), Ea(t)) return t.forEach(function (n) {
            a.add(Hn(n, e, i, n, t, o));
          }), a;if (Aa(t)) return t.forEach(function (n, s) {
            a.set(s, Hn(n, e, i, s, t, o));
          }), a;var _ = h ? r : (c ? u ? Mr : jr : u ? rl : sl)(t);return Ye(_ || t, function (n, s) {
            _ && (n = t[s = n]), In(a, s, Hn(n, e, i, s, t, o));
          }), a;
        }function Nn(t, e, i) {
          var n = i.length;if (null == t) return !n;for (t = ee(t); n--;) {
            var s = i[n],
                o = e[s],
                a = t[s];if (a === r && !(s in t) || !o(a)) return !1;
          }return !0;
        }function Bn(t, e, i) {
          if ("function" != typeof t) throw new se(l);return no(function () {
            t.apply(r, i);
          }, e);
        }function Fn(t, e, i, n) {
          var s = -1,
              r = Je,
              a = !0,
              l = t.length,
              u = [],
              c = e.length;if (!l) return u;i && (e = Qe(e, mi(i))), n ? (r = Ze, a = !1) : e.length >= o && (r = _i, a = !1, e = new kn(e));t: for (; ++s < l;) {
            var h = t[s],
                d = null == i ? h : i(h);if (h = n || 0 !== h ? h : 0, a && d == d) {
              for (var p = c; p--;) {
                if (e[p] === d) continue t;
              }u.push(h);
            } else r(e, d, n) || u.push(h);
          }return u;
        }pn.templateSettings = { escape: St, evaluate: Tt, interpolate: It, variable: "", imports: { _: pn } }, pn.prototype = gn.prototype, pn.prototype.constructor = pn, mn.prototype = fn(gn.prototype), mn.prototype.constructor = mn, vn.prototype = fn(gn.prototype), vn.prototype.constructor = vn, _n.prototype.clear = function () {
          this.__data__ = en ? en(null) : {}, this.size = 0;
        }, _n.prototype.delete = function (t) {
          var e = this.has(t) && delete this.__data__[t];return this.size -= e ? 1 : 0, e;
        }, _n.prototype.get = function (t) {
          var e = this.__data__;if (en) {
            var i = e[t];return i === u ? r : i;
          }return ce.call(e, t) ? e[t] : r;
        }, _n.prototype.has = function (t) {
          var e = this.__data__;return en ? e[t] !== r : ce.call(e, t);
        }, _n.prototype.set = function (t, e) {
          var i = this.__data__;return this.size += this.has(t) ? 0 : 1, i[t] = en && e === r ? u : e, this;
        }, bn.prototype.clear = function () {
          this.__data__ = [], this.size = 0;
        }, bn.prototype.delete = function (t) {
          var e = this.__data__,
              i = An(e, t);return !(i < 0 || (i == e.length - 1 ? e.pop() : He.call(e, i, 1), --this.size, 0));
        }, bn.prototype.get = function (t) {
          var e = this.__data__,
              i = An(e, t);return i < 0 ? r : e[i][1];
        }, bn.prototype.has = function (t) {
          return An(this.__data__, t) > -1;
        }, bn.prototype.set = function (t, e) {
          var i = this.__data__,
              n = An(i, t);return n < 0 ? (++this.size, i.push([t, e])) : i[n][1] = e, this;
        }, yn.prototype.clear = function () {
          this.size = 0, this.__data__ = { hash: new _n(), map: new (Ji || bn)(), string: new _n() };
        }, yn.prototype.delete = function (t) {
          var e = Nr(this, t).delete(t);return this.size -= e ? 1 : 0, e;
        }, yn.prototype.get = function (t) {
          return Nr(this, t).get(t);
        }, yn.prototype.has = function (t) {
          return Nr(this, t).has(t);
        }, yn.prototype.set = function (t, e) {
          var i = Nr(this, t),
              n = i.size;return i.set(t, e), this.size += i.size == n ? 0 : 1, this;
        }, kn.prototype.add = kn.prototype.push = function (t) {
          return this.__data__.set(t, u), this;
        }, kn.prototype.has = function (t) {
          return this.__data__.has(t);
        }, wn.prototype.clear = function () {
          this.__data__ = new bn(), this.size = 0;
        }, wn.prototype.delete = function (t) {
          var e = this.__data__,
              i = e.delete(t);return this.size = e.size, i;
        }, wn.prototype.get = function (t) {
          return this.__data__.get(t);
        }, wn.prototype.has = function (t) {
          return this.__data__.has(t);
        }, wn.prototype.set = function (t, e) {
          var i = this.__data__;if (i instanceof bn) {
            var n = i.__data__;if (!Ji || n.length < o - 1) return n.push([t, e]), this.size = ++i.size, this;i = this.__data__ = new yn(n);
          }return i.set(t, e), this.size = i.size, this;
        };var Ln = or(Yn),
            zn = or(Vn, !0);function Wn(t, e) {
          var i = !0;return Ln(t, function (t, n, s) {
            return i = !!e(t, n, s);
          }), i;
        }function Rn(t, e, i) {
          for (var n = -1, s = t.length; ++n < s;) {
            var o = t[n],
                a = e(o);if (null != a && (l === r ? a == a && !Ha(a) : i(a, l))) var l = a,
                u = o;
          }return u;
        }function $n(t, e) {
          var i = [];return Ln(t, function (t, n, s) {
            e(t, n, s) && i.push(t);
          }), i;
        }function qn(t, e, i, n, s) {
          var r = -1,
              o = t.length;for (i || (i = qr), s || (s = []); ++r < o;) {
            var a = t[r];e > 0 && i(a) ? e > 1 ? qn(a, e - 1, i, n, s) : ti(s, a) : n || (s[s.length] = a);
          }return s;
        }var Un = ar(),
            Kn = ar(!0);function Yn(t, e) {
          return t && Un(t, e, sl);
        }function Vn(t, e) {
          return t && Kn(t, e, sl);
        }function Gn(t, e) {
          return Xe(e, function (e) {
            return Ca(t[e]);
          });
        }function Xn(t, e) {
          for (var i = 0, n = (e = Ks(e, t)).length; null != t && i < n;) {
            t = t[uo(e[i++])];
          }return i && i == n ? t : r;
        }function Jn(t, e, i) {
          var n = e(t);return va(t) ? n : ti(n, i(t));
        }function Zn(t) {
          return null == t ? t === r ? rt : Z : si && si in ee(t) ? function (t) {
            var e = ce.call(t, si),
                i = t[si];try {
              t[si] = r;var n = !0;
            } catch (t) {}var s = pe.call(t);return n && (e ? t[si] = i : delete t[si]), s;
          }(t) : function (t) {
            return pe.call(t);
          }(t);
        }function Qn(t, e) {
          return t > e;
        }function ts(t, e) {
          return null != t && ce.call(t, e);
        }function es(t, e) {
          return null != t && e in ee(t);
        }function is(t, e, i) {
          for (var s = i ? Ze : Je, o = t[0].length, a = t.length, l = a, u = n(a), c = 1 / 0, h = []; l--;) {
            var d = t[l];l && e && (d = Qe(d, mi(e))), c = Ui(d.length, c), u[l] = !i && (e || o >= 120 && d.length >= 120) ? new kn(l && d) : r;
          }d = t[0];var p = -1,
              f = u[0];t: for (; ++p < o && h.length < c;) {
            var g = d[p],
                m = e ? e(g) : g;if (g = i || 0 !== g ? g : 0, !(f ? _i(f, m) : s(h, m, i))) {
              for (l = a; --l;) {
                var v = u[l];if (!(v ? _i(v, m) : s(t[l], m, i))) continue t;
              }f && f.push(m), h.push(g);
            }
          }return h;
        }function ns(t, e, i) {
          var n = null == (t = to(t, e = Ks(e, t))) ? t : t[uo(xo(e))];return null == n ? r : Ue(n, t, i);
        }function ss(t) {
          return Ia(t) && Zn(t) == W;
        }function rs(t, e, i, n, s) {
          return t === e || (null == t || null == e || !Ia(t) && !Ia(e) ? t != t && e != e : function (t, e, i, n, s, o) {
            var a = va(t),
                l = va(e),
                u = a ? R : Wr(t),
                c = l ? R : Wr(e),
                h = (u = u == W ? Q : u) == Q,
                d = (c = c == W ? Q : c) == Q,
                p = u == c;if (p && ka(t)) {
              if (!ka(e)) return !1;a = !0, h = !1;
            }if (p && !h) return o || (o = new wn()), a || Na(t) ? Ir(t, e, i, n, s, o) : function (t, e, i, n, s, r, o) {
              switch (i) {case ut:
                  if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset) return !1;t = t.buffer, e = e.buffer;case lt:
                  return !(t.byteLength != e.byteLength || !r(new we(t), new we(e)));case q:case U:case J:
                  return pa(+t, +e);case Y:
                  return t.name == e.name && t.message == e.message;case et:case nt:
                  return t == e + "";case X:
                  var a = Di;case it:
                  var l = n & g;if (a || (a = Ii), t.size != e.size && !l) return !1;var u = o.get(t);if (u) return u == e;n |= m, o.set(t, e);var c = Ir(a(t), a(e), n, s, r, o);return o.delete(t), c;case st:
                  if (hn) return hn.call(t) == hn.call(e);}return !1;
            }(t, e, u, i, n, s, o);if (!(i & g)) {
              var f = h && ce.call(t, "__wrapped__"),
                  v = d && ce.call(e, "__wrapped__");if (f || v) {
                var _ = f ? t.value() : t,
                    b = v ? e.value() : e;return o || (o = new wn()), s(_, b, i, n, o);
              }
            }return !!p && (o || (o = new wn()), function (t, e, i, n, s, o) {
              var a = i & g,
                  l = jr(t),
                  u = l.length,
                  c = jr(e).length;if (u != c && !a) return !1;for (var h = u; h--;) {
                var d = l[h];if (!(a ? d in e : ce.call(e, d))) return !1;
              }var p = o.get(t);if (p && o.get(e)) return p == e;var f = !0;o.set(t, e), o.set(e, t);for (var m = a; ++h < u;) {
                d = l[h];var v = t[d],
                    _ = e[d];if (n) var b = a ? n(_, v, d, e, t, o) : n(v, _, d, t, e, o);if (!(b === r ? v === _ || s(v, _, i, n, o) : b)) {
                  f = !1;break;
                }m || (m = "constructor" == d);
              }if (f && !m) {
                var y = t.constructor,
                    k = e.constructor;y != k && "constructor" in t && "constructor" in e && !("function" == typeof y && y instanceof y && "function" == typeof k && k instanceof k) && (f = !1);
              }return o.delete(t), o.delete(e), f;
            }(t, e, i, n, s, o));
          }(t, e, i, n, rs, s));
        }function os(t, e, i, n) {
          var s = i.length,
              o = s,
              a = !n;if (null == t) return !o;for (t = ee(t); s--;) {
            var l = i[s];if (a && l[2] ? l[1] !== t[l[0]] : !(l[0] in t)) return !1;
          }for (; ++s < o;) {
            var u = (l = i[s])[0],
                c = t[u],
                h = l[1];if (a && l[2]) {
              if (c === r && !(u in t)) return !1;
            } else {
              var d = new wn();if (n) var p = n(c, h, u, t, e, d);if (!(p === r ? rs(h, c, g | m, n, d) : p)) return !1;
            }
          }return !0;
        }function as(t) {
          return !(!Ta(t) || (e = t, de && de in e)) && (Ca(t) ? me : Kt).test(co(t));var e;
        }function ls(t) {
          return "function" == typeof t ? t : null == t ? jl : "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? va(t) ? fs(t[0], t[1]) : ps(t) : Ll(t);
        }function us(t) {
          if (!Xr(t)) return $i(t);var e = [];for (var i in ee(t)) {
            ce.call(t, i) && "constructor" != i && e.push(i);
          }return e;
        }function cs(t) {
          if (!Ta(t)) return function (t) {
            var e = [];if (null != t) for (var i in ee(t)) {
              e.push(i);
            }return e;
          }(t);var e = Xr(t),
              i = [];for (var n in t) {
            ("constructor" != n || !e && ce.call(t, n)) && i.push(n);
          }return i;
        }function hs(t, e) {
          return t < e;
        }function ds(t, e) {
          var i = -1,
              s = ba(t) ? n(t.length) : [];return Ln(t, function (t, n, r) {
            s[++i] = e(t, n, r);
          }), s;
        }function ps(t) {
          var e = Br(t);return 1 == e.length && e[0][2] ? Zr(e[0][0], e[0][1]) : function (i) {
            return i === t || os(i, t, e);
          };
        }function fs(t, e) {
          return Yr(t) && Jr(e) ? Zr(uo(t), e) : function (i) {
            var n = Qa(i, t);return n === r && n === e ? tl(i, t) : rs(e, n, g | m);
          };
        }function gs(t, e, i, n, s) {
          t !== e && Un(e, function (o, a) {
            if (Ta(o)) s || (s = new wn()), function (t, e, i, n, s, o, a) {
              var l = eo(t, i),
                  u = eo(e, i),
                  c = a.get(u);if (c) Tn(t, i, c);else {
                var h = o ? o(l, u, i + "", t, e, a) : r,
                    d = h === r;if (d) {
                  var p = va(u),
                      f = !p && ka(u),
                      g = !p && !f && Na(u);h = u, p || f || g ? va(l) ? h = l : ya(l) ? h = ir(l) : f ? (d = !1, h = Xs(u, !0)) : g ? (d = !1, h = Zs(u, !0)) : h = [] : Ma(u) || ma(u) ? (h = l, ma(l) ? h = qa(l) : Ta(l) && !Ca(l) || (h = $r(u))) : d = !1;
                }d && (a.set(u, h), s(h, u, n, o, a), a.delete(u)), Tn(t, i, h);
              }
            }(t, e, a, i, gs, n, s);else {
              var l = n ? n(eo(t, a), o, a + "", t, e, s) : r;l === r && (l = o), Tn(t, a, l);
            }
          }, rl);
        }function ms(t, e) {
          var i = t.length;if (i) return Ur(e += e < 0 ? i : 0, i) ? t[e] : r;
        }function vs(t, e, i) {
          var n = -1;return e = Qe(e.length ? e : [jl], mi(Hr())), function (t, e) {
            var i = t.length;for (t.sort(e); i--;) {
              t[i] = t[i].value;
            }return t;
          }(ds(t, function (t, i, s) {
            return { criteria: Qe(e, function (e) {
                return e(t);
              }), index: ++n, value: t };
          }), function (t, e) {
            return function (t, e, i) {
              for (var n = -1, s = t.criteria, r = e.criteria, o = s.length, a = i.length; ++n < o;) {
                var l = Qs(s[n], r[n]);if (l) {
                  if (n >= a) return l;var u = i[n];return l * ("desc" == u ? -1 : 1);
                }
              }return t.index - e.index;
            }(t, e, i);
          });
        }function _s(t, e, i) {
          for (var n = -1, s = e.length, r = {}; ++n < s;) {
            var o = e[n],
                a = Xn(t, o);i(a, o) && Ss(r, Ks(o, t), a);
          }return r;
        }function bs(t, e, i, n) {
          var s = n ? li : ai,
              r = -1,
              o = e.length,
              a = t;for (t === e && (e = ir(e)), i && (a = Qe(t, mi(i))); ++r < o;) {
            for (var l = 0, u = e[r], c = i ? i(u) : u; (l = s(a, c, l, n)) > -1;) {
              a !== t && He.call(a, l, 1), He.call(t, l, 1);
            }
          }return t;
        }function ys(t, e) {
          for (var i = t ? e.length : 0, n = i - 1; i--;) {
            var s = e[i];if (i == n || s !== r) {
              var r = s;Ur(s) ? He.call(t, s, 1) : Fs(t, s);
            }
          }return t;
        }function ks(t, e) {
          return t + Fi(Vi() * (e - t + 1));
        }function ws(t, e) {
          var i = "";if (!t || e < 1 || e > O) return i;do {
            e % 2 && (i += t), (e = Fi(e / 2)) && (t += t);
          } while (e);return i;
        }function xs(t, e) {
          return so(Qr(t, e, jl), t + "");
        }function Cs(t) {
          return Cn(pl(t));
        }function Ds(t, e) {
          var i = pl(t);return ao(i, On(e, 0, i.length));
        }function Ss(t, e, i, n) {
          if (!Ta(t)) return t;for (var s = -1, o = (e = Ks(e, t)).length, a = o - 1, l = t; null != l && ++s < o;) {
            var u = uo(e[s]),
                c = i;if (s != a) {
              var h = l[u];(c = n ? n(h, u, l) : r) === r && (c = Ta(h) ? h : Ur(e[s + 1]) ? [] : {});
            }In(l, u, c), l = l[u];
          }return t;
        }var Ts = nn ? function (t, e) {
          return nn.set(t, e), t;
        } : jl,
            Is = di ? function (t, e) {
          return di(t, "toString", { configurable: !0, enumerable: !1, value: Tl(e), writable: !0 });
        } : jl;function As(t) {
          return ao(pl(t));
        }function js(t, e, i) {
          var s = -1,
              r = t.length;e < 0 && (e = -e > r ? 0 : r + e), (i = i > r ? r : i) < 0 && (i += r), r = e > i ? 0 : i - e >>> 0, e >>>= 0;for (var o = n(r); ++s < r;) {
            o[s] = t[s + e];
          }return o;
        }function Ms(t, e) {
          var i;return Ln(t, function (t, n, s) {
            return !(i = e(t, n, s));
          }), !!i;
        }function Ps(t, e, i) {
          var n = 0,
              s = null == t ? n : t.length;if ("number" == typeof e && e == e && s <= L) {
            for (; n < s;) {
              var r = n + s >>> 1,
                  o = t[r];null !== o && !Ha(o) && (i ? o <= e : o < e) ? n = r + 1 : s = r;
            }return s;
          }return Es(t, e, jl, i);
        }function Es(t, e, i, n) {
          e = i(e);for (var s = 0, o = null == t ? 0 : t.length, a = e != e, l = null === e, u = Ha(e), c = e === r; s < o;) {
            var h = Fi((s + o) / 2),
                d = i(t[h]),
                p = d !== r,
                f = null === d,
                g = d == d,
                m = Ha(d);if (a) var v = n || g;else v = c ? g && (n || p) : l ? g && p && (n || !f) : u ? g && p && !f && (n || !m) : !f && !m && (n ? d <= e : d < e);v ? s = h + 1 : o = h;
          }return Ui(o, F);
        }function Os(t, e) {
          for (var i = -1, n = t.length, s = 0, r = []; ++i < n;) {
            var o = t[i],
                a = e ? e(o) : o;if (!i || !pa(a, l)) {
              var l = a;r[s++] = 0 === o ? 0 : o;
            }
          }return r;
        }function Hs(t) {
          return "number" == typeof t ? t : Ha(t) ? N : +t;
        }function Ns(t) {
          if ("string" == typeof t) return t;if (va(t)) return Qe(t, Ns) + "";if (Ha(t)) return dn ? dn.call(t) : "";var e = t + "";return "0" == e && 1 / t == -E ? "-0" : e;
        }function Bs(t, e, i) {
          var n = -1,
              s = Je,
              r = t.length,
              a = !0,
              l = [],
              u = l;if (i) a = !1, s = Ze;else if (r >= o) {
            var c = e ? null : wr(t);if (c) return Ii(c);a = !1, s = _i, u = new kn();
          } else u = e ? [] : l;t: for (; ++n < r;) {
            var h = t[n],
                d = e ? e(h) : h;if (h = i || 0 !== h ? h : 0, a && d == d) {
              for (var p = u.length; p--;) {
                if (u[p] === d) continue t;
              }e && u.push(d), l.push(h);
            } else s(u, d, i) || (u !== l && u.push(d), l.push(h));
          }return l;
        }function Fs(t, e) {
          return null == (t = to(t, e = Ks(e, t))) || delete t[uo(xo(e))];
        }function Ls(t, e, i, n) {
          return Ss(t, e, i(Xn(t, e)), n);
        }function zs(t, e, i, n) {
          for (var s = t.length, r = n ? s : -1; (n ? r-- : ++r < s) && e(t[r], r, t);) {}return i ? js(t, n ? 0 : r, n ? r + 1 : s) : js(t, n ? r + 1 : 0, n ? s : r);
        }function Ws(t, e) {
          var i = t;return i instanceof vn && (i = i.value()), ei(e, function (t, e) {
            return e.func.apply(e.thisArg, ti([t], e.args));
          }, i);
        }function Rs(t, e, i) {
          var s = t.length;if (s < 2) return s ? Bs(t[0]) : [];for (var r = -1, o = n(s); ++r < s;) {
            for (var a = t[r], l = -1; ++l < s;) {
              l != r && (o[r] = Fn(o[r] || a, t[l], e, i));
            }
          }return Bs(qn(o, 1), e, i);
        }function $s(t, e, i) {
          for (var n = -1, s = t.length, o = e.length, a = {}; ++n < s;) {
            var l = n < o ? e[n] : r;i(a, t[n], l);
          }return a;
        }function qs(t) {
          return ya(t) ? t : [];
        }function Us(t) {
          return "function" == typeof t ? t : jl;
        }function Ks(t, e) {
          return va(t) ? t : Yr(t, e) ? [t] : lo(Ua(t));
        }var Ys = xs;function Vs(t, e, i) {
          var n = t.length;return i = i === r ? n : i, !e && i >= n ? t : js(t, e, i);
        }var Gs = Oi || function (t) {
          return Ee.clearTimeout(t);
        };function Xs(t, e) {
          if (e) return t.slice();var i = t.length,
              n = Ie ? Ie(i) : new t.constructor(i);return t.copy(n), n;
        }function Js(t) {
          var e = new t.constructor(t.byteLength);return new we(e).set(new we(t)), e;
        }function Zs(t, e) {
          var i = e ? Js(t.buffer) : t.buffer;return new t.constructor(i, t.byteOffset, t.length);
        }function Qs(t, e) {
          if (t !== e) {
            var i = t !== r,
                n = null === t,
                s = t == t,
                o = Ha(t),
                a = e !== r,
                l = null === e,
                u = e == e,
                c = Ha(e);if (!l && !c && !o && t > e || o && a && u && !l && !c || n && a && u || !i && u || !s) return 1;if (!n && !o && !c && t < e || c && i && s && !n && !o || l && i && s || !a && s || !u) return -1;
          }return 0;
        }function tr(t, e, i, s) {
          for (var r = -1, o = t.length, a = i.length, l = -1, u = e.length, c = qi(o - a, 0), h = n(u + c), d = !s; ++l < u;) {
            h[l] = e[l];
          }for (; ++r < a;) {
            (d || r < o) && (h[i[r]] = t[r]);
          }for (; c--;) {
            h[l++] = t[r++];
          }return h;
        }function er(t, e, i, s) {
          for (var r = -1, o = t.length, a = -1, l = i.length, u = -1, c = e.length, h = qi(o - l, 0), d = n(h + c), p = !s; ++r < h;) {
            d[r] = t[r];
          }for (var f = r; ++u < c;) {
            d[f + u] = e[u];
          }for (; ++a < l;) {
            (p || r < o) && (d[f + i[a]] = t[r++]);
          }return d;
        }function ir(t, e) {
          var i = -1,
              s = t.length;for (e || (e = n(s)); ++i < s;) {
            e[i] = t[i];
          }return e;
        }function nr(t, e, i, n) {
          var s = !i;i || (i = {});for (var o = -1, a = e.length; ++o < a;) {
            var l = e[o],
                u = n ? n(i[l], t[l], l, i, t) : r;u === r && (u = t[l]), s ? Pn(i, l, u) : In(i, l, u);
          }return i;
        }function sr(t, e) {
          return function (i, n) {
            var s = va(i) ? Ke : jn,
                r = e ? e() : {};return s(i, t, Hr(n, 2), r);
          };
        }function rr(t) {
          return xs(function (e, i) {
            var n = -1,
                s = i.length,
                o = s > 1 ? i[s - 1] : r,
                a = s > 2 ? i[2] : r;for (o = t.length > 3 && "function" == typeof o ? (s--, o) : r, a && Kr(i[0], i[1], a) && (o = s < 3 ? r : o, s = 1), e = ee(e); ++n < s;) {
              var l = i[n];l && t(e, l, n, o);
            }return e;
          });
        }function or(t, e) {
          return function (i, n) {
            if (null == i) return i;if (!ba(i)) return t(i, n);for (var s = i.length, r = e ? s : -1, o = ee(i); (e ? r-- : ++r < s) && !1 !== n(o[r], r, o);) {}return i;
          };
        }function ar(t) {
          return function (e, i, n) {
            for (var s = -1, r = ee(e), o = n(e), a = o.length; a--;) {
              var l = o[t ? a : ++s];if (!1 === i(r[l], l, r)) break;
            }return e;
          };
        }function lr(t) {
          return function (e) {
            var i = Ci(e = Ua(e)) ? Mi(e) : r,
                n = i ? i[0] : e.charAt(0),
                s = i ? Vs(i, 1).join("") : e.slice(1);return n[t]() + s;
          };
        }function ur(t) {
          return function (e) {
            return ei(Cl(ml(e).replace(_e, "")), t, "");
          };
        }function cr(t) {
          return function () {
            var e = arguments;switch (e.length) {case 0:
                return new t();case 1:
                return new t(e[0]);case 2:
                return new t(e[0], e[1]);case 3:
                return new t(e[0], e[1], e[2]);case 4:
                return new t(e[0], e[1], e[2], e[3]);case 5:
                return new t(e[0], e[1], e[2], e[3], e[4]);case 6:
                return new t(e[0], e[1], e[2], e[3], e[4], e[5]);case 7:
                return new t(e[0], e[1], e[2], e[3], e[4], e[5], e[6]);}var i = fn(t.prototype),
                n = t.apply(i, e);return Ta(n) ? n : i;
          };
        }function hr(t) {
          return function (e, i, n) {
            var s = ee(e);if (!ba(e)) {
              var o = Hr(i, 3);e = sl(e), i = function i(t) {
                return o(s[t], t, s);
              };
            }var a = t(e, i, n);return a > -1 ? s[o ? e[a] : a] : r;
          };
        }function dr(t) {
          return Ar(function (e) {
            var i = e.length,
                n = i,
                s = mn.prototype.thru;for (t && e.reverse(); n--;) {
              var o = e[n];if ("function" != typeof o) throw new se(l);if (s && !a && "wrapper" == Er(o)) var a = new mn([], !0);
            }for (n = a ? n : i; ++n < i;) {
              var u = Er(o = e[n]),
                  c = "wrapper" == u ? Pr(o) : r;a = c && Vr(c[0]) && c[1] == (C | y | w | D) && !c[4].length && 1 == c[9] ? a[Er(c[0])].apply(a, c[3]) : 1 == o.length && Vr(o) ? a[u]() : a.thru(o);
            }return function () {
              var t = arguments,
                  n = t[0];if (a && 1 == t.length && va(n)) return a.plant(n).value();for (var s = 0, r = i ? e[s].apply(this, t) : n; ++s < i;) {
                r = e[s].call(this, r);
              }return r;
            };
          });
        }function pr(t, e, i, s, o, a, l, u, c, h) {
          var d = e & C,
              p = e & v,
              f = e & _,
              g = e & (y | k),
              m = e & S,
              b = f ? r : cr(t);return function v() {
            for (var _ = arguments.length, y = n(_), k = _; k--;) {
              y[k] = arguments[k];
            }if (g) var w = Or(v),
                x = function (t, e) {
              for (var i = t.length, n = 0; i--;) {
                t[i] === e && ++n;
              }return n;
            }(y, w);if (s && (y = tr(y, s, o, g)), a && (y = er(y, a, l, g)), _ -= x, g && _ < h) {
              var C = Ti(y, w);return yr(t, e, pr, v.placeholder, i, y, C, u, c, h - _);
            }var D = p ? i : this,
                S = f ? D[t] : t;return _ = y.length, u ? y = function (t, e) {
              for (var i = t.length, n = Ui(e.length, i), s = ir(t); n--;) {
                var o = e[n];t[n] = Ur(o, i) ? s[o] : r;
              }return t;
            }(y, u) : m && _ > 1 && y.reverse(), d && c < _ && (y.length = c), this && this !== Ee && this instanceof v && (S = b || cr(S)), S.apply(D, y);
          };
        }function fr(t, e) {
          return function (i, n) {
            return function (t, e, i, n) {
              return Yn(t, function (t, s, r) {
                e(n, i(t), s, r);
              }), n;
            }(i, t, e(n), {});
          };
        }function gr(t, e) {
          return function (i, n) {
            var s;if (i === r && n === r) return e;if (i !== r && (s = i), n !== r) {
              if (s === r) return n;"string" == typeof i || "string" == typeof n ? (i = Ns(i), n = Ns(n)) : (i = Hs(i), n = Hs(n)), s = t(i, n);
            }return s;
          };
        }function mr(t) {
          return Ar(function (e) {
            return e = Qe(e, mi(Hr())), xs(function (i) {
              var n = this;return t(e, function (t) {
                return Ue(t, n, i);
              });
            });
          });
        }function vr(t, e) {
          var i = (e = e === r ? " " : Ns(e)).length;if (i < 2) return i ? ws(e, t) : e;var n = ws(e, Bi(t / ji(e)));return Ci(e) ? Vs(Mi(n), 0, t).join("") : n.slice(0, t);
        }function _r(t) {
          return function (e, i, s) {
            return s && "number" != typeof s && Kr(e, i, s) && (i = s = r), e = za(e), i === r ? (i = e, e = 0) : i = za(i), function (t, e, i, s) {
              for (var r = -1, o = qi(Bi((e - t) / (i || 1)), 0), a = n(o); o--;) {
                a[s ? o : ++r] = t, t += i;
              }return a;
            }(e, i, s = s === r ? e < i ? 1 : -1 : za(s), t);
          };
        }function br(t) {
          return function (e, i) {
            return "string" == typeof e && "string" == typeof i || (e = $a(e), i = $a(i)), t(e, i);
          };
        }function yr(t, e, i, n, s, o, a, l, u, c) {
          var h = e & y;e |= h ? w : x, (e &= ~(h ? x : w)) & b || (e &= ~(v | _));var d = [t, e, s, h ? o : r, h ? a : r, h ? r : o, h ? r : a, l, u, c],
              p = i.apply(r, d);return Vr(t) && io(p, d), p.placeholder = n, ro(p, t, e);
        }function kr(t) {
          var e = te[t];return function (t, i) {
            if (t = $a(t), i = null == i ? 0 : Ui(Wa(i), 292)) {
              var n = (Ua(t) + "e").split("e");return +((n = (Ua(e(n[0] + "e" + (+n[1] + i))) + "e").split("e"))[0] + "e" + (+n[1] - i));
            }return e(t);
          };
        }var wr = Qi && 1 / Ii(new Qi([, -0]))[1] == E ? function (t) {
          return new Qi(t);
        } : Hl;function xr(t) {
          return function (e) {
            var i = Wr(e);return i == X ? Di(e) : i == it ? Ai(e) : function (t, e) {
              return Qe(e, function (e) {
                return [e, t[e]];
              });
            }(e, t(e));
          };
        }function Cr(t, e, i, s, o, a, u, c) {
          var d = e & _;if (!d && "function" != typeof t) throw new se(l);var p = s ? s.length : 0;if (p || (e &= ~(w | x), s = o = r), u = u === r ? u : qi(Wa(u), 0), c = c === r ? c : Wa(c), p -= o ? o.length : 0, e & x) {
            var f = s,
                g = o;s = o = r;
          }var m = d ? r : Pr(t),
              S = [t, e, i, s, o, f, g, a, u, c];if (m && function (t, e) {
            var i = t[1],
                n = e[1],
                s = i | n,
                r = s < (v | _ | C),
                o = n == C && i == y || n == C && i == D && t[7].length <= e[8] || n == (C | D) && e[7].length <= e[8] && i == y;if (!r && !o) return t;n & v && (t[2] = e[2], s |= i & v ? 0 : b);var a = e[3];if (a) {
              var l = t[3];t[3] = l ? tr(l, a, e[4]) : a, t[4] = l ? Ti(t[3], h) : e[4];
            }(a = e[5]) && (l = t[5], t[5] = l ? er(l, a, e[6]) : a, t[6] = l ? Ti(t[5], h) : e[6]), (a = e[7]) && (t[7] = a), n & C && (t[8] = null == t[8] ? e[8] : Ui(t[8], e[8])), null == t[9] && (t[9] = e[9]), t[0] = e[0], t[1] = s;
          }(S, m), t = S[0], e = S[1], i = S[2], s = S[3], o = S[4], !(c = S[9] = S[9] === r ? d ? 0 : t.length : qi(S[9] - p, 0)) && e & (y | k) && (e &= ~(y | k)), e && e != v) T = e == y || e == k ? function (t, e, i) {
            var s = cr(t);return function o() {
              for (var a = arguments.length, l = n(a), u = a, c = Or(o); u--;) {
                l[u] = arguments[u];
              }var h = a < 3 && l[0] !== c && l[a - 1] !== c ? [] : Ti(l, c);return (a -= h.length) < i ? yr(t, e, pr, o.placeholder, r, l, h, r, r, i - a) : Ue(this && this !== Ee && this instanceof o ? s : t, this, l);
            };
          }(t, e, c) : e != w && e != (v | w) || o.length ? pr.apply(r, S) : function (t, e, i, s) {
            var r = e & v,
                o = cr(t);return function e() {
              for (var a = -1, l = arguments.length, u = -1, c = s.length, h = n(c + l), d = this && this !== Ee && this instanceof e ? o : t; ++u < c;) {
                h[u] = s[u];
              }for (; l--;) {
                h[u++] = arguments[++a];
              }return Ue(d, r ? i : this, h);
            };
          }(t, e, i, s);else var T = function (t, e, i) {
            var n = e & v,
                s = cr(t);return function e() {
              return (this && this !== Ee && this instanceof e ? s : t).apply(n ? i : this, arguments);
            };
          }(t, e, i);return ro((m ? Ts : io)(T, S), t, e);
        }function Dr(t, e, i, n) {
          return t === r || pa(t, ae[i]) && !ce.call(n, i) ? e : t;
        }function Sr(t, e, i, n, s, o) {
          return Ta(t) && Ta(e) && (o.set(e, t), gs(t, e, r, Sr, o), o.delete(e)), t;
        }function Tr(t) {
          return Ma(t) ? r : t;
        }function Ir(t, e, i, n, s, o) {
          var a = i & g,
              l = t.length,
              u = e.length;if (l != u && !(a && u > l)) return !1;var c = o.get(t);if (c && o.get(e)) return c == e;var h = -1,
              d = !0,
              p = i & m ? new kn() : r;for (o.set(t, e), o.set(e, t); ++h < l;) {
            var f = t[h],
                v = e[h];if (n) var _ = a ? n(v, f, h, e, t, o) : n(f, v, h, t, e, o);if (_ !== r) {
              if (_) continue;d = !1;break;
            }if (p) {
              if (!ni(e, function (t, e) {
                if (!_i(p, e) && (f === t || s(f, t, i, n, o))) return p.push(e);
              })) {
                d = !1;break;
              }
            } else if (f !== v && !s(f, v, i, n, o)) {
              d = !1;break;
            }
          }return o.delete(t), o.delete(e), d;
        }function Ar(t) {
          return so(Qr(t, r, _o), t + "");
        }function jr(t) {
          return Jn(t, sl, Lr);
        }function Mr(t) {
          return Jn(t, rl, zr);
        }var Pr = nn ? function (t) {
          return nn.get(t);
        } : Hl;function Er(t) {
          for (var e = t.name + "", i = sn[e], n = ce.call(sn, e) ? i.length : 0; n--;) {
            var s = i[n],
                r = s.func;if (null == r || r == t) return s.name;
          }return e;
        }function Or(t) {
          return (ce.call(pn, "placeholder") ? pn : t).placeholder;
        }function Hr() {
          var t = pn.iteratee || Ml;return t = t === Ml ? ls : t, arguments.length ? t(arguments[0], arguments[1]) : t;
        }function Nr(t, e) {
          var i,
              n,
              s = t.__data__;return ("string" == (n = _typeof(i = e)) || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== i : null === i) ? s["string" == typeof e ? "string" : "hash"] : s.map;
        }function Br(t) {
          for (var e = sl(t), i = e.length; i--;) {
            var n = e[i],
                s = t[n];e[i] = [n, s, Jr(s)];
          }return e;
        }function Fr(t, e) {
          var i = function (t, e) {
            return null == t ? r : t[e];
          }(t, e);return as(i) ? i : r;
        }var Lr = Li ? function (t) {
          return null == t ? [] : (t = ee(t), Xe(Li(t), function (e) {
            return Oe.call(t, e);
          }));
        } : Rl,
            zr = Li ? function (t) {
          for (var e = []; t;) {
            ti(e, Lr(t)), t = Me(t);
          }return e;
        } : Rl,
            Wr = Zn;function Rr(t, e, i) {
          for (var n = -1, s = (e = Ks(e, t)).length, r = !1; ++n < s;) {
            var o = uo(e[n]);if (!(r = null != t && i(t, o))) break;t = t[o];
          }return r || ++n != s ? r : !!(s = null == t ? 0 : t.length) && Sa(s) && Ur(o, s) && (va(t) || ma(t));
        }function $r(t) {
          return "function" != typeof t.constructor || Xr(t) ? {} : fn(Me(t));
        }function qr(t) {
          return va(t) || ma(t) || !!(Be && t && t[Be]);
        }function Ur(t, e) {
          var i = typeof t === "undefined" ? "undefined" : _typeof(t);return !!(e = null == e ? O : e) && ("number" == i || "symbol" != i && Vt.test(t)) && t > -1 && t % 1 == 0 && t < e;
        }function Kr(t, e, i) {
          if (!Ta(i)) return !1;var n = typeof e === "undefined" ? "undefined" : _typeof(e);return !!("number" == n ? ba(i) && Ur(e, i.length) : "string" == n && e in i) && pa(i[e], t);
        }function Yr(t, e) {
          if (va(t)) return !1;var i = typeof t === "undefined" ? "undefined" : _typeof(t);return !("number" != i && "symbol" != i && "boolean" != i && null != t && !Ha(t)) || jt.test(t) || !At.test(t) || null != e && t in ee(e);
        }function Vr(t) {
          var e = Er(t),
              i = pn[e];if ("function" != typeof i || !(e in vn.prototype)) return !1;if (t === i) return !0;var n = Pr(i);return !!n && t === n[0];
        }(Xi && Wr(new Xi(new ArrayBuffer(1))) != ut || Ji && Wr(new Ji()) != X || Zi && "[object Promise]" != Wr(Zi.resolve()) || Qi && Wr(new Qi()) != it || tn && Wr(new tn()) != ot) && (Wr = function Wr(t) {
          var e = Zn(t),
              i = e == Q ? t.constructor : r,
              n = i ? co(i) : "";if (n) switch (n) {case rn:
              return ut;case on:
              return X;case an:
              return "[object Promise]";case ln:
              return it;case un:
              return ot;}return e;
        });var Gr = le ? Ca : $l;function Xr(t) {
          var e = t && t.constructor;return t === ("function" == typeof e && e.prototype || ae);
        }function Jr(t) {
          return t == t && !Ta(t);
        }function Zr(t, e) {
          return function (i) {
            return null != i && i[t] === e && (e !== r || t in ee(i));
          };
        }function Qr(t, e, i) {
          return e = qi(e === r ? t.length - 1 : e, 0), function () {
            for (var s = arguments, r = -1, o = qi(s.length - e, 0), a = n(o); ++r < o;) {
              a[r] = s[e + r];
            }r = -1;for (var l = n(e + 1); ++r < e;) {
              l[r] = s[r];
            }return l[e] = i(a), Ue(t, this, l);
          };
        }function to(t, e) {
          return e.length < 2 ? t : Xn(t, js(e, 0, -1));
        }function eo(t, e) {
          if ("__proto__" != e) return t[e];
        }var io = oo(Ts),
            no = Ni || function (t, e) {
          return Ee.setTimeout(t, e);
        },
            so = oo(Is);function ro(t, e, i) {
          var n = e + "";return so(t, function (t, e) {
            var i = e.length;if (!i) return t;var n = i - 1;return e[n] = (i > 1 ? "& " : "") + e[n], e = e.join(i > 2 ? ", " : " "), t.replace(Bt, "{\n/* [wrapped with " + e + "] */\n");
          }(n, function (t, e) {
            return Ye(z, function (i) {
              var n = "_." + i[0];e & i[1] && !Je(t, n) && t.push(n);
            }), t.sort();
          }(function (t) {
            var e = t.match(Ft);return e ? e[1].split(Lt) : [];
          }(n), i)));
        }function oo(t) {
          var e = 0,
              i = 0;return function () {
            var n = Ki(),
                s = j - (n - i);if (i = n, s > 0) {
              if (++e >= A) return arguments[0];
            } else e = 0;return t.apply(r, arguments);
          };
        }function ao(t, e) {
          var i = -1,
              n = t.length,
              s = n - 1;for (e = e === r ? n : e; ++i < e;) {
            var o = ks(i, s),
                a = t[o];t[o] = t[i], t[i] = a;
          }return t.length = e, t;
        }var lo = function (t) {
          var e = aa(t, function (t) {
            return i.size === c && i.clear(), t;
          }),
              i = e.cache;return e;
        }(function (t) {
          var e = [];return 46 === t.charCodeAt(0) && e.push(""), t.replace(Mt, function (t, i, n, s) {
            e.push(n ? s.replace(Wt, "$1") : i || t);
          }), e;
        });function uo(t) {
          if ("string" == typeof t || Ha(t)) return t;var e = t + "";return "0" == e && 1 / t == -E ? "-0" : e;
        }function co(t) {
          if (null != t) {
            try {
              return ue.call(t);
            } catch (t) {}try {
              return t + "";
            } catch (t) {}
          }return "";
        }function ho(t) {
          if (t instanceof vn) return t.clone();var e = new mn(t.__wrapped__, t.__chain__);return e.__actions__ = ir(t.__actions__), e.__index__ = t.__index__, e.__values__ = t.__values__, e;
        }var po = xs(function (t, e) {
          return ya(t) ? Fn(t, qn(e, 1, ya, !0)) : [];
        }),
            fo = xs(function (t, e) {
          var i = xo(e);return ya(i) && (i = r), ya(t) ? Fn(t, qn(e, 1, ya, !0), Hr(i, 2)) : [];
        }),
            go = xs(function (t, e) {
          var i = xo(e);return ya(i) && (i = r), ya(t) ? Fn(t, qn(e, 1, ya, !0), r, i) : [];
        });function mo(t, e, i) {
          var n = null == t ? 0 : t.length;if (!n) return -1;var s = null == i ? 0 : Wa(i);return s < 0 && (s = qi(n + s, 0)), oi(t, Hr(e, 3), s);
        }function vo(t, e, i) {
          var n = null == t ? 0 : t.length;if (!n) return -1;var s = n - 1;return i !== r && (s = Wa(i), s = i < 0 ? qi(n + s, 0) : Ui(s, n - 1)), oi(t, Hr(e, 3), s, !0);
        }function _o(t) {
          return null != t && t.length ? qn(t, 1) : [];
        }function bo(t) {
          return t && t.length ? t[0] : r;
        }var yo = xs(function (t) {
          var e = Qe(t, qs);return e.length && e[0] === t[0] ? is(e) : [];
        }),
            ko = xs(function (t) {
          var e = xo(t),
              i = Qe(t, qs);return e === xo(i) ? e = r : i.pop(), i.length && i[0] === t[0] ? is(i, Hr(e, 2)) : [];
        }),
            wo = xs(function (t) {
          var e = xo(t),
              i = Qe(t, qs);return (e = "function" == typeof e ? e : r) && i.pop(), i.length && i[0] === t[0] ? is(i, r, e) : [];
        });function xo(t) {
          var e = null == t ? 0 : t.length;return e ? t[e - 1] : r;
        }var Co = xs(Do);function Do(t, e) {
          return t && t.length && e && e.length ? bs(t, e) : t;
        }var So = Ar(function (t, e) {
          var i = null == t ? 0 : t.length,
              n = En(t, e);return ys(t, Qe(e, function (t) {
            return Ur(t, i) ? +t : t;
          }).sort(Qs)), n;
        });function To(t) {
          return null == t ? t : Gi.call(t);
        }var Io = xs(function (t) {
          return Bs(qn(t, 1, ya, !0));
        }),
            Ao = xs(function (t) {
          var e = xo(t);return ya(e) && (e = r), Bs(qn(t, 1, ya, !0), Hr(e, 2));
        }),
            jo = xs(function (t) {
          var e = xo(t);return e = "function" == typeof e ? e : r, Bs(qn(t, 1, ya, !0), r, e);
        });function Mo(t) {
          if (!t || !t.length) return [];var e = 0;return t = Xe(t, function (t) {
            if (ya(t)) return e = qi(t.length, e), !0;
          }), gi(e, function (e) {
            return Qe(t, hi(e));
          });
        }function Po(t, e) {
          if (!t || !t.length) return [];var i = Mo(t);return null == e ? i : Qe(i, function (t) {
            return Ue(e, r, t);
          });
        }var Eo = xs(function (t, e) {
          return ya(t) ? Fn(t, e) : [];
        }),
            Oo = xs(function (t) {
          return Rs(Xe(t, ya));
        }),
            Ho = xs(function (t) {
          var e = xo(t);return ya(e) && (e = r), Rs(Xe(t, ya), Hr(e, 2));
        }),
            No = xs(function (t) {
          var e = xo(t);return e = "function" == typeof e ? e : r, Rs(Xe(t, ya), r, e);
        }),
            Bo = xs(Mo);var Fo = xs(function (t) {
          var e = t.length,
              i = e > 1 ? t[e - 1] : r;return i = "function" == typeof i ? (t.pop(), i) : r, Po(t, i);
        });function Lo(t) {
          var e = pn(t);return e.__chain__ = !0, e;
        }function zo(t, e) {
          return e(t);
        }var Wo = Ar(function (t) {
          var e = t.length,
              i = e ? t[0] : 0,
              n = this.__wrapped__,
              s = function s(e) {
            return En(e, t);
          };return !(e > 1 || this.__actions__.length) && n instanceof vn && Ur(i) ? ((n = n.slice(i, +i + (e ? 1 : 0))).__actions__.push({ func: zo, args: [s], thisArg: r }), new mn(n, this.__chain__).thru(function (t) {
            return e && !t.length && t.push(r), t;
          })) : this.thru(s);
        });var Ro = sr(function (t, e, i) {
          ce.call(t, i) ? ++t[i] : Pn(t, i, 1);
        });var $o = hr(mo),
            qo = hr(vo);function Uo(t, e) {
          return (va(t) ? Ye : Ln)(t, Hr(e, 3));
        }function Ko(t, e) {
          return (va(t) ? Ve : zn)(t, Hr(e, 3));
        }var Yo = sr(function (t, e, i) {
          ce.call(t, i) ? t[i].push(e) : Pn(t, i, [e]);
        });var Vo = xs(function (t, e, i) {
          var s = -1,
              r = "function" == typeof e,
              o = ba(t) ? n(t.length) : [];return Ln(t, function (t) {
            o[++s] = r ? Ue(e, t, i) : ns(t, e, i);
          }), o;
        }),
            Go = sr(function (t, e, i) {
          Pn(t, i, e);
        });function Xo(t, e) {
          return (va(t) ? Qe : ds)(t, Hr(e, 3));
        }var Jo = sr(function (t, e, i) {
          t[i ? 0 : 1].push(e);
        }, function () {
          return [[], []];
        });var Zo = xs(function (t, e) {
          if (null == t) return [];var i = e.length;return i > 1 && Kr(t, e[0], e[1]) ? e = [] : i > 2 && Kr(e[0], e[1], e[2]) && (e = [e[0]]), vs(t, qn(e, 1), []);
        }),
            Qo = Hi || function () {
          return Ee.Date.now();
        };function ta(t, e, i) {
          return e = i ? r : e, e = t && null == e ? t.length : e, Cr(t, C, r, r, r, r, e);
        }function ea(t, e) {
          var i;if ("function" != typeof e) throw new se(l);return t = Wa(t), function () {
            return --t > 0 && (i = e.apply(this, arguments)), t <= 1 && (e = r), i;
          };
        }var ia = xs(function (t, e, i) {
          var n = v;if (i.length) {
            var s = Ti(i, Or(ia));n |= w;
          }return Cr(t, n, e, i, s);
        }),
            na = xs(function (t, e, i) {
          var n = v | _;if (i.length) {
            var s = Ti(i, Or(na));n |= w;
          }return Cr(e, n, t, i, s);
        });function sa(t, e, i) {
          var n,
              s,
              o,
              a,
              u,
              c,
              h = 0,
              d = !1,
              p = !1,
              f = !0;if ("function" != typeof t) throw new se(l);function g(e) {
            var i = n,
                o = s;return n = s = r, h = e, a = t.apply(o, i);
          }function m(t) {
            var i = t - c;return c === r || i >= e || i < 0 || p && t - h >= o;
          }function v() {
            var t = Qo();if (m(t)) return _(t);u = no(v, function (t) {
              var i = e - (t - c);return p ? Ui(i, o - (t - h)) : i;
            }(t));
          }function _(t) {
            return u = r, f && n ? g(t) : (n = s = r, a);
          }function b() {
            var t = Qo(),
                i = m(t);if (n = arguments, s = this, c = t, i) {
              if (u === r) return function (t) {
                return h = t, u = no(v, e), d ? g(t) : a;
              }(c);if (p) return u = no(v, e), g(c);
            }return u === r && (u = no(v, e)), a;
          }return e = $a(e) || 0, Ta(i) && (d = !!i.leading, o = (p = "maxWait" in i) ? qi($a(i.maxWait) || 0, e) : o, f = "trailing" in i ? !!i.trailing : f), b.cancel = function () {
            u !== r && Gs(u), h = 0, n = c = s = u = r;
          }, b.flush = function () {
            return u === r ? a : _(Qo());
          }, b;
        }var ra = xs(function (t, e) {
          return Bn(t, 1, e);
        }),
            oa = xs(function (t, e, i) {
          return Bn(t, $a(e) || 0, i);
        });function aa(t, e) {
          if ("function" != typeof t || null != e && "function" != typeof e) throw new se(l);var i = function i() {
            var n = arguments,
                s = e ? e.apply(this, n) : n[0],
                r = i.cache;if (r.has(s)) return r.get(s);var o = t.apply(this, n);return i.cache = r.set(s, o) || r, o;
          };return i.cache = new (aa.Cache || yn)(), i;
        }function la(t) {
          if ("function" != typeof t) throw new se(l);return function () {
            var e = arguments;switch (e.length) {case 0:
                return !t.call(this);case 1:
                return !t.call(this, e[0]);case 2:
                return !t.call(this, e[0], e[1]);case 3:
                return !t.call(this, e[0], e[1], e[2]);}return !t.apply(this, e);
          };
        }aa.Cache = yn;var ua = Ys(function (t, e) {
          var i = (e = 1 == e.length && va(e[0]) ? Qe(e[0], mi(Hr())) : Qe(qn(e, 1), mi(Hr()))).length;return xs(function (n) {
            for (var s = -1, r = Ui(n.length, i); ++s < r;) {
              n[s] = e[s].call(this, n[s]);
            }return Ue(t, this, n);
          });
        }),
            ca = xs(function (t, e) {
          var i = Ti(e, Or(ca));return Cr(t, w, r, e, i);
        }),
            ha = xs(function (t, e) {
          var i = Ti(e, Or(ha));return Cr(t, x, r, e, i);
        }),
            da = Ar(function (t, e) {
          return Cr(t, D, r, r, r, e);
        });function pa(t, e) {
          return t === e || t != t && e != e;
        }var fa = br(Qn),
            ga = br(function (t, e) {
          return t >= e;
        }),
            ma = ss(function () {
          return arguments;
        }()) ? ss : function (t) {
          return Ia(t) && ce.call(t, "callee") && !Oe.call(t, "callee");
        },
            va = n.isArray,
            _a = Le ? mi(Le) : function (t) {
          return Ia(t) && Zn(t) == lt;
        };function ba(t) {
          return null != t && Sa(t.length) && !Ca(t);
        }function ya(t) {
          return Ia(t) && ba(t);
        }var ka = zi || $l,
            wa = ze ? mi(ze) : function (t) {
          return Ia(t) && Zn(t) == U;
        };function xa(t) {
          if (!Ia(t)) return !1;var e = Zn(t);return e == Y || e == K || "string" == typeof t.message && "string" == typeof t.name && !Ma(t);
        }function Ca(t) {
          if (!Ta(t)) return !1;var e = Zn(t);return e == V || e == G || e == $ || e == tt;
        }function Da(t) {
          return "number" == typeof t && t == Wa(t);
        }function Sa(t) {
          return "number" == typeof t && t > -1 && t % 1 == 0 && t <= O;
        }function Ta(t) {
          var e = typeof t === "undefined" ? "undefined" : _typeof(t);return null != t && ("object" == e || "function" == e);
        }function Ia(t) {
          return null != t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t));
        }var Aa = We ? mi(We) : function (t) {
          return Ia(t) && Wr(t) == X;
        };function ja(t) {
          return "number" == typeof t || Ia(t) && Zn(t) == J;
        }function Ma(t) {
          if (!Ia(t) || Zn(t) != Q) return !1;var e = Me(t);if (null === e) return !0;var i = ce.call(e, "constructor") && e.constructor;return "function" == typeof i && i instanceof i && ue.call(i) == fe;
        }var Pa = Re ? mi(Re) : function (t) {
          return Ia(t) && Zn(t) == et;
        };var Ea = $e ? mi($e) : function (t) {
          return Ia(t) && Wr(t) == it;
        };function Oa(t) {
          return "string" == typeof t || !va(t) && Ia(t) && Zn(t) == nt;
        }function Ha(t) {
          return "symbol" == (typeof t === "undefined" ? "undefined" : _typeof(t)) || Ia(t) && Zn(t) == st;
        }var Na = qe ? mi(qe) : function (t) {
          return Ia(t) && Sa(t.length) && !!Se[Zn(t)];
        };var Ba = br(hs),
            Fa = br(function (t, e) {
          return t <= e;
        });function La(t) {
          if (!t) return [];if (ba(t)) return Oa(t) ? Mi(t) : ir(t);if (Fe && t[Fe]) return function (t) {
            for (var e, i = []; !(e = t.next()).done;) {
              i.push(e.value);
            }return i;
          }(t[Fe]());var e = Wr(t);return (e == X ? Di : e == it ? Ii : pl)(t);
        }function za(t) {
          return t ? (t = $a(t)) === E || t === -E ? (t < 0 ? -1 : 1) * H : t == t ? t : 0 : 0 === t ? t : 0;
        }function Wa(t) {
          var e = za(t),
              i = e % 1;return e == e ? i ? e - i : e : 0;
        }function Ra(t) {
          return t ? On(Wa(t), 0, B) : 0;
        }function $a(t) {
          if ("number" == typeof t) return t;if (Ha(t)) return N;if (Ta(t)) {
            var e = "function" == typeof t.valueOf ? t.valueOf() : t;t = Ta(e) ? e + "" : e;
          }if ("string" != typeof t) return 0 === t ? t : +t;t = t.replace(Ot, "");var i = Ut.test(t);return i || Yt.test(t) ? je(t.slice(2), i ? 2 : 8) : qt.test(t) ? N : +t;
        }function qa(t) {
          return nr(t, rl(t));
        }function Ua(t) {
          return null == t ? "" : Ns(t);
        }var Ka = rr(function (t, e) {
          if (Xr(e) || ba(e)) nr(e, sl(e), t);else for (var i in e) {
            ce.call(e, i) && In(t, i, e[i]);
          }
        }),
            Ya = rr(function (t, e) {
          nr(e, rl(e), t);
        }),
            Va = rr(function (t, e, i, n) {
          nr(e, rl(e), t, n);
        }),
            Ga = rr(function (t, e, i, n) {
          nr(e, sl(e), t, n);
        }),
            Xa = Ar(En);var Ja = xs(function (t, e) {
          t = ee(t);var i = -1,
              n = e.length,
              s = n > 2 ? e[2] : r;for (s && Kr(e[0], e[1], s) && (n = 1); ++i < n;) {
            for (var o = e[i], a = rl(o), l = -1, u = a.length; ++l < u;) {
              var c = a[l],
                  h = t[c];(h === r || pa(h, ae[c]) && !ce.call(t, c)) && (t[c] = o[c]);
            }
          }return t;
        }),
            Za = xs(function (t) {
          return t.push(r, Sr), Ue(al, r, t);
        });function Qa(t, e, i) {
          var n = null == t ? r : Xn(t, e);return n === r ? i : n;
        }function tl(t, e) {
          return null != t && Rr(t, e, es);
        }var el = fr(function (t, e, i) {
          null != e && "function" != typeof e.toString && (e = pe.call(e)), t[e] = i;
        }, Tl(jl)),
            il = fr(function (t, e, i) {
          null != e && "function" != typeof e.toString && (e = pe.call(e)), ce.call(t, e) ? t[e].push(i) : t[e] = [i];
        }, Hr),
            nl = xs(ns);function sl(t) {
          return ba(t) ? xn(t) : us(t);
        }function rl(t) {
          return ba(t) ? xn(t, !0) : cs(t);
        }var ol = rr(function (t, e, i) {
          gs(t, e, i);
        }),
            al = rr(function (t, e, i, n) {
          gs(t, e, i, n);
        }),
            ll = Ar(function (t, e) {
          var i = {};if (null == t) return i;var n = !1;e = Qe(e, function (e) {
            return e = Ks(e, t), n || (n = e.length > 1), e;
          }), nr(t, Mr(t), i), n && (i = Hn(i, d | p | f, Tr));for (var s = e.length; s--;) {
            Fs(i, e[s]);
          }return i;
        });var ul = Ar(function (t, e) {
          return null == t ? {} : function (t, e) {
            return _s(t, e, function (e, i) {
              return tl(t, i);
            });
          }(t, e);
        });function cl(t, e) {
          if (null == t) return {};var i = Qe(Mr(t), function (t) {
            return [t];
          });return e = Hr(e), _s(t, i, function (t, i) {
            return e(t, i[0]);
          });
        }var hl = xr(sl),
            dl = xr(rl);function pl(t) {
          return null == t ? [] : vi(t, sl(t));
        }var fl = ur(function (t, e, i) {
          return e = e.toLowerCase(), t + (i ? gl(e) : e);
        });function gl(t) {
          return xl(Ua(t).toLowerCase());
        }function ml(t) {
          return (t = Ua(t)) && t.replace(Gt, ki).replace(be, "");
        }var vl = ur(function (t, e, i) {
          return t + (i ? "-" : "") + e.toLowerCase();
        }),
            _l = ur(function (t, e, i) {
          return t + (i ? " " : "") + e.toLowerCase();
        }),
            bl = lr("toLowerCase");var yl = ur(function (t, e, i) {
          return t + (i ? "_" : "") + e.toLowerCase();
        });var kl = ur(function (t, e, i) {
          return t + (i ? " " : "") + xl(e);
        });var wl = ur(function (t, e, i) {
          return t + (i ? " " : "") + e.toUpperCase();
        }),
            xl = lr("toUpperCase");function Cl(t, e, i) {
          return t = Ua(t), (e = i ? r : e) === r ? function (t) {
            return xe.test(t);
          }(t) ? function (t) {
            return t.match(ke) || [];
          }(t) : function (t) {
            return t.match(zt) || [];
          }(t) : t.match(e) || [];
        }var Dl = xs(function (t, e) {
          try {
            return Ue(t, r, e);
          } catch (t) {
            return xa(t) ? t : new Zt(t);
          }
        }),
            Sl = Ar(function (t, e) {
          return Ye(e, function (e) {
            e = uo(e), Pn(t, e, ia(t[e], t));
          }), t;
        });function Tl(t) {
          return function () {
            return t;
          };
        }var Il = dr(),
            Al = dr(!0);function jl(t) {
          return t;
        }function Ml(t) {
          return ls("function" == typeof t ? t : Hn(t, d));
        }var Pl = xs(function (t, e) {
          return function (i) {
            return ns(i, t, e);
          };
        }),
            El = xs(function (t, e) {
          return function (i) {
            return ns(t, i, e);
          };
        });function Ol(t, e, i) {
          var n = sl(e),
              s = Gn(e, n);null != i || Ta(e) && (s.length || !n.length) || (i = e, e = t, t = this, s = Gn(e, sl(e)));var r = !(Ta(i) && "chain" in i && !i.chain),
              o = Ca(t);return Ye(s, function (i) {
            var n = e[i];t[i] = n, o && (t.prototype[i] = function () {
              var e = this.__chain__;if (r || e) {
                var i = t(this.__wrapped__);return (i.__actions__ = ir(this.__actions__)).push({ func: n, args: arguments, thisArg: t }), i.__chain__ = e, i;
              }return n.apply(t, ti([this.value()], arguments));
            });
          }), t;
        }function Hl() {}var Nl = mr(Qe),
            Bl = mr(Ge),
            Fl = mr(ni);function Ll(t) {
          return Yr(t) ? hi(uo(t)) : function (t) {
            return function (e) {
              return Xn(e, t);
            };
          }(t);
        }var zl = _r(),
            Wl = _r(!0);function Rl() {
          return [];
        }function $l() {
          return !1;
        }var ql = gr(function (t, e) {
          return t + e;
        }, 0),
            Ul = kr("ceil"),
            Kl = gr(function (t, e) {
          return t / e;
        }, 1),
            Yl = kr("floor");var Vl,
            Gl = gr(function (t, e) {
          return t * e;
        }, 1),
            Xl = kr("round"),
            Jl = gr(function (t, e) {
          return t - e;
        }, 0);return pn.after = function (t, e) {
          if ("function" != typeof e) throw new se(l);return t = Wa(t), function () {
            if (--t < 1) return e.apply(this, arguments);
          };
        }, pn.ary = ta, pn.assign = Ka, pn.assignIn = Ya, pn.assignInWith = Va, pn.assignWith = Ga, pn.at = Xa, pn.before = ea, pn.bind = ia, pn.bindAll = Sl, pn.bindKey = na, pn.castArray = function () {
          if (!arguments.length) return [];var t = arguments[0];return va(t) ? t : [t];
        }, pn.chain = Lo, pn.chunk = function (t, e, i) {
          e = (i ? Kr(t, e, i) : e === r) ? 1 : qi(Wa(e), 0);var s = null == t ? 0 : t.length;if (!s || e < 1) return [];for (var o = 0, a = 0, l = n(Bi(s / e)); o < s;) {
            l[a++] = js(t, o, o += e);
          }return l;
        }, pn.compact = function (t) {
          for (var e = -1, i = null == t ? 0 : t.length, n = 0, s = []; ++e < i;) {
            var r = t[e];r && (s[n++] = r);
          }return s;
        }, pn.concat = function () {
          var t = arguments.length;if (!t) return [];for (var e = n(t - 1), i = arguments[0], s = t; s--;) {
            e[s - 1] = arguments[s];
          }return ti(va(i) ? ir(i) : [i], qn(e, 1));
        }, pn.cond = function (t) {
          var e = null == t ? 0 : t.length,
              i = Hr();return t = e ? Qe(t, function (t) {
            if ("function" != typeof t[1]) throw new se(l);return [i(t[0]), t[1]];
          }) : [], xs(function (i) {
            for (var n = -1; ++n < e;) {
              var s = t[n];if (Ue(s[0], this, i)) return Ue(s[1], this, i);
            }
          });
        }, pn.conforms = function (t) {
          return function (t) {
            var e = sl(t);return function (i) {
              return Nn(i, t, e);
            };
          }(Hn(t, d));
        }, pn.constant = Tl, pn.countBy = Ro, pn.create = function (t, e) {
          var i = fn(t);return null == e ? i : Mn(i, e);
        }, pn.curry = function t(e, i, n) {
          var s = Cr(e, y, r, r, r, r, r, i = n ? r : i);return s.placeholder = t.placeholder, s;
        }, pn.curryRight = function t(e, i, n) {
          var s = Cr(e, k, r, r, r, r, r, i = n ? r : i);return s.placeholder = t.placeholder, s;
        }, pn.debounce = sa, pn.defaults = Ja, pn.defaultsDeep = Za, pn.defer = ra, pn.delay = oa, pn.difference = po, pn.differenceBy = fo, pn.differenceWith = go, pn.drop = function (t, e, i) {
          var n = null == t ? 0 : t.length;return n ? js(t, (e = i || e === r ? 1 : Wa(e)) < 0 ? 0 : e, n) : [];
        }, pn.dropRight = function (t, e, i) {
          var n = null == t ? 0 : t.length;return n ? js(t, 0, (e = n - (e = i || e === r ? 1 : Wa(e))) < 0 ? 0 : e) : [];
        }, pn.dropRightWhile = function (t, e) {
          return t && t.length ? zs(t, Hr(e, 3), !0, !0) : [];
        }, pn.dropWhile = function (t, e) {
          return t && t.length ? zs(t, Hr(e, 3), !0) : [];
        }, pn.fill = function (t, e, i, n) {
          var s = null == t ? 0 : t.length;return s ? (i && "number" != typeof i && Kr(t, e, i) && (i = 0, n = s), function (t, e, i, n) {
            var s = t.length;for ((i = Wa(i)) < 0 && (i = -i > s ? 0 : s + i), (n = n === r || n > s ? s : Wa(n)) < 0 && (n += s), n = i > n ? 0 : Ra(n); i < n;) {
              t[i++] = e;
            }return t;
          }(t, e, i, n)) : [];
        }, pn.filter = function (t, e) {
          return (va(t) ? Xe : $n)(t, Hr(e, 3));
        }, pn.flatMap = function (t, e) {
          return qn(Xo(t, e), 1);
        }, pn.flatMapDeep = function (t, e) {
          return qn(Xo(t, e), E);
        }, pn.flatMapDepth = function (t, e, i) {
          return i = i === r ? 1 : Wa(i), qn(Xo(t, e), i);
        }, pn.flatten = _o, pn.flattenDeep = function (t) {
          return null != t && t.length ? qn(t, E) : [];
        }, pn.flattenDepth = function (t, e) {
          return null != t && t.length ? qn(t, e = e === r ? 1 : Wa(e)) : [];
        }, pn.flip = function (t) {
          return Cr(t, S);
        }, pn.flow = Il, pn.flowRight = Al, pn.fromPairs = function (t) {
          for (var e = -1, i = null == t ? 0 : t.length, n = {}; ++e < i;) {
            var s = t[e];n[s[0]] = s[1];
          }return n;
        }, pn.functions = function (t) {
          return null == t ? [] : Gn(t, sl(t));
        }, pn.functionsIn = function (t) {
          return null == t ? [] : Gn(t, rl(t));
        }, pn.groupBy = Yo, pn.initial = function (t) {
          return null != t && t.length ? js(t, 0, -1) : [];
        }, pn.intersection = yo, pn.intersectionBy = ko, pn.intersectionWith = wo, pn.invert = el, pn.invertBy = il, pn.invokeMap = Vo, pn.iteratee = Ml, pn.keyBy = Go, pn.keys = sl, pn.keysIn = rl, pn.map = Xo, pn.mapKeys = function (t, e) {
          var i = {};return e = Hr(e, 3), Yn(t, function (t, n, s) {
            Pn(i, e(t, n, s), t);
          }), i;
        }, pn.mapValues = function (t, e) {
          var i = {};return e = Hr(e, 3), Yn(t, function (t, n, s) {
            Pn(i, n, e(t, n, s));
          }), i;
        }, pn.matches = function (t) {
          return ps(Hn(t, d));
        }, pn.matchesProperty = function (t, e) {
          return fs(t, Hn(e, d));
        }, pn.memoize = aa, pn.merge = ol, pn.mergeWith = al, pn.method = Pl, pn.methodOf = El, pn.mixin = Ol, pn.negate = la, pn.nthArg = function (t) {
          return t = Wa(t), xs(function (e) {
            return ms(e, t);
          });
        }, pn.omit = ll, pn.omitBy = function (t, e) {
          return cl(t, la(Hr(e)));
        }, pn.once = function (t) {
          return ea(2, t);
        }, pn.orderBy = function (t, e, i, n) {
          return null == t ? [] : (va(e) || (e = null == e ? [] : [e]), va(i = n ? r : i) || (i = null == i ? [] : [i]), vs(t, e, i));
        }, pn.over = Nl, pn.overArgs = ua, pn.overEvery = Bl, pn.overSome = Fl, pn.partial = ca, pn.partialRight = ha, pn.partition = Jo, pn.pick = ul, pn.pickBy = cl, pn.property = Ll, pn.propertyOf = function (t) {
          return function (e) {
            return null == t ? r : Xn(t, e);
          };
        }, pn.pull = Co, pn.pullAll = Do, pn.pullAllBy = function (t, e, i) {
          return t && t.length && e && e.length ? bs(t, e, Hr(i, 2)) : t;
        }, pn.pullAllWith = function (t, e, i) {
          return t && t.length && e && e.length ? bs(t, e, r, i) : t;
        }, pn.pullAt = So, pn.range = zl, pn.rangeRight = Wl, pn.rearg = da, pn.reject = function (t, e) {
          return (va(t) ? Xe : $n)(t, la(Hr(e, 3)));
        }, pn.remove = function (t, e) {
          var i = [];if (!t || !t.length) return i;var n = -1,
              s = [],
              r = t.length;for (e = Hr(e, 3); ++n < r;) {
            var o = t[n];e(o, n, t) && (i.push(o), s.push(n));
          }return ys(t, s), i;
        }, pn.rest = function (t, e) {
          if ("function" != typeof t) throw new se(l);return xs(t, e = e === r ? e : Wa(e));
        }, pn.reverse = To, pn.sampleSize = function (t, e, i) {
          return e = (i ? Kr(t, e, i) : e === r) ? 1 : Wa(e), (va(t) ? Dn : Ds)(t, e);
        }, pn.set = function (t, e, i) {
          return null == t ? t : Ss(t, e, i);
        }, pn.setWith = function (t, e, i, n) {
          return n = "function" == typeof n ? n : r, null == t ? t : Ss(t, e, i, n);
        }, pn.shuffle = function (t) {
          return (va(t) ? Sn : As)(t);
        }, pn.slice = function (t, e, i) {
          var n = null == t ? 0 : t.length;return n ? (i && "number" != typeof i && Kr(t, e, i) ? (e = 0, i = n) : (e = null == e ? 0 : Wa(e), i = i === r ? n : Wa(i)), js(t, e, i)) : [];
        }, pn.sortBy = Zo, pn.sortedUniq = function (t) {
          return t && t.length ? Os(t) : [];
        }, pn.sortedUniqBy = function (t, e) {
          return t && t.length ? Os(t, Hr(e, 2)) : [];
        }, pn.split = function (t, e, i) {
          return i && "number" != typeof i && Kr(t, e, i) && (e = i = r), (i = i === r ? B : i >>> 0) ? (t = Ua(t)) && ("string" == typeof e || null != e && !Pa(e)) && !(e = Ns(e)) && Ci(t) ? Vs(Mi(t), 0, i) : t.split(e, i) : [];
        }, pn.spread = function (t, e) {
          if ("function" != typeof t) throw new se(l);return e = null == e ? 0 : qi(Wa(e), 0), xs(function (i) {
            var n = i[e],
                s = Vs(i, 0, e);return n && ti(s, n), Ue(t, this, s);
          });
        }, pn.tail = function (t) {
          var e = null == t ? 0 : t.length;return e ? js(t, 1, e) : [];
        }, pn.take = function (t, e, i) {
          return t && t.length ? js(t, 0, (e = i || e === r ? 1 : Wa(e)) < 0 ? 0 : e) : [];
        }, pn.takeRight = function (t, e, i) {
          var n = null == t ? 0 : t.length;return n ? js(t, (e = n - (e = i || e === r ? 1 : Wa(e))) < 0 ? 0 : e, n) : [];
        }, pn.takeRightWhile = function (t, e) {
          return t && t.length ? zs(t, Hr(e, 3), !1, !0) : [];
        }, pn.takeWhile = function (t, e) {
          return t && t.length ? zs(t, Hr(e, 3)) : [];
        }, pn.tap = function (t, e) {
          return e(t), t;
        }, pn.throttle = function (t, e, i) {
          var n = !0,
              s = !0;if ("function" != typeof t) throw new se(l);return Ta(i) && (n = "leading" in i ? !!i.leading : n, s = "trailing" in i ? !!i.trailing : s), sa(t, e, { leading: n, maxWait: e, trailing: s });
        }, pn.thru = zo, pn.toArray = La, pn.toPairs = hl, pn.toPairsIn = dl, pn.toPath = function (t) {
          return va(t) ? Qe(t, uo) : Ha(t) ? [t] : ir(lo(Ua(t)));
        }, pn.toPlainObject = qa, pn.transform = function (t, e, i) {
          var n = va(t),
              s = n || ka(t) || Na(t);if (e = Hr(e, 4), null == i) {
            var r = t && t.constructor;i = s ? n ? new r() : [] : Ta(t) && Ca(r) ? fn(Me(t)) : {};
          }return (s ? Ye : Yn)(t, function (t, n, s) {
            return e(i, t, n, s);
          }), i;
        }, pn.unary = function (t) {
          return ta(t, 1);
        }, pn.union = Io, pn.unionBy = Ao, pn.unionWith = jo, pn.uniq = function (t) {
          return t && t.length ? Bs(t) : [];
        }, pn.uniqBy = function (t, e) {
          return t && t.length ? Bs(t, Hr(e, 2)) : [];
        }, pn.uniqWith = function (t, e) {
          return e = "function" == typeof e ? e : r, t && t.length ? Bs(t, r, e) : [];
        }, pn.unset = function (t, e) {
          return null == t || Fs(t, e);
        }, pn.unzip = Mo, pn.unzipWith = Po, pn.update = function (t, e, i) {
          return null == t ? t : Ls(t, e, Us(i));
        }, pn.updateWith = function (t, e, i, n) {
          return n = "function" == typeof n ? n : r, null == t ? t : Ls(t, e, Us(i), n);
        }, pn.values = pl, pn.valuesIn = function (t) {
          return null == t ? [] : vi(t, rl(t));
        }, pn.without = Eo, pn.words = Cl, pn.wrap = function (t, e) {
          return ca(Us(e), t);
        }, pn.xor = Oo, pn.xorBy = Ho, pn.xorWith = No, pn.zip = Bo, pn.zipObject = function (t, e) {
          return $s(t || [], e || [], In);
        }, pn.zipObjectDeep = function (t, e) {
          return $s(t || [], e || [], Ss);
        }, pn.zipWith = Fo, pn.entries = hl, pn.entriesIn = dl, pn.extend = Ya, pn.extendWith = Va, Ol(pn, pn), pn.add = ql, pn.attempt = Dl, pn.camelCase = fl, pn.capitalize = gl, pn.ceil = Ul, pn.clamp = function (t, e, i) {
          return i === r && (i = e, e = r), i !== r && (i = (i = $a(i)) == i ? i : 0), e !== r && (e = (e = $a(e)) == e ? e : 0), On($a(t), e, i);
        }, pn.clone = function (t) {
          return Hn(t, f);
        }, pn.cloneDeep = function (t) {
          return Hn(t, d | f);
        }, pn.cloneDeepWith = function (t, e) {
          return Hn(t, d | f, e = "function" == typeof e ? e : r);
        }, pn.cloneWith = function (t, e) {
          return Hn(t, f, e = "function" == typeof e ? e : r);
        }, pn.conformsTo = function (t, e) {
          return null == e || Nn(t, e, sl(e));
        }, pn.deburr = ml, pn.defaultTo = function (t, e) {
          return null == t || t != t ? e : t;
        }, pn.divide = Kl, pn.endsWith = function (t, e, i) {
          t = Ua(t), e = Ns(e);var n = t.length,
              s = i = i === r ? n : On(Wa(i), 0, n);return (i -= e.length) >= 0 && t.slice(i, s) == e;
        }, pn.eq = pa, pn.escape = function (t) {
          return (t = Ua(t)) && Dt.test(t) ? t.replace(xt, wi) : t;
        }, pn.escapeRegExp = function (t) {
          return (t = Ua(t)) && Et.test(t) ? t.replace(Pt, "\\$&") : t;
        }, pn.every = function (t, e, i) {
          var n = va(t) ? Ge : Wn;return i && Kr(t, e, i) && (e = r), n(t, Hr(e, 3));
        }, pn.find = $o, pn.findIndex = mo, pn.findKey = function (t, e) {
          return ri(t, Hr(e, 3), Yn);
        }, pn.findLast = qo, pn.findLastIndex = vo, pn.findLastKey = function (t, e) {
          return ri(t, Hr(e, 3), Vn);
        }, pn.floor = Yl, pn.forEach = Uo, pn.forEachRight = Ko, pn.forIn = function (t, e) {
          return null == t ? t : Un(t, Hr(e, 3), rl);
        }, pn.forInRight = function (t, e) {
          return null == t ? t : Kn(t, Hr(e, 3), rl);
        }, pn.forOwn = function (t, e) {
          return t && Yn(t, Hr(e, 3));
        }, pn.forOwnRight = function (t, e) {
          return t && Vn(t, Hr(e, 3));
        }, pn.get = Qa, pn.gt = fa, pn.gte = ga, pn.has = function (t, e) {
          return null != t && Rr(t, e, ts);
        }, pn.hasIn = tl, pn.head = bo, pn.identity = jl, pn.includes = function (t, e, i, n) {
          t = ba(t) ? t : pl(t), i = i && !n ? Wa(i) : 0;var s = t.length;return i < 0 && (i = qi(s + i, 0)), Oa(t) ? i <= s && t.indexOf(e, i) > -1 : !!s && ai(t, e, i) > -1;
        }, pn.indexOf = function (t, e, i) {
          var n = null == t ? 0 : t.length;if (!n) return -1;var s = null == i ? 0 : Wa(i);return s < 0 && (s = qi(n + s, 0)), ai(t, e, s);
        }, pn.inRange = function (t, e, i) {
          return e = za(e), i === r ? (i = e, e = 0) : i = za(i), function (t, e, i) {
            return t >= Ui(e, i) && t < qi(e, i);
          }(t = $a(t), e, i);
        }, pn.invoke = nl, pn.isArguments = ma, pn.isArray = va, pn.isArrayBuffer = _a, pn.isArrayLike = ba, pn.isArrayLikeObject = ya, pn.isBoolean = function (t) {
          return !0 === t || !1 === t || Ia(t) && Zn(t) == q;
        }, pn.isBuffer = ka, pn.isDate = wa, pn.isElement = function (t) {
          return Ia(t) && 1 === t.nodeType && !Ma(t);
        }, pn.isEmpty = function (t) {
          if (null == t) return !0;if (ba(t) && (va(t) || "string" == typeof t || "function" == typeof t.splice || ka(t) || Na(t) || ma(t))) return !t.length;var e = Wr(t);if (e == X || e == it) return !t.size;if (Xr(t)) return !us(t).length;for (var i in t) {
            if (ce.call(t, i)) return !1;
          }return !0;
        }, pn.isEqual = function (t, e) {
          return rs(t, e);
        }, pn.isEqualWith = function (t, e, i) {
          var n = (i = "function" == typeof i ? i : r) ? i(t, e) : r;return n === r ? rs(t, e, r, i) : !!n;
        }, pn.isError = xa, pn.isFinite = function (t) {
          return "number" == typeof t && Wi(t);
        }, pn.isFunction = Ca, pn.isInteger = Da, pn.isLength = Sa, pn.isMap = Aa, pn.isMatch = function (t, e) {
          return t === e || os(t, e, Br(e));
        }, pn.isMatchWith = function (t, e, i) {
          return i = "function" == typeof i ? i : r, os(t, e, Br(e), i);
        }, pn.isNaN = function (t) {
          return ja(t) && t != +t;
        }, pn.isNative = function (t) {
          if (Gr(t)) throw new Zt(a);return as(t);
        }, pn.isNil = function (t) {
          return null == t;
        }, pn.isNull = function (t) {
          return null === t;
        }, pn.isNumber = ja, pn.isObject = Ta, pn.isObjectLike = Ia, pn.isPlainObject = Ma, pn.isRegExp = Pa, pn.isSafeInteger = function (t) {
          return Da(t) && t >= -O && t <= O;
        }, pn.isSet = Ea, pn.isString = Oa, pn.isSymbol = Ha, pn.isTypedArray = Na, pn.isUndefined = function (t) {
          return t === r;
        }, pn.isWeakMap = function (t) {
          return Ia(t) && Wr(t) == ot;
        }, pn.isWeakSet = function (t) {
          return Ia(t) && Zn(t) == at;
        }, pn.join = function (t, e) {
          return null == t ? "" : Ri.call(t, e);
        }, pn.kebabCase = vl, pn.last = xo, pn.lastIndexOf = function (t, e, i) {
          var n = null == t ? 0 : t.length;if (!n) return -1;var s = n;return i !== r && (s = (s = Wa(i)) < 0 ? qi(n + s, 0) : Ui(s, n - 1)), e == e ? function (t, e, i) {
            for (var n = i + 1; n--;) {
              if (t[n] === e) return n;
            }return n;
          }(t, e, s) : oi(t, ui, s, !0);
        }, pn.lowerCase = _l, pn.lowerFirst = bl, pn.lt = Ba, pn.lte = Fa, pn.max = function (t) {
          return t && t.length ? Rn(t, jl, Qn) : r;
        }, pn.maxBy = function (t, e) {
          return t && t.length ? Rn(t, Hr(e, 2), Qn) : r;
        }, pn.mean = function (t) {
          return ci(t, jl);
        }, pn.meanBy = function (t, e) {
          return ci(t, Hr(e, 2));
        }, pn.min = function (t) {
          return t && t.length ? Rn(t, jl, hs) : r;
        }, pn.minBy = function (t, e) {
          return t && t.length ? Rn(t, Hr(e, 2), hs) : r;
        }, pn.stubArray = Rl, pn.stubFalse = $l, pn.stubObject = function () {
          return {};
        }, pn.stubString = function () {
          return "";
        }, pn.stubTrue = function () {
          return !0;
        }, pn.multiply = Gl, pn.nth = function (t, e) {
          return t && t.length ? ms(t, Wa(e)) : r;
        }, pn.noConflict = function () {
          return Ee._ === this && (Ee._ = ge), this;
        }, pn.noop = Hl, pn.now = Qo, pn.pad = function (t, e, i) {
          t = Ua(t);var n = (e = Wa(e)) ? ji(t) : 0;if (!e || n >= e) return t;var s = (e - n) / 2;return vr(Fi(s), i) + t + vr(Bi(s), i);
        }, pn.padEnd = function (t, e, i) {
          t = Ua(t);var n = (e = Wa(e)) ? ji(t) : 0;return e && n < e ? t + vr(e - n, i) : t;
        }, pn.padStart = function (t, e, i) {
          t = Ua(t);var n = (e = Wa(e)) ? ji(t) : 0;return e && n < e ? vr(e - n, i) + t : t;
        }, pn.parseInt = function (t, e, i) {
          return i || null == e ? e = 0 : e && (e = +e), Yi(Ua(t).replace(Ht, ""), e || 0);
        }, pn.random = function (t, e, i) {
          if (i && "boolean" != typeof i && Kr(t, e, i) && (e = i = r), i === r && ("boolean" == typeof e ? (i = e, e = r) : "boolean" == typeof t && (i = t, t = r)), t === r && e === r ? (t = 0, e = 1) : (t = za(t), e === r ? (e = t, t = 0) : e = za(e)), t > e) {
            var n = t;t = e, e = n;
          }if (i || t % 1 || e % 1) {
            var s = Vi();return Ui(t + s * (e - t + Ae("1e-" + ((s + "").length - 1))), e);
          }return ks(t, e);
        }, pn.reduce = function (t, e, i) {
          var n = va(t) ? ei : pi,
              s = arguments.length < 3;return n(t, Hr(e, 4), i, s, Ln);
        }, pn.reduceRight = function (t, e, i) {
          var n = va(t) ? ii : pi,
              s = arguments.length < 3;return n(t, Hr(e, 4), i, s, zn);
        }, pn.repeat = function (t, e, i) {
          return e = (i ? Kr(t, e, i) : e === r) ? 1 : Wa(e), ws(Ua(t), e);
        }, pn.replace = function () {
          var t = arguments,
              e = Ua(t[0]);return t.length < 3 ? e : e.replace(t[1], t[2]);
        }, pn.result = function (t, e, i) {
          var n = -1,
              s = (e = Ks(e, t)).length;for (s || (s = 1, t = r); ++n < s;) {
            var o = null == t ? r : t[uo(e[n])];o === r && (n = s, o = i), t = Ca(o) ? o.call(t) : o;
          }return t;
        }, pn.round = Xl, pn.runInContext = t, pn.sample = function (t) {
          return (va(t) ? Cn : Cs)(t);
        }, pn.size = function (t) {
          if (null == t) return 0;if (ba(t)) return Oa(t) ? ji(t) : t.length;var e = Wr(t);return e == X || e == it ? t.size : us(t).length;
        }, pn.snakeCase = yl, pn.some = function (t, e, i) {
          var n = va(t) ? ni : Ms;return i && Kr(t, e, i) && (e = r), n(t, Hr(e, 3));
        }, pn.sortedIndex = function (t, e) {
          return Ps(t, e);
        }, pn.sortedIndexBy = function (t, e, i) {
          return Es(t, e, Hr(i, 2));
        }, pn.sortedIndexOf = function (t, e) {
          var i = null == t ? 0 : t.length;if (i) {
            var n = Ps(t, e);if (n < i && pa(t[n], e)) return n;
          }return -1;
        }, pn.sortedLastIndex = function (t, e) {
          return Ps(t, e, !0);
        }, pn.sortedLastIndexBy = function (t, e, i) {
          return Es(t, e, Hr(i, 2), !0);
        }, pn.sortedLastIndexOf = function (t, e) {
          if (null != t && t.length) {
            var i = Ps(t, e, !0) - 1;if (pa(t[i], e)) return i;
          }return -1;
        }, pn.startCase = kl, pn.startsWith = function (t, e, i) {
          return t = Ua(t), i = null == i ? 0 : On(Wa(i), 0, t.length), e = Ns(e), t.slice(i, i + e.length) == e;
        }, pn.subtract = Jl, pn.sum = function (t) {
          return t && t.length ? fi(t, jl) : 0;
        }, pn.sumBy = function (t, e) {
          return t && t.length ? fi(t, Hr(e, 2)) : 0;
        }, pn.template = function (t, e, i) {
          var n = pn.templateSettings;i && Kr(t, e, i) && (e = r), t = Ua(t), e = Va({}, e, n, Dr);var s,
              o,
              a = Va({}, e.imports, n.imports, Dr),
              l = sl(a),
              u = vi(a, l),
              c = 0,
              h = e.interpolate || Xt,
              d = "__p += '",
              p = ie((e.escape || Xt).source + "|" + h.source + "|" + (h === It ? Rt : Xt).source + "|" + (e.evaluate || Xt).source + "|$", "g"),
              f = "//# sourceURL=" + ("sourceURL" in e ? e.sourceURL : "lodash.templateSources[" + ++De + "]") + "\n";t.replace(p, function (e, i, n, r, a, l) {
            return n || (n = r), d += t.slice(c, l).replace(Jt, xi), i && (s = !0, d += "' +\n__e(" + i + ") +\n'"), a && (o = !0, d += "';\n" + a + ";\n__p += '"), n && (d += "' +\n((__t = (" + n + ")) == null ? '' : __t) +\n'"), c = l + e.length, e;
          }), d += "';\n";var g = e.variable;g || (d = "with (obj) {\n" + d + "\n}\n"), d = (o ? d.replace(bt, "") : d).replace(yt, "$1").replace(kt, "$1;"), d = "function(" + (g || "obj") + ") {\n" + (g ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (s ? ", __e = _.escape" : "") + (o ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + d + "return __p\n}";var m = Dl(function () {
            return Qt(l, f + "return " + d).apply(r, u);
          });if (m.source = d, xa(m)) throw m;return m;
        }, pn.times = function (t, e) {
          if ((t = Wa(t)) < 1 || t > O) return [];var i = B,
              n = Ui(t, B);e = Hr(e), t -= B;for (var s = gi(n, e); ++i < t;) {
            e(i);
          }return s;
        }, pn.toFinite = za, pn.toInteger = Wa, pn.toLength = Ra, pn.toLower = function (t) {
          return Ua(t).toLowerCase();
        }, pn.toNumber = $a, pn.toSafeInteger = function (t) {
          return t ? On(Wa(t), -O, O) : 0 === t ? t : 0;
        }, pn.toString = Ua, pn.toUpper = function (t) {
          return Ua(t).toUpperCase();
        }, pn.trim = function (t, e, i) {
          if ((t = Ua(t)) && (i || e === r)) return t.replace(Ot, "");if (!t || !(e = Ns(e))) return t;var n = Mi(t),
              s = Mi(e);return Vs(n, bi(n, s), yi(n, s) + 1).join("");
        }, pn.trimEnd = function (t, e, i) {
          if ((t = Ua(t)) && (i || e === r)) return t.replace(Nt, "");if (!t || !(e = Ns(e))) return t;var n = Mi(t);return Vs(n, 0, yi(n, Mi(e)) + 1).join("");
        }, pn.trimStart = function (t, e, i) {
          if ((t = Ua(t)) && (i || e === r)) return t.replace(Ht, "");if (!t || !(e = Ns(e))) return t;var n = Mi(t);return Vs(n, bi(n, Mi(e))).join("");
        }, pn.truncate = function (t, e) {
          var i = T,
              n = I;if (Ta(e)) {
            var s = "separator" in e ? e.separator : s;i = "length" in e ? Wa(e.length) : i, n = "omission" in e ? Ns(e.omission) : n;
          }var o = (t = Ua(t)).length;if (Ci(t)) {
            var a = Mi(t);o = a.length;
          }if (i >= o) return t;var l = i - ji(n);if (l < 1) return n;var u = a ? Vs(a, 0, l).join("") : t.slice(0, l);if (s === r) return u + n;if (a && (l += u.length - l), Pa(s)) {
            if (t.slice(l).search(s)) {
              var c,
                  h = u;for (s.global || (s = ie(s.source, Ua($t.exec(s)) + "g")), s.lastIndex = 0; c = s.exec(h);) {
                var d = c.index;
              }u = u.slice(0, d === r ? l : d);
            }
          } else if (t.indexOf(Ns(s), l) != l) {
            var p = u.lastIndexOf(s);p > -1 && (u = u.slice(0, p));
          }return u + n;
        }, pn.unescape = function (t) {
          return (t = Ua(t)) && Ct.test(t) ? t.replace(wt, Pi) : t;
        }, pn.uniqueId = function (t) {
          var e = ++he;return Ua(t) + e;
        }, pn.upperCase = wl, pn.upperFirst = xl, pn.each = Uo, pn.eachRight = Ko, pn.first = bo, Ol(pn, (Vl = {}, Yn(pn, function (t, e) {
          ce.call(pn.prototype, e) || (Vl[e] = t);
        }), Vl), { chain: !1 }), pn.VERSION = "4.17.11", Ye(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function (t) {
          pn[t].placeholder = pn;
        }), Ye(["drop", "take"], function (t, e) {
          vn.prototype[t] = function (i) {
            i = i === r ? 1 : qi(Wa(i), 0);var n = this.__filtered__ && !e ? new vn(this) : this.clone();return n.__filtered__ ? n.__takeCount__ = Ui(i, n.__takeCount__) : n.__views__.push({ size: Ui(i, B), type: t + (n.__dir__ < 0 ? "Right" : "") }), n;
          }, vn.prototype[t + "Right"] = function (e) {
            return this.reverse()[t](e).reverse();
          };
        }), Ye(["filter", "map", "takeWhile"], function (t, e) {
          var i = e + 1,
              n = i == M || 3 == i;vn.prototype[t] = function (t) {
            var e = this.clone();return e.__iteratees__.push({ iteratee: Hr(t, 3), type: i }), e.__filtered__ = e.__filtered__ || n, e;
          };
        }), Ye(["head", "last"], function (t, e) {
          var i = "take" + (e ? "Right" : "");vn.prototype[t] = function () {
            return this[i](1).value()[0];
          };
        }), Ye(["initial", "tail"], function (t, e) {
          var i = "drop" + (e ? "" : "Right");vn.prototype[t] = function () {
            return this.__filtered__ ? new vn(this) : this[i](1);
          };
        }), vn.prototype.compact = function () {
          return this.filter(jl);
        }, vn.prototype.find = function (t) {
          return this.filter(t).head();
        }, vn.prototype.findLast = function (t) {
          return this.reverse().find(t);
        }, vn.prototype.invokeMap = xs(function (t, e) {
          return "function" == typeof t ? new vn(this) : this.map(function (i) {
            return ns(i, t, e);
          });
        }), vn.prototype.reject = function (t) {
          return this.filter(la(Hr(t)));
        }, vn.prototype.slice = function (t, e) {
          t = Wa(t);var i = this;return i.__filtered__ && (t > 0 || e < 0) ? new vn(i) : (t < 0 ? i = i.takeRight(-t) : t && (i = i.drop(t)), e !== r && (i = (e = Wa(e)) < 0 ? i.dropRight(-e) : i.take(e - t)), i);
        }, vn.prototype.takeRightWhile = function (t) {
          return this.reverse().takeWhile(t).reverse();
        }, vn.prototype.toArray = function () {
          return this.take(B);
        }, Yn(vn.prototype, function (t, e) {
          var i = /^(?:filter|find|map|reject)|While$/.test(e),
              n = /^(?:head|last)$/.test(e),
              s = pn[n ? "take" + ("last" == e ? "Right" : "") : e],
              o = n || /^find/.test(e);s && (pn.prototype[e] = function () {
            var e = this.__wrapped__,
                a = n ? [1] : arguments,
                l = e instanceof vn,
                u = a[0],
                c = l || va(e),
                h = function h(t) {
              var e = s.apply(pn, ti([t], a));return n && d ? e[0] : e;
            };c && i && "function" == typeof u && 1 != u.length && (l = c = !1);var d = this.__chain__,
                p = !!this.__actions__.length,
                f = o && !d,
                g = l && !p;if (!o && c) {
              e = g ? e : new vn(this);var m = t.apply(e, a);return m.__actions__.push({ func: zo, args: [h], thisArg: r }), new mn(m, d);
            }return f && g ? t.apply(this, a) : (m = this.thru(h), f ? n ? m.value()[0] : m.value() : m);
          });
        }), Ye(["pop", "push", "shift", "sort", "splice", "unshift"], function (t) {
          var e = re[t],
              i = /^(?:push|sort|unshift)$/.test(t) ? "tap" : "thru",
              n = /^(?:pop|shift)$/.test(t);pn.prototype[t] = function () {
            var t = arguments;if (n && !this.__chain__) {
              var s = this.value();return e.apply(va(s) ? s : [], t);
            }return this[i](function (i) {
              return e.apply(va(i) ? i : [], t);
            });
          };
        }), Yn(vn.prototype, function (t, e) {
          var i = pn[e];if (i) {
            var n = i.name + "";(sn[n] || (sn[n] = [])).push({ name: e, func: i });
          }
        }), sn[pr(r, _).name] = [{ name: "wrapper", func: r }], vn.prototype.clone = function () {
          var t = new vn(this.__wrapped__);return t.__actions__ = ir(this.__actions__), t.__dir__ = this.__dir__, t.__filtered__ = this.__filtered__, t.__iteratees__ = ir(this.__iteratees__), t.__takeCount__ = this.__takeCount__, t.__views__ = ir(this.__views__), t;
        }, vn.prototype.reverse = function () {
          if (this.__filtered__) {
            var t = new vn(this);t.__dir__ = -1, t.__filtered__ = !0;
          } else (t = this.clone()).__dir__ *= -1;return t;
        }, vn.prototype.value = function () {
          var t = this.__wrapped__.value(),
              e = this.__dir__,
              i = va(t),
              n = e < 0,
              s = i ? t.length : 0,
              r = function (t, e, i) {
            for (var n = -1, s = i.length; ++n < s;) {
              var r = i[n],
                  o = r.size;switch (r.type) {case "drop":
                  t += o;break;case "dropRight":
                  e -= o;break;case "take":
                  e = Ui(e, t + o);break;case "takeRight":
                  t = qi(t, e - o);}
            }return { start: t, end: e };
          }(0, s, this.__views__),
              o = r.start,
              a = r.end,
              l = a - o,
              u = n ? a : o - 1,
              c = this.__iteratees__,
              h = c.length,
              d = 0,
              p = Ui(l, this.__takeCount__);if (!i || !n && s == l && p == l) return Ws(t, this.__actions__);var f = [];t: for (; l-- && d < p;) {
            for (var g = -1, m = t[u += e]; ++g < h;) {
              var v = c[g],
                  _ = v.iteratee,
                  b = v.type,
                  y = _(m);if (b == P) m = y;else if (!y) {
                if (b == M) continue t;break t;
              }
            }f[d++] = m;
          }return f;
        }, pn.prototype.at = Wo, pn.prototype.chain = function () {
          return Lo(this);
        }, pn.prototype.commit = function () {
          return new mn(this.value(), this.__chain__);
        }, pn.prototype.next = function () {
          this.__values__ === r && (this.__values__ = La(this.value()));var t = this.__index__ >= this.__values__.length;return { done: t, value: t ? r : this.__values__[this.__index__++] };
        }, pn.prototype.plant = function (t) {
          for (var e, i = this; i instanceof gn;) {
            var n = ho(i);n.__index__ = 0, n.__values__ = r, e ? s.__wrapped__ = n : e = n;var s = n;i = i.__wrapped__;
          }return s.__wrapped__ = t, e;
        }, pn.prototype.reverse = function () {
          var t = this.__wrapped__;if (t instanceof vn) {
            var e = t;return this.__actions__.length && (e = new vn(this)), (e = e.reverse()).__actions__.push({ func: zo, args: [To], thisArg: r }), new mn(e, this.__chain__);
          }return this.thru(To);
        }, pn.prototype.toJSON = pn.prototype.valueOf = pn.prototype.value = function () {
          return Ws(this.__wrapped__, this.__actions__);
        }, pn.prototype.first = pn.prototype.head, Fe && (pn.prototype[Fe] = function () {
          return this;
        }), pn;
      }();Ee._ = Ei, (s = function () {
        return Ei;
      }.call(e, i, e, n)) === r || (n.exports = s);
    }).call(this);
  }).call(this, i(15), i(16)(t));
}, function (t, e, i) {
  var n = i(0);t.exports = { getjsondata: function getjsondata(t, e) {
      if (!t) return !1;n.ajax({ async: !0, type: "get", dataType: "jsonp", url: t, success: function success(t) {
          console.log("Search Detalj arrangemang hämtat: "), e(t);
        }, error: function error(t, e, i) {
          alert("Nått blev fel vid hämtning av arrangemang!");
        } });
    }, postjsondata: function postjsondata(t, e, i) {
      if (!t) return !1;n.ajax({ async: !0, type: "post", url: t, data: e, success: function success(t) {
          console.log("Hämtar Data: "), i(t);
        }, error: function error(t, e, i) {
          alert("Nått blev fel vid hämtning av POST json!");
        } });
    } };
}, function (t, e, i) {
  var n = i(0);t.exports = { init: function init(t) {
      this.cacheDom(t), this.BindEvent(), this.Settings();
    }, cacheDom: function cacheDom(t) {
      this.$cmdMenyOpen = n(".kk_bb_open" + t);
    }, BindEvent: function BindEvent() {}, Settings: function Settings() {
      this.$cmdMenyOpen.addClass("bb_aj_valdmeny");
    } };
}, function (t, e, i) {
  var n = i(0),
      s = (i(1), i(17));t.exports = { injecthtmltemplate: function injecthtmltemplate(t, e, i, r) {
      s.init(), n.get(e, function (e) {
        var s = Handlebars.compile(e);n(t).html(s(i)), r();
      }, "html");
    }, returnhtmltemplate: function returnhtmltemplate(t, e, i) {
      s.init(), n.get(t, function (t) {
        var n = Handlebars.compile(t);i(n(e));
      }, "html");
    } };
}, function (t, e) {
  t.exports = { callEvents: { events: {}, on: function on(t, e) {
        this.events[t] = this.events[t] || [], this.events[t].push(e);
      }, off: function off(t, e) {
        if (this.events[t]) for (var i = 0; i < this.events[t].length; i++) {
          if (this.events[t][i] === e) {
            this.events[t].splice(i, 1);break;
          }
        }
      }, emit: function emit(t, e) {
        this.events[t] && this.events[t].forEach(function (t) {
          t(e);
        });
      } } };
}, function (t, e, i) {
  var n = i(0);t.exports = { init: function init(t) {
      this.cacheDom(t), this.bindEvent(), this.render();
    }, cacheDom: function cacheDom(t) {
      this.$bb_aj_cmdAdd = n("#bb_aj_cmdAdd_" + t), this.$bb_aj_cmdSetting = n("#bb_aj_cmdSetting_" + t), this.$bb_aj_Container = n(".bb_aj_Container"), this.$bb_aj_AddContainer = n(".bb_aj_AddContainer_" + t), this.$bb_aj_SettingsContainer = n(".bb_aj_SettingsContainer_" + t), this.$bb_aj_cmdClose = n(".bb_aj_CloseContainer");
    }, bindEvent: function bindEvent() {
      this.$bb_aj_cmdAdd.on("click", this.addboxbehavior.bind(this)), this.$bb_aj_cmdSetting.on("click", this.settingsboxbehavior.bind(this)), this.$bb_aj_cmdClose.on("click", this.closeboxbehavior.bind(this));
    }, render: function render() {
      this.$bb_aj_Container.hide();
    }, addboxbehavior: function addboxbehavior() {
      this.$bb_aj_AddContainer.slideToggle(500), this.$bb_aj_SettingsContainer.is(":visible") && this.$bb_aj_SettingsContainer.hide(500);
    }, settingsboxbehavior: function settingsboxbehavior() {
      this.$bb_aj_SettingsContainer.slideToggle(500), this.$bb_aj_AddContainer.is(":visible") && this.$bb_aj_AddContainer.hide(500);
    }, closeboxbehavior: function closeboxbehavior() {
      this.$bb_aj_Container.hide(500);
    } };
}, function (t, e, n) {
  (function (e) {
    var s = n(1);t.exports = { init: function init() {}, HelpersetSelectedIndex: function HelpersetSelectedIndex(t, e) {
        for (i = 0; i < t.options.length; i++) {
          if (t.options[i].value == e) {
            t.options[i].selected = !0;break;
          }
        }
      }, getimageHelper: function getimageHelper(t) {
        var i = s.skrivbokimages,
            n = i.catimagesrc,
            r = e.find(n, function (e) {
          return e.catid == t;
        });return r || (r = e.find(n, function (t) {
          return 0 == t.catid;
        })), i.catimgbase + r.imgsrc;
      }, htmlencoderHelper: function htmlencoderHelper(t) {
        var e = document.createElement("textarea");return e.innerHTML = t, e.value;
      }, removeClassStartingWith: function removeClassStartingWith(t, e) {
        t.removeClass(function (t, i) {
          return (i.match(new RegExp("\\b" + e + "\\S+", "g")) || []).join(" ");
        });
      } };
  }).call(this, n(2));
}, function (t, e, i) {
  var n, s, r;
  /*! jQuery UI - v1.12.1 - 2016-09-14
  * http://jqueryui.com
  * Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
  * Copyright jQuery Foundation and other contributors; Licensed MIT */s = [i(0)], void 0 === (r = "function" == typeof (n = function n(t) {
    t.ui = t.ui || {}, t.ui.version = "1.12.1";var e,
        i = 0,
        n = Array.prototype.slice;
    /*!
     * jQuery UI Widget 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */t.cleanData = (e = t.cleanData, function (i) {
      var n, s, r;for (r = 0; null != (s = i[r]); r++) {
        try {
          (n = t._data(s, "events")) && n.remove && t(s).triggerHandler("remove");
        } catch (t) {}
      }e(i);
    }), t.widget = function (e, i, n) {
      var s,
          r,
          o,
          a = {},
          l = e.split(".")[0];e = e.split(".")[1];var u = l + "-" + e;return n || (n = i, i = t.Widget), t.isArray(n) && (n = t.extend.apply(null, [{}].concat(n))), t.expr[":"][u.toLowerCase()] = function (e) {
        return !!t.data(e, u);
      }, t[l] = t[l] || {}, s = t[l][e], r = t[l][e] = function (t, e) {
        if (!this._createWidget) return new r(t, e);arguments.length && this._createWidget(t, e);
      }, t.extend(r, s, { version: n.version, _proto: t.extend({}, n), _childConstructors: [] }), (o = new i()).options = t.widget.extend({}, o.options), t.each(n, function (e, n) {
        t.isFunction(n) ? a[e] = function () {
          function t() {
            return i.prototype[e].apply(this, arguments);
          }function s(t) {
            return i.prototype[e].apply(this, t);
          }return function () {
            var e,
                i = this._super,
                r = this._superApply;return this._super = t, this._superApply = s, e = n.apply(this, arguments), this._super = i, this._superApply = r, e;
          };
        }() : a[e] = n;
      }), r.prototype = t.widget.extend(o, { widgetEventPrefix: s && o.widgetEventPrefix || e }, a, { constructor: r, namespace: l, widgetName: e, widgetFullName: u }), s ? (t.each(s._childConstructors, function (e, i) {
        var n = i.prototype;t.widget(n.namespace + "." + n.widgetName, r, i._proto);
      }), delete s._childConstructors) : i._childConstructors.push(r), t.widget.bridge(e, r), r;
    }, t.widget.extend = function (e) {
      for (var i, s, r = n.call(arguments, 1), o = 0, a = r.length; o < a; o++) {
        for (i in r[o]) {
          s = r[o][i], r[o].hasOwnProperty(i) && void 0 !== s && (t.isPlainObject(s) ? e[i] = t.isPlainObject(e[i]) ? t.widget.extend({}, e[i], s) : t.widget.extend({}, s) : e[i] = s);
        }
      }return e;
    }, t.widget.bridge = function (e, i) {
      var s = i.prototype.widgetFullName || e;t.fn[e] = function (r) {
        var o = "string" == typeof r,
            a = n.call(arguments, 1),
            l = this;return o ? this.length || "instance" !== r ? this.each(function () {
          var i,
              n = t.data(this, s);return "instance" === r ? (l = n, !1) : n ? t.isFunction(n[r]) && "_" !== r.charAt(0) ? (i = n[r].apply(n, a)) !== n && void 0 !== i ? (l = i && i.jquery ? l.pushStack(i.get()) : i, !1) : void 0 : t.error("no such method '" + r + "' for " + e + " widget instance") : t.error("cannot call methods on " + e + " prior to initialization; attempted to call method '" + r + "'");
        }) : l = void 0 : (a.length && (r = t.widget.extend.apply(null, [r].concat(a))), this.each(function () {
          var e = t.data(this, s);e ? (e.option(r || {}), e._init && e._init()) : t.data(this, s, new i(r, this));
        })), l;
      };
    }, t.Widget = function () {}, t.Widget._childConstructors = [], t.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { classes: {}, disabled: !1, create: null }, _createWidget: function _createWidget(e, n) {
        n = t(n || this.defaultElement || this)[0], this.element = t(n), this.uuid = i++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = t(), this.hoverable = t(), this.focusable = t(), this.classesElementLookup = {}, n !== this && (t.data(n, this.widgetFullName, this), this._on(!0, this.element, { remove: function remove(t) {
            t.target === n && this.destroy();
          } }), this.document = t(n.style ? n.ownerDocument : n.document || n), this.window = t(this.document[0].defaultView || this.document[0].parentWindow)), this.options = t.widget.extend({}, this.options, this._getCreateOptions(), e), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger("create", null, this._getCreateEventData()), this._init();
      }, _getCreateOptions: function _getCreateOptions() {
        return {};
      }, _getCreateEventData: t.noop, _create: t.noop, _init: t.noop, destroy: function destroy() {
        var e = this;this._destroy(), t.each(this.classesElementLookup, function (t, i) {
          e._removeClass(i, t);
        }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), this.bindings.off(this.eventNamespace);
      }, _destroy: t.noop, widget: function widget() {
        return this.element;
      }, option: function option(e, i) {
        var n,
            s,
            r,
            o = e;if (0 === arguments.length) return t.widget.extend({}, this.options);if ("string" == typeof e) if (o = {}, n = e.split("."), e = n.shift(), n.length) {
          for (s = o[e] = t.widget.extend({}, this.options[e]), r = 0; r < n.length - 1; r++) {
            s[n[r]] = s[n[r]] || {}, s = s[n[r]];
          }if (e = n.pop(), 1 === arguments.length) return void 0 === s[e] ? null : s[e];s[e] = i;
        } else {
          if (1 === arguments.length) return void 0 === this.options[e] ? null : this.options[e];o[e] = i;
        }return this._setOptions(o), this;
      }, _setOptions: function _setOptions(t) {
        var e;for (e in t) {
          this._setOption(e, t[e]);
        }return this;
      }, _setOption: function _setOption(t, e) {
        return "classes" === t && this._setOptionClasses(e), this.options[t] = e, "disabled" === t && this._setOptionDisabled(e), this;
      }, _setOptionClasses: function _setOptionClasses(e) {
        var i, n, s;for (i in e) {
          s = this.classesElementLookup[i], e[i] !== this.options.classes[i] && s && s.length && (n = t(s.get()), this._removeClass(s, i), n.addClass(this._classes({ element: n, keys: i, classes: e, add: !0 })));
        }
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!t), t && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus"));
      }, enable: function enable() {
        return this._setOptions({ disabled: !1 });
      }, disable: function disable() {
        return this._setOptions({ disabled: !0 });
      }, _classes: function _classes(e) {
        var i = [],
            n = this;function s(s, r) {
          var o, a;for (a = 0; a < s.length; a++) {
            o = n.classesElementLookup[s[a]] || t(), o = e.add ? t(t.unique(o.get().concat(e.element.get()))) : t(o.not(e.element).get()), n.classesElementLookup[s[a]] = o, i.push(s[a]), r && e.classes[s[a]] && i.push(e.classes[s[a]]);
          }
        }return e = t.extend({ element: this.element, classes: this.options.classes || {} }, e), this._on(e.element, { remove: "_untrackClassesElement" }), e.keys && s(e.keys.match(/\S+/g) || [], !0), e.extra && s(e.extra.match(/\S+/g) || []), i.join(" ");
      }, _untrackClassesElement: function _untrackClassesElement(e) {
        var i = this;t.each(i.classesElementLookup, function (n, s) {
          -1 !== t.inArray(e.target, s) && (i.classesElementLookup[n] = t(s.not(e.target).get()));
        });
      }, _removeClass: function _removeClass(t, e, i) {
        return this._toggleClass(t, e, i, !1);
      }, _addClass: function _addClass(t, e, i) {
        return this._toggleClass(t, e, i, !0);
      }, _toggleClass: function _toggleClass(t, e, i, n) {
        n = "boolean" == typeof n ? n : i;var s = "string" == typeof t || null === t,
            r = { extra: s ? e : i, keys: s ? t : e, element: s ? this.element : t, add: n };return r.element.toggleClass(this._classes(r), n), this;
      }, _on: function _on(e, i, n) {
        var s,
            r = this;"boolean" != typeof e && (n = i, i = e, e = !1), n ? (i = s = t(i), this.bindings = this.bindings.add(i)) : (n = i, i = this.element, s = this.widget()), t.each(n, function (n, o) {
          function a() {
            if (e || !0 !== r.options.disabled && !t(this).hasClass("ui-state-disabled")) return ("string" == typeof o ? r[o] : o).apply(r, arguments);
          }"string" != typeof o && (a.guid = o.guid = o.guid || a.guid || t.guid++);var l = n.match(/^([\w:-]*)\s*(.*)$/),
              u = l[1] + r.eventNamespace,
              c = l[2];c ? s.on(u, c, a) : i.on(u, a);
        });
      }, _off: function _off(e, i) {
        i = (i || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.off(i).off(i), this.bindings = t(this.bindings.not(e).get()), this.focusable = t(this.focusable.not(e).get()), this.hoverable = t(this.hoverable.not(e).get());
      }, _delay: function _delay(t, e) {
        var i = this;return setTimeout(function () {
          return ("string" == typeof t ? i[t] : t).apply(i, arguments);
        }, e || 0);
      }, _hoverable: function _hoverable(e) {
        this.hoverable = this.hoverable.add(e), this._on(e, { mouseenter: function mouseenter(e) {
            this._addClass(t(e.currentTarget), null, "ui-state-hover");
          }, mouseleave: function mouseleave(e) {
            this._removeClass(t(e.currentTarget), null, "ui-state-hover");
          } });
      }, _focusable: function _focusable(e) {
        this.focusable = this.focusable.add(e), this._on(e, { focusin: function focusin(e) {
            this._addClass(t(e.currentTarget), null, "ui-state-focus");
          }, focusout: function focusout(e) {
            this._removeClass(t(e.currentTarget), null, "ui-state-focus");
          } });
      }, _trigger: function _trigger(e, i, n) {
        var s,
            r,
            o = this.options[e];if (n = n || {}, (i = t.Event(i)).type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), i.target = this.element[0], r = i.originalEvent) for (s in r) {
          s in i || (i[s] = r[s]);
        }return this.element.trigger(i, n), !(t.isFunction(o) && !1 === o.apply(this.element[0], [i].concat(n)) || i.isDefaultPrevented());
      } }, t.each({ show: "fadeIn", hide: "fadeOut" }, function (e, i) {
      t.Widget.prototype["_" + e] = function (n, s, r) {
        var o;"string" == typeof s && (s = { effect: s });var a = s ? !0 === s || "number" == typeof s ? i : s.effect || i : e;"number" == typeof (s = s || {}) && (s = { duration: s }), o = !t.isEmptyObject(s), s.complete = r, s.delay && n.delay(s.delay), o && t.effects && t.effects.effect[a] ? n[e](s) : a !== e && n[a] ? n[a](s.duration, s.easing, r) : n.queue(function (i) {
          t(this)[e](), r && r.call(n[0]), i();
        });
      };
    }), t.widget,
    /*!
     * jQuery UI Position 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/position/
     */
    function () {
      var e,
          i = Math.max,
          n = Math.abs,
          s = /left|center|right/,
          r = /top|center|bottom/,
          o = /[\+\-]\d+(\.[\d]+)?%?/,
          a = /^\w+/,
          l = /%$/,
          u = t.fn.position;function c(t, e, i) {
        return [parseFloat(t[0]) * (l.test(t[0]) ? e / 100 : 1), parseFloat(t[1]) * (l.test(t[1]) ? i / 100 : 1)];
      }function h(e, i) {
        return parseInt(t.css(e, i), 10) || 0;
      }t.position = { scrollbarWidth: function scrollbarWidth() {
          if (void 0 !== e) return e;var i,
              n,
              s = t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
              r = s.children()[0];return t("body").append(s), i = r.offsetWidth, s.css("overflow", "scroll"), n = r.offsetWidth, i === n && (n = s[0].clientWidth), s.remove(), e = i - n;
        }, getScrollInfo: function getScrollInfo(e) {
          var i = e.isWindow || e.isDocument ? "" : e.element.css("overflow-x"),
              n = e.isWindow || e.isDocument ? "" : e.element.css("overflow-y"),
              s = "scroll" === i || "auto" === i && e.width < e.element[0].scrollWidth,
              r = "scroll" === n || "auto" === n && e.height < e.element[0].scrollHeight;return { width: r ? t.position.scrollbarWidth() : 0, height: s ? t.position.scrollbarWidth() : 0 };
        }, getWithinInfo: function getWithinInfo(e) {
          var i = t(e || window),
              n = t.isWindow(i[0]),
              s = !!i[0] && 9 === i[0].nodeType,
              r = !n && !s;return { element: i, isWindow: n, isDocument: s, offset: r ? t(e).offset() : { left: 0, top: 0 }, scrollLeft: i.scrollLeft(), scrollTop: i.scrollTop(), width: i.outerWidth(), height: i.outerHeight() };
        } }, t.fn.position = function (e) {
        if (!e || !e.of) return u.apply(this, arguments);e = t.extend({}, e);var l,
            d,
            p,
            f,
            g,
            m,
            v,
            _,
            b = t(e.of),
            y = t.position.getWithinInfo(e.within),
            k = t.position.getScrollInfo(y),
            w = (e.collision || "flip").split(" "),
            x = {};return _ = (v = b)[0], m = 9 === _.nodeType ? { width: v.width(), height: v.height(), offset: { top: 0, left: 0 } } : t.isWindow(_) ? { width: v.width(), height: v.height(), offset: { top: v.scrollTop(), left: v.scrollLeft() } } : _.preventDefault ? { width: 0, height: 0, offset: { top: _.pageY, left: _.pageX } } : { width: v.outerWidth(), height: v.outerHeight(), offset: v.offset() }, b[0].preventDefault && (e.at = "left top"), d = m.width, p = m.height, f = m.offset, g = t.extend({}, f), t.each(["my", "at"], function () {
          var t,
              i,
              n = (e[this] || "").split(" ");1 === n.length && (n = s.test(n[0]) ? n.concat(["center"]) : r.test(n[0]) ? ["center"].concat(n) : ["center", "center"]), n[0] = s.test(n[0]) ? n[0] : "center", n[1] = r.test(n[1]) ? n[1] : "center", t = o.exec(n[0]), i = o.exec(n[1]), x[this] = [t ? t[0] : 0, i ? i[0] : 0], e[this] = [a.exec(n[0])[0], a.exec(n[1])[0]];
        }), 1 === w.length && (w[1] = w[0]), "right" === e.at[0] ? g.left += d : "center" === e.at[0] && (g.left += d / 2), "bottom" === e.at[1] ? g.top += p : "center" === e.at[1] && (g.top += p / 2), l = c(x.at, d, p), g.left += l[0], g.top += l[1], this.each(function () {
          var s,
              r,
              o = t(this),
              a = o.outerWidth(),
              u = o.outerHeight(),
              m = h(this, "marginLeft"),
              v = h(this, "marginTop"),
              _ = a + m + h(this, "marginRight") + k.width,
              C = u + v + h(this, "marginBottom") + k.height,
              D = t.extend({}, g),
              S = c(x.my, o.outerWidth(), o.outerHeight());"right" === e.my[0] ? D.left -= a : "center" === e.my[0] && (D.left -= a / 2), "bottom" === e.my[1] ? D.top -= u : "center" === e.my[1] && (D.top -= u / 2), D.left += S[0], D.top += S[1], s = { marginLeft: m, marginTop: v }, t.each(["left", "top"], function (i, n) {
            t.ui.position[w[i]] && t.ui.position[w[i]][n](D, { targetWidth: d, targetHeight: p, elemWidth: a, elemHeight: u, collisionPosition: s, collisionWidth: _, collisionHeight: C, offset: [l[0] + S[0], l[1] + S[1]], my: e.my, at: e.at, within: y, elem: o });
          }), e.using && (r = function r(t) {
            var s = f.left - D.left,
                r = s + d - a,
                l = f.top - D.top,
                c = l + p - u,
                h = { target: { element: b, left: f.left, top: f.top, width: d, height: p }, element: { element: o, left: D.left, top: D.top, width: a, height: u }, horizontal: r < 0 ? "left" : s > 0 ? "right" : "center", vertical: c < 0 ? "top" : l > 0 ? "bottom" : "middle" };d < a && n(s + r) < d && (h.horizontal = "center"), p < u && n(l + c) < p && (h.vertical = "middle"), i(n(s), n(r)) > i(n(l), n(c)) ? h.important = "horizontal" : h.important = "vertical", e.using.call(this, t, h);
          }), o.offset(t.extend(D, { using: r }));
        });
      }, t.ui.position = { fit: { left: function left(t, e) {
            var n,
                s = e.within,
                r = s.isWindow ? s.scrollLeft : s.offset.left,
                o = s.width,
                a = t.left - e.collisionPosition.marginLeft,
                l = r - a,
                u = a + e.collisionWidth - o - r;e.collisionWidth > o ? l > 0 && u <= 0 ? (n = t.left + l + e.collisionWidth - o - r, t.left += l - n) : t.left = u > 0 && l <= 0 ? r : l > u ? r + o - e.collisionWidth : r : l > 0 ? t.left += l : u > 0 ? t.left -= u : t.left = i(t.left - a, t.left);
          }, top: function top(t, e) {
            var n,
                s = e.within,
                r = s.isWindow ? s.scrollTop : s.offset.top,
                o = e.within.height,
                a = t.top - e.collisionPosition.marginTop,
                l = r - a,
                u = a + e.collisionHeight - o - r;e.collisionHeight > o ? l > 0 && u <= 0 ? (n = t.top + l + e.collisionHeight - o - r, t.top += l - n) : t.top = u > 0 && l <= 0 ? r : l > u ? r + o - e.collisionHeight : r : l > 0 ? t.top += l : u > 0 ? t.top -= u : t.top = i(t.top - a, t.top);
          } }, flip: { left: function left(t, e) {
            var i,
                s,
                r = e.within,
                o = r.offset.left + r.scrollLeft,
                a = r.width,
                l = r.isWindow ? r.scrollLeft : r.offset.left,
                u = t.left - e.collisionPosition.marginLeft,
                c = u - l,
                h = u + e.collisionWidth - a - l,
                d = "left" === e.my[0] ? -e.elemWidth : "right" === e.my[0] ? e.elemWidth : 0,
                p = "left" === e.at[0] ? e.targetWidth : "right" === e.at[0] ? -e.targetWidth : 0,
                f = -2 * e.offset[0];c < 0 ? ((i = t.left + d + p + f + e.collisionWidth - a - o) < 0 || i < n(c)) && (t.left += d + p + f) : h > 0 && ((s = t.left - e.collisionPosition.marginLeft + d + p + f - l) > 0 || n(s) < h) && (t.left += d + p + f);
          }, top: function top(t, e) {
            var i,
                s,
                r = e.within,
                o = r.offset.top + r.scrollTop,
                a = r.height,
                l = r.isWindow ? r.scrollTop : r.offset.top,
                u = t.top - e.collisionPosition.marginTop,
                c = u - l,
                h = u + e.collisionHeight - a - l,
                d = "top" === e.my[1],
                p = d ? -e.elemHeight : "bottom" === e.my[1] ? e.elemHeight : 0,
                f = "top" === e.at[1] ? e.targetHeight : "bottom" === e.at[1] ? -e.targetHeight : 0,
                g = -2 * e.offset[1];c < 0 ? ((s = t.top + p + f + g + e.collisionHeight - a - o) < 0 || s < n(c)) && (t.top += p + f + g) : h > 0 && ((i = t.top - e.collisionPosition.marginTop + p + f + g - l) > 0 || n(i) < h) && (t.top += p + f + g);
          } }, flipfit: { left: function left() {
            t.ui.position.flip.left.apply(this, arguments), t.ui.position.fit.left.apply(this, arguments);
          }, top: function top() {
            t.ui.position.flip.top.apply(this, arguments), t.ui.position.fit.top.apply(this, arguments);
          } } };
    }(), t.ui.position, t.extend(t.expr[":"], { data: t.expr.createPseudo ? t.expr.createPseudo(function (e) {
        return function (i) {
          return !!t.data(i, e);
        };
      }) : function (e, i, n) {
        return !!t.data(e, n[3]);
      } }), t.fn.extend({ disableSelection: (s = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown", function () {
        return this.on(s + ".ui-disableSelection", function (t) {
          t.preventDefault();
        });
      }), enableSelection: function enableSelection() {
        return this.off(".ui-disableSelection");
      } });var s,
        r,
        o,
        a,
        l = "ui-effects-animated",
        u = t;
    /*!
     * jQuery UI :data 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */t.effects = { effect: {} },
    /*!
     * jQuery Color Animations v2.1.2
     * https://github.com/jquery/jquery-color
     *
     * Copyright 2014 jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * Date: Wed Jan 16 08:47:09 2013 -0600
     */
    function (t, e) {
      var i,
          n = /^([\-+])=\s*(\d+\.?\d*)/,
          s = [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function parse(t) {
          return [t[1], t[2], t[3], t[4]];
        } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function parse(t) {
          return [2.55 * t[1], 2.55 * t[2], 2.55 * t[3], t[4]];
        } }, { re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function parse(t) {
          return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
        } }, { re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function parse(t) {
          return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
        } }, { re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function parse(t) {
          return [t[1], t[2] / 100, t[3] / 100, t[4]];
        } }],
          r = t.Color = function (e, i, n, s) {
        return new t.Color.fn.parse(e, i, n, s);
      },
          o = { rgba: { props: { red: { idx: 0, type: "byte" }, green: { idx: 1, type: "byte" }, blue: { idx: 2, type: "byte" } } }, hsla: { props: { hue: { idx: 0, type: "degrees" }, saturation: { idx: 1, type: "percent" }, lightness: { idx: 2, type: "percent" } } } },
          a = { byte: { floor: !0, max: 255 }, percent: { max: 1 }, degrees: { mod: 360, floor: !0 } },
          l = r.support = {},
          u = t("<p>")[0],
          c = t.each;function h(t, e, i) {
        var n = a[e.type] || {};return null == t ? i || !e.def ? null : e.def : (t = n.floor ? ~~t : parseFloat(t), isNaN(t) ? e.def : n.mod ? (t + n.mod) % n.mod : 0 > t ? 0 : n.max < t ? n.max : t);
      }function d(e) {
        var n = r(),
            a = n._rgba = [];return e = e.toLowerCase(), c(s, function (t, i) {
          var s,
              r = i.re.exec(e),
              l = r && i.parse(r),
              u = i.space || "rgba";if (l) return s = n[u](l), n[o[u].cache] = s[o[u].cache], a = n._rgba = s._rgba, !1;
        }), a.length ? ("0,0,0,0" === a.join() && t.extend(a, i.transparent), n) : i[e];
      }function p(t, e, i) {
        return 6 * (i = (i + 1) % 1) < 1 ? t + (e - t) * i * 6 : 2 * i < 1 ? e : 3 * i < 2 ? t + (e - t) * (2 / 3 - i) * 6 : t;
      }u.style.cssText = "background-color:rgba(1,1,1,.5)", l.rgba = u.style.backgroundColor.indexOf("rgba") > -1, c(o, function (t, e) {
        e.cache = "_" + t, e.props.alpha = { idx: 3, type: "percent", def: 1 };
      }), r.fn = t.extend(r.prototype, { parse: function parse(e, n, s, a) {
          if (void 0 === e) return this._rgba = [null, null, null, null], this;(e.jquery || e.nodeType) && (e = t(e).css(n), n = void 0);var l = this,
              u = t.type(e),
              p = this._rgba = [];return void 0 !== n && (e = [e, n, s, a], u = "array"), "string" === u ? this.parse(d(e) || i._default) : "array" === u ? (c(o.rgba.props, function (t, i) {
            p[i.idx] = h(e[i.idx], i);
          }), this) : "object" === u ? (c(o, e instanceof r ? function (t, i) {
            e[i.cache] && (l[i.cache] = e[i.cache].slice());
          } : function (i, n) {
            var s = n.cache;c(n.props, function (t, i) {
              if (!l[s] && n.to) {
                if ("alpha" === t || null == e[t]) return;l[s] = n.to(l._rgba);
              }l[s][i.idx] = h(e[t], i, !0);
            }), l[s] && t.inArray(null, l[s].slice(0, 3)) < 0 && (l[s][3] = 1, n.from && (l._rgba = n.from(l[s])));
          }), this) : void 0;
        }, is: function is(t) {
          var e = r(t),
              i = !0,
              n = this;return c(o, function (t, s) {
            var r,
                o = e[s.cache];return o && (r = n[s.cache] || s.to && s.to(n._rgba) || [], c(s.props, function (t, e) {
              if (null != o[e.idx]) return i = o[e.idx] === r[e.idx];
            })), i;
          }), i;
        }, _space: function _space() {
          var t = [],
              e = this;return c(o, function (i, n) {
            e[n.cache] && t.push(i);
          }), t.pop();
        }, transition: function transition(t, e) {
          var i = r(t),
              n = i._space(),
              s = o[n],
              l = 0 === this.alpha() ? r("transparent") : this,
              u = l[s.cache] || s.to(l._rgba),
              d = u.slice();return i = i[s.cache], c(s.props, function (t, n) {
            var s = n.idx,
                r = u[s],
                o = i[s],
                l = a[n.type] || {};null !== o && (null === r ? d[s] = o : (l.mod && (o - r > l.mod / 2 ? r += l.mod : r - o > l.mod / 2 && (r -= l.mod)), d[s] = h((o - r) * e + r, n)));
          }), this[n](d);
        }, blend: function blend(e) {
          if (1 === this._rgba[3]) return this;var i = this._rgba.slice(),
              n = i.pop(),
              s = r(e)._rgba;return r(t.map(i, function (t, e) {
            return (1 - n) * s[e] + n * t;
          }));
        }, toRgbaString: function toRgbaString() {
          var e = "rgba(",
              i = t.map(this._rgba, function (t, e) {
            return null == t ? e > 2 ? 1 : 0 : t;
          });return 1 === i[3] && (i.pop(), e = "rgb("), e + i.join() + ")";
        }, toHslaString: function toHslaString() {
          var e = "hsla(",
              i = t.map(this.hsla(), function (t, e) {
            return null == t && (t = e > 2 ? 1 : 0), e && e < 3 && (t = Math.round(100 * t) + "%"), t;
          });return 1 === i[3] && (i.pop(), e = "hsl("), e + i.join() + ")";
        }, toHexString: function toHexString(e) {
          var i = this._rgba.slice(),
              n = i.pop();return e && i.push(~~(255 * n)), "#" + t.map(i, function (t) {
            return 1 === (t = (t || 0).toString(16)).length ? "0" + t : t;
          }).join("");
        }, toString: function toString() {
          return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
        } }), r.fn.parse.prototype = r.fn, o.hsla.to = function (t) {
        if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]];var e,
            i,
            n = t[0] / 255,
            s = t[1] / 255,
            r = t[2] / 255,
            o = t[3],
            a = Math.max(n, s, r),
            l = Math.min(n, s, r),
            u = a - l,
            c = a + l,
            h = .5 * c;return e = l === a ? 0 : n === a ? 60 * (s - r) / u + 360 : s === a ? 60 * (r - n) / u + 120 : 60 * (n - s) / u + 240, i = 0 === u ? 0 : h <= .5 ? u / c : u / (2 - c), [Math.round(e) % 360, i, h, null == o ? 1 : o];
      }, o.hsla.from = function (t) {
        if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]];var e = t[0] / 360,
            i = t[1],
            n = t[2],
            s = t[3],
            r = n <= .5 ? n * (1 + i) : n + i - n * i,
            o = 2 * n - r;return [Math.round(255 * p(o, r, e + 1 / 3)), Math.round(255 * p(o, r, e)), Math.round(255 * p(o, r, e - 1 / 3)), s];
      }, c(o, function (e, i) {
        var s = i.props,
            o = i.cache,
            a = i.to,
            l = i.from;r.fn[e] = function (e) {
          if (a && !this[o] && (this[o] = a(this._rgba)), void 0 === e) return this[o].slice();var i,
              n = t.type(e),
              u = "array" === n || "object" === n ? e : arguments,
              d = this[o].slice();return c(s, function (t, e) {
            var i = u["object" === n ? t : e.idx];null == i && (i = d[e.idx]), d[e.idx] = h(i, e);
          }), l ? ((i = r(l(d)))[o] = d, i) : r(d);
        }, c(s, function (i, s) {
          r.fn[i] || (r.fn[i] = function (r) {
            var o,
                a = t.type(r),
                l = "alpha" === i ? this._hsla ? "hsla" : "rgba" : e,
                u = this[l](),
                c = u[s.idx];return "undefined" === a ? c : ("function" === a && (r = r.call(this, c), a = t.type(r)), null == r && s.empty ? this : ("string" === a && (o = n.exec(r)) && (r = c + parseFloat(o[2]) * ("+" === o[1] ? 1 : -1)), u[s.idx] = r, this[l](u)));
          });
        });
      }), r.hook = function (e) {
        var i = e.split(" ");c(i, function (e, i) {
          t.cssHooks[i] = { set: function set(e, n) {
              var s,
                  o,
                  a = "";if ("transparent" !== n && ("string" !== t.type(n) || (s = d(n)))) {
                if (n = r(s || n), !l.rgba && 1 !== n._rgba[3]) {
                  for (o = "backgroundColor" === i ? e.parentNode : e; ("" === a || "transparent" === a) && o && o.style;) {
                    try {
                      a = t.css(o, "backgroundColor"), o = o.parentNode;
                    } catch (t) {}
                  }n = n.blend(a && "transparent" !== a ? a : "_default");
                }n = n.toRgbaString();
              }try {
                e.style[i] = n;
              } catch (t) {}
            } }, t.fx.step[i] = function (e) {
            e.colorInit || (e.start = r(e.elem, i), e.end = r(e.end), e.colorInit = !0), t.cssHooks[i].set(e.elem, e.start.transition(e.end, e.pos));
          };
        });
      }, r.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"), t.cssHooks.borderColor = { expand: function expand(t) {
          var e = {};return c(["Top", "Right", "Bottom", "Left"], function (i, n) {
            e["border" + n + "Color"] = t;
          }), e;
        } }, i = t.Color.names = { aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff" };
    }(u), function () {
      var e,
          i = ["add", "remove", "toggle"],
          n = { border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1 };function s(e) {
        var i,
            n,
            s = e.ownerDocument.defaultView ? e.ownerDocument.defaultView.getComputedStyle(e, null) : e.currentStyle,
            r = {};if (s && s.length && s[0] && s[s[0]]) for (n = s.length; n--;) {
          i = s[n], "string" == typeof s[i] && (r[t.camelCase(i)] = s[i]);
        } else for (i in s) {
          "string" == typeof s[i] && (r[i] = s[i]);
        }return r;
      }t.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (e, i) {
        t.fx.step[i] = function (t) {
          ("none" !== t.end && !t.setAttr || 1 === t.pos && !t.setAttr) && (u.style(t.elem, i, t.end), t.setAttr = !0);
        };
      }), t.fn.addBack || (t.fn.addBack = function (t) {
        return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
      }), t.effects.animateClass = function (e, r, o, a) {
        var l = t.speed(r, o, a);return this.queue(function () {
          var r,
              o = t(this),
              a = o.attr("class") || "",
              u = l.children ? o.find("*").addBack() : o;u = u.map(function () {
            var e = t(this);return { el: e, start: s(this) };
          }), (r = function r() {
            t.each(i, function (t, i) {
              e[i] && o[i + "Class"](e[i]);
            });
          })(), u = u.map(function () {
            return this.end = s(this.el[0]), this.diff = function (e, i) {
              var s,
                  r,
                  o = {};for (s in i) {
                r = i[s], e[s] !== r && (n[s] || !t.fx.step[s] && isNaN(parseFloat(r)) || (o[s] = r));
              }return o;
            }(this.start, this.end), this;
          }), o.attr("class", a), u = u.map(function () {
            var e = this,
                i = t.Deferred(),
                n = t.extend({}, l, { queue: !1, complete: function complete() {
                i.resolve(e);
              } });return this.el.animate(this.diff, n), i.promise();
          }), t.when.apply(t, u.get()).done(function () {
            r(), t.each(arguments, function () {
              var e = this.el;t.each(this.diff, function (t) {
                e.css(t, "");
              });
            }), l.complete.call(o[0]);
          });
        });
      }, t.fn.extend({ addClass: (e = t.fn.addClass, function (i, n, s, r) {
          return n ? t.effects.animateClass.call(this, { add: i }, n, s, r) : e.apply(this, arguments);
        }), removeClass: function (e) {
          return function (i, n, s, r) {
            return arguments.length > 1 ? t.effects.animateClass.call(this, { remove: i }, n, s, r) : e.apply(this, arguments);
          };
        }(t.fn.removeClass), toggleClass: function (e) {
          return function (i, n, s, r, o) {
            return "boolean" == typeof n || void 0 === n ? s ? t.effects.animateClass.call(this, n ? { add: i } : { remove: i }, s, r, o) : e.apply(this, arguments) : t.effects.animateClass.call(this, { toggle: i }, n, s, r);
          };
        }(t.fn.toggleClass), switchClass: function switchClass(e, i, n, s, r) {
          return t.effects.animateClass.call(this, { add: i, remove: e }, n, s, r);
        } });
    }(), function () {
      var e;function i(e, i, n, s) {
        return t.isPlainObject(e) && (i = e, e = e.effect), e = { effect: e }, null == i && (i = {}), t.isFunction(i) && (s = i, n = null, i = {}), ("number" == typeof i || t.fx.speeds[i]) && (s = n, n = i, i = {}), t.isFunction(n) && (s = n, n = null), i && t.extend(e, i), n = n || i.duration, e.duration = t.fx.off ? 0 : "number" == typeof n ? n : n in t.fx.speeds ? t.fx.speeds[n] : t.fx.speeds._default, e.complete = s || i.complete, e;
      }function n(e) {
        return !(e && "number" != typeof e && !t.fx.speeds[e]) || "string" == typeof e && !t.effects.effect[e] || !!t.isFunction(e) || "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && !e.effect;
      }function s(t, e) {
        var i = e.outerWidth(),
            n = e.outerHeight(),
            s = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/.exec(t) || ["", 0, i, n, 0];return { top: parseFloat(s[1]) || 0, right: "auto" === s[2] ? i : parseFloat(s[2]), bottom: "auto" === s[3] ? n : parseFloat(s[3]), left: parseFloat(s[4]) || 0 };
      }t.expr && t.expr.filters && t.expr.filters.animated && (t.expr.filters.animated = (e = t.expr.filters.animated, function (i) {
        return !!t(i).data(l) || e(i);
      })), !1 !== t.uiBackCompat && t.extend(t.effects, { save: function save(t, e) {
          for (var i = 0, n = e.length; i < n; i++) {
            null !== e[i] && t.data("ui-effects-" + e[i], t[0].style[e[i]]);
          }
        }, restore: function restore(t, e) {
          for (var i, n = 0, s = e.length; n < s; n++) {
            null !== e[n] && (i = t.data("ui-effects-" + e[n]), t.css(e[n], i));
          }
        }, setMode: function setMode(t, e) {
          return "toggle" === e && (e = t.is(":hidden") ? "show" : "hide"), e;
        }, createWrapper: function createWrapper(e) {
          if (e.parent().is(".ui-effects-wrapper")) return e.parent();var i = { width: e.outerWidth(!0), height: e.outerHeight(!0), float: e.css("float") },
              n = t("<div></div>").addClass("ui-effects-wrapper").css({ fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0 }),
              s = { width: e.width(), height: e.height() },
              r = document.activeElement;try {
            r.id;
          } catch (t) {
            r = document.body;
          }return e.wrap(n), (e[0] === r || t.contains(e[0], r)) && t(r).trigger("focus"), n = e.parent(), "static" === e.css("position") ? (n.css({ position: "relative" }), e.css({ position: "relative" })) : (t.extend(i, { position: e.css("position"), zIndex: e.css("z-index") }), t.each(["top", "left", "bottom", "right"], function (t, n) {
            i[n] = e.css(n), isNaN(parseInt(i[n], 10)) && (i[n] = "auto");
          }), e.css({ position: "relative", top: 0, left: 0, right: "auto", bottom: "auto" })), e.css(s), n.css(i).show();
        }, removeWrapper: function removeWrapper(e) {
          var i = document.activeElement;return e.parent().is(".ui-effects-wrapper") && (e.parent().replaceWith(e), (e[0] === i || t.contains(e[0], i)) && t(i).trigger("focus")), e;
        } }), t.extend(t.effects, { version: "1.12.1", define: function define(e, i, n) {
          return n || (n = i, i = "effect"), t.effects.effect[e] = n, t.effects.effect[e].mode = i, n;
        }, scaledDimensions: function scaledDimensions(t, e, i) {
          if (0 === e) return { height: 0, width: 0, outerHeight: 0, outerWidth: 0 };var n = "horizontal" !== i ? (e || 100) / 100 : 1,
              s = "vertical" !== i ? (e || 100) / 100 : 1;return { height: t.height() * s, width: t.width() * n, outerHeight: t.outerHeight() * s, outerWidth: t.outerWidth() * n };
        }, clipToBox: function clipToBox(t) {
          return { width: t.clip.right - t.clip.left, height: t.clip.bottom - t.clip.top, left: t.clip.left, top: t.clip.top };
        }, unshift: function unshift(t, e, i) {
          var n = t.queue();e > 1 && n.splice.apply(n, [1, 0].concat(n.splice(e, i))), t.dequeue();
        }, saveStyle: function saveStyle(t) {
          t.data("ui-effects-style", t[0].style.cssText);
        }, restoreStyle: function restoreStyle(t) {
          t[0].style.cssText = t.data("ui-effects-style") || "", t.removeData("ui-effects-style");
        }, mode: function mode(t, e) {
          var i = t.is(":hidden");return "toggle" === e && (e = i ? "show" : "hide"), (i ? "hide" === e : "show" === e) && (e = "none"), e;
        }, getBaseline: function getBaseline(t, e) {
          var i, n;switch (t[0]) {case "top":
              i = 0;break;case "middle":
              i = .5;break;case "bottom":
              i = 1;break;default:
              i = t[0] / e.height;}switch (t[1]) {case "left":
              n = 0;break;case "center":
              n = .5;break;case "right":
              n = 1;break;default:
              n = t[1] / e.width;}return { x: n, y: i };
        }, createPlaceholder: function createPlaceholder(e) {
          var i,
              n = e.css("position"),
              s = e.position();return e.css({ marginTop: e.css("marginTop"), marginBottom: e.css("marginBottom"), marginLeft: e.css("marginLeft"), marginRight: e.css("marginRight") }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()), /^(static|relative)/.test(n) && (n = "absolute", i = t("<" + e[0].nodeName + ">").insertAfter(e).css({ display: /^(inline|ruby)/.test(e.css("display")) ? "inline-block" : "block", visibility: "hidden", marginTop: e.css("marginTop"), marginBottom: e.css("marginBottom"), marginLeft: e.css("marginLeft"), marginRight: e.css("marginRight"), float: e.css("float") }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"), e.data("ui-effects-placeholder", i)), e.css({ position: n, left: s.left, top: s.top }), i;
        }, removePlaceholder: function removePlaceholder(t) {
          var e = "ui-effects-placeholder",
              i = t.data(e);i && (i.remove(), t.removeData(e));
        }, cleanUp: function cleanUp(e) {
          t.effects.restoreStyle(e), t.effects.removePlaceholder(e);
        }, setTransition: function setTransition(e, i, n, s) {
          return s = s || {}, t.each(i, function (t, i) {
            var r = e.cssUnit(i);r[0] > 0 && (s[i] = r[0] * n + r[1]);
          }), s;
        } }), t.fn.extend({ effect: function effect() {
          var e = i.apply(this, arguments),
              n = t.effects.effect[e.effect],
              s = n.mode,
              r = e.queue,
              o = r || "fx",
              a = e.complete,
              u = e.mode,
              c = [],
              h = function h(e) {
            var i = t(this),
                n = t.effects.mode(i, u) || s;i.data(l, !0), c.push(n), s && ("show" === n || n === s && "hide" === n) && i.show(), s && "none" === n || t.effects.saveStyle(i), t.isFunction(e) && e();
          };if (t.fx.off || !n) return u ? this[u](e.duration, a) : this.each(function () {
            a && a.call(this);
          });function d(i) {
            var r = t(this);function o() {
              t.isFunction(a) && a.call(r[0]), t.isFunction(i) && i();
            }e.mode = c.shift(), !1 === t.uiBackCompat || s ? "none" === e.mode ? (r[u](), o()) : n.call(r[0], e, function () {
              r.removeData(l), t.effects.cleanUp(r), "hide" === e.mode && r.hide(), o();
            }) : (r.is(":hidden") ? "hide" === u : "show" === u) ? (r[u](), o()) : n.call(r[0], e, o);
          }return !1 === r ? this.each(h).each(d) : this.queue(o, h).queue(o, d);
        }, show: function (t) {
          return function (e) {
            if (n(e)) return t.apply(this, arguments);var s = i.apply(this, arguments);return s.mode = "show", this.effect.call(this, s);
          };
        }(t.fn.show), hide: function (t) {
          return function (e) {
            if (n(e)) return t.apply(this, arguments);var s = i.apply(this, arguments);return s.mode = "hide", this.effect.call(this, s);
          };
        }(t.fn.hide), toggle: function (t) {
          return function (e) {
            if (n(e) || "boolean" == typeof e) return t.apply(this, arguments);var s = i.apply(this, arguments);return s.mode = "toggle", this.effect.call(this, s);
          };
        }(t.fn.toggle), cssUnit: function cssUnit(e) {
          var i = this.css(e),
              n = [];return t.each(["em", "px", "%", "pt"], function (t, e) {
            i.indexOf(e) > 0 && (n = [parseFloat(i), e]);
          }), n;
        }, cssClip: function cssClip(t) {
          return t ? this.css("clip", "rect(" + t.top + "px " + t.right + "px " + t.bottom + "px " + t.left + "px)") : s(this.css("clip"), this);
        }, transfer: function transfer(e, i) {
          var n = t(this),
              s = t(e.to),
              r = "fixed" === s.css("position"),
              o = t("body"),
              a = r ? o.scrollTop() : 0,
              l = r ? o.scrollLeft() : 0,
              u = s.offset(),
              c = { top: u.top - a, left: u.left - l, height: s.innerHeight(), width: s.innerWidth() },
              h = n.offset(),
              d = t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({ top: h.top - a, left: h.left - l, height: n.innerHeight(), width: n.innerWidth(), position: r ? "fixed" : "absolute" }).animate(c, e.duration, e.easing, function () {
            d.remove(), t.isFunction(i) && i();
          });
        } }), t.fx.step.clip = function (e) {
        e.clipInit || (e.start = t(e.elem).cssClip(), "string" == typeof e.end && (e.end = s(e.end, e.elem)), e.clipInit = !0), t(e.elem).cssClip({ top: e.pos * (e.end.top - e.start.top) + e.start.top, right: e.pos * (e.end.right - e.start.right) + e.start.right, bottom: e.pos * (e.end.bottom - e.start.bottom) + e.start.bottom, left: e.pos * (e.end.left - e.start.left) + e.start.left });
      };
    }(), r = {}, t.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (t, e) {
      r[e] = function (e) {
        return Math.pow(e, t + 2);
      };
    }), t.extend(r, { Sine: function Sine(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }, Circ: function Circ(t) {
        return 1 - Math.sqrt(1 - t * t);
      }, Elastic: function Elastic(t) {
        return 0 === t || 1 === t ? t : -Math.pow(2, 8 * (t - 1)) * Math.sin((80 * (t - 1) - 7.5) * Math.PI / 15);
      }, Back: function Back(t) {
        return t * t * (3 * t - 2);
      }, Bounce: function Bounce(t) {
        for (var e, i = 4; t < ((e = Math.pow(2, --i)) - 1) / 11;) {}return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * e - 2) / 22 - t, 2);
      } }), t.each(r, function (e, i) {
      t.easing["easeIn" + e] = i, t.easing["easeOut" + e] = function (t) {
        return 1 - i(1 - t);
      }, t.easing["easeInOut" + e] = function (t) {
        return t < .5 ? i(2 * t) / 2 : 1 - i(-2 * t + 2) / 2;
      };
    }), t.effects, t.effects.define("blind", "hide", function (e, i) {
      var n = { up: ["bottom", "top"], vertical: ["bottom", "top"], down: ["top", "bottom"], left: ["right", "left"], horizontal: ["right", "left"], right: ["left", "right"] },
          s = t(this),
          r = e.direction || "up",
          o = s.cssClip(),
          a = { clip: t.extend({}, o) },
          l = t.effects.createPlaceholder(s);a.clip[n[r][0]] = a.clip[n[r][1]], "show" === e.mode && (s.cssClip(a.clip), l && l.css(t.effects.clipToBox(a)), a.clip = o), l && l.animate(t.effects.clipToBox(a), e.duration, e.easing), s.animate(a, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
    }), t.effects.define("bounce", function (e, i) {
      var n,
          s,
          r,
          o = t(this),
          a = e.mode,
          l = "hide" === a,
          u = "show" === a,
          c = e.direction || "up",
          h = e.distance,
          d = e.times || 5,
          p = 2 * d + (u || l ? 1 : 0),
          f = e.duration / p,
          g = e.easing,
          m = "up" === c || "down" === c ? "top" : "left",
          v = "up" === c || "left" === c,
          _ = 0,
          b = o.queue().length;for (t.effects.createPlaceholder(o), r = o.css(m), h || (h = o["top" === m ? "outerHeight" : "outerWidth"]() / 3), u && ((s = { opacity: 1 })[m] = r, o.css("opacity", 0).css(m, v ? 2 * -h : 2 * h).animate(s, f, g)), l && (h /= Math.pow(2, d - 1)), (s = {})[m] = r; _ < d; _++) {
        (n = {})[m] = (v ? "-=" : "+=") + h, o.animate(n, f, g).animate(s, f, g), h = l ? 2 * h : h / 2;
      }l && ((n = { opacity: 0 })[m] = (v ? "-=" : "+=") + h, o.animate(n, f, g)), o.queue(i), t.effects.unshift(o, b, p + 1);
    }), t.effects.define("clip", "hide", function (e, i) {
      var n,
          s = {},
          r = t(this),
          o = e.direction || "vertical",
          a = "both" === o,
          l = a || "horizontal" === o,
          u = a || "vertical" === o;n = r.cssClip(), s.clip = { top: u ? (n.bottom - n.top) / 2 : n.top, right: l ? (n.right - n.left) / 2 : n.right, bottom: u ? (n.bottom - n.top) / 2 : n.bottom, left: l ? (n.right - n.left) / 2 : n.left }, t.effects.createPlaceholder(r), "show" === e.mode && (r.cssClip(s.clip), s.clip = n), r.animate(s, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
    }), t.effects.define("drop", "hide", function (e, i) {
      var n,
          s = t(this),
          r = e.mode,
          o = "show" === r,
          a = e.direction || "left",
          l = "up" === a || "down" === a ? "top" : "left",
          u = "up" === a || "left" === a ? "-=" : "+=",
          c = "+=" === u ? "-=" : "+=",
          h = { opacity: 0 };t.effects.createPlaceholder(s), n = e.distance || s["top" === l ? "outerHeight" : "outerWidth"](!0) / 2, h[l] = u + n, o && (s.css(h), h[l] = c + n, h.opacity = 1), s.animate(h, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
    }), t.effects.define("explode", "hide", function (e, i) {
      var n,
          s,
          r,
          o,
          a,
          l,
          u = e.pieces ? Math.round(Math.sqrt(e.pieces)) : 3,
          c = u,
          h = t(this),
          d = e.mode,
          p = "show" === d,
          f = h.show().css("visibility", "hidden").offset(),
          g = Math.ceil(h.outerWidth() / c),
          m = Math.ceil(h.outerHeight() / u),
          v = [];function _() {
        v.push(this), v.length === u * c && (h.css({ visibility: "visible" }), t(v).remove(), i());
      }for (n = 0; n < u; n++) {
        for (o = f.top + n * m, l = n - (u - 1) / 2, s = 0; s < c; s++) {
          r = f.left + s * g, a = s - (c - 1) / 2, h.clone().appendTo("body").wrap("<div></div>").css({ position: "absolute", visibility: "visible", left: -s * g, top: -n * m }).parent().addClass("ui-effects-explode").css({ position: "absolute", overflow: "hidden", width: g, height: m, left: r + (p ? a * g : 0), top: o + (p ? l * m : 0), opacity: p ? 0 : 1 }).animate({ left: r + (p ? 0 : a * g), top: o + (p ? 0 : l * m), opacity: p ? 1 : 0 }, e.duration || 500, e.easing, _);
        }
      }
    }), t.effects.define("fade", "toggle", function (e, i) {
      var n = "show" === e.mode;t(this).css("opacity", n ? 0 : 1).animate({ opacity: n ? 1 : 0 }, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
    }), t.effects.define("fold", "hide", function (e, i) {
      var n = t(this),
          s = e.mode,
          r = "show" === s,
          o = "hide" === s,
          a = e.size || 15,
          l = /([0-9]+)%/.exec(a),
          u = !!e.horizFirst,
          c = u ? ["right", "bottom"] : ["bottom", "right"],
          h = e.duration / 2,
          d = t.effects.createPlaceholder(n),
          p = n.cssClip(),
          f = { clip: t.extend({}, p) },
          g = { clip: t.extend({}, p) },
          m = [p[c[0]], p[c[1]]],
          v = n.queue().length;l && (a = parseInt(l[1], 10) / 100 * m[o ? 0 : 1]), f.clip[c[0]] = a, g.clip[c[0]] = a, g.clip[c[1]] = 0, r && (n.cssClip(g.clip), d && d.css(t.effects.clipToBox(g)), g.clip = p), n.queue(function (i) {
        d && d.animate(t.effects.clipToBox(f), h, e.easing).animate(t.effects.clipToBox(g), h, e.easing), i();
      }).animate(f, h, e.easing).animate(g, h, e.easing).queue(i), t.effects.unshift(n, v, 4);
    }), t.effects.define("highlight", "show", function (e, i) {
      var n = t(this),
          s = { backgroundColor: n.css("backgroundColor") };"hide" === e.mode && (s.opacity = 0), t.effects.saveStyle(n), n.css({ backgroundImage: "none", backgroundColor: e.color || "#ffff99" }).animate(s, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
    }), t.effects.define("size", function (e, i) {
      var n,
          s,
          r,
          o = t(this),
          a = ["fontSize"],
          l = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"],
          u = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"],
          c = e.mode,
          h = "effect" !== c,
          d = e.scale || "both",
          p = e.origin || ["middle", "center"],
          f = o.css("position"),
          g = o.position(),
          m = t.effects.scaledDimensions(o),
          v = e.from || m,
          _ = e.to || t.effects.scaledDimensions(o, 0);t.effects.createPlaceholder(o), "show" === c && (r = v, v = _, _ = r), s = { from: { y: v.height / m.height, x: v.width / m.width }, to: { y: _.height / m.height, x: _.width / m.width } }, "box" !== d && "both" !== d || (s.from.y !== s.to.y && (v = t.effects.setTransition(o, l, s.from.y, v), _ = t.effects.setTransition(o, l, s.to.y, _)), s.from.x !== s.to.x && (v = t.effects.setTransition(o, u, s.from.x, v), _ = t.effects.setTransition(o, u, s.to.x, _))), "content" !== d && "both" !== d || s.from.y !== s.to.y && (v = t.effects.setTransition(o, a, s.from.y, v), _ = t.effects.setTransition(o, a, s.to.y, _)), p && (n = t.effects.getBaseline(p, m), v.top = (m.outerHeight - v.outerHeight) * n.y + g.top, v.left = (m.outerWidth - v.outerWidth) * n.x + g.left, _.top = (m.outerHeight - _.outerHeight) * n.y + g.top, _.left = (m.outerWidth - _.outerWidth) * n.x + g.left), o.css(v), "content" !== d && "both" !== d || (l = l.concat(["marginTop", "marginBottom"]).concat(a), u = u.concat(["marginLeft", "marginRight"]), o.find("*[width]").each(function () {
        var i = t(this),
            n = t.effects.scaledDimensions(i),
            r = { height: n.height * s.from.y, width: n.width * s.from.x, outerHeight: n.outerHeight * s.from.y, outerWidth: n.outerWidth * s.from.x },
            o = { height: n.height * s.to.y, width: n.width * s.to.x, outerHeight: n.height * s.to.y, outerWidth: n.width * s.to.x };s.from.y !== s.to.y && (r = t.effects.setTransition(i, l, s.from.y, r), o = t.effects.setTransition(i, l, s.to.y, o)), s.from.x !== s.to.x && (r = t.effects.setTransition(i, u, s.from.x, r), o = t.effects.setTransition(i, u, s.to.x, o)), h && t.effects.saveStyle(i), i.css(r), i.animate(o, e.duration, e.easing, function () {
          h && t.effects.restoreStyle(i);
        });
      })), o.animate(_, { queue: !1, duration: e.duration, easing: e.easing, complete: function complete() {
          var e = o.offset();0 === _.opacity && o.css("opacity", v.opacity), h || (o.css("position", "static" === f ? "relative" : f).offset(e), t.effects.saveStyle(o)), i();
        } });
    }), t.effects.define("scale", function (e, i) {
      var n = t(this),
          s = e.mode,
          r = parseInt(e.percent, 10) || (0 === parseInt(e.percent, 10) ? 0 : "effect" !== s ? 0 : 100),
          o = t.extend(!0, { from: t.effects.scaledDimensions(n), to: t.effects.scaledDimensions(n, r, e.direction || "both"), origin: e.origin || ["middle", "center"] }, e);e.fade && (o.from.opacity = 1, o.to.opacity = 0), t.effects.effect.size.call(this, o, i);
    }), t.effects.define("puff", "hide", function (e, i) {
      var n = t.extend(!0, {}, e, { fade: !0, percent: parseInt(e.percent, 10) || 150 });t.effects.effect.scale.call(this, n, i);
    }), t.effects.define("pulsate", "show", function (e, i) {
      var n = t(this),
          s = e.mode,
          r = "show" === s,
          o = "hide" === s,
          a = r || o,
          l = 2 * (e.times || 5) + (a ? 1 : 0),
          u = e.duration / l,
          c = 0,
          h = 1,
          d = n.queue().length;for (!r && n.is(":visible") || (n.css("opacity", 0).show(), c = 1); h < l; h++) {
        n.animate({ opacity: c }, u, e.easing), c = 1 - c;
      }n.animate({ opacity: c }, u, e.easing), n.queue(i), t.effects.unshift(n, d, l + 1);
    }), t.effects.define("shake", function (e, i) {
      var n = 1,
          s = t(this),
          r = e.direction || "left",
          o = e.distance || 20,
          a = e.times || 3,
          l = 2 * a + 1,
          u = Math.round(e.duration / l),
          c = "up" === r || "down" === r ? "top" : "left",
          h = "up" === r || "left" === r,
          d = {},
          p = {},
          f = {},
          g = s.queue().length;for (t.effects.createPlaceholder(s), d[c] = (h ? "-=" : "+=") + o, p[c] = (h ? "+=" : "-=") + 2 * o, f[c] = (h ? "-=" : "+=") + 2 * o, s.animate(d, u, e.easing); n < a; n++) {
        s.animate(p, u, e.easing).animate(f, u, e.easing);
      }s.animate(p, u, e.easing).animate(d, u / 2, e.easing).queue(i), t.effects.unshift(s, g, l + 1);
    }), t.effects.define("slide", "show", function (e, i) {
      var n,
          s,
          r = t(this),
          o = { up: ["bottom", "top"], down: ["top", "bottom"], left: ["right", "left"], right: ["left", "right"] },
          a = e.mode,
          l = e.direction || "left",
          u = "up" === l || "down" === l ? "top" : "left",
          c = "up" === l || "left" === l,
          h = e.distance || r["top" === u ? "outerHeight" : "outerWidth"](!0),
          d = {};t.effects.createPlaceholder(r), n = r.cssClip(), s = r.position()[u], d[u] = (c ? -1 : 1) * h + s, d.clip = r.cssClip(), d.clip[o[l][1]] = d.clip[o[l][0]], "show" === a && (r.cssClip(d.clip), r.css(u, d[u]), d.clip = n, d[u] = s), r.animate(d, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
    }), !1 !== t.uiBackCompat && t.effects.define("transfer", function (e, i) {
      t(this).transfer(e, i);
    }),
    /*!
     * jQuery UI Focusable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.ui.focusable = function (e, i) {
      var n,
          s,
          r,
          o,
          a,
          l = e.nodeName.toLowerCase();return "area" === l ? (n = e.parentNode, s = n.name, !(!e.href || !s || "map" !== n.nodeName.toLowerCase()) && (r = t("img[usemap='#" + s + "']")).length > 0 && r.is(":visible")) : (/^(input|select|textarea|button|object)$/.test(l) ? (o = !e.disabled) && (a = t(e).closest("fieldset")[0]) && (o = !a.disabled) : o = "a" === l && e.href || i, o && t(e).is(":visible") && function (t) {
        for (var e = t.css("visibility"); "inherit" === e;) {
          t = t.parent(), e = t.css("visibility");
        }return "hidden" !== e;
      }(t(e)));
    }, t.extend(t.expr[":"], { focusable: function focusable(e) {
        return t.ui.focusable(e, null != t.attr(e, "tabindex"));
      } }), t.ui.focusable, t.fn.form = function () {
      return "string" == typeof this[0].form ? this.closest("form") : t(this[0].form);
    }, t.ui.formResetMixin = { _formResetHandler: function _formResetHandler() {
        var e = t(this);setTimeout(function () {
          var i = e.data("ui-form-reset-instances");t.each(i, function () {
            this.refresh();
          });
        });
      }, _bindFormResetHandler: function _bindFormResetHandler() {
        if (this.form = this.element.form(), this.form.length) {
          var t = this.form.data("ui-form-reset-instances") || [];t.length || this.form.on("reset.ui-form-reset", this._formResetHandler), t.push(this), this.form.data("ui-form-reset-instances", t);
        }
      }, _unbindFormResetHandler: function _unbindFormResetHandler() {
        if (this.form.length) {
          var e = this.form.data("ui-form-reset-instances");e.splice(t.inArray(this, e), 1), e.length ? this.form.data("ui-form-reset-instances", e) : this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset");
        }
      } },
    /*!
     * jQuery UI Support for jQuery core 1.7.x 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     */
    "1.7" === t.fn.jquery.substring(0, 3) && (t.each(["Width", "Height"], function (e, i) {
      var n = "Width" === i ? ["Left", "Right"] : ["Top", "Bottom"],
          s = i.toLowerCase(),
          r = { innerWidth: t.fn.innerWidth, innerHeight: t.fn.innerHeight, outerWidth: t.fn.outerWidth, outerHeight: t.fn.outerHeight };function o(e, i, s, r) {
        return t.each(n, function () {
          i -= parseFloat(t.css(e, "padding" + this)) || 0, s && (i -= parseFloat(t.css(e, "border" + this + "Width")) || 0), r && (i -= parseFloat(t.css(e, "margin" + this)) || 0);
        }), i;
      }t.fn["inner" + i] = function (e) {
        return void 0 === e ? r["inner" + i].call(this) : this.each(function () {
          t(this).css(s, o(this, e) + "px");
        });
      }, t.fn["outer" + i] = function (e, n) {
        return "number" != typeof e ? r["outer" + i].call(this, e) : this.each(function () {
          t(this).css(s, o(this, e, !0, n) + "px");
        });
      };
    }), t.fn.addBack = function (t) {
      return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
    }), t.ui.keyCode = { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 }, t.ui.escapeSelector = (a = /([!"#$%&'()*+,.\/:;<=>?@[\]^`{|}~])/g, function (t) {
      return t.replace(a, "\\$1");
    }), t.fn.labels = function () {
      var e, i, n, s, r;return this[0].labels && this[0].labels.length ? this.pushStack(this[0].labels) : (s = this.eq(0).parents("label"), (n = this.attr("id")) && (e = this.eq(0).parents().last(), r = e.add(e.length ? e.siblings() : this.siblings()), i = "label[for='" + t.ui.escapeSelector(n) + "']", s = s.add(r.find(i).addBack(i))), this.pushStack(s));
    }, t.fn.scrollParent = function (e) {
      var i = this.css("position"),
          n = "absolute" === i,
          s = e ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
          r = this.parents().filter(function () {
        var e = t(this);return (!n || "static" !== e.css("position")) && s.test(e.css("overflow") + e.css("overflow-y") + e.css("overflow-x"));
      }).eq(0);return "fixed" !== i && r.length ? r : t(this[0].ownerDocument || document);
    }, t.extend(t.expr[":"], { tabbable: function tabbable(e) {
        var i = t.attr(e, "tabindex"),
            n = null != i;return (!n || i >= 0) && t.ui.focusable(e, n);
      } }), t.fn.extend({ uniqueId: (o = 0, function () {
        return this.each(function () {
          this.id || (this.id = "ui-id-" + ++o);
        });
      }), removeUniqueId: function removeUniqueId() {
        return this.each(function () {
          /^ui-id-\d+$/.test(this.id) && t(this).removeAttr("id");
        });
      } }), t.widget("ui.accordion", { version: "1.12.1", options: { active: 0, animate: {}, classes: { "ui-accordion-header": "ui-corner-top", "ui-accordion-header-collapsed": "ui-corner-all", "ui-accordion-content": "ui-corner-bottom" }, collapsible: !1, event: "click", header: "> li > :first-child, > :not(li):even", heightStyle: "auto", icons: { activeHeader: "ui-icon-triangle-1-s", header: "ui-icon-triangle-1-e" }, activate: null, beforeActivate: null }, hideProps: { borderTopWidth: "hide", borderBottomWidth: "hide", paddingTop: "hide", paddingBottom: "hide", height: "hide" }, showProps: { borderTopWidth: "show", borderBottomWidth: "show", paddingTop: "show", paddingBottom: "show", height: "show" }, _create: function _create() {
        var e = this.options;this.prevShow = this.prevHide = t(), this._addClass("ui-accordion", "ui-widget ui-helper-reset"), this.element.attr("role", "tablist"), e.collapsible || !1 !== e.active && null != e.active || (e.active = 0), this._processPanels(), e.active < 0 && (e.active += this.headers.length), this._refresh();
      }, _getCreateEventData: function _getCreateEventData() {
        return { header: this.active, panel: this.active.length ? this.active.next() : t() };
      }, _createIcons: function _createIcons() {
        var e,
            i,
            n = this.options.icons;n && (e = t("<span>"), this._addClass(e, "ui-accordion-header-icon", "ui-icon " + n.header), e.prependTo(this.headers), i = this.active.children(".ui-accordion-header-icon"), this._removeClass(i, n.header)._addClass(i, null, n.activeHeader)._addClass(this.headers, "ui-accordion-icons"));
      }, _destroyIcons: function _destroyIcons() {
        this._removeClass(this.headers, "ui-accordion-icons"), this.headers.children(".ui-accordion-header-icon").remove();
      }, _destroy: function _destroy() {
        var t;this.element.removeAttr("role"), this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(), this._destroyIcons(), t = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(), "content" !== this.options.heightStyle && t.css("height", "");
      }, _setOption: function _setOption(t, e) {
        "active" !== t ? ("event" === t && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(e)), this._super(t, e), "collapsible" !== t || e || !1 !== this.options.active || this._activate(0), "icons" === t && (this._destroyIcons(), e && this._createIcons())) : this._activate(e);
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t), this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!t);
      }, _keydown: function _keydown(e) {
        if (!e.altKey && !e.ctrlKey) {
          var i = t.ui.keyCode,
              n = this.headers.length,
              s = this.headers.index(e.target),
              r = !1;switch (e.keyCode) {case i.RIGHT:case i.DOWN:
              r = this.headers[(s + 1) % n];break;case i.LEFT:case i.UP:
              r = this.headers[(s - 1 + n) % n];break;case i.SPACE:case i.ENTER:
              this._eventHandler(e);break;case i.HOME:
              r = this.headers[0];break;case i.END:
              r = this.headers[n - 1];}r && (t(e.target).attr("tabIndex", -1), t(r).attr("tabIndex", 0), t(r).trigger("focus"), e.preventDefault());
        }
      }, _panelKeyDown: function _panelKeyDown(e) {
        e.keyCode === t.ui.keyCode.UP && e.ctrlKey && t(e.currentTarget).prev().trigger("focus");
      }, refresh: function refresh() {
        var e = this.options;this._processPanels(), !1 === e.active && !0 === e.collapsible || !this.headers.length ? (e.active = !1, this.active = t()) : !1 === e.active ? this._activate(0) : this.active.length && !t.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (e.active = !1, this.active = t()) : this._activate(Math.max(0, e.active - 1)) : e.active = this.headers.index(this.active), this._destroyIcons(), this._refresh();
      }, _processPanels: function _processPanels() {
        var t = this.headers,
            e = this.panels;this.headers = this.element.find(this.options.header), this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default"), this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide(), this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content"), e && (this._off(t.not(this.headers)), this._off(e.not(this.panels)));
      }, _refresh: function _refresh() {
        var e,
            i = this.options,
            n = i.heightStyle,
            s = this.element.parent();this.active = this._findActive(i.active), this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed"), this._addClass(this.active.next(), "ui-accordion-content-active"), this.active.next().show(), this.headers.attr("role", "tab").each(function () {
          var e = t(this),
              i = e.uniqueId().attr("id"),
              n = e.next(),
              s = n.uniqueId().attr("id");e.attr("aria-controls", s), n.attr("aria-labelledby", i);
        }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }).next().attr({ "aria-hidden": "true" }).hide(), this.active.length ? this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }).next().attr({ "aria-hidden": "false" }) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(i.event), "fill" === n ? (e = s.height(), this.element.siblings(":visible").each(function () {
          var i = t(this),
              n = i.css("position");"absolute" !== n && "fixed" !== n && (e -= i.outerHeight(!0));
        }), this.headers.each(function () {
          e -= t(this).outerHeight(!0);
        }), this.headers.next().each(function () {
          t(this).height(Math.max(0, e - t(this).innerHeight() + t(this).height()));
        }).css("overflow", "auto")) : "auto" === n && (e = 0, this.headers.next().each(function () {
          var i = t(this).is(":visible");i || t(this).show(), e = Math.max(e, t(this).css("height", "").height()), i || t(this).hide();
        }).height(e));
      }, _activate: function _activate(e) {
        var i = this._findActive(e)[0];i !== this.active[0] && (i = i || this.active[0], this._eventHandler({ target: i, currentTarget: i, preventDefault: t.noop }));
      }, _findActive: function _findActive(e) {
        return "number" == typeof e ? this.headers.eq(e) : t();
      }, _setupEvents: function _setupEvents(e) {
        var i = { keydown: "_keydown" };e && t.each(e.split(" "), function (t, e) {
          i[e] = "_eventHandler";
        }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, i), this._on(this.headers.next(), { keydown: "_panelKeyDown" }), this._hoverable(this.headers), this._focusable(this.headers);
      }, _eventHandler: function _eventHandler(e) {
        var i,
            n,
            s = this.options,
            r = this.active,
            o = t(e.currentTarget),
            a = o[0] === r[0],
            l = a && s.collapsible,
            u = l ? t() : o.next(),
            c = r.next(),
            h = { oldHeader: r, oldPanel: c, newHeader: l ? t() : o, newPanel: u };e.preventDefault(), a && !s.collapsible || !1 === this._trigger("beforeActivate", e, h) || (s.active = !l && this.headers.index(o), this.active = a ? t() : o, this._toggle(h), this._removeClass(r, "ui-accordion-header-active", "ui-state-active"), s.icons && (i = r.children(".ui-accordion-header-icon"), this._removeClass(i, null, s.icons.activeHeader)._addClass(i, null, s.icons.header)), a || (this._removeClass(o, "ui-accordion-header-collapsed")._addClass(o, "ui-accordion-header-active", "ui-state-active"), s.icons && (n = o.children(".ui-accordion-header-icon"), this._removeClass(n, null, s.icons.header)._addClass(n, null, s.icons.activeHeader)), this._addClass(o.next(), "ui-accordion-content-active")));
      }, _toggle: function _toggle(e) {
        var i = e.newPanel,
            n = this.prevShow.length ? this.prevShow : e.oldPanel;this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = i, this.prevHide = n, this.options.animate ? this._animate(i, n, e) : (n.hide(), i.show(), this._toggleComplete(e)), n.attr({ "aria-hidden": "true" }), n.prev().attr({ "aria-selected": "false", "aria-expanded": "false" }), i.length && n.length ? n.prev().attr({ tabIndex: -1, "aria-expanded": "false" }) : i.length && this.headers.filter(function () {
          return 0 === parseInt(t(this).attr("tabIndex"), 10);
        }).attr("tabIndex", -1), i.attr("aria-hidden", "false").prev().attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 });
      }, _animate: function _animate(t, e, i) {
        var n,
            s,
            r,
            o = this,
            a = 0,
            l = t.css("box-sizing"),
            u = t.length && (!e.length || t.index() < e.index()),
            c = this.options.animate || {},
            h = u && c.down || c,
            d = function d() {
          o._toggleComplete(i);
        };return "number" == typeof h && (r = h), "string" == typeof h && (s = h), s = s || h.easing || c.easing, r = r || h.duration || c.duration, e.length ? t.length ? (n = t.show().outerHeight(), e.animate(this.hideProps, { duration: r, easing: s, step: function step(t, e) {
            e.now = Math.round(t);
          } }), void t.hide().animate(this.showProps, { duration: r, easing: s, complete: d, step: function step(t, i) {
            i.now = Math.round(t), "height" !== i.prop ? "content-box" === l && (a += i.now) : "content" !== o.options.heightStyle && (i.now = Math.round(n - e.outerHeight() - a), a = 0);
          } })) : e.animate(this.hideProps, r, s, d) : t.animate(this.showProps, r, s, d);
      }, _toggleComplete: function _toggleComplete(t) {
        var e = t.oldPanel,
            i = e.prev();this._removeClass(e, "ui-accordion-content-active"), this._removeClass(i, "ui-accordion-header-active")._addClass(i, "ui-accordion-header-collapsed"), e.length && (e.parent()[0].className = e.parent()[0].className), this._trigger("activate", null, t);
      } }), t.ui.safeActiveElement = function (t) {
      var e;try {
        e = t.activeElement;
      } catch (i) {
        e = t.body;
      }return e || (e = t.body), e.nodeName || (e = t.body), e;
    }, t.widget("ui.menu", { version: "1.12.1", defaultElement: "<ul>", delay: 300, options: { icons: { submenu: "ui-icon-caret-1-e" }, items: "> *", menus: "ul", position: { my: "left top", at: "right top" }, role: "menu", blur: null, focus: null, select: null }, _create: function _create() {
        this.activeMenu = this.element, this.mouseHandled = !1, this.element.uniqueId().attr({ role: this.options.role, tabIndex: 0 }), this._addClass("ui-menu", "ui-widget ui-widget-content"), this._on({ "mousedown .ui-menu-item": function mousedownUiMenuItem(t) {
            t.preventDefault();
          }, "click .ui-menu-item": function clickUiMenuItem(e) {
            var i = t(e.target),
                n = t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled && i.not(".ui-state-disabled").length && (this.select(e), e.isPropagationStopped() || (this.mouseHandled = !0), i.has(".ui-menu").length ? this.expand(e) : !this.element.is(":focus") && n.closest(".ui-menu").length && (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)));
          }, "mouseenter .ui-menu-item": function mouseenterUiMenuItem(e) {
            if (!this.previousFilter) {
              var i = t(e.target).closest(".ui-menu-item"),
                  n = t(e.currentTarget);i[0] === n[0] && (this._removeClass(n.siblings().children(".ui-state-active"), null, "ui-state-active"), this.focus(e, n));
            }
          }, mouseleave: "collapseAll", "mouseleave .ui-menu": "collapseAll", focus: function focus(t, e) {
            var i = this.active || this.element.find(this.options.items).eq(0);e || this.focus(t, i);
          }, blur: function blur(e) {
            this._delay(function () {
              var i = !t.contains(this.element[0], t.ui.safeActiveElement(this.document[0]));i && this.collapseAll(e);
            });
          }, keydown: "_keydown" }), this.refresh(), this._on(this.document, { click: function click(t) {
            this._closeOnDocumentClick(t) && this.collapseAll(t), this.mouseHandled = !1;
          } });
      }, _destroy: function _destroy() {
        var e = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),
            i = e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(), i.children().each(function () {
          var e = t(this);e.data("ui-menu-submenu-caret") && e.remove();
        });
      }, _keydown: function _keydown(e) {
        var i,
            n,
            s,
            r,
            o = !0;switch (e.keyCode) {case t.ui.keyCode.PAGE_UP:
            this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:
            this.nextPage(e);break;case t.ui.keyCode.HOME:
            this._move("first", "first", e);break;case t.ui.keyCode.END:
            this._move("last", "last", e);break;case t.ui.keyCode.UP:
            this.previous(e);break;case t.ui.keyCode.DOWN:
            this.next(e);break;case t.ui.keyCode.LEFT:
            this.collapse(e);break;case t.ui.keyCode.RIGHT:
            this.active && !this.active.is(".ui-state-disabled") && this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:
            this._activate(e);break;case t.ui.keyCode.ESCAPE:
            this.collapse(e);break;default:
            o = !1, n = this.previousFilter || "", r = !1, s = e.keyCode >= 96 && e.keyCode <= 105 ? (e.keyCode - 96).toString() : String.fromCharCode(e.keyCode), clearTimeout(this.filterTimer), s === n ? r = !0 : s = n + s, i = this._filterMenuItems(s), (i = r && -1 !== i.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : i).length || (s = String.fromCharCode(e.keyCode), i = this._filterMenuItems(s)), i.length ? (this.focus(e, i), this.previousFilter = s, this.filterTimer = this._delay(function () {
              delete this.previousFilter;
            }, 1e3)) : delete this.previousFilter;}o && e.preventDefault();
      }, _activate: function _activate(t) {
        this.active && !this.active.is(".ui-state-disabled") && (this.active.children("[aria-haspopup='true']").length ? this.expand(t) : this.select(t));
      }, refresh: function refresh() {
        var e,
            i,
            n,
            s,
            r,
            o = this,
            a = this.options.icons.submenu,
            l = this.element.find(this.options.menus);this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length), n = l.filter(":not(.ui-menu)").hide().attr({ role: this.options.role, "aria-hidden": "true", "aria-expanded": "false" }).each(function () {
          var e = t(this),
              i = e.prev(),
              n = t("<span>").data("ui-menu-submenu-caret", !0);o._addClass(n, "ui-menu-icon", "ui-icon " + a), i.attr("aria-haspopup", "true").prepend(n), e.attr("aria-labelledby", i.attr("id"));
        }), this._addClass(n, "ui-menu", "ui-widget ui-widget-content ui-front"), e = l.add(this.element), (i = e.find(this.options.items)).not(".ui-menu-item").each(function () {
          var e = t(this);o._isDivider(e) && o._addClass(e, "ui-menu-divider", "ui-widget-content");
        }), s = i.not(".ui-menu-item, .ui-menu-divider"), r = s.children().not(".ui-menu").uniqueId().attr({ tabIndex: -1, role: this._itemRole() }), this._addClass(s, "ui-menu-item")._addClass(r, "ui-menu-item-wrapper"), i.filter(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !t.contains(this.element[0], this.active[0]) && this.blur();
      }, _itemRole: function _itemRole() {
        return { menu: "menuitem", listbox: "option" }[this.options.role];
      }, _setOption: function _setOption(t, e) {
        if ("icons" === t) {
          var i = this.element.find(".ui-menu-icon");this._removeClass(i, null, this.options.icons.submenu)._addClass(i, null, e.submenu);
        }this._super(t, e);
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._super(t), this.element.attr("aria-disabled", String(t)), this._toggleClass(null, "ui-state-disabled", !!t);
      }, focus: function focus(t, e) {
        var i, n, s;this.blur(t, t && "focus" === t.type), this._scrollIntoView(e), this.active = e.first(), n = this.active.children(".ui-menu-item-wrapper"), this._addClass(n, null, "ui-state-active"), this.options.role && this.element.attr("aria-activedescendant", n.attr("id")), s = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"), this._addClass(s, null, "ui-state-active"), t && "keydown" === t.type ? this._close() : this.timer = this._delay(function () {
          this._close();
        }, this.delay), (i = e.children(".ui-menu")).length && t && /^mouse/.test(t.type) && this._startOpening(i), this.activeMenu = e.parent(), this._trigger("focus", t, { item: e });
      }, _scrollIntoView: function _scrollIntoView(e) {
        var i, n, s, r, o, a;this._hasScroll() && (i = parseFloat(t.css(this.activeMenu[0], "borderTopWidth")) || 0, n = parseFloat(t.css(this.activeMenu[0], "paddingTop")) || 0, s = e.offset().top - this.activeMenu.offset().top - i - n, r = this.activeMenu.scrollTop(), o = this.activeMenu.height(), a = e.outerHeight(), s < 0 ? this.activeMenu.scrollTop(r + s) : s + a > o && this.activeMenu.scrollTop(r + s - o + a));
      }, blur: function blur(t, e) {
        e || clearTimeout(this.timer), this.active && (this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active"), this._trigger("blur", t, { item: this.active }), this.active = null);
      }, _startOpening: function _startOpening(t) {
        clearTimeout(this.timer), "true" === t.attr("aria-hidden") && (this.timer = this._delay(function () {
          this._close(), this._open(t);
        }, this.delay));
      }, _open: function _open(e) {
        var i = t.extend({ of: this.active }, this.options.position);clearTimeout(this.timer), this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden", "true"), e.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(i);
      }, collapseAll: function collapseAll(e, i) {
        clearTimeout(this.timer), this.timer = this._delay(function () {
          var n = i ? this.element : t(e && e.target).closest(this.element.find(".ui-menu"));n.length || (n = this.element), this._close(n), this.blur(e), this._removeClass(n.find(".ui-state-active"), null, "ui-state-active"), this.activeMenu = n;
        }, this.delay);
      }, _close: function _close(t) {
        t || (t = this.active ? this.active.parent() : this.element), t.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
      }, _closeOnDocumentClick: function _closeOnDocumentClick(e) {
        return !t(e.target).closest(".ui-menu").length;
      }, _isDivider: function _isDivider(t) {
        return !/[^\-\u2014\u2013\s]/.test(t.text());
      }, collapse: function collapse(t) {
        var e = this.active && this.active.parent().closest(".ui-menu-item", this.element);e && e.length && (this._close(), this.focus(t, e));
      }, expand: function expand(t) {
        var e = this.active && this.active.children(".ui-menu ").find(this.options.items).first();e && e.length && (this._open(e.parent()), this._delay(function () {
          this.focus(t, e);
        }));
      }, next: function next(t) {
        this._move("next", "first", t);
      }, previous: function previous(t) {
        this._move("prev", "last", t);
      }, isFirstItem: function isFirstItem() {
        return this.active && !this.active.prevAll(".ui-menu-item").length;
      }, isLastItem: function isLastItem() {
        return this.active && !this.active.nextAll(".ui-menu-item").length;
      }, _move: function _move(t, e, i) {
        var n;this.active && (n = "first" === t || "last" === t ? this.active["first" === t ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[t + "All"](".ui-menu-item").eq(0)), n && n.length && this.active || (n = this.activeMenu.find(this.options.items)[e]()), this.focus(i, n);
      }, nextPage: function nextPage(e) {
        var i, n, s;this.active ? this.isLastItem() || (this._hasScroll() ? (n = this.active.offset().top, s = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () {
          return (i = t(this)).offset().top - n - s < 0;
        }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]())) : this.next(e);
      }, previousPage: function previousPage(e) {
        var i, n, s;this.active ? this.isFirstItem() || (this._hasScroll() ? (n = this.active.offset().top, s = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () {
          return (i = t(this)).offset().top - n + s > 0;
        }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items).first())) : this.next(e);
      }, _hasScroll: function _hasScroll() {
        return this.element.outerHeight() < this.element.prop("scrollHeight");
      }, select: function select(e) {
        this.active = this.active || t(e.target).closest(".ui-menu-item");var i = { item: this.active };this.active.has(".ui-menu").length || this.collapseAll(e, !0), this._trigger("select", e, i);
      }, _filterMenuItems: function _filterMenuItems(e) {
        var i = e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
            n = new RegExp("^" + i, "i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function () {
          return n.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()));
        });
      } }),
    /*!
     * jQuery UI Autocomplete 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.autocomplete", { version: "1.12.1", defaultElement: "<input>", options: { appendTo: null, autoFocus: !1, delay: 300, minLength: 1, position: { my: "left top", at: "left bottom", collision: "none" }, source: null, change: null, close: null, focus: null, open: null, response: null, search: null, select: null }, requestIndex: 0, pending: 0, _create: function _create() {
        var e,
            i,
            n,
            s = this.element[0].nodeName.toLowerCase(),
            r = "textarea" === s,
            o = "input" === s;this.isMultiLine = r || !o && this._isContentEditable(this.element), this.valueMethod = this.element[r || o ? "val" : "text"], this.isNewMenu = !0, this._addClass("ui-autocomplete-input"), this.element.attr("autocomplete", "off"), this._on(this.element, { keydown: function keydown(s) {
            if (this.element.prop("readOnly")) return e = !0, n = !0, void (i = !0);e = !1, n = !1, i = !1;var r = t.ui.keyCode;switch (s.keyCode) {case r.PAGE_UP:
                e = !0, this._move("previousPage", s);break;case r.PAGE_DOWN:
                e = !0, this._move("nextPage", s);break;case r.UP:
                e = !0, this._keyEvent("previous", s);break;case r.DOWN:
                e = !0, this._keyEvent("next", s);break;case r.ENTER:
                this.menu.active && (e = !0, s.preventDefault(), this.menu.select(s));break;case r.TAB:
                this.menu.active && this.menu.select(s);break;case r.ESCAPE:
                this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), this.close(s), s.preventDefault());break;default:
                i = !0, this._searchTimeout(s);}
          }, keypress: function keypress(n) {
            if (e) return e = !1, void (this.isMultiLine && !this.menu.element.is(":visible") || n.preventDefault());if (!i) {
              var s = t.ui.keyCode;switch (n.keyCode) {case s.PAGE_UP:
                  this._move("previousPage", n);break;case s.PAGE_DOWN:
                  this._move("nextPage", n);break;case s.UP:
                  this._keyEvent("previous", n);break;case s.DOWN:
                  this._keyEvent("next", n);}
            }
          }, input: function input(t) {
            if (n) return n = !1, void t.preventDefault();this._searchTimeout(t);
          }, focus: function focus() {
            this.selectedItem = null, this.previous = this._value();
          }, blur: function blur(t) {
            this.cancelBlur ? delete this.cancelBlur : (clearTimeout(this.searching), this.close(t), this._change(t));
          } }), this._initSource(), this.menu = t("<ul>").appendTo(this._appendTo()).menu({ role: null }).hide().menu("instance"), this._addClass(this.menu.element, "ui-autocomplete", "ui-front"), this._on(this.menu.element, { mousedown: function mousedown(e) {
            e.preventDefault(), this.cancelBlur = !0, this._delay(function () {
              delete this.cancelBlur, this.element[0] !== t.ui.safeActiveElement(this.document[0]) && this.element.trigger("focus");
            });
          }, menufocus: function menufocus(e, i) {
            var n, s;if (this.isNewMenu && (this.isNewMenu = !1, e.originalEvent && /^mouse/.test(e.originalEvent.type))) return this.menu.blur(), void this.document.one("mousemove", function () {
              t(e.target).trigger(e.originalEvent);
            });s = i.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", e, { item: s }) && e.originalEvent && /^key/.test(e.originalEvent.type) && this._value(s.value), (n = i.item.attr("aria-label") || s.value) && t.trim(n).length && (this.liveRegion.children().hide(), t("<div>").text(n).appendTo(this.liveRegion));
          }, menuselect: function menuselect(e, i) {
            var n = i.item.data("ui-autocomplete-item"),
                s = this.previous;this.element[0] !== t.ui.safeActiveElement(this.document[0]) && (this.element.trigger("focus"), this.previous = s, this._delay(function () {
              this.previous = s, this.selectedItem = n;
            })), !1 !== this._trigger("select", e, { item: n }) && this._value(n.value), this.term = this._value(), this.close(e), this.selectedItem = n;
          } }), this.liveRegion = t("<div>", { role: "status", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this._on(this.window, { beforeunload: function beforeunload() {
            this.element.removeAttr("autocomplete");
          } });
      }, _destroy: function _destroy() {
        clearTimeout(this.searching), this.element.removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove();
      }, _setOption: function _setOption(t, e) {
        this._super(t, e), "source" === t && this._initSource(), "appendTo" === t && this.menu.element.appendTo(this._appendTo()), "disabled" === t && e && this.xhr && this.xhr.abort();
      }, _isEventTargetInWidget: function _isEventTargetInWidget(e) {
        var i = this.menu.element[0];return e.target === this.element[0] || e.target === i || t.contains(i, e.target);
      }, _closeOnClickOutside: function _closeOnClickOutside(t) {
        this._isEventTargetInWidget(t) || this.close();
      }, _appendTo: function _appendTo() {
        var e = this.options.appendTo;return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e;
      }, _initSource: function _initSource() {
        var e,
            i,
            n = this;t.isArray(this.options.source) ? (e = this.options.source, this.source = function (i, n) {
          n(t.ui.autocomplete.filter(e, i.term));
        }) : "string" == typeof this.options.source ? (i = this.options.source, this.source = function (e, s) {
          n.xhr && n.xhr.abort(), n.xhr = t.ajax({ url: i, data: e, dataType: "json", success: function success(t) {
              s(t);
            }, error: function error() {
              s([]);
            } });
        }) : this.source = this.options.source;
      }, _searchTimeout: function _searchTimeout(t) {
        clearTimeout(this.searching), this.searching = this._delay(function () {
          var e = this.term === this._value(),
              i = this.menu.element.is(":visible"),
              n = t.altKey || t.ctrlKey || t.metaKey || t.shiftKey;e && (!e || i || n) || (this.selectedItem = null, this.search(null, t));
        }, this.options.delay);
      }, search: function search(t, e) {
        return t = null != t ? t : this._value(), this.term = this._value(), t.length < this.options.minLength ? this.close(e) : !1 !== this._trigger("search", e) ? this._search(t) : void 0;
      }, _search: function _search(t) {
        this.pending++, this._addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({ term: t }, this._response());
      }, _response: function _response() {
        var e = ++this.requestIndex;return t.proxy(function (t) {
          e === this.requestIndex && this.__response(t), this.pending--, this.pending || this._removeClass("ui-autocomplete-loading");
        }, this);
      }, __response: function __response(t) {
        t && (t = this._normalize(t)), this._trigger("response", null, { content: t }), !this.options.disabled && t && t.length && !this.cancelSearch ? (this._suggest(t), this._trigger("open")) : this._close();
      }, close: function close(t) {
        this.cancelSearch = !0, this._close(t);
      }, _close: function _close(t) {
        this._off(this.document, "mousedown"), this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", t));
      }, _change: function _change(t) {
        this.previous !== this._value() && this._trigger("change", t, { item: this.selectedItem });
      }, _normalize: function _normalize(e) {
        return e.length && e[0].label && e[0].value ? e : t.map(e, function (e) {
          return "string" == typeof e ? { label: e, value: e } : t.extend({}, e, { label: e.label || e.value, value: e.value || e.label });
        });
      }, _suggest: function _suggest(e) {
        var i = this.menu.element.empty();this._renderMenu(i, e), this.isNewMenu = !0, this.menu.refresh(), i.show(), this._resizeMenu(), i.position(t.extend({ of: this.element }, this.options.position)), this.options.autoFocus && this.menu.next(), this._on(this.document, { mousedown: "_closeOnClickOutside" });
      }, _resizeMenu: function _resizeMenu() {
        var t = this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth() + 1, this.element.outerWidth()));
      }, _renderMenu: function _renderMenu(e, i) {
        var n = this;t.each(i, function (t, i) {
          n._renderItemData(e, i);
        });
      }, _renderItemData: function _renderItemData(t, e) {
        return this._renderItem(t, e).data("ui-autocomplete-item", e);
      }, _renderItem: function _renderItem(e, i) {
        return t("<li>").append(t("<div>").text(i.label)).appendTo(e);
      }, _move: function _move(t, e) {
        if (this.menu.element.is(":visible")) return this.menu.isFirstItem() && /^previous/.test(t) || this.menu.isLastItem() && /^next/.test(t) ? (this.isMultiLine || this._value(this.term), void this.menu.blur()) : void this.menu[t](e);this.search(null, e);
      }, widget: function widget() {
        return this.menu.element;
      }, _value: function _value() {
        return this.valueMethod.apply(this.element, arguments);
      }, _keyEvent: function _keyEvent(t, e) {
        this.isMultiLine && !this.menu.element.is(":visible") || (this._move(t, e), e.preventDefault());
      }, _isContentEditable: function _isContentEditable(t) {
        if (!t.length) return !1;var e = t.prop("contentEditable");return "inherit" === e ? this._isContentEditable(t.parent()) : "true" === e;
      } }), t.extend(t.ui.autocomplete, { escapeRegex: function escapeRegex(t) {
        return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
      }, filter: function filter(e, i) {
        var n = new RegExp(t.ui.autocomplete.escapeRegex(i), "i");return t.grep(e, function (t) {
          return n.test(t.label || t.value || t);
        });
      } }), t.widget("ui.autocomplete", t.ui.autocomplete, { options: { messages: { noResults: "No search results.", results: function results(t) {
            return t + (t > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
          } } }, __response: function __response(e) {
        var i;this._superApply(arguments), this.options.disabled || this.cancelSearch || (i = e && e.length ? this.options.messages.results(e.length) : this.options.messages.noResults, this.liveRegion.children().hide(), t("<div>").text(i).appendTo(this.liveRegion));
      } }), t.ui.autocomplete;var c,
        h = /ui-corner-([a-z]){2,6}/g;
    /*!
     * jQuery UI Controlgroup 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */function d() {
      this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }, this._defaults = { showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: !1, hideIfNoPrevNext: !1, navigationAsDateFormat: !1, gotoCurrent: !1, changeMonth: !1, changeYear: !1, yearRange: "c-10:c+10", showOtherMonths: !1, selectOtherMonths: !1, showWeek: !1, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: !0, showButtonPanel: !1, autoSize: !1, disabled: !1 }, t.extend(this._defaults, this.regional[""]), this.regional.en = t.extend(!0, {}, this.regional[""]), this.regional["en-US"] = t.extend(!0, {}, this.regional.en), this.dpDiv = p(t("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }function p(e) {
      var i = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout", i, function () {
        t(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).removeClass("ui-datepicker-next-hover");
      }).on("mouseover", i, f);
    }function f() {
      t.datepicker._isDisabledDatepicker(c.inline ? c.dpDiv.parent()[0] : c.input[0]) || (t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), t(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).addClass("ui-datepicker-next-hover"));
    }function g(e, i) {
      for (var n in t.extend(e, i), i) {
        null == i[n] && (e[n] = i[n]);
      }return e;
    }t.widget("ui.controlgroup", { version: "1.12.1", defaultElement: "<div>", options: { direction: "horizontal", disabled: null, onlyVisible: !0, items: { button: "input[type=button], input[type=submit], input[type=reset], button, a", controlgroupLabel: ".ui-controlgroup-label", checkboxradio: "input[type='checkbox'], input[type='radio']", selectmenu: "select", spinner: ".ui-spinner-input" } }, _create: function _create() {
        this._enhance();
      }, _enhance: function _enhance() {
        this.element.attr("role", "toolbar"), this.refresh();
      }, _destroy: function _destroy() {
        this._callChildMethod("destroy"), this.childWidgets.removeData("ui-controlgroup-data"), this.element.removeAttr("role"), this.options.items.controlgroupLabel && this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();
      }, _initWidgets: function _initWidgets() {
        var e = this,
            i = [];t.each(this.options.items, function (n, s) {
          var r,
              o = {};if (s) return "controlgroupLabel" === n ? ((r = e.element.find(s)).each(function () {
            var e = t(this);e.children(".ui-controlgroup-label-contents").length || e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
          }), e._addClass(r, null, "ui-widget ui-widget-content ui-state-default"), void (i = i.concat(r.get()))) : void (t.fn[n] && (o = e["_" + n + "Options"] ? e["_" + n + "Options"]("middle") : { classes: {} }, e.element.find(s).each(function () {
            var s = t(this),
                r = s[n]("instance"),
                a = t.widget.extend({}, o);if ("button" !== n || !s.parent(".ui-spinner").length) {
              r || (r = s[n]()[n]("instance")), r && (a.classes = e._resolveClassesValues(a.classes, r)), s[n](a);var l = s[n]("widget");t.data(l[0], "ui-controlgroup-data", r || s[n]("instance")), i.push(l[0]);
            }
          })));
        }), this.childWidgets = t(t.unique(i)), this._addClass(this.childWidgets, "ui-controlgroup-item");
      }, _callChildMethod: function _callChildMethod(e) {
        this.childWidgets.each(function () {
          var i = t(this),
              n = i.data("ui-controlgroup-data");n && n[e] && n[e]();
        });
      }, _updateCornerClass: function _updateCornerClass(t, e) {
        var i = this._buildSimpleOptions(e, "label").classes.label;this._removeClass(t, null, "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"), this._addClass(t, null, i);
      }, _buildSimpleOptions: function _buildSimpleOptions(t, e) {
        var i = "vertical" === this.options.direction,
            n = { classes: {} };return n.classes[e] = { middle: "", first: "ui-corner-" + (i ? "top" : "left"), last: "ui-corner-" + (i ? "bottom" : "right"), only: "ui-corner-all" }[t], n;
      }, _spinnerOptions: function _spinnerOptions(t) {
        var e = this._buildSimpleOptions(t, "ui-spinner");return e.classes["ui-spinner-up"] = "", e.classes["ui-spinner-down"] = "", e;
      }, _buttonOptions: function _buttonOptions(t) {
        return this._buildSimpleOptions(t, "ui-button");
      }, _checkboxradioOptions: function _checkboxradioOptions(t) {
        return this._buildSimpleOptions(t, "ui-checkboxradio-label");
      }, _selectmenuOptions: function _selectmenuOptions(t) {
        var e = "vertical" === this.options.direction;return { width: !!e && "auto", classes: { middle: { "ui-selectmenu-button-open": "", "ui-selectmenu-button-closed": "" }, first: { "ui-selectmenu-button-open": "ui-corner-" + (e ? "top" : "tl"), "ui-selectmenu-button-closed": "ui-corner-" + (e ? "top" : "left") }, last: { "ui-selectmenu-button-open": e ? "" : "ui-corner-tr", "ui-selectmenu-button-closed": "ui-corner-" + (e ? "bottom" : "right") }, only: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" } }[t] };
      }, _resolveClassesValues: function _resolveClassesValues(e, i) {
        var n = {};return t.each(e, function (s) {
          var r = i.options.classes[s] || "";r = t.trim(r.replace(h, "")), n[s] = (r + " " + e[s]).replace(/\s+/g, " ");
        }), n;
      }, _setOption: function _setOption(t, e) {
        "direction" === t && this._removeClass("ui-controlgroup-" + this.options.direction), this._super(t, e), "disabled" !== t ? this.refresh() : this._callChildMethod(e ? "disable" : "enable");
      }, refresh: function refresh() {
        var e,
            i = this;this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction), "horizontal" === this.options.direction && this._addClass(null, "ui-helper-clearfix"), this._initWidgets(), e = this.childWidgets, this.options.onlyVisible && (e = e.filter(":visible")), e.length && (t.each(["first", "last"], function (t, n) {
          var s = e[n]().data("ui-controlgroup-data");if (s && i["_" + s.widgetName + "Options"]) {
            var r = i["_" + s.widgetName + "Options"](1 === e.length ? "only" : n);r.classes = i._resolveClassesValues(r.classes, s), s.element[s.widgetName](r);
          } else i._updateCornerClass(e[n](), n);
        }), this._callChildMethod("refresh"));
      } }),
    /*!
     * jQuery UI Checkboxradio 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.checkboxradio", [t.ui.formResetMixin, { version: "1.12.1", options: { disabled: null, label: null, icon: !0, classes: { "ui-checkboxradio-label": "ui-corner-all", "ui-checkboxradio-icon": "ui-corner-all" } }, _getCreateOptions: function _getCreateOptions() {
        var e,
            i,
            n = this,
            s = this._super() || {};return this._readType(), i = this.element.labels(), this.label = t(i[i.length - 1]), this.label.length || t.error("No label found for checkboxradio widget"), this.originalLabel = "", this.label.contents().not(this.element[0]).each(function () {
          n.originalLabel += 3 === this.nodeType ? t(this).text() : this.outerHTML;
        }), this.originalLabel && (s.label = this.originalLabel), null != (e = this.element[0].disabled) && (s.disabled = e), s;
      }, _create: function _create() {
        var t = this.element[0].checked;this._bindFormResetHandler(), null == this.options.disabled && (this.options.disabled = this.element[0].disabled), this._setOption("disabled", this.options.disabled), this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible"), this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget"), "radio" === this.type && this._addClass(this.label, "ui-checkboxradio-radio-label"), this.options.label && this.options.label !== this.originalLabel ? this._updateLabel() : this.originalLabel && (this.options.label = this.originalLabel), this._enhance(), t && (this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active"), this.icon && this._addClass(this.icon, null, "ui-state-hover")), this._on({ change: "_toggleClasses", focus: function focus() {
            this._addClass(this.label, null, "ui-state-focus ui-visual-focus");
          }, blur: function blur() {
            this._removeClass(this.label, null, "ui-state-focus ui-visual-focus");
          } });
      }, _readType: function _readType() {
        var e = this.element[0].nodeName.toLowerCase();this.type = this.element[0].type, "input" === e && /radio|checkbox/.test(this.type) || t.error("Can't create checkboxradio on element.nodeName=" + e + " and element.type=" + this.type);
      }, _enhance: function _enhance() {
        this._updateIcon(this.element[0].checked);
      }, widget: function widget() {
        return this.label;
      }, _getRadioGroup: function _getRadioGroup() {
        var e = this.element[0].name,
            i = "input[name='" + t.ui.escapeSelector(e) + "']";return e ? (this.form.length ? t(this.form[0].elements).filter(i) : t(i).filter(function () {
          return 0 === t(this).form().length;
        })).not(this.element) : t([]);
      }, _toggleClasses: function _toggleClasses() {
        var e = this.element[0].checked;this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", e), this.options.icon && "checkbox" === this.type && this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", e)._toggleClass(this.icon, null, "ui-icon-blank", !e), "radio" === this.type && this._getRadioGroup().each(function () {
          var e = t(this).checkboxradio("instance");e && e._removeClass(e.label, "ui-checkboxradio-checked", "ui-state-active");
        });
      }, _destroy: function _destroy() {
        this._unbindFormResetHandler(), this.icon && (this.icon.remove(), this.iconSpace.remove());
      }, _setOption: function _setOption(t, e) {
        if ("label" !== t || e) {
          if (this._super(t, e), "disabled" === t) return this._toggleClass(this.label, null, "ui-state-disabled", e), void (this.element[0].disabled = e);this.refresh();
        }
      }, _updateIcon: function _updateIcon(e) {
        var i = "ui-icon ui-icon-background ";this.options.icon ? (this.icon || (this.icon = t("<span>"), this.iconSpace = t("<span> </span>"), this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")), "checkbox" === this.type ? (i += e ? "ui-icon-check ui-state-checked" : "ui-icon-blank", this._removeClass(this.icon, null, e ? "ui-icon-blank" : "ui-icon-check")) : i += "ui-icon-blank", this._addClass(this.icon, "ui-checkboxradio-icon", i), e || this._removeClass(this.icon, null, "ui-icon-check ui-state-checked"), this.icon.prependTo(this.label).after(this.iconSpace)) : void 0 !== this.icon && (this.icon.remove(), this.iconSpace.remove(), delete this.icon);
      }, _updateLabel: function _updateLabel() {
        var t = this.label.contents().not(this.element[0]);this.icon && (t = t.not(this.icon[0])), this.iconSpace && (t = t.not(this.iconSpace[0])), t.remove(), this.label.append(this.options.label);
      }, refresh: function refresh() {
        var t = this.element[0].checked,
            e = this.element[0].disabled;this._updateIcon(t), this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", t), null !== this.options.label && this._updateLabel(), e !== this.options.disabled && this._setOptions({ disabled: e });
      } }]), t.ui.checkboxradio,
    /*!
     * jQuery UI Button 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.button", { version: "1.12.1", defaultElement: "<button>", options: { classes: { "ui-button": "ui-corner-all" }, disabled: null, icon: null, iconPosition: "beginning", label: null, showLabel: !0 }, _getCreateOptions: function _getCreateOptions() {
        var t,
            e = this._super() || {};return this.isInput = this.element.is("input"), null != (t = this.element[0].disabled) && (e.disabled = t), this.originalLabel = this.isInput ? this.element.val() : this.element.html(), this.originalLabel && (e.label = this.originalLabel), e;
      }, _create: function _create() {
        !this.option.showLabel & !this.options.icon && (this.options.showLabel = !0), null == this.options.disabled && (this.options.disabled = this.element[0].disabled || !1), this.hasTitle = !!this.element.attr("title"), this.options.label && this.options.label !== this.originalLabel && (this.isInput ? this.element.val(this.options.label) : this.element.html(this.options.label)), this._addClass("ui-button", "ui-widget"), this._setOption("disabled", this.options.disabled), this._enhance(), this.element.is("a") && this._on({ keyup: function keyup(e) {
            e.keyCode === t.ui.keyCode.SPACE && (e.preventDefault(), this.element[0].click ? this.element[0].click() : this.element.trigger("click"));
          } });
      }, _enhance: function _enhance() {
        this.element.is("button") || this.element.attr("role", "button"), this.options.icon && (this._updateIcon("icon", this.options.icon), this._updateTooltip());
      }, _updateTooltip: function _updateTooltip() {
        this.title = this.element.attr("title"), this.options.showLabel || this.title || this.element.attr("title", this.options.label);
      }, _updateIcon: function _updateIcon(e, i) {
        var n = "iconPosition" !== e,
            s = n ? this.options.iconPosition : i,
            r = "top" === s || "bottom" === s;this.icon ? n && this._removeClass(this.icon, null, this.options.icon) : (this.icon = t("<span>"), this._addClass(this.icon, "ui-button-icon", "ui-icon"), this.options.showLabel || this._addClass("ui-button-icon-only")), n && this._addClass(this.icon, null, i), this._attachIcon(s), r ? (this._addClass(this.icon, null, "ui-widget-icon-block"), this.iconSpace && this.iconSpace.remove()) : (this.iconSpace || (this.iconSpace = t("<span> </span>"), this._addClass(this.iconSpace, "ui-button-icon-space")), this._removeClass(this.icon, null, "ui-wiget-icon-block"), this._attachIconSpace(s));
      }, _destroy: function _destroy() {
        this.element.removeAttr("role"), this.icon && this.icon.remove(), this.iconSpace && this.iconSpace.remove(), this.hasTitle || this.element.removeAttr("title");
      }, _attachIconSpace: function _attachIconSpace(t) {
        this.icon[/^(?:end|bottom)/.test(t) ? "before" : "after"](this.iconSpace);
      }, _attachIcon: function _attachIcon(t) {
        this.element[/^(?:end|bottom)/.test(t) ? "append" : "prepend"](this.icon);
      }, _setOptions: function _setOptions(t) {
        var e = void 0 === t.showLabel ? this.options.showLabel : t.showLabel,
            i = void 0 === t.icon ? this.options.icon : t.icon;e || i || (t.showLabel = !0), this._super(t);
      }, _setOption: function _setOption(t, e) {
        "icon" === t && (e ? this._updateIcon(t, e) : this.icon && (this.icon.remove(), this.iconSpace && this.iconSpace.remove())), "iconPosition" === t && this._updateIcon(t, e), "showLabel" === t && (this._toggleClass("ui-button-icon-only", null, !e), this._updateTooltip()), "label" === t && (this.isInput ? this.element.val(e) : (this.element.html(e), this.icon && (this._attachIcon(this.options.iconPosition), this._attachIconSpace(this.options.iconPosition)))), this._super(t, e), "disabled" === t && (this._toggleClass(null, "ui-state-disabled", e), this.element[0].disabled = e, e && this.element.blur());
      }, refresh: function refresh() {
        var t = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");t !== this.options.disabled && this._setOptions({ disabled: t }), this._updateTooltip();
      } }), !1 !== t.uiBackCompat && (t.widget("ui.button", t.ui.button, { options: { text: !0, icons: { primary: null, secondary: null } }, _create: function _create() {
        this.options.showLabel && !this.options.text && (this.options.showLabel = this.options.text), !this.options.showLabel && this.options.text && (this.options.text = this.options.showLabel), this.options.icon || !this.options.icons.primary && !this.options.icons.secondary ? this.options.icon && (this.options.icons.primary = this.options.icon) : this.options.icons.primary ? this.options.icon = this.options.icons.primary : (this.options.icon = this.options.icons.secondary, this.options.iconPosition = "end"), this._super();
      }, _setOption: function _setOption(t, e) {
        "text" !== t ? ("showLabel" === t && (this.options.text = e), "icon" === t && (this.options.icons.primary = e), "icons" === t && (e.primary ? (this._super("icon", e.primary), this._super("iconPosition", "beginning")) : e.secondary && (this._super("icon", e.secondary), this._super("iconPosition", "end"))), this._superApply(arguments)) : this._super("showLabel", e);
      } }), t.fn.button = function (e) {
      return function () {
        return !this.length || this.length && "INPUT" !== this[0].tagName || this.length && "INPUT" === this[0].tagName && "checkbox" !== this.attr("type") && "radio" !== this.attr("type") ? e.apply(this, arguments) : (t.ui.checkboxradio || t.error("Checkboxradio widget missing"), 0 === arguments.length ? this.checkboxradio({ icon: !1 }) : this.checkboxradio.apply(this, arguments));
      };
    }(t.fn.button), t.fn.buttonset = function () {
      return t.ui.controlgroup || t.error("Controlgroup widget missing"), "option" === arguments[0] && "items" === arguments[1] && arguments[2] ? this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]]) : "option" === arguments[0] && "items" === arguments[1] ? this.controlgroup.apply(this, [arguments[0], "items.button"]) : ("object" == _typeof(arguments[0]) && arguments[0].items && (arguments[0].items = { button: arguments[0].items }), this.controlgroup.apply(this, arguments));
    }), t.ui.button,
    /*!
     * jQuery UI Datepicker 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.extend(t.ui, { datepicker: { version: "1.12.1" } }), t.extend(d.prototype, { markerClassName: "hasDatepicker", maxRows: 4, _widgetDatepicker: function _widgetDatepicker() {
        return this.dpDiv;
      }, setDefaults: function setDefaults(t) {
        return g(this._defaults, t || {}), this;
      }, _attachDatepicker: function _attachDatepicker(e, i) {
        var n, s, r;n = e.nodeName.toLowerCase(), s = "div" === n || "span" === n, e.id || (this.uuid += 1, e.id = "dp" + this.uuid), (r = this._newInst(t(e), s)).settings = t.extend({}, i || {}), "input" === n ? this._connectDatepicker(e, r) : s && this._inlineDatepicker(e, r);
      }, _newInst: function _newInst(e, i) {
        var n = e[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");return { id: n, input: e, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: i, dpDiv: i ? p(t("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv };
      }, _connectDatepicker: function _connectDatepicker(e, i) {
        var n = t(e);i.append = t([]), i.trigger = t([]), n.hasClass(this.markerClassName) || (this._attachments(n, i), n.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp), this._autoSize(i), t.data(e, "datepicker", i), i.settings.disabled && this._disableDatepicker(e));
      }, _attachments: function _attachments(e, i) {
        var n,
            s,
            r,
            o = this._get(i, "appendText"),
            a = this._get(i, "isRTL");i.append && i.append.remove(), o && (i.append = t("<span class='" + this._appendClass + "'>" + o + "</span>"), e[a ? "before" : "after"](i.append)), e.off("focus", this._showDatepicker), i.trigger && i.trigger.remove(), "focus" !== (n = this._get(i, "showOn")) && "both" !== n || e.on("focus", this._showDatepicker), "button" !== n && "both" !== n || (s = this._get(i, "buttonText"), r = this._get(i, "buttonImage"), i.trigger = t(this._get(i, "buttonImageOnly") ? t("<img/>").addClass(this._triggerClass).attr({ src: r, alt: s, title: s }) : t("<button type='button'></button>").addClass(this._triggerClass).html(r ? t("<img/>").attr({ src: r, alt: s, title: s }) : s)), e[a ? "before" : "after"](i.trigger), i.trigger.on("click", function () {
          return t.datepicker._datepickerShowing && t.datepicker._lastInput === e[0] ? t.datepicker._hideDatepicker() : t.datepicker._datepickerShowing && t.datepicker._lastInput !== e[0] ? (t.datepicker._hideDatepicker(), t.datepicker._showDatepicker(e[0])) : t.datepicker._showDatepicker(e[0]), !1;
        }));
      }, _autoSize: function _autoSize(t) {
        if (this._get(t, "autoSize") && !t.inline) {
          var e,
              i,
              n,
              s,
              r = new Date(2009, 11, 20),
              o = this._get(t, "dateFormat");o.match(/[DM]/) && (e = function e(t) {
            for (i = 0, n = 0, s = 0; s < t.length; s++) {
              t[s].length > i && (i = t[s].length, n = s);
            }return n;
          }, r.setMonth(e(this._get(t, o.match(/MM/) ? "monthNames" : "monthNamesShort"))), r.setDate(e(this._get(t, o.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - r.getDay())), t.input.attr("size", this._formatDate(t, r).length);
        }
      }, _inlineDatepicker: function _inlineDatepicker(e, i) {
        var n = t(e);n.hasClass(this.markerClassName) || (n.addClass(this.markerClassName).append(i.dpDiv), t.data(e, "datepicker", i), this._setDate(i, this._getDefaultDate(i), !0), this._updateDatepicker(i), this._updateAlternate(i), i.settings.disabled && this._disableDatepicker(e), i.dpDiv.css("display", "block"));
      }, _dialogDatepicker: function _dialogDatepicker(e, i, n, s, r) {
        var o,
            a,
            l,
            u,
            c,
            h = this._dialogInst;return h || (this.uuid += 1, o = "dp" + this.uuid, this._dialogInput = t("<input type='text' id='" + o + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.on("keydown", this._doKeyDown), t("body").append(this._dialogInput), (h = this._dialogInst = this._newInst(this._dialogInput, !1)).settings = {}, t.data(this._dialogInput[0], "datepicker", h)), g(h.settings, s || {}), i = i && i.constructor === Date ? this._formatDate(h, i) : i, this._dialogInput.val(i), this._pos = r ? r.length ? r : [r.pageX, r.pageY] : null, this._pos || (a = document.documentElement.clientWidth, l = document.documentElement.clientHeight, u = document.documentElement.scrollLeft || document.body.scrollLeft, c = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [a / 2 - 100 + u, l / 2 - 150 + c]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), h.settings.onSelect = n, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), t.blockUI && t.blockUI(this.dpDiv), t.data(this._dialogInput[0], "datepicker", h), this;
      }, _destroyDatepicker: function _destroyDatepicker(e) {
        var i,
            n = t(e),
            s = t.data(e, "datepicker");n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), t.removeData(e, "datepicker"), "input" === i ? (s.append.remove(), s.trigger.remove(), n.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)) : "div" !== i && "span" !== i || n.removeClass(this.markerClassName).empty(), c === s && (c = null));
      }, _enableDatepicker: function _enableDatepicker(e) {
        var i,
            n,
            s = t(e),
            r = t.data(e, "datepicker");s.hasClass(this.markerClassName) && ("input" === (i = e.nodeName.toLowerCase()) ? (e.disabled = !1, r.trigger.filter("button").each(function () {
          this.disabled = !1;
        }).end().filter("img").css({ opacity: "1.0", cursor: "" })) : "div" !== i && "span" !== i || ((n = s.children("." + this._inlineClass)).children().removeClass("ui-state-disabled"), n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = t.map(this._disabledInputs, function (t) {
          return t === e ? null : t;
        }));
      }, _disableDatepicker: function _disableDatepicker(e) {
        var i,
            n,
            s = t(e),
            r = t.data(e, "datepicker");s.hasClass(this.markerClassName) && ("input" === (i = e.nodeName.toLowerCase()) ? (e.disabled = !0, r.trigger.filter("button").each(function () {
          this.disabled = !0;
        }).end().filter("img").css({ opacity: "0.5", cursor: "default" })) : "div" !== i && "span" !== i || ((n = s.children("." + this._inlineClass)).children().addClass("ui-state-disabled"), n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = t.map(this._disabledInputs, function (t) {
          return t === e ? null : t;
        }), this._disabledInputs[this._disabledInputs.length] = e);
      }, _isDisabledDatepicker: function _isDisabledDatepicker(t) {
        if (!t) return !1;for (var e = 0; e < this._disabledInputs.length; e++) {
          if (this._disabledInputs[e] === t) return !0;
        }return !1;
      }, _getInst: function _getInst(e) {
        try {
          return t.data(e, "datepicker");
        } catch (t) {
          throw "Missing instance data for this datepicker";
        }
      }, _optionDatepicker: function _optionDatepicker(e, i, n) {
        var s,
            r,
            o,
            a,
            l = this._getInst(e);if (2 === arguments.length && "string" == typeof i) return "defaults" === i ? t.extend({}, t.datepicker._defaults) : l ? "all" === i ? t.extend({}, l.settings) : this._get(l, i) : null;s = i || {}, "string" == typeof i && ((s = {})[i] = n), l && (this._curInst === l && this._hideDatepicker(), r = this._getDateDatepicker(e, !0), o = this._getMinMaxDate(l, "min"), a = this._getMinMaxDate(l, "max"), g(l.settings, s), null !== o && void 0 !== s.dateFormat && void 0 === s.minDate && (l.settings.minDate = this._formatDate(l, o)), null !== a && void 0 !== s.dateFormat && void 0 === s.maxDate && (l.settings.maxDate = this._formatDate(l, a)), "disabled" in s && (s.disabled ? this._disableDatepicker(e) : this._enableDatepicker(e)), this._attachments(t(e), l), this._autoSize(l), this._setDate(l, r), this._updateAlternate(l), this._updateDatepicker(l));
      }, _changeDatepicker: function _changeDatepicker(t, e, i) {
        this._optionDatepicker(t, e, i);
      }, _refreshDatepicker: function _refreshDatepicker(t) {
        var e = this._getInst(t);e && this._updateDatepicker(e);
      }, _setDateDatepicker: function _setDateDatepicker(t, e) {
        var i = this._getInst(t);i && (this._setDate(i, e), this._updateDatepicker(i), this._updateAlternate(i));
      }, _getDateDatepicker: function _getDateDatepicker(t, e) {
        var i = this._getInst(t);return i && !i.inline && this._setDateFromField(i, e), i ? this._getDate(i) : null;
      }, _doKeyDown: function _doKeyDown(e) {
        var i,
            n,
            s,
            r = t.datepicker._getInst(e.target),
            o = !0,
            a = r.dpDiv.is(".ui-datepicker-rtl");if (r._keyEvent = !0, t.datepicker._datepickerShowing) switch (e.keyCode) {case 9:
            t.datepicker._hideDatepicker(), o = !1;break;case 13:
            return (s = t("td." + t.datepicker._dayOverClass + ":not(." + t.datepicker._currentClass + ")", r.dpDiv))[0] && t.datepicker._selectDay(e.target, r.selectedMonth, r.selectedYear, s[0]), (i = t.datepicker._get(r, "onSelect")) ? (n = t.datepicker._formatDate(r), i.apply(r.input ? r.input[0] : null, [n, r])) : t.datepicker._hideDatepicker(), !1;case 27:
            t.datepicker._hideDatepicker();break;case 33:
            t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(r, "stepBigMonths") : -t.datepicker._get(r, "stepMonths"), "M");break;case 34:
            t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(r, "stepBigMonths") : +t.datepicker._get(r, "stepMonths"), "M");break;case 35:
            (e.ctrlKey || e.metaKey) && t.datepicker._clearDate(e.target), o = e.ctrlKey || e.metaKey;break;case 36:
            (e.ctrlKey || e.metaKey) && t.datepicker._gotoToday(e.target), o = e.ctrlKey || e.metaKey;break;case 37:
            (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, a ? 1 : -1, "D"), o = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(r, "stepBigMonths") : -t.datepicker._get(r, "stepMonths"), "M");break;case 38:
            (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, -7, "D"), o = e.ctrlKey || e.metaKey;break;case 39:
            (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, a ? -1 : 1, "D"), o = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(r, "stepBigMonths") : +t.datepicker._get(r, "stepMonths"), "M");break;case 40:
            (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, 7, "D"), o = e.ctrlKey || e.metaKey;break;default:
            o = !1;} else 36 === e.keyCode && e.ctrlKey ? t.datepicker._showDatepicker(this) : o = !1;o && (e.preventDefault(), e.stopPropagation());
      }, _doKeyPress: function _doKeyPress(e) {
        var i,
            n,
            s = t.datepicker._getInst(e.target);if (t.datepicker._get(s, "constrainInput")) return i = t.datepicker._possibleChars(t.datepicker._get(s, "dateFormat")), n = String.fromCharCode(null == e.charCode ? e.keyCode : e.charCode), e.ctrlKey || e.metaKey || n < " " || !i || i.indexOf(n) > -1;
      }, _doKeyUp: function _doKeyUp(e) {
        var i = t.datepicker._getInst(e.target);if (i.input.val() !== i.lastVal) try {
          t.datepicker.parseDate(t.datepicker._get(i, "dateFormat"), i.input ? i.input.val() : null, t.datepicker._getFormatConfig(i)) && (t.datepicker._setDateFromField(i), t.datepicker._updateAlternate(i), t.datepicker._updateDatepicker(i));
        } catch (t) {}return !0;
      }, _showDatepicker: function _showDatepicker(e) {
        var i, n, s, r, o, a, l;"input" !== (e = e.target || e).nodeName.toLowerCase() && (e = t("input", e.parentNode)[0]), t.datepicker._isDisabledDatepicker(e) || t.datepicker._lastInput === e || (i = t.datepicker._getInst(e), t.datepicker._curInst && t.datepicker._curInst !== i && (t.datepicker._curInst.dpDiv.stop(!0, !0), i && t.datepicker._datepickerShowing && t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])), n = t.datepicker._get(i, "beforeShow"), !1 !== (s = n ? n.apply(e, [e, i]) : {}) && (g(i.settings, s), i.lastVal = null, t.datepicker._lastInput = e, t.datepicker._setDateFromField(i), t.datepicker._inDialog && (e.value = ""), t.datepicker._pos || (t.datepicker._pos = t.datepicker._findPos(e), t.datepicker._pos[1] += e.offsetHeight), r = !1, t(e).parents().each(function () {
          return !(r |= "fixed" === t(this).css("position"));
        }), o = { left: t.datepicker._pos[0], top: t.datepicker._pos[1] }, t.datepicker._pos = null, i.dpDiv.empty(), i.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" }), t.datepicker._updateDatepicker(i), o = t.datepicker._checkOffset(i, o, r), i.dpDiv.css({ position: t.datepicker._inDialog && t.blockUI ? "static" : r ? "fixed" : "absolute", display: "none", left: o.left + "px", top: o.top + "px" }), i.inline || (a = t.datepicker._get(i, "showAnim"), l = t.datepicker._get(i, "duration"), i.dpDiv.css("z-index", function (t) {
          for (var e, i; t.length && t[0] !== document;) {
            if (("absolute" === (e = t.css("position")) || "relative" === e || "fixed" === e) && (i = parseInt(t.css("zIndex"), 10), !isNaN(i) && 0 !== i)) return i;t = t.parent();
          }return 0;
        }(t(e)) + 1), t.datepicker._datepickerShowing = !0, t.effects && t.effects.effect[a] ? i.dpDiv.show(a, t.datepicker._get(i, "showOptions"), l) : i.dpDiv[a || "show"](a ? l : null), t.datepicker._shouldFocusInput(i) && i.input.trigger("focus"), t.datepicker._curInst = i)));
      }, _updateDatepicker: function _updateDatepicker(e) {
        this.maxRows = 4, c = e, e.dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e);var i,
            n = this._getNumberOfMonths(e),
            s = n[1],
            r = e.dpDiv.find("." + this._dayOverClass + " a");r.length > 0 && f.apply(r.get(0)), e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), s > 1 && e.dpDiv.addClass("ui-datepicker-multi-" + s).css("width", 17 * s + "em"), e.dpDiv[(1 !== n[0] || 1 !== n[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), e.dpDiv[(this._get(e, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), e === t.datepicker._curInst && t.datepicker._datepickerShowing && t.datepicker._shouldFocusInput(e) && e.input.trigger("focus"), e.yearshtml && (i = e.yearshtml, setTimeout(function () {
          i === e.yearshtml && e.yearshtml && e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml), i = e.yearshtml = null;
        }, 0));
      }, _shouldFocusInput: function _shouldFocusInput(t) {
        return t.input && t.input.is(":visible") && !t.input.is(":disabled") && !t.input.is(":focus");
      }, _checkOffset: function _checkOffset(e, i, n) {
        var s = e.dpDiv.outerWidth(),
            r = e.dpDiv.outerHeight(),
            o = e.input ? e.input.outerWidth() : 0,
            a = e.input ? e.input.outerHeight() : 0,
            l = document.documentElement.clientWidth + (n ? 0 : t(document).scrollLeft()),
            u = document.documentElement.clientHeight + (n ? 0 : t(document).scrollTop());return i.left -= this._get(e, "isRTL") ? s - o : 0, i.left -= n && i.left === e.input.offset().left ? t(document).scrollLeft() : 0, i.top -= n && i.top === e.input.offset().top + a ? t(document).scrollTop() : 0, i.left -= Math.min(i.left, i.left + s > l && l > s ? Math.abs(i.left + s - l) : 0), i.top -= Math.min(i.top, i.top + r > u && u > r ? Math.abs(r + a) : 0), i;
      }, _findPos: function _findPos(e) {
        for (var i, n = this._getInst(e), s = this._get(n, "isRTL"); e && ("hidden" === e.type || 1 !== e.nodeType || t.expr.filters.hidden(e));) {
          e = e[s ? "previousSibling" : "nextSibling"];
        }return [(i = t(e).offset()).left, i.top];
      }, _hideDatepicker: function _hideDatepicker(e) {
        var i,
            n,
            s,
            r,
            o = this._curInst;!o || e && o !== t.data(e, "datepicker") || this._datepickerShowing && (i = this._get(o, "showAnim"), n = this._get(o, "duration"), s = function s() {
          t.datepicker._tidyDialog(o);
        }, t.effects && (t.effects.effect[i] || t.effects[i]) ? o.dpDiv.hide(i, t.datepicker._get(o, "showOptions"), n, s) : o.dpDiv["slideDown" === i ? "slideUp" : "fadeIn" === i ? "fadeOut" : "hide"](i ? n : null, s), i || s(), this._datepickerShowing = !1, (r = this._get(o, "onClose")) && r.apply(o.input ? o.input[0] : null, [o.input ? o.input.val() : "", o]), this._lastInput = null, this._inDialog && (this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" }), t.blockUI && (t.unblockUI(), t("body").append(this.dpDiv))), this._inDialog = !1);
      }, _tidyDialog: function _tidyDialog(t) {
        t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
      }, _checkExternalClick: function _checkExternalClick(e) {
        if (t.datepicker._curInst) {
          var i = t(e.target),
              n = t.datepicker._getInst(i[0]);(i[0].id === t.datepicker._mainDivId || 0 !== i.parents("#" + t.datepicker._mainDivId).length || i.hasClass(t.datepicker.markerClassName) || i.closest("." + t.datepicker._triggerClass).length || !t.datepicker._datepickerShowing || t.datepicker._inDialog && t.blockUI) && (!i.hasClass(t.datepicker.markerClassName) || t.datepicker._curInst === n) || t.datepicker._hideDatepicker();
        }
      }, _adjustDate: function _adjustDate(e, i, n) {
        var s = t(e),
            r = this._getInst(s[0]);this._isDisabledDatepicker(s[0]) || (this._adjustInstDate(r, i + ("M" === n ? this._get(r, "showCurrentAtPos") : 0), n), this._updateDatepicker(r));
      }, _gotoToday: function _gotoToday(e) {
        var i,
            n = t(e),
            s = this._getInst(n[0]);this._get(s, "gotoCurrent") && s.currentDay ? (s.selectedDay = s.currentDay, s.drawMonth = s.selectedMonth = s.currentMonth, s.drawYear = s.selectedYear = s.currentYear) : (i = new Date(), s.selectedDay = i.getDate(), s.drawMonth = s.selectedMonth = i.getMonth(), s.drawYear = s.selectedYear = i.getFullYear()), this._notifyChange(s), this._adjustDate(n);
      }, _selectMonthYear: function _selectMonthYear(e, i, n) {
        var s = t(e),
            r = this._getInst(s[0]);r["selected" + ("M" === n ? "Month" : "Year")] = r["draw" + ("M" === n ? "Month" : "Year")] = parseInt(i.options[i.selectedIndex].value, 10), this._notifyChange(r), this._adjustDate(s);
      }, _selectDay: function _selectDay(e, i, n, s) {
        var r,
            o = t(e);t(s).hasClass(this._unselectableClass) || this._isDisabledDatepicker(o[0]) || ((r = this._getInst(o[0])).selectedDay = r.currentDay = t("a", s).html(), r.selectedMonth = r.currentMonth = i, r.selectedYear = r.currentYear = n, this._selectDate(e, this._formatDate(r, r.currentDay, r.currentMonth, r.currentYear)));
      }, _clearDate: function _clearDate(e) {
        var i = t(e);this._selectDate(i, "");
      }, _selectDate: function _selectDate(e, i) {
        var n,
            s = t(e),
            r = this._getInst(s[0]);i = null != i ? i : this._formatDate(r), r.input && r.input.val(i), this._updateAlternate(r), (n = this._get(r, "onSelect")) ? n.apply(r.input ? r.input[0] : null, [i, r]) : r.input && r.input.trigger("change"), r.inline ? this._updateDatepicker(r) : (this._hideDatepicker(), this._lastInput = r.input[0], "object" != _typeof(r.input[0]) && r.input.trigger("focus"), this._lastInput = null);
      }, _updateAlternate: function _updateAlternate(e) {
        var i,
            n,
            s,
            r = this._get(e, "altField");r && (i = this._get(e, "altFormat") || this._get(e, "dateFormat"), n = this._getDate(e), s = this.formatDate(i, n, this._getFormatConfig(e)), t(r).val(s));
      }, noWeekends: function noWeekends(t) {
        var e = t.getDay();return [e > 0 && e < 6, ""];
      }, iso8601Week: function iso8601Week(t) {
        var e,
            i = new Date(t.getTime());return i.setDate(i.getDate() + 4 - (i.getDay() || 7)), e = i.getTime(), i.setMonth(0), i.setDate(1), Math.floor(Math.round((e - i) / 864e5) / 7) + 1;
      }, parseDate: function parseDate(e, i, n) {
        if (null == e || null == i) throw "Invalid arguments";if ("" === (i = "object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) ? i.toString() : i + "")) return null;var s,
            r,
            o,
            a,
            l = 0,
            u = (n ? n.shortYearCutoff : null) || this._defaults.shortYearCutoff,
            c = "string" != typeof u ? u : new Date().getFullYear() % 100 + parseInt(u, 10),
            h = (n ? n.dayNamesShort : null) || this._defaults.dayNamesShort,
            d = (n ? n.dayNames : null) || this._defaults.dayNames,
            p = (n ? n.monthNamesShort : null) || this._defaults.monthNamesShort,
            f = (n ? n.monthNames : null) || this._defaults.monthNames,
            g = -1,
            m = -1,
            v = -1,
            _ = -1,
            b = !1,
            y = function y(t) {
          var i = s + 1 < e.length && e.charAt(s + 1) === t;return i && s++, i;
        },
            k = function k(t) {
          var e = y(t),
              n = "@" === t ? 14 : "!" === t ? 20 : "y" === t && e ? 4 : "o" === t ? 3 : 2,
              s = "y" === t ? n : 1,
              r = new RegExp("^\\d{" + s + "," + n + "}"),
              o = i.substring(l).match(r);if (!o) throw "Missing number at position " + l;return l += o[0].length, parseInt(o[0], 10);
        },
            w = function w(e, n, s) {
          var r = -1,
              o = t.map(y(e) ? s : n, function (t, e) {
            return [[e, t]];
          }).sort(function (t, e) {
            return -(t[1].length - e[1].length);
          });if (t.each(o, function (t, e) {
            var n = e[1];if (i.substr(l, n.length).toLowerCase() === n.toLowerCase()) return r = e[0], l += n.length, !1;
          }), -1 !== r) return r + 1;throw "Unknown name at position " + l;
        },
            x = function x() {
          if (i.charAt(l) !== e.charAt(s)) throw "Unexpected literal at position " + l;l++;
        };for (s = 0; s < e.length; s++) {
          if (b) "'" !== e.charAt(s) || y("'") ? x() : b = !1;else switch (e.charAt(s)) {case "d":
              v = k("d");break;case "D":
              w("D", h, d);break;case "o":
              _ = k("o");break;case "m":
              m = k("m");break;case "M":
              m = w("M", p, f);break;case "y":
              g = k("y");break;case "@":
              a = new Date(k("@")), g = a.getFullYear(), m = a.getMonth() + 1, v = a.getDate();break;case "!":
              a = new Date((k("!") - this._ticksTo1970) / 1e4), g = a.getFullYear(), m = a.getMonth() + 1, v = a.getDate();break;case "'":
              y("'") ? x() : b = !0;break;default:
              x();}
        }if (l < i.length && (o = i.substr(l), !/^\s+/.test(o))) throw "Extra/unparsed characters found in date: " + o;if (-1 === g ? g = new Date().getFullYear() : g < 100 && (g += new Date().getFullYear() - new Date().getFullYear() % 100 + (g <= c ? 0 : -100)), _ > -1) for (m = 1, v = _; r = this._getDaysInMonth(g, m - 1), !(v <= r);) {
          m++, v -= r;
        }if ((a = this._daylightSavingAdjust(new Date(g, m - 1, v))).getFullYear() !== g || a.getMonth() + 1 !== m || a.getDate() !== v) throw "Invalid date";return a;
      }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7, formatDate: function formatDate(t, e, i) {
        if (!e) return "";var n,
            s = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort,
            r = (i ? i.dayNames : null) || this._defaults.dayNames,
            o = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort,
            a = (i ? i.monthNames : null) || this._defaults.monthNames,
            l = function l(e) {
          var i = n + 1 < t.length && t.charAt(n + 1) === e;return i && n++, i;
        },
            u = function u(t, e, i) {
          var n = "" + e;if (l(t)) for (; n.length < i;) {
            n = "0" + n;
          }return n;
        },
            c = function c(t, e, i, n) {
          return l(t) ? n[e] : i[e];
        },
            h = "",
            d = !1;if (e) for (n = 0; n < t.length; n++) {
          if (d) "'" !== t.charAt(n) || l("'") ? h += t.charAt(n) : d = !1;else switch (t.charAt(n)) {case "d":
              h += u("d", e.getDate(), 2);break;case "D":
              h += c("D", e.getDay(), s, r);break;case "o":
              h += u("o", Math.round((new Date(e.getFullYear(), e.getMonth(), e.getDate()).getTime() - new Date(e.getFullYear(), 0, 0).getTime()) / 864e5), 3);break;case "m":
              h += u("m", e.getMonth() + 1, 2);break;case "M":
              h += c("M", e.getMonth(), o, a);break;case "y":
              h += l("y") ? e.getFullYear() : (e.getFullYear() % 100 < 10 ? "0" : "") + e.getFullYear() % 100;break;case "@":
              h += e.getTime();break;case "!":
              h += 1e4 * e.getTime() + this._ticksTo1970;break;case "'":
              l("'") ? h += "'" : d = !0;break;default:
              h += t.charAt(n);}
        }return h;
      }, _possibleChars: function _possibleChars(t) {
        var e,
            i = "",
            n = !1,
            s = function s(i) {
          var n = e + 1 < t.length && t.charAt(e + 1) === i;return n && e++, n;
        };for (e = 0; e < t.length; e++) {
          if (n) "'" !== t.charAt(e) || s("'") ? i += t.charAt(e) : n = !1;else switch (t.charAt(e)) {case "d":case "m":case "y":case "@":
              i += "0123456789";break;case "D":case "M":
              return null;case "'":
              s("'") ? i += "'" : n = !0;break;default:
              i += t.charAt(e);}
        }return i;
      }, _get: function _get(t, e) {
        return void 0 !== t.settings[e] ? t.settings[e] : this._defaults[e];
      }, _setDateFromField: function _setDateFromField(t, e) {
        if (t.input.val() !== t.lastVal) {
          var i = this._get(t, "dateFormat"),
              n = t.lastVal = t.input ? t.input.val() : null,
              s = this._getDefaultDate(t),
              r = s,
              o = this._getFormatConfig(t);try {
            r = this.parseDate(i, n, o) || s;
          } catch (t) {
            n = e ? "" : n;
          }t.selectedDay = r.getDate(), t.drawMonth = t.selectedMonth = r.getMonth(), t.drawYear = t.selectedYear = r.getFullYear(), t.currentDay = n ? r.getDate() : 0, t.currentMonth = n ? r.getMonth() : 0, t.currentYear = n ? r.getFullYear() : 0, this._adjustInstDate(t);
        }
      }, _getDefaultDate: function _getDefaultDate(t) {
        return this._restrictMinMax(t, this._determineDate(t, this._get(t, "defaultDate"), new Date()));
      }, _determineDate: function _determineDate(e, i, n) {
        var s = null == i || "" === i ? n : "string" == typeof i ? function (i) {
          try {
            return t.datepicker.parseDate(t.datepicker._get(e, "dateFormat"), i, t.datepicker._getFormatConfig(e));
          } catch (t) {}for (var n = (i.toLowerCase().match(/^c/) ? t.datepicker._getDate(e) : null) || new Date(), s = n.getFullYear(), r = n.getMonth(), o = n.getDate(), a = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, l = a.exec(i); l;) {
            switch (l[2] || "d") {case "d":case "D":
                o += parseInt(l[1], 10);break;case "w":case "W":
                o += 7 * parseInt(l[1], 10);break;case "m":case "M":
                r += parseInt(l[1], 10), o = Math.min(o, t.datepicker._getDaysInMonth(s, r));break;case "y":case "Y":
                s += parseInt(l[1], 10), o = Math.min(o, t.datepicker._getDaysInMonth(s, r));}l = a.exec(i);
          }return new Date(s, r, o);
        }(i) : "number" == typeof i ? isNaN(i) ? n : function (t) {
          var e = new Date();return e.setDate(e.getDate() + t), e;
        }(i) : new Date(i.getTime());return (s = s && "Invalid Date" === s.toString() ? n : s) && (s.setHours(0), s.setMinutes(0), s.setSeconds(0), s.setMilliseconds(0)), this._daylightSavingAdjust(s);
      }, _daylightSavingAdjust: function _daylightSavingAdjust(t) {
        return t ? (t.setHours(t.getHours() > 12 ? t.getHours() + 2 : 0), t) : null;
      }, _setDate: function _setDate(t, e, i) {
        var n = !e,
            s = t.selectedMonth,
            r = t.selectedYear,
            o = this._restrictMinMax(t, this._determineDate(t, e, new Date()));t.selectedDay = t.currentDay = o.getDate(), t.drawMonth = t.selectedMonth = t.currentMonth = o.getMonth(), t.drawYear = t.selectedYear = t.currentYear = o.getFullYear(), s === t.selectedMonth && r === t.selectedYear || i || this._notifyChange(t), this._adjustInstDate(t), t.input && t.input.val(n ? "" : this._formatDate(t));
      }, _getDate: function _getDate(t) {
        var e = !t.currentYear || t.input && "" === t.input.val() ? null : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));return e;
      }, _attachHandlers: function _attachHandlers(e) {
        var i = this._get(e, "stepMonths"),
            n = "#" + e.id.replace(/\\\\/g, "\\");e.dpDiv.find("[data-handler]").map(function () {
          var e = { prev: function prev() {
              t.datepicker._adjustDate(n, -i, "M");
            }, next: function next() {
              t.datepicker._adjustDate(n, +i, "M");
            }, hide: function hide() {
              t.datepicker._hideDatepicker();
            }, today: function today() {
              t.datepicker._gotoToday(n);
            }, selectDay: function selectDay() {
              return t.datepicker._selectDay(n, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1;
            }, selectMonth: function selectMonth() {
              return t.datepicker._selectMonthYear(n, this, "M"), !1;
            }, selectYear: function selectYear() {
              return t.datepicker._selectMonthYear(n, this, "Y"), !1;
            } };t(this).on(this.getAttribute("data-event"), e[this.getAttribute("data-handler")]);
        });
      }, _generateHTML: function _generateHTML(t) {
        var e,
            i,
            n,
            s,
            r,
            o,
            a,
            l,
            u,
            c,
            h,
            d,
            p,
            f,
            g,
            m,
            v,
            _,
            b,
            y,
            k,
            w,
            x,
            C,
            D,
            S,
            T,
            I,
            A,
            j,
            M,
            P,
            E,
            O,
            H,
            N,
            B,
            F,
            L,
            z = new Date(),
            W = this._daylightSavingAdjust(new Date(z.getFullYear(), z.getMonth(), z.getDate())),
            R = this._get(t, "isRTL"),
            $ = this._get(t, "showButtonPanel"),
            q = this._get(t, "hideIfNoPrevNext"),
            U = this._get(t, "navigationAsDateFormat"),
            K = this._getNumberOfMonths(t),
            Y = this._get(t, "showCurrentAtPos"),
            V = this._get(t, "stepMonths"),
            G = 1 !== K[0] || 1 !== K[1],
            X = this._daylightSavingAdjust(t.currentDay ? new Date(t.currentYear, t.currentMonth, t.currentDay) : new Date(9999, 9, 9)),
            J = this._getMinMaxDate(t, "min"),
            Z = this._getMinMaxDate(t, "max"),
            Q = t.drawMonth - Y,
            tt = t.drawYear;if (Q < 0 && (Q += 12, tt--), Z) for (e = this._daylightSavingAdjust(new Date(Z.getFullYear(), Z.getMonth() - K[0] * K[1] + 1, Z.getDate())), e = J && e < J ? J : e; this._daylightSavingAdjust(new Date(tt, Q, 1)) > e;) {
          --Q < 0 && (Q = 11, tt--);
        }for (t.drawMonth = Q, t.drawYear = tt, i = this._get(t, "prevText"), i = U ? this.formatDate(i, this._daylightSavingAdjust(new Date(tt, Q - V, 1)), this._getFormatConfig(t)) : i, n = this._canAdjustMonth(t, -1, tt, Q) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (R ? "e" : "w") + "'>" + i + "</span></a>" : q ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (R ? "e" : "w") + "'>" + i + "</span></a>", s = this._get(t, "nextText"), s = U ? this.formatDate(s, this._daylightSavingAdjust(new Date(tt, Q + V, 1)), this._getFormatConfig(t)) : s, r = this._canAdjustMonth(t, 1, tt, Q) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + s + "'><span class='ui-icon ui-icon-circle-triangle-" + (R ? "w" : "e") + "'>" + s + "</span></a>" : q ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + s + "'><span class='ui-icon ui-icon-circle-triangle-" + (R ? "w" : "e") + "'>" + s + "</span></a>", o = this._get(t, "currentText"), a = this._get(t, "gotoCurrent") && t.currentDay ? X : W, o = U ? this.formatDate(o, a, this._getFormatConfig(t)) : o, l = t.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(t, "closeText") + "</button>", u = $ ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (R ? l : "") + (this._isInRange(t, a) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + o + "</button>" : "") + (R ? "" : l) + "</div>" : "", c = parseInt(this._get(t, "firstDay"), 10), c = isNaN(c) ? 0 : c, h = this._get(t, "showWeek"), d = this._get(t, "dayNames"), p = this._get(t, "dayNamesMin"), f = this._get(t, "monthNames"), g = this._get(t, "monthNamesShort"), m = this._get(t, "beforeShowDay"), v = this._get(t, "showOtherMonths"), _ = this._get(t, "selectOtherMonths"), b = this._getDefaultDate(t), y = "", w = 0; w < K[0]; w++) {
          for (x = "", this.maxRows = 4, C = 0; C < K[1]; C++) {
            if (D = this._daylightSavingAdjust(new Date(tt, Q, t.selectedDay)), S = " ui-corner-all", T = "", G) {
              if (T += "<div class='ui-datepicker-group", K[1] > 1) switch (C) {case 0:
                  T += " ui-datepicker-group-first", S = " ui-corner-" + (R ? "right" : "left");break;case K[1] - 1:
                  T += " ui-datepicker-group-last", S = " ui-corner-" + (R ? "left" : "right");break;default:
                  T += " ui-datepicker-group-middle", S = "";}T += "'>";
            }for (T += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + S + "'>" + (/all|left/.test(S) && 0 === w ? R ? r : n : "") + (/all|right/.test(S) && 0 === w ? R ? n : r : "") + this._generateMonthYearHeader(t, Q, tt, J, Z, w > 0 || C > 0, f, g) + "</div><table class='ui-datepicker-calendar'><thead><tr>", I = h ? "<th class='ui-datepicker-week-col'>" + this._get(t, "weekHeader") + "</th>" : "", k = 0; k < 7; k++) {
              I += "<th scope='col'" + ((k + c + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + d[A = (k + c) % 7] + "'>" + p[A] + "</span></th>";
            }for (T += I + "</tr></thead><tbody>", j = this._getDaysInMonth(tt, Q), tt === t.selectedYear && Q === t.selectedMonth && (t.selectedDay = Math.min(t.selectedDay, j)), M = (this._getFirstDayOfMonth(tt, Q) - c + 7) % 7, P = Math.ceil((M + j) / 7), E = G && this.maxRows > P ? this.maxRows : P, this.maxRows = E, O = this._daylightSavingAdjust(new Date(tt, Q, 1 - M)), H = 0; H < E; H++) {
              for (T += "<tr>", N = h ? "<td class='ui-datepicker-week-col'>" + this._get(t, "calculateWeek")(O) + "</td>" : "", k = 0; k < 7; k++) {
                B = m ? m.apply(t.input ? t.input[0] : null, [O]) : [!0, ""], F = O.getMonth() !== Q, L = F && !_ || !B[0] || J && O < J || Z && O > Z, N += "<td class='" + ((k + c + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (F ? " ui-datepicker-other-month" : "") + (O.getTime() === D.getTime() && Q === t.selectedMonth && t._keyEvent || b.getTime() === O.getTime() && b.getTime() === D.getTime() ? " " + this._dayOverClass : "") + (L ? " " + this._unselectableClass + " ui-state-disabled" : "") + (F && !v ? "" : " " + B[1] + (O.getTime() === X.getTime() ? " " + this._currentClass : "") + (O.getTime() === W.getTime() ? " ui-datepicker-today" : "")) + "'" + (F && !v || !B[2] ? "" : " title='" + B[2].replace(/'/g, "&#39;") + "'") + (L ? "" : " data-handler='selectDay' data-event='click' data-month='" + O.getMonth() + "' data-year='" + O.getFullYear() + "'") + ">" + (F && !v ? "&#xa0;" : L ? "<span class='ui-state-default'>" + O.getDate() + "</span>" : "<a class='ui-state-default" + (O.getTime() === W.getTime() ? " ui-state-highlight" : "") + (O.getTime() === X.getTime() ? " ui-state-active" : "") + (F ? " ui-priority-secondary" : "") + "' href='#'>" + O.getDate() + "</a>") + "</td>", O.setDate(O.getDate() + 1), O = this._daylightSavingAdjust(O);
              }T += N + "</tr>";
            }++Q > 11 && (Q = 0, tt++), T += "</tbody></table>" + (G ? "</div>" + (K[0] > 0 && C === K[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), x += T;
          }y += x;
        }return y += u, t._keyEvent = !1, y;
      }, _generateMonthYearHeader: function _generateMonthYearHeader(t, e, i, n, s, r, o, a) {
        var l,
            u,
            c,
            h,
            d,
            p,
            f,
            g,
            m = this._get(t, "changeMonth"),
            v = this._get(t, "changeYear"),
            _ = this._get(t, "showMonthAfterYear"),
            b = "<div class='ui-datepicker-title'>",
            y = "";if (r || !m) y += "<span class='ui-datepicker-month'>" + o[e] + "</span>";else {
          for (l = n && n.getFullYear() === i, u = s && s.getFullYear() === i, y += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", c = 0; c < 12; c++) {
            (!l || c >= n.getMonth()) && (!u || c <= s.getMonth()) && (y += "<option value='" + c + "'" + (c === e ? " selected='selected'" : "") + ">" + a[c] + "</option>");
          }y += "</select>";
        }if (_ || (b += y + (!r && m && v ? "" : "&#xa0;")), !t.yearshtml) if (t.yearshtml = "", r || !v) b += "<span class='ui-datepicker-year'>" + i + "</span>";else {
          for (h = this._get(t, "yearRange").split(":"), d = new Date().getFullYear(), f = (p = function p(t) {
            var e = t.match(/c[+\-].*/) ? i + parseInt(t.substring(1), 10) : t.match(/[+\-].*/) ? d + parseInt(t, 10) : parseInt(t, 10);return isNaN(e) ? d : e;
          })(h[0]), g = Math.max(f, p(h[1] || "")), f = n ? Math.max(f, n.getFullYear()) : f, g = s ? Math.min(g, s.getFullYear()) : g, t.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; f <= g; f++) {
            t.yearshtml += "<option value='" + f + "'" + (f === i ? " selected='selected'" : "") + ">" + f + "</option>";
          }t.yearshtml += "</select>", b += t.yearshtml, t.yearshtml = null;
        }return b += this._get(t, "yearSuffix"), _ && (b += (!r && m && v ? "" : "&#xa0;") + y), b += "</div>";
      }, _adjustInstDate: function _adjustInstDate(t, e, i) {
        var n = t.selectedYear + ("Y" === i ? e : 0),
            s = t.selectedMonth + ("M" === i ? e : 0),
            r = Math.min(t.selectedDay, this._getDaysInMonth(n, s)) + ("D" === i ? e : 0),
            o = this._restrictMinMax(t, this._daylightSavingAdjust(new Date(n, s, r)));t.selectedDay = o.getDate(), t.drawMonth = t.selectedMonth = o.getMonth(), t.drawYear = t.selectedYear = o.getFullYear(), "M" !== i && "Y" !== i || this._notifyChange(t);
      }, _restrictMinMax: function _restrictMinMax(t, e) {
        var i = this._getMinMaxDate(t, "min"),
            n = this._getMinMaxDate(t, "max"),
            s = i && e < i ? i : e;return n && s > n ? n : s;
      }, _notifyChange: function _notifyChange(t) {
        var e = this._get(t, "onChangeMonthYear");e && e.apply(t.input ? t.input[0] : null, [t.selectedYear, t.selectedMonth + 1, t]);
      }, _getNumberOfMonths: function _getNumberOfMonths(t) {
        var e = this._get(t, "numberOfMonths");return null == e ? [1, 1] : "number" == typeof e ? [1, e] : e;
      }, _getMinMaxDate: function _getMinMaxDate(t, e) {
        return this._determineDate(t, this._get(t, e + "Date"), null);
      }, _getDaysInMonth: function _getDaysInMonth(t, e) {
        return 32 - this._daylightSavingAdjust(new Date(t, e, 32)).getDate();
      }, _getFirstDayOfMonth: function _getFirstDayOfMonth(t, e) {
        return new Date(t, e, 1).getDay();
      }, _canAdjustMonth: function _canAdjustMonth(t, e, i, n) {
        var s = this._getNumberOfMonths(t),
            r = this._daylightSavingAdjust(new Date(i, n + (e < 0 ? e : s[0] * s[1]), 1));return e < 0 && r.setDate(this._getDaysInMonth(r.getFullYear(), r.getMonth())), this._isInRange(t, r);
      }, _isInRange: function _isInRange(t, e) {
        var i,
            n,
            s = this._getMinMaxDate(t, "min"),
            r = this._getMinMaxDate(t, "max"),
            o = null,
            a = null,
            l = this._get(t, "yearRange");return l && (i = l.split(":"), n = new Date().getFullYear(), o = parseInt(i[0], 10), a = parseInt(i[1], 10), i[0].match(/[+\-].*/) && (o += n), i[1].match(/[+\-].*/) && (a += n)), (!s || e.getTime() >= s.getTime()) && (!r || e.getTime() <= r.getTime()) && (!o || e.getFullYear() >= o) && (!a || e.getFullYear() <= a);
      }, _getFormatConfig: function _getFormatConfig(t) {
        var e = this._get(t, "shortYearCutoff");return { shortYearCutoff: e = "string" != typeof e ? e : new Date().getFullYear() % 100 + parseInt(e, 10), dayNamesShort: this._get(t, "dayNamesShort"), dayNames: this._get(t, "dayNames"), monthNamesShort: this._get(t, "monthNamesShort"), monthNames: this._get(t, "monthNames") };
      }, _formatDate: function _formatDate(t, e, i, n) {
        e || (t.currentDay = t.selectedDay, t.currentMonth = t.selectedMonth, t.currentYear = t.selectedYear);var s = e ? "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? e : this._daylightSavingAdjust(new Date(n, i, e)) : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));return this.formatDate(this._get(t, "dateFormat"), s, this._getFormatConfig(t));
      } }), t.fn.datepicker = function (e) {
      if (!this.length) return this;t.datepicker.initialized || (t(document).on("mousedown", t.datepicker._checkExternalClick), t.datepicker.initialized = !0), 0 === t("#" + t.datepicker._mainDivId).length && t("body").append(t.datepicker.dpDiv);var i = Array.prototype.slice.call(arguments, 1);return "string" != typeof e || "isDisabled" !== e && "getDate" !== e && "widget" !== e ? "option" === e && 2 === arguments.length && "string" == typeof arguments[1] ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i)) : this.each(function () {
        "string" == typeof e ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this].concat(i)) : t.datepicker._attachDatepicker(this, e);
      }) : t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i));
    }, t.datepicker = new d(), t.datepicker.initialized = !1, t.datepicker.uuid = new Date().getTime(), t.datepicker.version = "1.12.1", t.datepicker, t.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var m = !1;t(document).on("mouseup", function () {
      m = !1;
    }), t.widget("ui.mouse", { version: "1.12.1", options: { cancel: "input, textarea, button, select, option", distance: 1, delay: 0 }, _mouseInit: function _mouseInit() {
        var e = this;this.element.on("mousedown." + this.widgetName, function (t) {
          return e._mouseDown(t);
        }).on("click." + this.widgetName, function (i) {
          if (!0 === t.data(i.target, e.widgetName + ".preventClickEvent")) return t.removeData(i.target, e.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1;
        }), this.started = !1;
      }, _mouseDestroy: function _mouseDestroy() {
        this.element.off("." + this.widgetName), this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
      }, _mouseDown: function _mouseDown(e) {
        if (!m) {
          this._mouseMoved = !1, this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e;var i = this,
              n = 1 === e.which,
              s = !("string" != typeof this.options.cancel || !e.target.nodeName) && t(e.target).closest(this.options.cancel).length;return !(n && !s && this._mouseCapture(e) && (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
            i.mouseDelayMet = !0;
          }, this.options.delay)), this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = !1 !== this._mouseStart(e), !this._mouseStarted) ? (e.preventDefault(), 0) : (!0 === t.data(e.target, this.widgetName + ".preventClickEvent") && t.removeData(e.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (t) {
            return i._mouseMove(t);
          }, this._mouseUpDelegate = function (t) {
            return i._mouseUp(t);
          }, this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate), e.preventDefault(), m = !0, 0)));
        }
      }, _mouseMove: function _mouseMove(e) {
        if (this._mouseMoved) {
          if (t.ui.ie && (!document.documentMode || document.documentMode < 9) && !e.button) return this._mouseUp(e);if (!e.which) if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0;else if (!this.ignoreMissingWhich) return this._mouseUp(e);
        }return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, e), this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted);
      }, _mouseUp: function _mouseUp(e) {
        this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, e.target === this._mouseDownEvent.target && t.data(e.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(e)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, m = !1, e.preventDefault();
      }, _mouseDistanceMet: function _mouseDistanceMet(t) {
        return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance;
      }, _mouseDelayMet: function _mouseDelayMet() {
        return this.mouseDelayMet;
      }, _mouseStart: function _mouseStart() {}, _mouseDrag: function _mouseDrag() {}, _mouseStop: function _mouseStop() {}, _mouseCapture: function _mouseCapture() {
        return !0;
      } }), t.ui.plugin = { add: function add(e, i, n) {
        var s,
            r = t.ui[e].prototype;for (s in n) {
          r.plugins[s] = r.plugins[s] || [], r.plugins[s].push([i, n[s]]);
        }
      }, call: function call(t, e, i, n) {
        var s,
            r = t.plugins[e];if (r && (n || t.element[0].parentNode && 11 !== t.element[0].parentNode.nodeType)) for (s = 0; s < r.length; s++) {
          t.options[r[s][0]] && r[s][1].apply(t.element, i);
        }
      } }, t.ui.safeBlur = function (e) {
      e && "body" !== e.nodeName.toLowerCase() && t(e).trigger("blur");
    },
    /*!
     * jQuery UI Draggable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.draggable", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "drag", options: { addClasses: !0, appendTo: "parent", axis: !1, connectToSortable: !1, containment: !1, cursor: "auto", cursorAt: !1, grid: !1, handle: !1, helper: "original", iframeFix: !1, opacity: !1, refreshPositions: !1, revert: !1, revertDuration: 500, scope: "default", scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, snap: !1, snapMode: "both", snapTolerance: 20, stack: !1, zIndex: !1, drag: null, start: null, stop: null }, _create: function _create() {
        "original" === this.options.helper && this._setPositionRelative(), this.options.addClasses && this._addClass("ui-draggable"), this._setHandleClassName(), this._mouseInit();
      }, _setOption: function _setOption(t, e) {
        this._super(t, e), "handle" === t && (this._removeHandleClassName(), this._setHandleClassName());
      }, _destroy: function _destroy() {
        (this.helper || this.element).is(".ui-draggable-dragging") ? this.destroyOnClear = !0 : (this._removeHandleClassName(), this._mouseDestroy());
      }, _mouseCapture: function _mouseCapture(e) {
        var i = this.options;return !(this.helper || i.disabled || t(e.target).closest(".ui-resizable-handle").length > 0 || (this.handle = this._getHandle(e), !this.handle || (this._blurActiveElement(e), this._blockFrames(!0 === i.iframeFix ? "iframe" : i.iframeFix), 0)));
      }, _blockFrames: function _blockFrames(e) {
        this.iframeBlocks = this.document.find(e).map(function () {
          var e = t(this);return t("<div>").css("position", "absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0];
        });
      }, _unblockFrames: function _unblockFrames() {
        this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
      }, _blurActiveElement: function _blurActiveElement(e) {
        var i = t.ui.safeActiveElement(this.document[0]),
            n = t(e.target);n.closest(i).length || t.ui.safeBlur(i);
      }, _mouseStart: function _mouseStart(e) {
        var i = this.options;return this.helper = this._createHelper(e), this._addClass(this.helper, "ui-draggable-dragging"), this._cacheHelperProportions(), t.ui.ddmanager && (t.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(!0), this.offsetParent = this.helper.offsetParent(), this.hasFixedAncestor = this.helper.parents().filter(function () {
          return "fixed" === t(this).css("position");
        }).length > 0, this.positionAbs = this.element.offset(), this._refreshOffsets(e), this.originalPosition = this.position = this._generatePosition(e, !1), this.originalPageX = e.pageX, this.originalPageY = e.pageY, i.cursorAt && this._adjustOffsetFromHelper(i.cursorAt), this._setContainment(), !1 === this._trigger("start", e) ? (this._clear(), !1) : (this._cacheHelperProportions(), t.ui.ddmanager && !i.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this._mouseDrag(e, !0), t.ui.ddmanager && t.ui.ddmanager.dragStart(this, e), !0);
      }, _refreshOffsets: function _refreshOffsets(t) {
        this.offset = { top: this.positionAbs.top - this.margins.top, left: this.positionAbs.left - this.margins.left, scroll: !1, parent: this._getParentOffset(), relative: this._getRelativeOffset() }, this.offset.click = { left: t.pageX - this.offset.left, top: t.pageY - this.offset.top };
      }, _mouseDrag: function _mouseDrag(e, i) {
        if (this.hasFixedAncestor && (this.offset.parent = this._getParentOffset()), this.position = this._generatePosition(e, !0), this.positionAbs = this._convertPositionTo("absolute"), !i) {
          var n = this._uiHash();if (!1 === this._trigger("drag", e, n)) return this._mouseUp(new t.Event("mouseup", e)), !1;this.position = n.position;
        }return this.helper[0].style.left = this.position.left + "px", this.helper[0].style.top = this.position.top + "px", t.ui.ddmanager && t.ui.ddmanager.drag(this, e), !1;
      }, _mouseStop: function _mouseStop(e) {
        var i = this,
            n = !1;return t.ui.ddmanager && !this.options.dropBehaviour && (n = t.ui.ddmanager.drop(this, e)), this.dropped && (n = this.dropped, this.dropped = !1), "invalid" === this.options.revert && !n || "valid" === this.options.revert && n || !0 === this.options.revert || t.isFunction(this.options.revert) && this.options.revert.call(this.element, n) ? t(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
          !1 !== i._trigger("stop", e) && i._clear();
        }) : !1 !== this._trigger("stop", e) && this._clear(), !1;
      }, _mouseUp: function _mouseUp(e) {
        return this._unblockFrames(), t.ui.ddmanager && t.ui.ddmanager.dragStop(this, e), this.handleElement.is(e.target) && this.element.trigger("focus"), t.ui.mouse.prototype._mouseUp.call(this, e);
      }, cancel: function cancel() {
        return this.helper.is(".ui-draggable-dragging") ? this._mouseUp(new t.Event("mouseup", { target: this.element[0] })) : this._clear(), this;
      }, _getHandle: function _getHandle(e) {
        return !this.options.handle || !!t(e.target).closest(this.element.find(this.options.handle)).length;
      }, _setHandleClassName: function _setHandleClassName() {
        this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element, this._addClass(this.handleElement, "ui-draggable-handle");
      }, _removeHandleClassName: function _removeHandleClassName() {
        this._removeClass(this.handleElement, "ui-draggable-handle");
      }, _createHelper: function _createHelper(e) {
        var i = this.options,
            n = t.isFunction(i.helper),
            s = n ? t(i.helper.apply(this.element[0], [e])) : "clone" === i.helper ? this.element.clone().removeAttr("id") : this.element;return s.parents("body").length || s.appendTo("parent" === i.appendTo ? this.element[0].parentNode : i.appendTo), n && s[0] === this.element[0] && this._setPositionRelative(), s[0] === this.element[0] || /(fixed|absolute)/.test(s.css("position")) || s.css("position", "absolute"), s;
      }, _setPositionRelative: function _setPositionRelative() {
        /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
      }, _adjustOffsetFromHelper: function _adjustOffsetFromHelper(e) {
        "string" == typeof e && (e = e.split(" ")), t.isArray(e) && (e = { left: +e[0], top: +e[1] || 0 }), "left" in e && (this.offset.click.left = e.left + this.margins.left), "right" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), "top" in e && (this.offset.click.top = e.top + this.margins.top), "bottom" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);
      }, _isRootNode: function _isRootNode(t) {
        return (/(html|body)/i.test(t.tagName) || t === this.document[0]
        );
      }, _getParentOffset: function _getParentOffset() {
        var e = this.offsetParent.offset(),
            i = this.document[0];return "absolute" === this.cssPosition && this.scrollParent[0] !== i && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), this._isRootNode(this.offsetParent[0]) && (e = { top: 0, left: 0 }), { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
      }, _getRelativeOffset: function _getRelativeOffset() {
        if ("relative" !== this.cssPosition) return { top: 0, left: 0 };var t = this.element.position(),
            e = this._isRootNode(this.scrollParent[0]);return { top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + (e ? 0 : this.scrollParent.scrollTop()), left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + (e ? 0 : this.scrollParent.scrollLeft()) };
      }, _cacheMargins: function _cacheMargins() {
        this.margins = { left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0 };
      }, _cacheHelperProportions: function _cacheHelperProportions() {
        this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() };
      }, _setContainment: function _setContainment() {
        var e,
            i,
            n,
            s = this.options,
            r = this.document[0];this.relativeContainer = null, s.containment ? "window" !== s.containment ? "document" !== s.containment ? s.containment.constructor !== Array ? ("parent" === s.containment && (s.containment = this.helper[0].parentNode), i = t(s.containment), (n = i[0]) && (e = /(scroll|auto)/.test(i.css("overflow")), this.containment = [(parseInt(i.css("borderLeftWidth"), 10) || 0) + (parseInt(i.css("paddingLeft"), 10) || 0), (parseInt(i.css("borderTopWidth"), 10) || 0) + (parseInt(i.css("paddingTop"), 10) || 0), (e ? Math.max(n.scrollWidth, n.offsetWidth) : n.offsetWidth) - (parseInt(i.css("borderRightWidth"), 10) || 0) - (parseInt(i.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (e ? Math.max(n.scrollHeight, n.offsetHeight) : n.offsetHeight) - (parseInt(i.css("borderBottomWidth"), 10) || 0) - (parseInt(i.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relativeContainer = i)) : this.containment = s.containment : this.containment = [0, 0, t(r).width() - this.helperProportions.width - this.margins.left, (t(r).height() || r.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top] : this.containment = [t(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, t(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, t(window).scrollLeft() + t(window).width() - this.helperProportions.width - this.margins.left, t(window).scrollTop() + (t(window).height() || r.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top] : this.containment = null;
      }, _convertPositionTo: function _convertPositionTo(t, e) {
        e || (e = this.position);var i = "absolute" === t ? 1 : -1,
            n = this._isRootNode(this.scrollParent[0]);return { top: e.top + this.offset.relative.top * i + this.offset.parent.top * i - ("fixed" === this.cssPosition ? -this.offset.scroll.top : n ? 0 : this.offset.scroll.top) * i, left: e.left + this.offset.relative.left * i + this.offset.parent.left * i - ("fixed" === this.cssPosition ? -this.offset.scroll.left : n ? 0 : this.offset.scroll.left) * i };
      }, _generatePosition: function _generatePosition(t, e) {
        var i,
            n,
            s,
            r,
            o = this.options,
            a = this._isRootNode(this.scrollParent[0]),
            l = t.pageX,
            u = t.pageY;return a && this.offset.scroll || (this.offset.scroll = { top: this.scrollParent.scrollTop(), left: this.scrollParent.scrollLeft() }), e && (this.containment && (this.relativeContainer ? (n = this.relativeContainer.offset(), i = [this.containment[0] + n.left, this.containment[1] + n.top, this.containment[2] + n.left, this.containment[3] + n.top]) : i = this.containment, t.pageX - this.offset.click.left < i[0] && (l = i[0] + this.offset.click.left), t.pageY - this.offset.click.top < i[1] && (u = i[1] + this.offset.click.top), t.pageX - this.offset.click.left > i[2] && (l = i[2] + this.offset.click.left), t.pageY - this.offset.click.top > i[3] && (u = i[3] + this.offset.click.top)), o.grid && (s = o.grid[1] ? this.originalPageY + Math.round((u - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY, u = i ? s - this.offset.click.top >= i[1] || s - this.offset.click.top > i[3] ? s : s - this.offset.click.top >= i[1] ? s - o.grid[1] : s + o.grid[1] : s, r = o.grid[0] ? this.originalPageX + Math.round((l - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX, l = i ? r - this.offset.click.left >= i[0] || r - this.offset.click.left > i[2] ? r : r - this.offset.click.left >= i[0] ? r - o.grid[0] : r + o.grid[0] : r), "y" === o.axis && (l = this.originalPageX), "x" === o.axis && (u = this.originalPageY)), { top: u - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : a ? 0 : this.offset.scroll.top), left: l - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : a ? 0 : this.offset.scroll.left) };
      }, _clear: function _clear() {
        this._removeClass(this.helper, "ui-draggable-dragging"), this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1, this.destroyOnClear && this.destroy();
      }, _trigger: function _trigger(e, i, n) {
        return n = n || this._uiHash(), t.ui.plugin.call(this, e, [i, n, this], !0), /^(drag|start|stop)/.test(e) && (this.positionAbs = this._convertPositionTo("absolute"), n.offset = this.positionAbs), t.Widget.prototype._trigger.call(this, e, i, n);
      }, plugins: {}, _uiHash: function _uiHash() {
        return { helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs };
      } }), t.ui.plugin.add("draggable", "connectToSortable", { start: function start(e, i, n) {
        var s = t.extend({}, i, { item: n.element });n.sortables = [], t(n.options.connectToSortable).each(function () {
          var i = t(this).sortable("instance");i && !i.options.disabled && (n.sortables.push(i), i.refreshPositions(), i._trigger("activate", e, s));
        });
      }, stop: function stop(e, i, n) {
        var s = t.extend({}, i, { item: n.element });n.cancelHelperRemoval = !1, t.each(n.sortables, function () {
          this.isOver ? (this.isOver = 0, n.cancelHelperRemoval = !0, this.cancelHelperRemoval = !1, this._storedCSS = { position: this.placeholder.css("position"), top: this.placeholder.css("top"), left: this.placeholder.css("left") }, this._mouseStop(e), this.options.helper = this.options._helper) : (this.cancelHelperRemoval = !0, this._trigger("deactivate", e, s));
        });
      }, drag: function drag(e, i, n) {
        t.each(n.sortables, function () {
          var s = !1,
              r = this;r.positionAbs = n.positionAbs, r.helperProportions = n.helperProportions, r.offset.click = n.offset.click, r._intersectsWith(r.containerCache) && (s = !0, t.each(n.sortables, function () {
            return this.positionAbs = n.positionAbs, this.helperProportions = n.helperProportions, this.offset.click = n.offset.click, this !== r && this._intersectsWith(this.containerCache) && t.contains(r.element[0], this.element[0]) && (s = !1), s;
          })), s ? (r.isOver || (r.isOver = 1, n._parent = i.helper.parent(), r.currentItem = i.helper.appendTo(r.element).data("ui-sortable-item", !0), r.options._helper = r.options.helper, r.options.helper = function () {
            return i.helper[0];
          }, e.target = r.currentItem[0], r._mouseCapture(e, !0), r._mouseStart(e, !0, !0), r.offset.click.top = n.offset.click.top, r.offset.click.left = n.offset.click.left, r.offset.parent.left -= n.offset.parent.left - r.offset.parent.left, r.offset.parent.top -= n.offset.parent.top - r.offset.parent.top, n._trigger("toSortable", e), n.dropped = r.element, t.each(n.sortables, function () {
            this.refreshPositions();
          }), n.currentItem = n.element, r.fromOutside = n), r.currentItem && (r._mouseDrag(e), i.position = r.position)) : r.isOver && (r.isOver = 0, r.cancelHelperRemoval = !0, r.options._revert = r.options.revert, r.options.revert = !1, r._trigger("out", e, r._uiHash(r)), r._mouseStop(e, !0), r.options.revert = r.options._revert, r.options.helper = r.options._helper, r.placeholder && r.placeholder.remove(), i.helper.appendTo(n._parent), n._refreshOffsets(e), i.position = n._generatePosition(e, !0), n._trigger("fromSortable", e), n.dropped = !1, t.each(n.sortables, function () {
            this.refreshPositions();
          }));
        });
      } }), t.ui.plugin.add("draggable", "cursor", { start: function start(e, i, n) {
        var s = t("body"),
            r = n.options;s.css("cursor") && (r._cursor = s.css("cursor")), s.css("cursor", r.cursor);
      }, stop: function stop(e, i, n) {
        var s = n.options;s._cursor && t("body").css("cursor", s._cursor);
      } }), t.ui.plugin.add("draggable", "opacity", { start: function start(e, i, n) {
        var s = t(i.helper),
            r = n.options;s.css("opacity") && (r._opacity = s.css("opacity")), s.css("opacity", r.opacity);
      }, stop: function stop(e, i, n) {
        var s = n.options;s._opacity && t(i.helper).css("opacity", s._opacity);
      } }), t.ui.plugin.add("draggable", "scroll", { start: function start(t, e, i) {
        i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1)), i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
      }, drag: function drag(e, i, n) {
        var s = n.options,
            r = !1,
            o = n.scrollParentNotHidden[0],
            a = n.document[0];o !== a && "HTML" !== o.tagName ? (s.axis && "x" === s.axis || (n.overflowOffset.top + o.offsetHeight - e.pageY < s.scrollSensitivity ? o.scrollTop = r = o.scrollTop + s.scrollSpeed : e.pageY - n.overflowOffset.top < s.scrollSensitivity && (o.scrollTop = r = o.scrollTop - s.scrollSpeed)), s.axis && "y" === s.axis || (n.overflowOffset.left + o.offsetWidth - e.pageX < s.scrollSensitivity ? o.scrollLeft = r = o.scrollLeft + s.scrollSpeed : e.pageX - n.overflowOffset.left < s.scrollSensitivity && (o.scrollLeft = r = o.scrollLeft - s.scrollSpeed))) : (s.axis && "x" === s.axis || (e.pageY - t(a).scrollTop() < s.scrollSensitivity ? r = t(a).scrollTop(t(a).scrollTop() - s.scrollSpeed) : t(window).height() - (e.pageY - t(a).scrollTop()) < s.scrollSensitivity && (r = t(a).scrollTop(t(a).scrollTop() + s.scrollSpeed))), s.axis && "y" === s.axis || (e.pageX - t(a).scrollLeft() < s.scrollSensitivity ? r = t(a).scrollLeft(t(a).scrollLeft() - s.scrollSpeed) : t(window).width() - (e.pageX - t(a).scrollLeft()) < s.scrollSensitivity && (r = t(a).scrollLeft(t(a).scrollLeft() + s.scrollSpeed)))), !1 !== r && t.ui.ddmanager && !s.dropBehaviour && t.ui.ddmanager.prepareOffsets(n, e);
      } }), t.ui.plugin.add("draggable", "snap", { start: function start(e, i, n) {
        var s = n.options;n.snapElements = [], t(s.snap.constructor !== String ? s.snap.items || ":data(ui-draggable)" : s.snap).each(function () {
          var e = t(this),
              i = e.offset();this !== n.element[0] && n.snapElements.push({ item: this, width: e.outerWidth(), height: e.outerHeight(), top: i.top, left: i.left });
        });
      }, drag: function drag(e, i, n) {
        var s,
            r,
            o,
            a,
            l,
            u,
            c,
            h,
            d,
            p,
            f = n.options,
            g = f.snapTolerance,
            m = i.offset.left,
            v = m + n.helperProportions.width,
            _ = i.offset.top,
            b = _ + n.helperProportions.height;for (d = n.snapElements.length - 1; d >= 0; d--) {
          l = n.snapElements[d].left - n.margins.left, u = l + n.snapElements[d].width, c = n.snapElements[d].top - n.margins.top, h = c + n.snapElements[d].height, v < l - g || m > u + g || b < c - g || _ > h + g || !t.contains(n.snapElements[d].item.ownerDocument, n.snapElements[d].item) ? (n.snapElements[d].snapping && n.options.snap.release && n.options.snap.release.call(n.element, e, t.extend(n._uiHash(), { snapItem: n.snapElements[d].item })), n.snapElements[d].snapping = !1) : ("inner" !== f.snapMode && (s = Math.abs(c - b) <= g, r = Math.abs(h - _) <= g, o = Math.abs(l - v) <= g, a = Math.abs(u - m) <= g, s && (i.position.top = n._convertPositionTo("relative", { top: c - n.helperProportions.height, left: 0 }).top), r && (i.position.top = n._convertPositionTo("relative", { top: h, left: 0 }).top), o && (i.position.left = n._convertPositionTo("relative", { top: 0, left: l - n.helperProportions.width }).left), a && (i.position.left = n._convertPositionTo("relative", { top: 0, left: u }).left)), p = s || r || o || a, "outer" !== f.snapMode && (s = Math.abs(c - _) <= g, r = Math.abs(h - b) <= g, o = Math.abs(l - m) <= g, a = Math.abs(u - v) <= g, s && (i.position.top = n._convertPositionTo("relative", { top: c, left: 0 }).top), r && (i.position.top = n._convertPositionTo("relative", { top: h - n.helperProportions.height, left: 0 }).top), o && (i.position.left = n._convertPositionTo("relative", { top: 0, left: l }).left), a && (i.position.left = n._convertPositionTo("relative", { top: 0, left: u - n.helperProportions.width }).left)), !n.snapElements[d].snapping && (s || r || o || a || p) && n.options.snap.snap && n.options.snap.snap.call(n.element, e, t.extend(n._uiHash(), { snapItem: n.snapElements[d].item })), n.snapElements[d].snapping = s || r || o || a || p);
        }
      } }), t.ui.plugin.add("draggable", "stack", { start: function start(e, i, n) {
        var s,
            r = n.options,
            o = t.makeArray(t(r.stack)).sort(function (e, i) {
          return (parseInt(t(e).css("zIndex"), 10) || 0) - (parseInt(t(i).css("zIndex"), 10) || 0);
        });o.length && (s = parseInt(t(o[0]).css("zIndex"), 10) || 0, t(o).each(function (e) {
          t(this).css("zIndex", s + e);
        }), this.css("zIndex", s + o.length));
      } }), t.ui.plugin.add("draggable", "zIndex", { start: function start(e, i, n) {
        var s = t(i.helper),
            r = n.options;s.css("zIndex") && (r._zIndex = s.css("zIndex")), s.css("zIndex", r.zIndex);
      }, stop: function stop(e, i, n) {
        var s = n.options;s._zIndex && t(i.helper).css("zIndex", s._zIndex);
      } }), t.ui.draggable,
    /*!
     * jQuery UI Resizable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.resizable", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "resize", options: { alsoResize: !1, animate: !1, animateDuration: "slow", animateEasing: "swing", aspectRatio: !1, autoHide: !1, classes: { "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se" }, containment: !1, ghost: !1, grid: !1, handles: "e,s,se", helper: !1, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 90, resize: null, start: null, stop: null }, _num: function _num(t) {
        return parseFloat(t) || 0;
      }, _isNumber: function _isNumber(t) {
        return !isNaN(parseFloat(t));
      }, _hasScroll: function _hasScroll(e, i) {
        if ("hidden" === t(e).css("overflow")) return !1;var n = i && "left" === i ? "scrollLeft" : "scrollTop",
            s = !1;return e[n] > 0 || (e[n] = 1, s = e[n] > 0, e[n] = 0, s);
      }, _create: function _create() {
        var e,
            i = this.options,
            n = this;this._addClass("ui-resizable"), t.extend(this, { _aspectRatio: !!i.aspectRatio, aspectRatio: i.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: i.helper || i.ghost || i.animate ? i.helper || "ui-resizable-helper" : null }), this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({ position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left") })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), this.elementIsWrapper = !0, e = { marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom"), marginLeft: this.originalElement.css("marginLeft") }, this.element.css(e), this.originalElement.css("margin", 0), this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" })), this.originalElement.css(e), this._proportionallyResize()), this._setupHandles(), i.autoHide && t(this.element).on("mouseenter", function () {
          i.disabled || (n._removeClass("ui-resizable-autohide"), n._handles.show());
        }).on("mouseleave", function () {
          i.disabled || n.resizing || (n._addClass("ui-resizable-autohide"), n._handles.hide());
        }), this._mouseInit();
      }, _destroy: function _destroy() {
        this._mouseDestroy();var e,
            i = function i(e) {
          t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove();
        };return this.elementIsWrapper && (i(this.element), e = this.element, this.originalElement.css({ position: e.css("position"), width: e.outerWidth(), height: e.outerHeight(), top: e.css("top"), left: e.css("left") }).insertAfter(e), e.remove()), this.originalElement.css("resize", this.originalResizeStyle), i(this.originalElement), this;
      }, _setOption: function _setOption(t, e) {
        switch (this._super(t, e), t) {case "handles":
            this._removeHandles(), this._setupHandles();}
      }, _setupHandles: function _setupHandles() {
        var e,
            i,
            n,
            s,
            r,
            o = this.options,
            a = this;if (this.handles = o.handles || (t(".ui-resizable-handle", this.element).length ? { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" } : "e,s,se"), this._handles = t(), this.handles.constructor === String) for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), n = this.handles.split(","), this.handles = {}, i = 0; i < n.length; i++) {
          e = t.trim(n[i]), s = "ui-resizable-" + e, r = t("<div>"), this._addClass(r, "ui-resizable-handle " + s), r.css({ zIndex: o.zIndex }), this.handles[e] = ".ui-resizable-" + e, this.element.append(r);
        }this._renderAxis = function (e) {
          var i, n, s, r;for (i in e = e || this.element, this.handles) {
            this.handles[i].constructor === String ? this.handles[i] = this.element.children(this.handles[i]).first().show() : (this.handles[i].jquery || this.handles[i].nodeType) && (this.handles[i] = t(this.handles[i]), this._on(this.handles[i], { mousedown: a._mouseDown })), this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (n = t(this.handles[i], this.element), r = /sw|ne|nw|se|n|s/.test(i) ? n.outerHeight() : n.outerWidth(), s = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join(""), e.css(s, r), this._proportionallyResize()), this._handles = this._handles.add(this.handles[i]);
          }
        }, this._renderAxis(this.element), this._handles = this._handles.add(this.element.find(".ui-resizable-handle")), this._handles.disableSelection(), this._handles.on("mouseover", function () {
          a.resizing || (this.className && (r = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), a.axis = r && r[1] ? r[1] : "se");
        }), o.autoHide && (this._handles.hide(), this._addClass("ui-resizable-autohide"));
      }, _removeHandles: function _removeHandles() {
        this._handles.remove();
      }, _mouseCapture: function _mouseCapture(e) {
        var i,
            n,
            s = !1;for (i in this.handles) {
          ((n = t(this.handles[i])[0]) === e.target || t.contains(n, e.target)) && (s = !0);
        }return !this.options.disabled && s;
      }, _mouseStart: function _mouseStart(e) {
        var i,
            n,
            s,
            r = this.options,
            o = this.element;return this.resizing = !0, this._renderProxy(), i = this._num(this.helper.css("left")), n = this._num(this.helper.css("top")), r.containment && (i += t(r.containment).scrollLeft() || 0, n += t(r.containment).scrollTop() || 0), this.offset = this.helper.offset(), this.position = { left: i, top: n }, this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: o.width(), height: o.height() }, this.originalSize = this._helper ? { width: o.outerWidth(), height: o.outerHeight() } : { width: o.width(), height: o.height() }, this.sizeDiff = { width: o.outerWidth() - o.width(), height: o.outerHeight() - o.height() }, this.originalPosition = { left: i, top: n }, this.originalMousePosition = { left: e.pageX, top: e.pageY }, this.aspectRatio = "number" == typeof r.aspectRatio ? r.aspectRatio : this.originalSize.width / this.originalSize.height || 1, s = t(".ui-resizable-" + this.axis).css("cursor"), t("body").css("cursor", "auto" === s ? this.axis + "-resize" : s), this._addClass("ui-resizable-resizing"), this._propagate("start", e), !0;
      }, _mouseDrag: function _mouseDrag(e) {
        var i,
            n,
            s = this.originalMousePosition,
            r = this.axis,
            o = e.pageX - s.left || 0,
            a = e.pageY - s.top || 0,
            l = this._change[r];return this._updatePrevProperties(), !!l && (i = l.apply(this, [e, o, a]), this._updateVirtualBoundaries(e.shiftKey), (this._aspectRatio || e.shiftKey) && (i = this._updateRatio(i, e)), i = this._respectSize(i, e), this._updateCache(i), this._propagate("resize", e), n = this._applyChanges(), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), t.isEmptyObject(n) || (this._updatePrevProperties(), this._trigger("resize", e, this.ui()), this._applyChanges()), !1);
      }, _mouseStop: function _mouseStop(e) {
        this.resizing = !1;var i,
            n,
            s,
            r,
            o,
            a,
            l,
            u = this.options;return this._helper && (i = this._proportionallyResizeElements, n = i.length && /textarea/i.test(i[0].nodeName), s = n && this._hasScroll(i[0], "left") ? 0 : this.sizeDiff.height, r = n ? 0 : this.sizeDiff.width, o = { width: this.helper.width() - r, height: this.helper.height() - s }, a = parseFloat(this.element.css("left")) + (this.position.left - this.originalPosition.left) || null, l = parseFloat(this.element.css("top")) + (this.position.top - this.originalPosition.top) || null, u.animate || this.element.css(t.extend(o, { top: l, left: a })), this.helper.height(this.size.height), this.helper.width(this.size.width), this._helper && !u.animate && this._proportionallyResize()), t("body").css("cursor", "auto"), this._removeClass("ui-resizable-resizing"), this._propagate("stop", e), this._helper && this.helper.remove(), !1;
      }, _updatePrevProperties: function _updatePrevProperties() {
        this.prevPosition = { top: this.position.top, left: this.position.left }, this.prevSize = { width: this.size.width, height: this.size.height };
      }, _applyChanges: function _applyChanges() {
        var t = {};return this.position.top !== this.prevPosition.top && (t.top = this.position.top + "px"), this.position.left !== this.prevPosition.left && (t.left = this.position.left + "px"), this.size.width !== this.prevSize.width && (t.width = this.size.width + "px"), this.size.height !== this.prevSize.height && (t.height = this.size.height + "px"), this.helper.css(t), t;
      }, _updateVirtualBoundaries: function _updateVirtualBoundaries(t) {
        var e,
            i,
            n,
            s,
            r,
            o = this.options;r = { minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0, maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : 1 / 0, minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0, maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : 1 / 0 }, (this._aspectRatio || t) && (e = r.minHeight * this.aspectRatio, n = r.minWidth / this.aspectRatio, i = r.maxHeight * this.aspectRatio, s = r.maxWidth / this.aspectRatio, e > r.minWidth && (r.minWidth = e), n > r.minHeight && (r.minHeight = n), i < r.maxWidth && (r.maxWidth = i), s < r.maxHeight && (r.maxHeight = s)), this._vBoundaries = r;
      }, _updateCache: function _updateCache(t) {
        this.offset = this.helper.offset(), this._isNumber(t.left) && (this.position.left = t.left), this._isNumber(t.top) && (this.position.top = t.top), this._isNumber(t.height) && (this.size.height = t.height), this._isNumber(t.width) && (this.size.width = t.width);
      }, _updateRatio: function _updateRatio(t) {
        var e = this.position,
            i = this.size,
            n = this.axis;return this._isNumber(t.height) ? t.width = t.height * this.aspectRatio : this._isNumber(t.width) && (t.height = t.width / this.aspectRatio), "sw" === n && (t.left = e.left + (i.width - t.width), t.top = null), "nw" === n && (t.top = e.top + (i.height - t.height), t.left = e.left + (i.width - t.width)), t;
      }, _respectSize: function _respectSize(t) {
        var e = this._vBoundaries,
            i = this.axis,
            n = this._isNumber(t.width) && e.maxWidth && e.maxWidth < t.width,
            s = this._isNumber(t.height) && e.maxHeight && e.maxHeight < t.height,
            r = this._isNumber(t.width) && e.minWidth && e.minWidth > t.width,
            o = this._isNumber(t.height) && e.minHeight && e.minHeight > t.height,
            a = this.originalPosition.left + this.originalSize.width,
            l = this.originalPosition.top + this.originalSize.height,
            u = /sw|nw|w/.test(i),
            c = /nw|ne|n/.test(i);return r && (t.width = e.minWidth), o && (t.height = e.minHeight), n && (t.width = e.maxWidth), s && (t.height = e.maxHeight), r && u && (t.left = a - e.minWidth), n && u && (t.left = a - e.maxWidth), o && c && (t.top = l - e.minHeight), s && c && (t.top = l - e.maxHeight), t.width || t.height || t.left || !t.top ? t.width || t.height || t.top || !t.left || (t.left = null) : t.top = null, t;
      }, _getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(t) {
        for (var e = 0, i = [], n = [t.css("borderTopWidth"), t.css("borderRightWidth"), t.css("borderBottomWidth"), t.css("borderLeftWidth")], s = [t.css("paddingTop"), t.css("paddingRight"), t.css("paddingBottom"), t.css("paddingLeft")]; e < 4; e++) {
          i[e] = parseFloat(n[e]) || 0, i[e] += parseFloat(s[e]) || 0;
        }return { height: i[0] + i[2], width: i[1] + i[3] };
      }, _proportionallyResize: function _proportionallyResize() {
        if (this._proportionallyResizeElements.length) for (var t, e = 0, i = this.helper || this.element; e < this._proportionallyResizeElements.length; e++) {
          t = this._proportionallyResizeElements[e], this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(t)), t.css({ height: i.height() - this.outerDimensions.height || 0, width: i.width() - this.outerDimensions.width || 0 });
        }
      }, _renderProxy: function _renderProxy() {
        var e = this.element,
            i = this.options;this.elementOffset = e.offset(), this._helper ? (this.helper = this.helper || t("<div style='overflow:hidden;'></div>"), this._addClass(this.helper, this._helper), this.helper.css({ width: this.element.outerWidth(), height: this.element.outerHeight(), position: "absolute", left: this.elementOffset.left + "px", top: this.elementOffset.top + "px", zIndex: ++i.zIndex }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element;
      }, _change: { e: function e(t, _e4) {
          return { width: this.originalSize.width + _e4 };
        }, w: function w(t, e) {
          var i = this.originalSize,
              n = this.originalPosition;return { left: n.left + e, width: i.width - e };
        }, n: function n(t, e, i) {
          var n = this.originalSize,
              s = this.originalPosition;return { top: s.top + i, height: n.height - i };
        }, s: function s(t, e, i) {
          return { height: this.originalSize.height + i };
        }, se: function se(e, i, n) {
          return t.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [e, i, n]));
        }, sw: function sw(e, i, n) {
          return t.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [e, i, n]));
        }, ne: function ne(e, i, n) {
          return t.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [e, i, n]));
        }, nw: function nw(e, i, n) {
          return t.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [e, i, n]));
        } }, _propagate: function _propagate(e, i) {
        t.ui.plugin.call(this, e, [i, this.ui()]), "resize" !== e && this._trigger(e, i, this.ui());
      }, plugins: {}, ui: function ui() {
        return { originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition };
      } }), t.ui.plugin.add("resizable", "animate", { stop: function stop(e) {
        var i = t(this).resizable("instance"),
            n = i.options,
            s = i._proportionallyResizeElements,
            r = s.length && /textarea/i.test(s[0].nodeName),
            o = r && i._hasScroll(s[0], "left") ? 0 : i.sizeDiff.height,
            a = r ? 0 : i.sizeDiff.width,
            l = { width: i.size.width - a, height: i.size.height - o },
            u = parseFloat(i.element.css("left")) + (i.position.left - i.originalPosition.left) || null,
            c = parseFloat(i.element.css("top")) + (i.position.top - i.originalPosition.top) || null;i.element.animate(t.extend(l, c && u ? { top: c, left: u } : {}), { duration: n.animateDuration, easing: n.animateEasing, step: function step() {
            var n = { width: parseFloat(i.element.css("width")), height: parseFloat(i.element.css("height")), top: parseFloat(i.element.css("top")), left: parseFloat(i.element.css("left")) };s && s.length && t(s[0]).css({ width: n.width, height: n.height }), i._updateCache(n), i._propagate("resize", e);
          } });
      } }), t.ui.plugin.add("resizable", "containment", { start: function start() {
        var e,
            i,
            n,
            s,
            r,
            o,
            a,
            l = t(this).resizable("instance"),
            u = l.options,
            c = l.element,
            h = u.containment,
            d = h instanceof t ? h.get(0) : /parent/.test(h) ? c.parent().get(0) : h;d && (l.containerElement = t(d), /document/.test(h) || h === document ? (l.containerOffset = { left: 0, top: 0 }, l.containerPosition = { left: 0, top: 0 }, l.parentData = { element: t(document), left: 0, top: 0, width: t(document).width(), height: t(document).height() || document.body.parentNode.scrollHeight }) : (e = t(d), i = [], t(["Top", "Right", "Left", "Bottom"]).each(function (t, n) {
          i[t] = l._num(e.css("padding" + n));
        }), l.containerOffset = e.offset(), l.containerPosition = e.position(), l.containerSize = { height: e.innerHeight() - i[3], width: e.innerWidth() - i[1] }, n = l.containerOffset, s = l.containerSize.height, r = l.containerSize.width, o = l._hasScroll(d, "left") ? d.scrollWidth : r, a = l._hasScroll(d) ? d.scrollHeight : s, l.parentData = { element: d, left: n.left, top: n.top, width: o, height: a }));
      }, resize: function resize(e) {
        var i,
            n,
            s,
            r,
            o = t(this).resizable("instance"),
            a = o.options,
            l = o.containerOffset,
            u = o.position,
            c = o._aspectRatio || e.shiftKey,
            h = { top: 0, left: 0 },
            d = o.containerElement,
            p = !0;d[0] !== document && /static/.test(d.css("position")) && (h = l), u.left < (o._helper ? l.left : 0) && (o.size.width = o.size.width + (o._helper ? o.position.left - l.left : o.position.left - h.left), c && (o.size.height = o.size.width / o.aspectRatio, p = !1), o.position.left = a.helper ? l.left : 0), u.top < (o._helper ? l.top : 0) && (o.size.height = o.size.height + (o._helper ? o.position.top - l.top : o.position.top), c && (o.size.width = o.size.height * o.aspectRatio, p = !1), o.position.top = o._helper ? l.top : 0), s = o.containerElement.get(0) === o.element.parent().get(0), r = /relative|absolute/.test(o.containerElement.css("position")), s && r ? (o.offset.left = o.parentData.left + o.position.left, o.offset.top = o.parentData.top + o.position.top) : (o.offset.left = o.element.offset().left, o.offset.top = o.element.offset().top), i = Math.abs(o.sizeDiff.width + (o._helper ? o.offset.left - h.left : o.offset.left - l.left)), n = Math.abs(o.sizeDiff.height + (o._helper ? o.offset.top - h.top : o.offset.top - l.top)), i + o.size.width >= o.parentData.width && (o.size.width = o.parentData.width - i, c && (o.size.height = o.size.width / o.aspectRatio, p = !1)), n + o.size.height >= o.parentData.height && (o.size.height = o.parentData.height - n, c && (o.size.width = o.size.height * o.aspectRatio, p = !1)), p || (o.position.left = o.prevPosition.left, o.position.top = o.prevPosition.top, o.size.width = o.prevSize.width, o.size.height = o.prevSize.height);
      }, stop: function stop() {
        var e = t(this).resizable("instance"),
            i = e.options,
            n = e.containerOffset,
            s = e.containerPosition,
            r = e.containerElement,
            o = t(e.helper),
            a = o.offset(),
            l = o.outerWidth() - e.sizeDiff.width,
            u = o.outerHeight() - e.sizeDiff.height;e._helper && !i.animate && /relative/.test(r.css("position")) && t(this).css({ left: a.left - s.left - n.left, width: l, height: u }), e._helper && !i.animate && /static/.test(r.css("position")) && t(this).css({ left: a.left - s.left - n.left, width: l, height: u });
      } }), t.ui.plugin.add("resizable", "alsoResize", { start: function start() {
        var e = t(this).resizable("instance"),
            i = e.options;t(i.alsoResize).each(function () {
          var e = t(this);e.data("ui-resizable-alsoresize", { width: parseFloat(e.width()), height: parseFloat(e.height()), left: parseFloat(e.css("left")), top: parseFloat(e.css("top")) });
        });
      }, resize: function resize(e, i) {
        var n = t(this).resizable("instance"),
            s = n.options,
            r = n.originalSize,
            o = n.originalPosition,
            a = { height: n.size.height - r.height || 0, width: n.size.width - r.width || 0, top: n.position.top - o.top || 0, left: n.position.left - o.left || 0 };t(s.alsoResize).each(function () {
          var e = t(this),
              n = t(this).data("ui-resizable-alsoresize"),
              s = {},
              r = e.parents(i.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];t.each(r, function (t, e) {
            var i = (n[e] || 0) + (a[e] || 0);i && i >= 0 && (s[e] = i || null);
          }), e.css(s);
        });
      }, stop: function stop() {
        t(this).removeData("ui-resizable-alsoresize");
      } }), t.ui.plugin.add("resizable", "ghost", { start: function start() {
        var e = t(this).resizable("instance"),
            i = e.size;e.ghost = e.originalElement.clone(), e.ghost.css({ opacity: .25, display: "block", position: "relative", height: i.height, width: i.width, margin: 0, left: 0, top: 0 }), e._addClass(e.ghost, "ui-resizable-ghost"), !1 !== t.uiBackCompat && "string" == typeof e.options.ghost && e.ghost.addClass(this.options.ghost), e.ghost.appendTo(e.helper);
      }, resize: function resize() {
        var e = t(this).resizable("instance");e.ghost && e.ghost.css({ position: "relative", height: e.size.height, width: e.size.width });
      }, stop: function stop() {
        var e = t(this).resizable("instance");e.ghost && e.helper && e.helper.get(0).removeChild(e.ghost.get(0));
      } }), t.ui.plugin.add("resizable", "grid", { resize: function resize() {
        var e,
            i = t(this).resizable("instance"),
            n = i.options,
            s = i.size,
            r = i.originalSize,
            o = i.originalPosition,
            a = i.axis,
            l = "number" == typeof n.grid ? [n.grid, n.grid] : n.grid,
            u = l[0] || 1,
            c = l[1] || 1,
            h = Math.round((s.width - r.width) / u) * u,
            d = Math.round((s.height - r.height) / c) * c,
            p = r.width + h,
            f = r.height + d,
            g = n.maxWidth && n.maxWidth < p,
            m = n.maxHeight && n.maxHeight < f,
            v = n.minWidth && n.minWidth > p,
            _ = n.minHeight && n.minHeight > f;n.grid = l, v && (p += u), _ && (f += c), g && (p -= u), m && (f -= c), /^(se|s|e)$/.test(a) ? (i.size.width = p, i.size.height = f) : /^(ne)$/.test(a) ? (i.size.width = p, i.size.height = f, i.position.top = o.top - d) : /^(sw)$/.test(a) ? (i.size.width = p, i.size.height = f, i.position.left = o.left - h) : ((f - c <= 0 || p - u <= 0) && (e = i._getPaddingPlusBorderDimensions(this)), f - c > 0 ? (i.size.height = f, i.position.top = o.top - d) : (f = c - e.height, i.size.height = f, i.position.top = o.top + r.height - f), p - u > 0 ? (i.size.width = p, i.position.left = o.left - h) : (p = u - e.width, i.size.width = p, i.position.left = o.left + r.width - p));
      } }), t.ui.resizable,
    /*!
     * jQuery UI Dialog 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.dialog", { version: "1.12.1", options: { appendTo: "body", autoOpen: !0, buttons: [], classes: { "ui-dialog": "ui-corner-all", "ui-dialog-titlebar": "ui-corner-all" }, closeOnEscape: !0, closeText: "Close", draggable: !0, hide: null, height: "auto", maxHeight: null, maxWidth: null, minHeight: 150, minWidth: 150, modal: !1, position: { my: "center", at: "center", of: window, collision: "fit", using: function using(e) {
            var i = t(this).css(e).offset().top;i < 0 && t(this).css("top", e.top - i);
          } }, resizable: !0, show: null, title: null, width: 300, beforeClose: null, close: null, drag: null, dragStart: null, dragStop: null, focus: null, open: null, resize: null, resizeStart: null, resizeStop: null }, sizeRelatedOptions: { buttons: !0, height: !0, maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0, width: !0 }, resizableRelatedOptions: { maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0 }, _create: function _create() {
        this.originalCss = { display: this.element[0].style.display, width: this.element[0].style.width, minHeight: this.element[0].style.minHeight, maxHeight: this.element[0].style.maxHeight, height: this.element[0].style.height }, this.originalPosition = { parent: this.element.parent(), index: this.element.parent().children().index(this.element) }, this.originalTitle = this.element.attr("title"), null == this.options.title && null != this.originalTitle && (this.options.title = this.originalTitle), this.options.disabled && (this.options.disabled = !1), this._createWrapper(), this.element.show().removeAttr("title").appendTo(this.uiDialog), this._addClass("ui-dialog-content", "ui-widget-content"), this._createTitlebar(), this._createButtonPane(), this.options.draggable && t.fn.draggable && this._makeDraggable(), this.options.resizable && t.fn.resizable && this._makeResizable(), this._isOpen = !1, this._trackFocus();
      }, _init: function _init() {
        this.options.autoOpen && this.open();
      }, _appendTo: function _appendTo() {
        var e = this.options.appendTo;return e && (e.jquery || e.nodeType) ? t(e) : this.document.find(e || "body").eq(0);
      }, _destroy: function _destroy() {
        var t,
            e = this.originalPosition;this._untrackInstance(), this._destroyOverlay(), this.element.removeUniqueId().css(this.originalCss).detach(), this.uiDialog.remove(), this.originalTitle && this.element.attr("title", this.originalTitle), (t = e.parent.children().eq(e.index)).length && t[0] !== this.element[0] ? t.before(this.element) : e.parent.append(this.element);
      }, widget: function widget() {
        return this.uiDialog;
      }, disable: t.noop, enable: t.noop, close: function close(e) {
        var i = this;this._isOpen && !1 !== this._trigger("beforeClose", e) && (this._isOpen = !1, this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), this.opener.filter(":focusable").trigger("focus").length || t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])), this._hide(this.uiDialog, this.options.hide, function () {
          i._trigger("close", e);
        }));
      }, isOpen: function isOpen() {
        return this._isOpen;
      }, moveToTop: function moveToTop() {
        this._moveToTop();
      }, _moveToTop: function _moveToTop(e, i) {
        var n = !1,
            s = this.uiDialog.siblings(".ui-front:visible").map(function () {
          return +t(this).css("z-index");
        }).get(),
            r = Math.max.apply(null, s);return r >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", r + 1), n = !0), n && !i && this._trigger("focus", e), n;
      }, open: function open() {
        var e = this;this._isOpen ? this._moveToTop() && this._focusTabbable() : (this._isOpen = !0, this.opener = t(t.ui.safeActiveElement(this.document[0])), this._size(), this._position(), this._createOverlay(), this._moveToTop(null, !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), this._show(this.uiDialog, this.options.show, function () {
          e._focusTabbable(), e._trigger("focus");
        }), this._makeFocusTarget(), this._trigger("open"));
      }, _focusTabbable: function _focusTabbable() {
        var t = this._focusedElement;t || (t = this.element.find("[autofocus]")), t.length || (t = this.element.find(":tabbable")), t.length || (t = this.uiDialogButtonPane.find(":tabbable")), t.length || (t = this.uiDialogTitlebarClose.filter(":tabbable")), t.length || (t = this.uiDialog), t.eq(0).trigger("focus");
      }, _keepFocus: function _keepFocus(e) {
        function i() {
          var e = t.ui.safeActiveElement(this.document[0]);this.uiDialog[0] === e || t.contains(this.uiDialog[0], e) || this._focusTabbable();
        }e.preventDefault(), i.call(this), this._delay(i);
      }, _createWrapper: function _createWrapper() {
        this.uiDialog = t("<div>").hide().attr({ tabIndex: -1, role: "dialog" }).appendTo(this._appendTo()), this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front"), this._on(this.uiDialog, { keydown: function keydown(e) {
            if (this.options.closeOnEscape && !e.isDefaultPrevented() && e.keyCode && e.keyCode === t.ui.keyCode.ESCAPE) return e.preventDefault(), void this.close(e);if (e.keyCode === t.ui.keyCode.TAB && !e.isDefaultPrevented()) {
              var i = this.uiDialog.find(":tabbable"),
                  n = i.filter(":first"),
                  s = i.filter(":last");e.target !== s[0] && e.target !== this.uiDialog[0] || e.shiftKey ? e.target !== n[0] && e.target !== this.uiDialog[0] || !e.shiftKey || (this._delay(function () {
                s.trigger("focus");
              }), e.preventDefault()) : (this._delay(function () {
                n.trigger("focus");
              }), e.preventDefault());
            }
          }, mousedown: function mousedown(t) {
            this._moveToTop(t) && this._focusTabbable();
          } }), this.element.find("[aria-describedby]").length || this.uiDialog.attr({ "aria-describedby": this.element.uniqueId().attr("id") });
      }, _createTitlebar: function _createTitlebar() {
        var e;this.uiDialogTitlebar = t("<div>"), this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix"), this._on(this.uiDialogTitlebar, { mousedown: function mousedown(e) {
            t(e.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.trigger("focus");
          } }), this.uiDialogTitlebarClose = t("<button type='button'></button>").button({ label: t("<a>").text(this.options.closeText).html(), icon: "ui-icon-closethick", showLabel: !1 }).appendTo(this.uiDialogTitlebar), this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close"), this._on(this.uiDialogTitlebarClose, { click: function click(t) {
            t.preventDefault(), this.close(t);
          } }), e = t("<span>").uniqueId().prependTo(this.uiDialogTitlebar), this._addClass(e, "ui-dialog-title"), this._title(e), this.uiDialogTitlebar.prependTo(this.uiDialog), this.uiDialog.attr({ "aria-labelledby": e.attr("id") });
      }, _title: function _title(t) {
        this.options.title ? t.text(this.options.title) : t.html("&#160;");
      }, _createButtonPane: function _createButtonPane() {
        this.uiDialogButtonPane = t("<div>"), this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix"), this.uiButtonSet = t("<div>").appendTo(this.uiDialogButtonPane), this._addClass(this.uiButtonSet, "ui-dialog-buttonset"), this._createButtons();
      }, _createButtons: function _createButtons() {
        var e = this,
            i = this.options.buttons;this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), t.isEmptyObject(i) || t.isArray(i) && !i.length ? this._removeClass(this.uiDialog, "ui-dialog-buttons") : (t.each(i, function (i, n) {
          var s, r;n = t.isFunction(n) ? { click: n, text: i } : n, n = t.extend({ type: "button" }, n), s = n.click, r = { icon: n.icon, iconPosition: n.iconPosition, showLabel: n.showLabel, icons: n.icons, text: n.text }, delete n.click, delete n.icon, delete n.iconPosition, delete n.showLabel, delete n.icons, "boolean" == typeof n.text && delete n.text, t("<button></button>", n).button(r).appendTo(e.uiButtonSet).on("click", function () {
            s.apply(e.element[0], arguments);
          });
        }), this._addClass(this.uiDialog, "ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog));
      }, _makeDraggable: function _makeDraggable() {
        var e = this,
            i = this.options;function n(t) {
          return { position: t.position, offset: t.offset };
        }this.uiDialog.draggable({ cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function start(i, s) {
            e._addClass(t(this), "ui-dialog-dragging"), e._blockFrames(), e._trigger("dragStart", i, n(s));
          }, drag: function drag(t, i) {
            e._trigger("drag", t, n(i));
          }, stop: function stop(s, r) {
            var o = r.offset.left - e.document.scrollLeft(),
                a = r.offset.top - e.document.scrollTop();i.position = { my: "left top", at: "left" + (o >= 0 ? "+" : "") + o + " top" + (a >= 0 ? "+" : "") + a, of: e.window }, e._removeClass(t(this), "ui-dialog-dragging"), e._unblockFrames(), e._trigger("dragStop", s, n(r));
          } });
      }, _makeResizable: function _makeResizable() {
        var e = this,
            i = this.options,
            n = i.resizable,
            s = this.uiDialog.css("position"),
            r = "string" == typeof n ? n : "n,e,s,w,se,sw,ne,nw";function o(t) {
          return { originalPosition: t.originalPosition, originalSize: t.originalSize, position: t.position, size: t.size };
        }this.uiDialog.resizable({ cancel: ".ui-dialog-content", containment: "document", alsoResize: this.element, maxWidth: i.maxWidth, maxHeight: i.maxHeight, minWidth: i.minWidth, minHeight: this._minHeight(), handles: r, start: function start(i, n) {
            e._addClass(t(this), "ui-dialog-resizing"), e._blockFrames(), e._trigger("resizeStart", i, o(n));
          }, resize: function resize(t, i) {
            e._trigger("resize", t, o(i));
          }, stop: function stop(n, s) {
            var r = e.uiDialog.offset(),
                a = r.left - e.document.scrollLeft(),
                l = r.top - e.document.scrollTop();i.height = e.uiDialog.height(), i.width = e.uiDialog.width(), i.position = { my: "left top", at: "left" + (a >= 0 ? "+" : "") + a + " top" + (l >= 0 ? "+" : "") + l, of: e.window }, e._removeClass(t(this), "ui-dialog-resizing"), e._unblockFrames(), e._trigger("resizeStop", n, o(s));
          } }).css("position", s);
      }, _trackFocus: function _trackFocus() {
        this._on(this.widget(), { focusin: function focusin(e) {
            this._makeFocusTarget(), this._focusedElement = t(e.target);
          } });
      }, _makeFocusTarget: function _makeFocusTarget() {
        this._untrackInstance(), this._trackingInstances().unshift(this);
      }, _untrackInstance: function _untrackInstance() {
        var e = this._trackingInstances(),
            i = t.inArray(this, e);-1 !== i && e.splice(i, 1);
      }, _trackingInstances: function _trackingInstances() {
        var t = this.document.data("ui-dialog-instances");return t || (t = [], this.document.data("ui-dialog-instances", t)), t;
      }, _minHeight: function _minHeight() {
        var t = this.options;return "auto" === t.height ? t.minHeight : Math.min(t.minHeight, t.height);
      }, _position: function _position() {
        var t = this.uiDialog.is(":visible");t || this.uiDialog.show(), this.uiDialog.position(this.options.position), t || this.uiDialog.hide();
      }, _setOptions: function _setOptions(e) {
        var i = this,
            n = !1,
            s = {};t.each(e, function (t, e) {
          i._setOption(t, e), t in i.sizeRelatedOptions && (n = !0), t in i.resizableRelatedOptions && (s[t] = e);
        }), n && (this._size(), this._position()), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", s);
      }, _setOption: function _setOption(e, i) {
        var n,
            s,
            r = this.uiDialog;"disabled" !== e && (this._super(e, i), "appendTo" === e && this.uiDialog.appendTo(this._appendTo()), "buttons" === e && this._createButtons(), "closeText" === e && this.uiDialogTitlebarClose.button({ label: t("<a>").text("" + this.options.closeText).html() }), "draggable" === e && ((n = r.is(":data(ui-draggable)")) && !i && r.draggable("destroy"), !n && i && this._makeDraggable()), "position" === e && this._position(), "resizable" === e && ((s = r.is(":data(ui-resizable)")) && !i && r.resizable("destroy"), s && "string" == typeof i && r.resizable("option", "handles", i), s || !1 === i || this._makeResizable()), "title" === e && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")));
      }, _size: function _size() {
        var t,
            e,
            i,
            n = this.options;this.element.show().css({ width: "auto", minHeight: 0, maxHeight: "none", height: 0 }), n.minWidth > n.width && (n.width = n.minWidth), t = this.uiDialog.css({ height: "auto", width: n.width }).outerHeight(), e = Math.max(0, n.minHeight - t), i = "number" == typeof n.maxHeight ? Math.max(0, n.maxHeight - t) : "none", "auto" === n.height ? this.element.css({ minHeight: e, maxHeight: i, height: "auto" }) : this.element.height(Math.max(0, n.height - t)), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
      }, _blockFrames: function _blockFrames() {
        this.iframeBlocks = this.document.find("iframe").map(function () {
          var e = t(this);return t("<div>").css({ position: "absolute", width: e.outerWidth(), height: e.outerHeight() }).appendTo(e.parent()).offset(e.offset())[0];
        });
      }, _unblockFrames: function _unblockFrames() {
        this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
      }, _allowInteraction: function _allowInteraction(e) {
        return !!t(e.target).closest(".ui-dialog").length || !!t(e.target).closest(".ui-datepicker").length;
      }, _createOverlay: function _createOverlay() {
        if (this.options.modal) {
          var e = !0;this._delay(function () {
            e = !1;
          }), this.document.data("ui-dialog-overlays") || this._on(this.document, { focusin: function focusin(t) {
              e || this._allowInteraction(t) || (t.preventDefault(), this._trackingInstances()[0]._focusTabbable());
            } }), this.overlay = t("<div>").appendTo(this._appendTo()), this._addClass(this.overlay, null, "ui-widget-overlay ui-front"), this._on(this.overlay, { mousedown: "_keepFocus" }), this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
        }
      }, _destroyOverlay: function _destroyOverlay() {
        if (this.options.modal && this.overlay) {
          var t = this.document.data("ui-dialog-overlays") - 1;t ? this.document.data("ui-dialog-overlays", t) : (this._off(this.document, "focusin"), this.document.removeData("ui-dialog-overlays")), this.overlay.remove(), this.overlay = null;
        }
      } }), !1 !== t.uiBackCompat && t.widget("ui.dialog", t.ui.dialog, { options: { dialogClass: "" }, _createWrapper: function _createWrapper() {
        this._super(), this.uiDialog.addClass(this.options.dialogClass);
      }, _setOption: function _setOption(t, e) {
        "dialogClass" === t && this.uiDialog.removeClass(this.options.dialogClass).addClass(e), this._superApply(arguments);
      } }), t.ui.dialog,
    /*!
     * jQuery UI Droppable 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.droppable", { version: "1.12.1", widgetEventPrefix: "drop", options: { accept: "*", addClasses: !0, greedy: !1, scope: "default", tolerance: "intersect", activate: null, deactivate: null, drop: null, out: null, over: null }, _create: function _create() {
        var e,
            i = this.options,
            n = i.accept;this.isover = !1, this.isout = !0, this.accept = t.isFunction(n) ? n : function (t) {
          return t.is(n);
        }, this.proportions = function () {
          if (!arguments.length) return e || (e = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight });e = arguments[0];
        }, this._addToManager(i.scope), i.addClasses && this._addClass("ui-droppable");
      }, _addToManager: function _addToManager(e) {
        t.ui.ddmanager.droppables[e] = t.ui.ddmanager.droppables[e] || [], t.ui.ddmanager.droppables[e].push(this);
      }, _splice: function _splice(t) {
        for (var e = 0; e < t.length; e++) {
          t[e] === this && t.splice(e, 1);
        }
      }, _destroy: function _destroy() {
        var e = t.ui.ddmanager.droppables[this.options.scope];this._splice(e);
      }, _setOption: function _setOption(e, i) {
        if ("accept" === e) this.accept = t.isFunction(i) ? i : function (t) {
          return t.is(i);
        };else if ("scope" === e) {
          var n = t.ui.ddmanager.droppables[this.options.scope];this._splice(n), this._addToManager(i);
        }this._super(e, i);
      }, _activate: function _activate(e) {
        var i = t.ui.ddmanager.current;this._addActiveClass(), i && this._trigger("activate", e, this.ui(i));
      }, _deactivate: function _deactivate(e) {
        var i = t.ui.ddmanager.current;this._removeActiveClass(), i && this._trigger("deactivate", e, this.ui(i));
      }, _over: function _over(e) {
        var i = t.ui.ddmanager.current;i && (i.currentItem || i.element)[0] !== this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this._addHoverClass(), this._trigger("over", e, this.ui(i)));
      }, _out: function _out(e) {
        var i = t.ui.ddmanager.current;i && (i.currentItem || i.element)[0] !== this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this._removeHoverClass(), this._trigger("out", e, this.ui(i)));
      }, _drop: function _drop(e, i) {
        var n = i || t.ui.ddmanager.current,
            s = !1;return !(!n || (n.currentItem || n.element)[0] === this.element[0]) && (this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function () {
          var i = t(this).droppable("instance");if (i.options.greedy && !i.options.disabled && i.options.scope === n.options.scope && i.accept.call(i.element[0], n.currentItem || n.element) && _(n, t.extend(i, { offset: i.element.offset() }), i.options.tolerance, e)) return s = !0, !1;
        }), !s && !!this.accept.call(this.element[0], n.currentItem || n.element) && (this._removeActiveClass(), this._removeHoverClass(), this._trigger("drop", e, this.ui(n)), this.element));
      }, ui: function ui(t) {
        return { draggable: t.currentItem || t.element, helper: t.helper, position: t.position, offset: t.positionAbs };
      }, _addHoverClass: function _addHoverClass() {
        this._addClass("ui-droppable-hover");
      }, _removeHoverClass: function _removeHoverClass() {
        this._removeClass("ui-droppable-hover");
      }, _addActiveClass: function _addActiveClass() {
        this._addClass("ui-droppable-active");
      }, _removeActiveClass: function _removeActiveClass() {
        this._removeClass("ui-droppable-active");
      } });var v,
        _ = t.ui.intersect = function () {
      function t(t, e, i) {
        return t >= e && t < e + i;
      }return function (e, i, n, s) {
        if (!i.offset) return !1;var r = (e.positionAbs || e.position.absolute).left + e.margins.left,
            o = (e.positionAbs || e.position.absolute).top + e.margins.top,
            a = r + e.helperProportions.width,
            l = o + e.helperProportions.height,
            u = i.offset.left,
            c = i.offset.top,
            h = u + i.proportions().width,
            d = c + i.proportions().height;switch (n) {case "fit":
            return u <= r && a <= h && c <= o && l <= d;case "intersect":
            return u < r + e.helperProportions.width / 2 && a - e.helperProportions.width / 2 < h && c < o + e.helperProportions.height / 2 && l - e.helperProportions.height / 2 < d;case "pointer":
            return t(s.pageY, c, i.proportions().height) && t(s.pageX, u, i.proportions().width);case "touch":
            return (o >= c && o <= d || l >= c && l <= d || o < c && l > d) && (r >= u && r <= h || a >= u && a <= h || r < u && a > h);default:
            return !1;}
      };
    }();
    /*!
     * jQuery UI Spinner 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    function b(t) {
      return function () {
        var e = this.element.val();t.apply(this, arguments), this._refresh(), e !== this.element.val() && this._trigger("change");
      };
    }t.ui.ddmanager = { current: null, droppables: { default: [] }, prepareOffsets: function prepareOffsets(e, i) {
        var n,
            s,
            r = t.ui.ddmanager.droppables[e.options.scope] || [],
            o = i ? i.type : null,
            a = (e.currentItem || e.element).find(":data(ui-droppable)").addBack();t: for (n = 0; n < r.length; n++) {
          if (!(r[n].options.disabled || e && !r[n].accept.call(r[n].element[0], e.currentItem || e.element))) {
            for (s = 0; s < a.length; s++) {
              if (a[s] === r[n].element[0]) {
                r[n].proportions().height = 0;continue t;
              }
            }r[n].visible = "none" !== r[n].element.css("display"), r[n].visible && ("mousedown" === o && r[n]._activate.call(r[n], i), r[n].offset = r[n].element.offset(), r[n].proportions({ width: r[n].element[0].offsetWidth, height: r[n].element[0].offsetHeight }));
          }
        }
      }, drop: function drop(e, i) {
        var n = !1;return t.each((t.ui.ddmanager.droppables[e.options.scope] || []).slice(), function () {
          this.options && (!this.options.disabled && this.visible && _(e, this, this.options.tolerance, i) && (n = this._drop.call(this, i) || n), !this.options.disabled && this.visible && this.accept.call(this.element[0], e.currentItem || e.element) && (this.isout = !0, this.isover = !1, this._deactivate.call(this, i)));
        }), n;
      }, dragStart: function dragStart(e, i) {
        e.element.parentsUntil("body").on("scroll.droppable", function () {
          e.options.refreshPositions || t.ui.ddmanager.prepareOffsets(e, i);
        });
      }, drag: function drag(e, i) {
        e.options.refreshPositions && t.ui.ddmanager.prepareOffsets(e, i), t.each(t.ui.ddmanager.droppables[e.options.scope] || [], function () {
          if (!this.options.disabled && !this.greedyChild && this.visible) {
            var n,
                s,
                r,
                o = _(e, this, this.options.tolerance, i),
                a = !o && this.isover ? "isout" : o && !this.isover ? "isover" : null;a && (this.options.greedy && (s = this.options.scope, (r = this.element.parents(":data(ui-droppable)").filter(function () {
              return t(this).droppable("instance").options.scope === s;
            })).length && ((n = t(r[0]).droppable("instance")).greedyChild = "isover" === a)), n && "isover" === a && (n.isover = !1, n.isout = !0, n._out.call(n, i)), this[a] = !0, this["isout" === a ? "isover" : "isout"] = !1, this["isover" === a ? "_over" : "_out"].call(this, i), n && "isout" === a && (n.isout = !1, n.isover = !0, n._over.call(n, i)));
          }
        });
      }, dragStop: function dragStop(e, i) {
        e.element.parentsUntil("body").off("scroll.droppable"), e.options.refreshPositions || t.ui.ddmanager.prepareOffsets(e, i);
      } }, !1 !== t.uiBackCompat && t.widget("ui.droppable", t.ui.droppable, { options: { hoverClass: !1, activeClass: !1 }, _addActiveClass: function _addActiveClass() {
        this._super(), this.options.activeClass && this.element.addClass(this.options.activeClass);
      }, _removeActiveClass: function _removeActiveClass() {
        this._super(), this.options.activeClass && this.element.removeClass(this.options.activeClass);
      }, _addHoverClass: function _addHoverClass() {
        this._super(), this.options.hoverClass && this.element.addClass(this.options.hoverClass);
      }, _removeHoverClass: function _removeHoverClass() {
        this._super(), this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
      } }), t.ui.droppable, t.widget("ui.progressbar", { version: "1.12.1", options: { classes: { "ui-progressbar": "ui-corner-all", "ui-progressbar-value": "ui-corner-left", "ui-progressbar-complete": "ui-corner-right" }, max: 100, value: 0, change: null, complete: null }, min: 0, _create: function _create() {
        this.oldValue = this.options.value = this._constrainedValue(), this.element.attr({ role: "progressbar", "aria-valuemin": this.min }), this._addClass("ui-progressbar", "ui-widget ui-widget-content"), this.valueDiv = t("<div>").appendTo(this.element), this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header"), this._refreshValue();
      }, _destroy: function _destroy() {
        this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"), this.valueDiv.remove();
      }, value: function value(t) {
        if (void 0 === t) return this.options.value;this.options.value = this._constrainedValue(t), this._refreshValue();
      }, _constrainedValue: function _constrainedValue(t) {
        return void 0 === t && (t = this.options.value), this.indeterminate = !1 === t, "number" != typeof t && (t = 0), !this.indeterminate && Math.min(this.options.max, Math.max(this.min, t));
      }, _setOptions: function _setOptions(t) {
        var e = t.value;delete t.value, this._super(t), this.options.value = this._constrainedValue(e), this._refreshValue();
      }, _setOption: function _setOption(t, e) {
        "max" === t && (e = Math.max(this.min, e)), this._super(t, e);
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t);
      }, _percentage: function _percentage() {
        return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
      }, _refreshValue: function _refreshValue() {
        var e = this.options.value,
            i = this._percentage();this.valueDiv.toggle(this.indeterminate || e > this.min).width(i.toFixed(0) + "%"), this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, e === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate), this.indeterminate ? (this.element.removeAttr("aria-valuenow"), this.overlayDiv || (this.overlayDiv = t("<div>").appendTo(this.valueDiv), this._addClass(this.overlayDiv, "ui-progressbar-overlay"))) : (this.element.attr({ "aria-valuemax": this.options.max, "aria-valuenow": e }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null)), this.oldValue !== e && (this.oldValue = e, this._trigger("change")), e === this.options.max && this._trigger("complete");
      } }), t.widget("ui.selectable", t.ui.mouse, { version: "1.12.1", options: { appendTo: "body", autoRefresh: !0, distance: 0, filter: "*", tolerance: "touch", selected: null, selecting: null, start: null, stop: null, unselected: null, unselecting: null }, _create: function _create() {
        var e = this;this._addClass("ui-selectable"), this.dragged = !1, this.refresh = function () {
          e.elementPos = t(e.element[0]).offset(), e.selectees = t(e.options.filter, e.element[0]), e._addClass(e.selectees, "ui-selectee"), e.selectees.each(function () {
            var i = t(this),
                n = i.offset(),
                s = { left: n.left - e.elementPos.left, top: n.top - e.elementPos.top };t.data(this, "selectable-item", { element: this, $element: i, left: s.left, top: s.top, right: s.left + i.outerWidth(), bottom: s.top + i.outerHeight(), startselected: !1, selected: i.hasClass("ui-selected"), selecting: i.hasClass("ui-selecting"), unselecting: i.hasClass("ui-unselecting") });
          });
        }, this.refresh(), this._mouseInit(), this.helper = t("<div>"), this._addClass(this.helper, "ui-selectable-helper");
      }, _destroy: function _destroy() {
        this.selectees.removeData("selectable-item"), this._mouseDestroy();
      }, _mouseStart: function _mouseStart(e) {
        var i = this,
            n = this.options;this.opos = [e.pageX, e.pageY], this.elementPos = t(this.element[0]).offset(), this.options.disabled || (this.selectees = t(n.filter, this.element[0]), this._trigger("start", e), t(n.appendTo).append(this.helper), this.helper.css({ left: e.pageX, top: e.pageY, width: 0, height: 0 }), n.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function () {
          var n = t.data(this, "selectable-item");n.startselected = !0, e.metaKey || e.ctrlKey || (i._removeClass(n.$element, "ui-selected"), n.selected = !1, i._addClass(n.$element, "ui-unselecting"), n.unselecting = !0, i._trigger("unselecting", e, { unselecting: n.element }));
        }), t(e.target).parents().addBack().each(function () {
          var n,
              s = t.data(this, "selectable-item");if (s) return n = !e.metaKey && !e.ctrlKey || !s.$element.hasClass("ui-selected"), i._removeClass(s.$element, n ? "ui-unselecting" : "ui-selected")._addClass(s.$element, n ? "ui-selecting" : "ui-unselecting"), s.unselecting = !n, s.selecting = n, s.selected = n, n ? i._trigger("selecting", e, { selecting: s.element }) : i._trigger("unselecting", e, { unselecting: s.element }), !1;
        }));
      }, _mouseDrag: function _mouseDrag(e) {
        if (this.dragged = !0, !this.options.disabled) {
          var i,
              n = this,
              s = this.options,
              r = this.opos[0],
              o = this.opos[1],
              a = e.pageX,
              l = e.pageY;return r > a && (i = a, a = r, r = i), o > l && (i = l, l = o, o = i), this.helper.css({ left: r, top: o, width: a - r, height: l - o }), this.selectees.each(function () {
            var i = t.data(this, "selectable-item"),
                u = !1,
                c = {};i && i.element !== n.element[0] && (c.left = i.left + n.elementPos.left, c.right = i.right + n.elementPos.left, c.top = i.top + n.elementPos.top, c.bottom = i.bottom + n.elementPos.top, "touch" === s.tolerance ? u = !(c.left > a || c.right < r || c.top > l || c.bottom < o) : "fit" === s.tolerance && (u = c.left > r && c.right < a && c.top > o && c.bottom < l), u ? (i.selected && (n._removeClass(i.$element, "ui-selected"), i.selected = !1), i.unselecting && (n._removeClass(i.$element, "ui-unselecting"), i.unselecting = !1), i.selecting || (n._addClass(i.$element, "ui-selecting"), i.selecting = !0, n._trigger("selecting", e, { selecting: i.element }))) : (i.selecting && ((e.metaKey || e.ctrlKey) && i.startselected ? (n._removeClass(i.$element, "ui-selecting"), i.selecting = !1, n._addClass(i.$element, "ui-selected"), i.selected = !0) : (n._removeClass(i.$element, "ui-selecting"), i.selecting = !1, i.startselected && (n._addClass(i.$element, "ui-unselecting"), i.unselecting = !0), n._trigger("unselecting", e, { unselecting: i.element }))), i.selected && (e.metaKey || e.ctrlKey || i.startselected || (n._removeClass(i.$element, "ui-selected"), i.selected = !1, n._addClass(i.$element, "ui-unselecting"), i.unselecting = !0, n._trigger("unselecting", e, { unselecting: i.element })))));
          }), !1;
        }
      }, _mouseStop: function _mouseStop(e) {
        var i = this;return this.dragged = !1, t(".ui-unselecting", this.element[0]).each(function () {
          var n = t.data(this, "selectable-item");i._removeClass(n.$element, "ui-unselecting"), n.unselecting = !1, n.startselected = !1, i._trigger("unselected", e, { unselected: n.element });
        }), t(".ui-selecting", this.element[0]).each(function () {
          var n = t.data(this, "selectable-item");i._removeClass(n.$element, "ui-selecting")._addClass(n.$element, "ui-selected"), n.selecting = !1, n.selected = !0, n.startselected = !0, i._trigger("selected", e, { selected: n.element });
        }), this._trigger("stop", e), this.helper.remove(), !1;
      } }), t.widget("ui.selectmenu", [t.ui.formResetMixin, { version: "1.12.1", defaultElement: "<select>", options: { appendTo: null, classes: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" }, disabled: null, icons: { button: "ui-icon-triangle-1-s" }, position: { my: "left top", at: "left bottom", collision: "none" }, width: !1, change: null, close: null, focus: null, open: null, select: null }, _create: function _create() {
        var e = this.element.uniqueId().attr("id");this.ids = { element: e, button: e + "-button", menu: e + "-menu" }, this._drawButton(), this._drawMenu(), this._bindFormResetHandler(), this._rendered = !1, this.menuItems = t();
      }, _drawButton: function _drawButton() {
        var e,
            i = this,
            n = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);this.labels = this.element.labels().attr("for", this.ids.button), this._on(this.labels, { click: function click(t) {
            this.button.focus(), t.preventDefault();
          } }), this.element.hide(), this.button = t("<span>", { tabindex: this.options.disabled ? -1 : 0, id: this.ids.button, role: "combobox", "aria-expanded": "false", "aria-autocomplete": "list", "aria-owns": this.ids.menu, "aria-haspopup": "true", title: this.element.attr("title") }).insertAfter(this.element), this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget"), e = t("<span>").appendTo(this.button), this._addClass(e, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button), this.buttonItem = this._renderButtonItem(n).appendTo(this.button), !1 !== this.options.width && this._resizeButton(), this._on(this.button, this._buttonEvents), this.button.one("focusin", function () {
          i._rendered || i._refreshMenu();
        });
      }, _drawMenu: function _drawMenu() {
        var e = this;this.menu = t("<ul>", { "aria-hidden": "true", "aria-labelledby": this.ids.button, id: this.ids.menu }), this.menuWrap = t("<div>").append(this.menu), this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front"), this.menuWrap.appendTo(this._appendTo()), this.menuInstance = this.menu.menu({ classes: { "ui-menu": "ui-corner-bottom" }, role: "listbox", select: function select(t, i) {
            t.preventDefault(), e._setSelection(), e._select(i.item.data("ui-selectmenu-item"), t);
          }, focus: function focus(t, i) {
            var n = i.item.data("ui-selectmenu-item");null != e.focusIndex && n.index !== e.focusIndex && (e._trigger("focus", t, { item: n }), e.isOpen || e._select(n, t)), e.focusIndex = n.index, e.button.attr("aria-activedescendant", e.menuItems.eq(n.index).attr("id"));
          } }).menu("instance"), this.menuInstance._off(this.menu, "mouseleave"), this.menuInstance._closeOnDocumentClick = function () {
          return !1;
        }, this.menuInstance._isDivider = function () {
          return !1;
        };
      }, refresh: function refresh() {
        this._refreshMenu(), this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {})), null === this.options.width && this._resizeButton();
      }, _refreshMenu: function _refreshMenu() {
        var t,
            e = this.element.find("option");this.menu.empty(), this._parseOptions(e), this._renderMenu(this.menu, this.items), this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"), this._rendered = !0, e.length && (t = this._getSelectedItem(), this.menuInstance.focus(null, t), this._setAria(t.data("ui-selectmenu-item")), this._setOption("disabled", this.element.prop("disabled")));
      }, open: function open(t) {
        this.options.disabled || (this._rendered ? (this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active"), this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), this.menuItems.length && (this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), this._position(), this._on(this.document, this._documentClick), this._trigger("open", t)));
      }, _position: function _position() {
        this.menuWrap.position(t.extend({ of: this.button }, this.options.position));
      }, close: function close(t) {
        this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range = null, this._off(this.document), this._trigger("close", t));
      }, widget: function widget() {
        return this.button;
      }, menuWidget: function menuWidget() {
        return this.menu;
      }, _renderButtonItem: function _renderButtonItem(e) {
        var i = t("<span>");return this._setText(i, e.label), this._addClass(i, "ui-selectmenu-text"), i;
      }, _renderMenu: function _renderMenu(e, i) {
        var n = this,
            s = "";t.each(i, function (i, r) {
          var o;r.optgroup !== s && (o = t("<li>", { text: r.optgroup }), n._addClass(o, "ui-selectmenu-optgroup", "ui-menu-divider" + (r.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : "")), o.appendTo(e), s = r.optgroup), n._renderItemData(e, r);
        });
      }, _renderItemData: function _renderItemData(t, e) {
        return this._renderItem(t, e).data("ui-selectmenu-item", e);
      }, _renderItem: function _renderItem(e, i) {
        var n = t("<li>"),
            s = t("<div>", { title: i.element.attr("title") });return i.disabled && this._addClass(n, null, "ui-state-disabled"), this._setText(s, i.label), n.append(s).appendTo(e);
      }, _setText: function _setText(t, e) {
        e ? t.text(e) : t.html("&#160;");
      }, _move: function _move(t, e) {
        var i,
            n,
            s = ".ui-menu-item";this.isOpen ? i = this.menuItems.eq(this.focusIndex).parent("li") : (i = this.menuItems.eq(this.element[0].selectedIndex).parent("li"), s += ":not(.ui-state-disabled)"), (n = "first" === t || "last" === t ? i["first" === t ? "prevAll" : "nextAll"](s).eq(-1) : i[t + "All"](s).eq(0)).length && this.menuInstance.focus(e, n);
      }, _getSelectedItem: function _getSelectedItem() {
        return this.menuItems.eq(this.element[0].selectedIndex).parent("li");
      }, _toggle: function _toggle(t) {
        this[this.isOpen ? "close" : "open"](t);
      }, _setSelection: function _setSelection() {
        var t;this.range && (window.getSelection ? ((t = window.getSelection()).removeAllRanges(), t.addRange(this.range)) : this.range.select(), this.button.focus());
      }, _documentClick: { mousedown: function mousedown(e) {
          this.isOpen && (t(e.target).closest(".ui-selectmenu-menu, #" + t.ui.escapeSelector(this.ids.button)).length || this.close(e));
        } }, _buttonEvents: { mousedown: function mousedown() {
          var t;window.getSelection ? (t = window.getSelection()).rangeCount && (this.range = t.getRangeAt(0)) : this.range = document.selection.createRange();
        }, click: function click(t) {
          this._setSelection(), this._toggle(t);
        }, keydown: function keydown(e) {
          var i = !0;switch (e.keyCode) {case t.ui.keyCode.TAB:case t.ui.keyCode.ESCAPE:
              this.close(e), i = !1;break;case t.ui.keyCode.ENTER:
              this.isOpen && this._selectFocusedItem(e);break;case t.ui.keyCode.UP:
              e.altKey ? this._toggle(e) : this._move("prev", e);break;case t.ui.keyCode.DOWN:
              e.altKey ? this._toggle(e) : this._move("next", e);break;case t.ui.keyCode.SPACE:
              this.isOpen ? this._selectFocusedItem(e) : this._toggle(e);break;case t.ui.keyCode.LEFT:
              this._move("prev", e);break;case t.ui.keyCode.RIGHT:
              this._move("next", e);break;case t.ui.keyCode.HOME:case t.ui.keyCode.PAGE_UP:
              this._move("first", e);break;case t.ui.keyCode.END:case t.ui.keyCode.PAGE_DOWN:
              this._move("last", e);break;default:
              this.menu.trigger(e), i = !1;}i && e.preventDefault();
        } }, _selectFocusedItem: function _selectFocusedItem(t) {
        var e = this.menuItems.eq(this.focusIndex).parent("li");e.hasClass("ui-state-disabled") || this._select(e.data("ui-selectmenu-item"), t);
      }, _select: function _select(t, e) {
        var i = this.element[0].selectedIndex;this.element[0].selectedIndex = t.index, this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(t)), this._setAria(t), this._trigger("select", e, { item: t }), t.index !== i && this._trigger("change", e, { item: t }), this.close(e);
      }, _setAria: function _setAria(t) {
        var e = this.menuItems.eq(t.index).attr("id");this.button.attr({ "aria-labelledby": e, "aria-activedescendant": e }), this.menu.attr("aria-activedescendant", e);
      }, _setOption: function _setOption(t, e) {
        if ("icons" === t) {
          var i = this.button.find("span.ui-icon");this._removeClass(i, null, this.options.icons.button)._addClass(i, null, e.button);
        }this._super(t, e), "appendTo" === t && this.menuWrap.appendTo(this._appendTo()), "width" === t && this._resizeButton();
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._super(t), this.menuInstance.option("disabled", t), this.button.attr("aria-disabled", t), this._toggleClass(this.button, null, "ui-state-disabled", t), this.element.prop("disabled", t), t ? (this.button.attr("tabindex", -1), this.close()) : this.button.attr("tabindex", 0);
      }, _appendTo: function _appendTo() {
        var e = this.options.appendTo;return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e;
      }, _toggleAttr: function _toggleAttr() {
        this.button.attr("aria-expanded", this.isOpen), this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen), this.menu.attr("aria-hidden", !this.isOpen);
      }, _resizeButton: function _resizeButton() {
        var t = this.options.width;!1 !== t ? (null === t && (t = this.element.show().outerWidth(), this.element.hide()), this.button.outerWidth(t)) : this.button.css("width", "");
      }, _resizeMenu: function _resizeMenu() {
        this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1));
      }, _getCreateOptions: function _getCreateOptions() {
        var t = this._super();return t.disabled = this.element.prop("disabled"), t;
      }, _parseOptions: function _parseOptions(e) {
        var i = this,
            n = [];e.each(function (e, s) {
          n.push(i._parseOption(t(s), e));
        }), this.items = n;
      }, _parseOption: function _parseOption(t, e) {
        var i = t.parent("optgroup");return { element: t, index: e, value: t.val(), label: t.text(), optgroup: i.attr("label") || "", disabled: i.prop("disabled") || t.prop("disabled") };
      }, _destroy: function _destroy() {
        this._unbindFormResetHandler(), this.menuWrap.remove(), this.button.remove(), this.element.show(), this.element.removeUniqueId(), this.labels.attr("for", this.ids.element);
      } }]), t.widget("ui.slider", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "slide", options: { animate: !1, classes: { "ui-slider": "ui-corner-all", "ui-slider-handle": "ui-corner-all", "ui-slider-range": "ui-corner-all ui-widget-header" }, distance: 0, max: 100, min: 0, orientation: "horizontal", range: !1, step: 1, value: 0, values: null, change: null, slide: null, start: null, stop: null }, numPages: 5, _create: function _create() {
        this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content"), this._refresh(), this._animateOff = !1;
      }, _refresh: function _refresh() {
        this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue();
      }, _createHandles: function _createHandles() {
        var e,
            i,
            n = this.options,
            s = this.element.find(".ui-slider-handle"),
            r = [];for (i = n.values && n.values.length || 1, s.length > i && (s.slice(i).remove(), s = s.slice(0, i)), e = s.length; e < i; e++) {
          r.push("<span tabindex='0'></span>");
        }this.handles = s.add(t(r.join("")).appendTo(this.element)), this._addClass(this.handles, "ui-slider-handle", "ui-state-default"), this.handle = this.handles.eq(0), this.handles.each(function (e) {
          t(this).data("ui-slider-handle-index", e).attr("tabIndex", 0);
        });
      }, _createRange: function _createRange() {
        var e = this.options;e.range ? (!0 === e.range && (e.values ? e.values.length && 2 !== e.values.length ? e.values = [e.values[0], e.values[0]] : t.isArray(e.values) && (e.values = e.values.slice(0)) : e.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? (this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max"), this.range.css({ left: "", bottom: "" })) : (this.range = t("<div>").appendTo(this.element), this._addClass(this.range, "ui-slider-range")), "min" !== e.range && "max" !== e.range || this._addClass(this.range, "ui-slider-range-" + e.range)) : (this.range && this.range.remove(), this.range = null);
      }, _setupEvents: function _setupEvents() {
        this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), this._focusable(this.handles);
      }, _destroy: function _destroy() {
        this.handles.remove(), this.range && this.range.remove(), this._mouseDestroy();
      }, _mouseCapture: function _mouseCapture(e) {
        var i,
            n,
            s,
            r,
            o,
            a,
            l,
            u = this,
            c = this.options;return !c.disabled && (this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() }, this.elementOffset = this.element.offset(), i = { x: e.pageX, y: e.pageY }, n = this._normValueFromMouse(i), s = this._valueMax() - this._valueMin() + 1, this.handles.each(function (e) {
          var i = Math.abs(n - u.values(e));(s > i || s === i && (e === u._lastChangedValue || u.values(e) === c.min)) && (s = i, r = t(this), o = e);
        }), !1 !== this._start(e, o) && (this._mouseSliding = !0, this._handleIndex = o, this._addClass(r, null, "ui-state-active"), r.trigger("focus"), a = r.offset(), l = !t(e.target).parents().addBack().is(".ui-slider-handle"), this._clickOffset = l ? { left: 0, top: 0 } : { left: e.pageX - a.left - r.width() / 2, top: e.pageY - a.top - r.height() / 2 - (parseInt(r.css("borderTopWidth"), 10) || 0) - (parseInt(r.css("borderBottomWidth"), 10) || 0) + (parseInt(r.css("marginTop"), 10) || 0) }, this.handles.hasClass("ui-state-hover") || this._slide(e, o, n), this._animateOff = !0, !0));
      }, _mouseStart: function _mouseStart() {
        return !0;
      }, _mouseDrag: function _mouseDrag(t) {
        var e = { x: t.pageX, y: t.pageY },
            i = this._normValueFromMouse(e);return this._slide(t, this._handleIndex, i), !1;
      }, _mouseStop: function _mouseStop(t) {
        return this._removeClass(this.handles, null, "ui-state-active"), this._mouseSliding = !1, this._stop(t, this._handleIndex), this._change(t, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1, !1;
      }, _detectOrientation: function _detectOrientation() {
        this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
      }, _normValueFromMouse: function _normValueFromMouse(t) {
        var e, i, n, s, r;return "horizontal" === this.orientation ? (e = this.elementSize.width, i = t.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (e = this.elementSize.height, i = t.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), (n = i / e) > 1 && (n = 1), n < 0 && (n = 0), "vertical" === this.orientation && (n = 1 - n), s = this._valueMax() - this._valueMin(), r = this._valueMin() + n * s, this._trimAlignValue(r);
      }, _uiHash: function _uiHash(t, e, i) {
        var n = { handle: this.handles[t], handleIndex: t, value: void 0 !== e ? e : this.value() };return this._hasMultipleValues() && (n.value = void 0 !== e ? e : this.values(t), n.values = i || this.values()), n;
      }, _hasMultipleValues: function _hasMultipleValues() {
        return this.options.values && this.options.values.length;
      }, _start: function _start(t, e) {
        return this._trigger("start", t, this._uiHash(e));
      }, _slide: function _slide(t, e, i) {
        var n,
            s = this.value(),
            r = this.values();this._hasMultipleValues() && (n = this.values(e ? 0 : 1), s = this.values(e), 2 === this.options.values.length && !0 === this.options.range && (i = 0 === e ? Math.min(n, i) : Math.max(n, i)), r[e] = i), i !== s && !1 !== this._trigger("slide", t, this._uiHash(e, i, r)) && (this._hasMultipleValues() ? this.values(e, i) : this.value(i));
      }, _stop: function _stop(t, e) {
        this._trigger("stop", t, this._uiHash(e));
      }, _change: function _change(t, e) {
        this._keySliding || this._mouseSliding || (this._lastChangedValue = e, this._trigger("change", t, this._uiHash(e)));
      }, value: function value(t) {
        return arguments.length ? (this.options.value = this._trimAlignValue(t), this._refreshValue(), void this._change(null, 0)) : this._value();
      }, values: function values(e, i) {
        var n, s, r;if (arguments.length > 1) return this.options.values[e] = this._trimAlignValue(i), this._refreshValue(), void this._change(null, e);if (!arguments.length) return this._values();if (!t.isArray(arguments[0])) return this._hasMultipleValues() ? this._values(e) : this.value();for (n = this.options.values, s = arguments[0], r = 0; r < n.length; r += 1) {
          n[r] = this._trimAlignValue(s[r]), this._change(null, r);
        }this._refreshValue();
      }, _setOption: function _setOption(e, i) {
        var n,
            s = 0;switch ("range" === e && !0 === this.options.range && ("min" === i ? (this.options.value = this._values(0), this.options.values = null) : "max" === i && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null)), t.isArray(this.options.values) && (s = this.options.values.length), this._super(e, i), e) {case "orientation":
            this._detectOrientation(), this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation), this._refreshValue(), this.options.range && this._refreshRange(i), this.handles.css("horizontal" === i ? "bottom" : "left", "");break;case "value":
            this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1;break;case "values":
            for (this._animateOff = !0, this._refreshValue(), n = s - 1; n >= 0; n--) {
              this._change(null, n);
            }this._animateOff = !1;break;case "step":case "min":case "max":
            this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1;break;case "range":
            this._animateOff = !0, this._refresh(), this._animateOff = !1;}
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._super(t), this._toggleClass(null, "ui-state-disabled", !!t);
      }, _value: function _value() {
        var t = this.options.value;return t = this._trimAlignValue(t);
      }, _values: function _values(t) {
        var e, i, n;if (arguments.length) return e = this.options.values[t], e = this._trimAlignValue(e);if (this._hasMultipleValues()) {
          for (i = this.options.values.slice(), n = 0; n < i.length; n += 1) {
            i[n] = this._trimAlignValue(i[n]);
          }return i;
        }return [];
      }, _trimAlignValue: function _trimAlignValue(t) {
        if (t <= this._valueMin()) return this._valueMin();if (t >= this._valueMax()) return this._valueMax();var e = this.options.step > 0 ? this.options.step : 1,
            i = (t - this._valueMin()) % e,
            n = t - i;return 2 * Math.abs(i) >= e && (n += i > 0 ? e : -e), parseFloat(n.toFixed(5));
      }, _calculateNewMax: function _calculateNewMax() {
        var t = this.options.max,
            e = this._valueMin(),
            i = this.options.step,
            n = Math.round((t - e) / i) * i;(t = n + e) > this.options.max && (t -= i), this.max = parseFloat(t.toFixed(this._precision()));
      }, _precision: function _precision() {
        var t = this._precisionOf(this.options.step);return null !== this.options.min && (t = Math.max(t, this._precisionOf(this.options.min))), t;
      }, _precisionOf: function _precisionOf(t) {
        var e = t.toString(),
            i = e.indexOf(".");return -1 === i ? 0 : e.length - i - 1;
      }, _valueMin: function _valueMin() {
        return this.options.min;
      }, _valueMax: function _valueMax() {
        return this.max;
      }, _refreshRange: function _refreshRange(t) {
        "vertical" === t && this.range.css({ width: "", left: "" }), "horizontal" === t && this.range.css({ height: "", bottom: "" });
      }, _refreshValue: function _refreshValue() {
        var e,
            i,
            n,
            s,
            r,
            o = this.options.range,
            a = this.options,
            l = this,
            u = !this._animateOff && a.animate,
            c = {};this._hasMultipleValues() ? this.handles.each(function (n) {
          i = (l.values(n) - l._valueMin()) / (l._valueMax() - l._valueMin()) * 100, c["horizontal" === l.orientation ? "left" : "bottom"] = i + "%", t(this).stop(1, 1)[u ? "animate" : "css"](c, a.animate), !0 === l.options.range && ("horizontal" === l.orientation ? (0 === n && l.range.stop(1, 1)[u ? "animate" : "css"]({ left: i + "%" }, a.animate), 1 === n && l.range[u ? "animate" : "css"]({ width: i - e + "%" }, { queue: !1, duration: a.animate })) : (0 === n && l.range.stop(1, 1)[u ? "animate" : "css"]({ bottom: i + "%" }, a.animate), 1 === n && l.range[u ? "animate" : "css"]({ height: i - e + "%" }, { queue: !1, duration: a.animate }))), e = i;
        }) : (n = this.value(), s = this._valueMin(), r = this._valueMax(), i = r !== s ? (n - s) / (r - s) * 100 : 0, c["horizontal" === this.orientation ? "left" : "bottom"] = i + "%", this.handle.stop(1, 1)[u ? "animate" : "css"](c, a.animate), "min" === o && "horizontal" === this.orientation && this.range.stop(1, 1)[u ? "animate" : "css"]({ width: i + "%" }, a.animate), "max" === o && "horizontal" === this.orientation && this.range.stop(1, 1)[u ? "animate" : "css"]({ width: 100 - i + "%" }, a.animate), "min" === o && "vertical" === this.orientation && this.range.stop(1, 1)[u ? "animate" : "css"]({ height: i + "%" }, a.animate), "max" === o && "vertical" === this.orientation && this.range.stop(1, 1)[u ? "animate" : "css"]({ height: 100 - i + "%" }, a.animate));
      }, _handleEvents: { keydown: function keydown(e) {
          var i,
              n,
              s,
              r = t(e.target).data("ui-slider-handle-index");switch (e.keyCode) {case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:
              if (e.preventDefault(), !this._keySliding && (this._keySliding = !0, this._addClass(t(e.target), null, "ui-state-active"), !1 === this._start(e, r))) return;}switch (s = this.options.step, i = n = this._hasMultipleValues() ? this.values(r) : this.value(), e.keyCode) {case t.ui.keyCode.HOME:
              n = this._valueMin();break;case t.ui.keyCode.END:
              n = this._valueMax();break;case t.ui.keyCode.PAGE_UP:
              n = this._trimAlignValue(i + (this._valueMax() - this._valueMin()) / this.numPages);break;case t.ui.keyCode.PAGE_DOWN:
              n = this._trimAlignValue(i - (this._valueMax() - this._valueMin()) / this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:
              if (i === this._valueMax()) return;n = this._trimAlignValue(i + s);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:
              if (i === this._valueMin()) return;n = this._trimAlignValue(i - s);}this._slide(e, r, n);
        }, keyup: function keyup(e) {
          var i = t(e.target).data("ui-slider-handle-index");this._keySliding && (this._keySliding = !1, this._stop(e, i), this._change(e, i), this._removeClass(t(e.target), null, "ui-state-active"));
        } } }), t.widget("ui.sortable", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "sort", ready: !1, options: { appendTo: "parent", axis: !1, connectWith: !1, containment: !1, cursor: "auto", cursorAt: !1, dropOnEmpty: !0, forcePlaceholderSize: !1, forceHelperSize: !1, grid: !1, handle: !1, helper: "original", items: "> *", opacity: !1, placeholder: !1, revert: !1, scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1e3, activate: null, beforeStop: null, change: null, deactivate: null, out: null, over: null, receive: null, remove: null, sort: null, start: null, stop: null, update: null }, _isOverAxis: function _isOverAxis(t, e, i) {
        return t >= e && t < e + i;
      }, _isFloating: function _isFloating(t) {
        return (/left|right/.test(t.css("float")) || /inline|table-cell/.test(t.css("display"))
        );
      }, _create: function _create() {
        this.containerCache = {}, this._addClass("ui-sortable"), this.refresh(), this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0;
      }, _setOption: function _setOption(t, e) {
        this._super(t, e), "handle" === t && this._setHandleClassName();
      }, _setHandleClassName: function _setHandleClassName() {
        var e = this;this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle"), t.each(this.items, function () {
          e._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle");
        });
      }, _destroy: function _destroy() {
        this._mouseDestroy();for (var t = this.items.length - 1; t >= 0; t--) {
          this.items[t].item.removeData(this.widgetName + "-item");
        }return this;
      }, _mouseCapture: function _mouseCapture(e, i) {
        var n = null,
            s = !1,
            r = this;return !(this.reverting || this.options.disabled || "static" === this.options.type || (this._refreshItems(e), t(e.target).parents().each(function () {
          if (t.data(this, r.widgetName + "-item") === r) return n = t(this), !1;
        }), t.data(e.target, r.widgetName + "-item") === r && (n = t(e.target)), !n || this.options.handle && !i && (t(this.options.handle, n).find("*").addBack().each(function () {
          this === e.target && (s = !0);
        }), !s) || (this.currentItem = n, this._removeCurrentsFromItems(), 0)));
      }, _mouseStart: function _mouseStart(e, i, n) {
        var s,
            r,
            o = this.options;if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(e), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }, t.extend(this.offset, { click: { left: e.pageX - this.offset.left, top: e.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt), this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), o.containment && this._setContainment(), o.cursor && "auto" !== o.cursor && (r = this.document.find("body"), this.storedCursor = r.css("cursor"), r.css("cursor", o.cursor), this.storedStylesheet = t("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(r)), o.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", o.opacity)), o.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", o.zIndex)), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", e, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !n) for (s = this.containers.length - 1; s >= 0; s--) {
          this.containers[s]._trigger("activate", e, this._uiHash(this));
        }return t.ui.ddmanager && (t.ui.ddmanager.current = this), t.ui.ddmanager && !o.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this.dragging = !0, this._addClass(this.helper, "ui-sortable-helper"), this._mouseDrag(e), !0;
      }, _mouseDrag: function _mouseDrag(e) {
        var i,
            n,
            s,
            r,
            o = this.options,
            a = !1;for (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo("absolute"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll && (this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - e.pageY < o.scrollSensitivity ? this.scrollParent[0].scrollTop = a = this.scrollParent[0].scrollTop + o.scrollSpeed : e.pageY - this.overflowOffset.top < o.scrollSensitivity && (this.scrollParent[0].scrollTop = a = this.scrollParent[0].scrollTop - o.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - e.pageX < o.scrollSensitivity ? this.scrollParent[0].scrollLeft = a = this.scrollParent[0].scrollLeft + o.scrollSpeed : e.pageX - this.overflowOffset.left < o.scrollSensitivity && (this.scrollParent[0].scrollLeft = a = this.scrollParent[0].scrollLeft - o.scrollSpeed)) : (e.pageY - this.document.scrollTop() < o.scrollSensitivity ? a = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed) : this.window.height() - (e.pageY - this.document.scrollTop()) < o.scrollSensitivity && (a = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed)), e.pageX - this.document.scrollLeft() < o.scrollSensitivity ? a = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed) : this.window.width() - (e.pageX - this.document.scrollLeft()) < o.scrollSensitivity && (a = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed))), !1 !== a && t.ui.ddmanager && !o.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e)), this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), i = this.items.length - 1; i >= 0; i--) {
          if (n = this.items[i], s = n.item[0], (r = this._intersectsWithPointer(n)) && n.instance === this.currentContainer && !(s === this.currentItem[0] || this.placeholder[1 === r ? "next" : "prev"]()[0] === s || t.contains(this.placeholder[0], s) || "semi-dynamic" === this.options.type && t.contains(this.element[0], s))) {
            if (this.direction = 1 === r ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(n)) break;this._rearrange(e, n), this._trigger("change", e, this._uiHash());break;
          }
        }return this._contactContainers(e), t.ui.ddmanager && t.ui.ddmanager.drag(this, e), this._trigger("sort", e, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1;
      }, _mouseStop: function _mouseStop(e, i) {
        if (e) {
          if (t.ui.ddmanager && !this.options.dropBehaviour && t.ui.ddmanager.drop(this, e), this.options.revert) {
            var n = this,
                s = this.placeholder.offset(),
                r = this.options.axis,
                o = {};r && "x" !== r || (o.left = s.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), r && "y" !== r || (o.top = s.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, t(this.helper).animate(o, parseInt(this.options.revert, 10) || 500, function () {
              n._clear(e);
            });
          } else this._clear(e, i);return !1;
        }
      }, cancel: function cancel() {
        if (this.dragging) {
          this._mouseUp(new t.Event("mouseup", { target: null })), "original" === this.options.helper ? (this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper")) : this.currentItem.show();for (var e = this.containers.length - 1; e >= 0; e--) {
            this.containers[e]._trigger("deactivate", null, this._uiHash(this)), this.containers[e].containerCache.over && (this.containers[e]._trigger("out", null, this._uiHash(this)), this.containers[e].containerCache.over = 0);
          }
        }return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), t.extend(this, { helper: null, dragging: !1, reverting: !1, _noFinalSort: null }), this.domPosition.prev ? t(this.domPosition.prev).after(this.currentItem) : t(this.domPosition.parent).prepend(this.currentItem)), this;
      }, serialize: function serialize(e) {
        var i = this._getItemsAsjQuery(e && e.connected),
            n = [];return e = e || {}, t(i).each(function () {
          var i = (t(e.item || this).attr(e.attribute || "id") || "").match(e.expression || /(.+)[\-=_](.+)/);i && n.push((e.key || i[1] + "[]") + "=" + (e.key && e.expression ? i[1] : i[2]));
        }), !n.length && e.key && n.push(e.key + "="), n.join("&");
      }, toArray: function toArray(e) {
        var i = this._getItemsAsjQuery(e && e.connected),
            n = [];return e = e || {}, i.each(function () {
          n.push(t(e.item || this).attr(e.attribute || "id") || "");
        }), n;
      }, _intersectsWith: function _intersectsWith(t) {
        var e = this.positionAbs.left,
            i = e + this.helperProportions.width,
            n = this.positionAbs.top,
            s = n + this.helperProportions.height,
            r = t.left,
            o = r + t.width,
            a = t.top,
            l = a + t.height,
            u = this.offset.click.top,
            c = this.offset.click.left,
            h = "x" === this.options.axis || n + u > a && n + u < l,
            d = "y" === this.options.axis || e + c > r && e + c < o,
            p = h && d;return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > t[this.floating ? "width" : "height"] ? p : r < e + this.helperProportions.width / 2 && i - this.helperProportions.width / 2 < o && a < n + this.helperProportions.height / 2 && s - this.helperProportions.height / 2 < l;
      }, _intersectsWithPointer: function _intersectsWithPointer(t) {
        var e,
            i,
            n = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height),
            s = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width),
            r = n && s;return !!r && (e = this._getDragVerticalDirection(), i = this._getDragHorizontalDirection(), this.floating ? "right" === i || "down" === e ? 2 : 1 : e && ("down" === e ? 2 : 1));
      }, _intersectsWithSides: function _intersectsWithSides(t) {
        var e = this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height),
            i = this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width),
            n = this._getDragVerticalDirection(),
            s = this._getDragHorizontalDirection();return this.floating && s ? "right" === s && i || "left" === s && !i : n && ("down" === n && e || "up" === n && !e);
      }, _getDragVerticalDirection: function _getDragVerticalDirection() {
        var t = this.positionAbs.top - this.lastPositionAbs.top;return 0 !== t && (t > 0 ? "down" : "up");
      }, _getDragHorizontalDirection: function _getDragHorizontalDirection() {
        var t = this.positionAbs.left - this.lastPositionAbs.left;return 0 !== t && (t > 0 ? "right" : "left");
      }, refresh: function refresh(t) {
        return this._refreshItems(t), this._setHandleClassName(), this.refreshPositions(), this;
      }, _connectWith: function _connectWith() {
        var t = this.options;return t.connectWith.constructor === String ? [t.connectWith] : t.connectWith;
      }, _getItemsAsjQuery: function _getItemsAsjQuery(e) {
        var i,
            n,
            s,
            r,
            o = [],
            a = [],
            l = this._connectWith();if (l && e) for (i = l.length - 1; i >= 0; i--) {
          for (s = t(l[i], this.document[0]), n = s.length - 1; n >= 0; n--) {
            (r = t.data(s[n], this.widgetFullName)) && r !== this && !r.options.disabled && a.push([t.isFunction(r.options.items) ? r.options.items.call(r.element) : t(r.options.items, r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), r]);
          }
        }function u() {
          o.push(this);
        }for (a.push([t.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : t(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]), i = a.length - 1; i >= 0; i--) {
          a[i][0].each(u);
        }return t(o);
      }, _removeCurrentsFromItems: function _removeCurrentsFromItems() {
        var e = this.currentItem.find(":data(" + this.widgetName + "-item)");this.items = t.grep(this.items, function (t) {
          for (var i = 0; i < e.length; i++) {
            if (e[i] === t.item[0]) return !1;
          }return !0;
        });
      }, _refreshItems: function _refreshItems(e) {
        this.items = [], this.containers = [this];var i,
            n,
            s,
            r,
            o,
            a,
            l,
            u,
            c = this.items,
            h = [[t.isFunction(this.options.items) ? this.options.items.call(this.element[0], e, { item: this.currentItem }) : t(this.options.items, this.element), this]],
            d = this._connectWith();if (d && this.ready) for (i = d.length - 1; i >= 0; i--) {
          for (s = t(d[i], this.document[0]), n = s.length - 1; n >= 0; n--) {
            (r = t.data(s[n], this.widgetFullName)) && r !== this && !r.options.disabled && (h.push([t.isFunction(r.options.items) ? r.options.items.call(r.element[0], e, { item: this.currentItem }) : t(r.options.items, r.element), r]), this.containers.push(r));
          }
        }for (i = h.length - 1; i >= 0; i--) {
          for (o = h[i][1], a = h[i][0], n = 0, u = a.length; n < u; n++) {
            (l = t(a[n])).data(this.widgetName + "-item", o), c.push({ item: l, instance: o, width: 0, height: 0, left: 0, top: 0 });
          }
        }
      }, refreshPositions: function refreshPositions(e) {
        var i, n, s, r;for (this.floating = !!this.items.length && ("x" === this.options.axis || this._isFloating(this.items[0].item)), this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset()), i = this.items.length - 1; i >= 0; i--) {
          (n = this.items[i]).instance !== this.currentContainer && this.currentContainer && n.item[0] !== this.currentItem[0] || (s = this.options.toleranceElement ? t(this.options.toleranceElement, n.item) : n.item, e || (n.width = s.outerWidth(), n.height = s.outerHeight()), r = s.offset(), n.left = r.left, n.top = r.top);
        }if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);else for (i = this.containers.length - 1; i >= 0; i--) {
          r = this.containers[i].element.offset(), this.containers[i].containerCache.left = r.left, this.containers[i].containerCache.top = r.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
        }return this;
      }, _createPlaceholder: function _createPlaceholder(e) {
        var i,
            n = (e = e || this).options;n.placeholder && n.placeholder.constructor !== String || (i = n.placeholder, n.placeholder = { element: function element() {
            var n = e.currentItem[0].nodeName.toLowerCase(),
                s = t("<" + n + ">", e.document[0]);return e._addClass(s, "ui-sortable-placeholder", i || e.currentItem[0].className)._removeClass(s, "ui-sortable-helper"), "tbody" === n ? e._createTrPlaceholder(e.currentItem.find("tr").eq(0), t("<tr>", e.document[0]).appendTo(s)) : "tr" === n ? e._createTrPlaceholder(e.currentItem, s) : "img" === n && s.attr("src", e.currentItem.attr("src")), i || s.css("visibility", "hidden"), s;
          }, update: function update(t, s) {
            i && !n.forcePlaceholderSize || (s.height() || s.height(e.currentItem.innerHeight() - parseInt(e.currentItem.css("paddingTop") || 0, 10) - parseInt(e.currentItem.css("paddingBottom") || 0, 10)), s.width() || s.width(e.currentItem.innerWidth() - parseInt(e.currentItem.css("paddingLeft") || 0, 10) - parseInt(e.currentItem.css("paddingRight") || 0, 10)));
          } }), e.placeholder = t(n.placeholder.element.call(e.element, e.currentItem)), e.currentItem.after(e.placeholder), n.placeholder.update(e, e.placeholder);
      }, _createTrPlaceholder: function _createTrPlaceholder(e, i) {
        var n = this;e.children().each(function () {
          t("<td>&#160;</td>", n.document[0]).attr("colspan", t(this).attr("colspan") || 1).appendTo(i);
        });
      }, _contactContainers: function _contactContainers(e) {
        var i,
            n,
            s,
            r,
            o,
            a,
            l,
            u,
            c,
            h,
            d = null,
            p = null;for (i = this.containers.length - 1; i >= 0; i--) {
          if (!t.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
            if (d && t.contains(this.containers[i].element[0], d.element[0])) continue;d = this.containers[i], p = i;
          } else this.containers[i].containerCache.over && (this.containers[i]._trigger("out", e, this._uiHash(this)), this.containers[i].containerCache.over = 0);
        }if (d) if (1 === this.containers.length) this.containers[p].containerCache.over || (this.containers[p]._trigger("over", e, this._uiHash(this)), this.containers[p].containerCache.over = 1);else {
          for (s = 1e4, r = null, c = d.floating || this._isFloating(this.currentItem), o = c ? "left" : "top", a = c ? "width" : "height", h = c ? "pageX" : "pageY", n = this.items.length - 1; n >= 0; n--) {
            t.contains(this.containers[p].element[0], this.items[n].item[0]) && this.items[n].item[0] !== this.currentItem[0] && (l = this.items[n].item.offset()[o], u = !1, e[h] - l > this.items[n][a] / 2 && (u = !0), Math.abs(e[h] - l) < s && (s = Math.abs(e[h] - l), r = this.items[n], this.direction = u ? "up" : "down"));
          }if (!r && !this.options.dropOnEmpty) return;if (this.currentContainer === this.containers[p]) return void (this.currentContainer.containerCache.over || (this.containers[p]._trigger("over", e, this._uiHash()), this.currentContainer.containerCache.over = 1));r ? this._rearrange(e, r, null, !0) : this._rearrange(e, null, this.containers[p].element, !0), this._trigger("change", e, this._uiHash()), this.containers[p]._trigger("change", e, this._uiHash(this)), this.currentContainer = this.containers[p], this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[p]._trigger("over", e, this._uiHash(this)), this.containers[p].containerCache.over = 1;
        }
      }, _createHelper: function _createHelper(e) {
        var i = this.options,
            n = t.isFunction(i.helper) ? t(i.helper.apply(this.element[0], [e, this.currentItem])) : "clone" === i.helper ? this.currentItem.clone() : this.currentItem;return n.parents("body").length || t("parent" !== i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(n[0]), n[0] === this.currentItem[0] && (this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") }), n[0].style.width && !i.forceHelperSize || n.width(this.currentItem.width()), n[0].style.height && !i.forceHelperSize || n.height(this.currentItem.height()), n;
      }, _adjustOffsetFromHelper: function _adjustOffsetFromHelper(e) {
        "string" == typeof e && (e = e.split(" ")), t.isArray(e) && (e = { left: +e[0], top: +e[1] || 0 }), "left" in e && (this.offset.click.left = e.left + this.margins.left), "right" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), "top" in e && (this.offset.click.top = e.top + this.margins.top), "bottom" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);
      }, _getParentOffset: function _getParentOffset() {
        this.offsetParent = this.helper.offsetParent();var e = this.offsetParent.offset();return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && t.ui.ie) && (e = { top: 0, left: 0 }), { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
      }, _getRelativeOffset: function _getRelativeOffset() {
        if ("relative" === this.cssPosition) {
          var t = this.currentItem.position();return { top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() };
        }return { top: 0, left: 0 };
      }, _cacheMargins: function _cacheMargins() {
        this.margins = { left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0 };
      }, _cacheHelperProportions: function _cacheHelperProportions() {
        this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() };
      }, _setContainment: function _setContainment() {
        var e,
            i,
            n,
            s = this.options;"parent" === s.containment && (s.containment = this.helper[0].parentNode), "document" !== s.containment && "window" !== s.containment || (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === s.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === s.containment ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(s.containment) || (e = t(s.containment)[0], i = t(s.containment).offset(), n = "hidden" !== t(e).css("overflow"), this.containment = [i.left + (parseInt(t(e).css("borderLeftWidth"), 10) || 0) + (parseInt(t(e).css("paddingLeft"), 10) || 0) - this.margins.left, i.top + (parseInt(t(e).css("borderTopWidth"), 10) || 0) + (parseInt(t(e).css("paddingTop"), 10) || 0) - this.margins.top, i.left + (n ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(t(e).css("borderLeftWidth"), 10) || 0) - (parseInt(t(e).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, i.top + (n ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(t(e).css("borderTopWidth"), 10) || 0) - (parseInt(t(e).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]);
      }, _convertPositionTo: function _convertPositionTo(e, i) {
        i || (i = this.position);var n = "absolute" === e ? 1 : -1,
            s = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
            r = /(html|body)/i.test(s[0].tagName);return { top: i.top + this.offset.relative.top * n + this.offset.parent.top * n - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : r ? 0 : s.scrollTop()) * n, left: i.left + this.offset.relative.left * n + this.offset.parent.left * n - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : r ? 0 : s.scrollLeft()) * n };
      }, _generatePosition: function _generatePosition(e) {
        var i,
            n,
            s = this.options,
            r = e.pageX,
            o = e.pageY,
            a = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
            l = /(html|body)/i.test(a[0].tagName);return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (e.pageX - this.offset.click.left < this.containment[0] && (r = this.containment[0] + this.offset.click.left), e.pageY - this.offset.click.top < this.containment[1] && (o = this.containment[1] + this.offset.click.top), e.pageX - this.offset.click.left > this.containment[2] && (r = this.containment[2] + this.offset.click.left), e.pageY - this.offset.click.top > this.containment[3] && (o = this.containment[3] + this.offset.click.top)), s.grid && (i = this.originalPageY + Math.round((o - this.originalPageY) / s.grid[1]) * s.grid[1], o = this.containment ? i - this.offset.click.top >= this.containment[1] && i - this.offset.click.top <= this.containment[3] ? i : i - this.offset.click.top >= this.containment[1] ? i - s.grid[1] : i + s.grid[1] : i, n = this.originalPageX + Math.round((r - this.originalPageX) / s.grid[0]) * s.grid[0], r = this.containment ? n - this.offset.click.left >= this.containment[0] && n - this.offset.click.left <= this.containment[2] ? n : n - this.offset.click.left >= this.containment[0] ? n - s.grid[0] : n + s.grid[0] : n)), { top: o - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : l ? 0 : a.scrollTop()), left: r - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : l ? 0 : a.scrollLeft()) };
      }, _rearrange: function _rearrange(t, e, i, n) {
        i ? i[0].appendChild(this.placeholder[0]) : e.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? e.item[0] : e.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;var s = this.counter;this._delay(function () {
          s === this.counter && this.refreshPositions(!n);
        });
      }, _clear: function _clear(t, e) {
        this.reverting = !1;var i,
            n = [];if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
          for (i in this._storedCSS) {
            "auto" !== this._storedCSS[i] && "static" !== this._storedCSS[i] || (this._storedCSS[i] = "");
          }this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper");
        } else this.currentItem.show();function s(t, e, i) {
          return function (n) {
            i._trigger(t, n, e._uiHash(e));
          };
        }for (this.fromOutside && !e && n.push(function (t) {
          this._trigger("receive", t, this._uiHash(this.fromOutside));
        }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || e || n.push(function (t) {
          this._trigger("update", t, this._uiHash());
        }), this !== this.currentContainer && (e || (n.push(function (t) {
          this._trigger("remove", t, this._uiHash());
        }), n.push(function (t) {
          return function (e) {
            t._trigger("receive", e, this._uiHash(this));
          };
        }.call(this, this.currentContainer)), n.push(function (t) {
          return function (e) {
            t._trigger("update", e, this._uiHash(this));
          };
        }.call(this, this.currentContainer)))), i = this.containers.length - 1; i >= 0; i--) {
          e || n.push(s("deactivate", this, this.containers[i])), this.containers[i].containerCache.over && (n.push(s("out", this, this.containers[i])), this.containers[i].containerCache.over = 0);
        }if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, e || this._trigger("beforeStop", t, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !e) {
          for (i = 0; i < n.length; i++) {
            n[i].call(this, t);
          }this._trigger("stop", t, this._uiHash());
        }return this.fromOutside = !1, !this.cancelHelperRemoval;
      }, _trigger: function _trigger() {
        !1 === t.Widget.prototype._trigger.apply(this, arguments) && this.cancel();
      }, _uiHash: function _uiHash(e) {
        var i = e || this;return { helper: i.helper, placeholder: i.placeholder || t([]), position: i.position, originalPosition: i.originalPosition, offset: i.positionAbs, item: i.currentItem, sender: e ? e.element : null };
      } }), t.widget("ui.spinner", { version: "1.12.1", defaultElement: "<input>", widgetEventPrefix: "spin", options: { classes: { "ui-spinner": "ui-corner-all", "ui-spinner-down": "ui-corner-br", "ui-spinner-up": "ui-corner-tr" }, culture: null, icons: { down: "ui-icon-triangle-1-s", up: "ui-icon-triangle-1-n" }, incremental: !0, max: null, min: null, numberFormat: null, page: 10, step: 1, change: null, spin: null, start: null, stop: null }, _create: function _create() {
        this._setOption("max", this.options.max), this._setOption("min", this.options.min), this._setOption("step", this.options.step), "" !== this.value() && this._value(this.element.val(), !0), this._draw(), this._on(this._events), this._refresh(), this._on(this.window, { beforeunload: function beforeunload() {
            this.element.removeAttr("autocomplete");
          } });
      }, _getCreateOptions: function _getCreateOptions() {
        var e = this._super(),
            i = this.element;return t.each(["min", "max", "step"], function (t, n) {
          var s = i.attr(n);null != s && s.length && (e[n] = s);
        }), e;
      }, _events: { keydown: function keydown(t) {
          this._start(t) && this._keydown(t) && t.preventDefault();
        }, keyup: "_stop", focus: function focus() {
          this.previous = this.element.val();
        }, blur: function blur(t) {
          this.cancelBlur ? delete this.cancelBlur : (this._stop(), this._refresh(), this.previous !== this.element.val() && this._trigger("change", t));
        }, mousewheel: function mousewheel(t, e) {
          if (e) {
            if (!this.spinning && !this._start(t)) return !1;this._spin((e > 0 ? 1 : -1) * this.options.step, t), clearTimeout(this.mousewheelTimer), this.mousewheelTimer = this._delay(function () {
              this.spinning && this._stop(t);
            }, 100), t.preventDefault();
          }
        }, "mousedown .ui-spinner-button": function mousedownUiSpinnerButton(e) {
          var i;function n() {
            this.element[0] === t.ui.safeActiveElement(this.document[0]) || (this.element.trigger("focus"), this.previous = i, this._delay(function () {
              this.previous = i;
            }));
          }i = this.element[0] === t.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val(), e.preventDefault(), n.call(this), this.cancelBlur = !0, this._delay(function () {
            delete this.cancelBlur, n.call(this);
          }), !1 !== this._start(e) && this._repeat(null, t(e.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, e);
        }, "mouseup .ui-spinner-button": "_stop", "mouseenter .ui-spinner-button": function mouseenterUiSpinnerButton(e) {
          if (t(e.currentTarget).hasClass("ui-state-active")) return !1 !== this._start(e) && void this._repeat(null, t(e.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, e);
        }, "mouseleave .ui-spinner-button": "_stop" }, _enhance: function _enhance() {
        this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>");
      }, _draw: function _draw() {
        this._enhance(), this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content"), this._addClass("ui-spinner-input"), this.element.attr("role", "spinbutton"), this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", !0).button({ classes: { "ui-button": "" } }), this._removeClass(this.buttons, "ui-corner-all"), this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up"), this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down"), this.buttons.first().button({ icon: this.options.icons.up, showLabel: !1 }), this.buttons.last().button({ icon: this.options.icons.down, showLabel: !1 }), this.buttons.height() > Math.ceil(.5 * this.uiSpinner.height()) && this.uiSpinner.height() > 0 && this.uiSpinner.height(this.uiSpinner.height());
      }, _keydown: function _keydown(e) {
        var i = this.options,
            n = t.ui.keyCode;switch (e.keyCode) {case n.UP:
            return this._repeat(null, 1, e), !0;case n.DOWN:
            return this._repeat(null, -1, e), !0;case n.PAGE_UP:
            return this._repeat(null, i.page, e), !0;case n.PAGE_DOWN:
            return this._repeat(null, -i.page, e), !0;}return !1;
      }, _start: function _start(t) {
        return !(!this.spinning && !1 === this._trigger("start", t) || (this.counter || (this.counter = 1), this.spinning = !0, 0));
      }, _repeat: function _repeat(t, e, i) {
        t = t || 500, clearTimeout(this.timer), this.timer = this._delay(function () {
          this._repeat(40, e, i);
        }, t), this._spin(e * this.options.step, i);
      }, _spin: function _spin(t, e) {
        var i = this.value() || 0;this.counter || (this.counter = 1), i = this._adjustValue(i + t * this._increment(this.counter)), this.spinning && !1 === this._trigger("spin", e, { value: i }) || (this._value(i), this.counter++);
      }, _increment: function _increment(e) {
        var i = this.options.incremental;return i ? t.isFunction(i) ? i(e) : Math.floor(e * e * e / 5e4 - e * e / 500 + 17 * e / 200 + 1) : 1;
      }, _precision: function _precision() {
        var t = this._precisionOf(this.options.step);return null !== this.options.min && (t = Math.max(t, this._precisionOf(this.options.min))), t;
      }, _precisionOf: function _precisionOf(t) {
        var e = t.toString(),
            i = e.indexOf(".");return -1 === i ? 0 : e.length - i - 1;
      }, _adjustValue: function _adjustValue(t) {
        var e,
            i,
            n = this.options;return i = t - (e = null !== n.min ? n.min : 0), t = e + (i = Math.round(i / n.step) * n.step), t = parseFloat(t.toFixed(this._precision())), null !== n.max && t > n.max ? n.max : null !== n.min && t < n.min ? n.min : t;
      }, _stop: function _stop(t) {
        this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), this.counter = 0, this.spinning = !1, this._trigger("stop", t));
      }, _setOption: function _setOption(t, e) {
        var i, n, s;if ("culture" === t || "numberFormat" === t) return i = this._parse(this.element.val()), this.options[t] = e, void this.element.val(this._format(i));"max" !== t && "min" !== t && "step" !== t || "string" == typeof e && (e = this._parse(e)), "icons" === t && (n = this.buttons.first().find(".ui-icon"), this._removeClass(n, null, this.options.icons.up), this._addClass(n, null, e.up), s = this.buttons.last().find(".ui-icon"), this._removeClass(s, null, this.options.icons.down), this._addClass(s, null, e.down)), this._super(t, e);
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this._super(t), this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!t), this.element.prop("disabled", !!t), this.buttons.button(t ? "disable" : "enable");
      }, _setOptions: b(function (t) {
        this._super(t);
      }), _parse: function _parse(t) {
        return "string" == typeof t && "" !== t && (t = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(t, 10, this.options.culture) : +t), "" === t || isNaN(t) ? null : t;
      }, _format: function _format(t) {
        return "" === t ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(t, this.options.numberFormat, this.options.culture) : t;
      }, _refresh: function _refresh() {
        this.element.attr({ "aria-valuemin": this.options.min, "aria-valuemax": this.options.max, "aria-valuenow": this._parse(this.element.val()) });
      }, isValid: function isValid() {
        var t = this.value();return null !== t && t === this._adjustValue(t);
      }, _value: function _value(t, e) {
        var i;"" !== t && null !== (i = this._parse(t)) && (e || (i = this._adjustValue(i)), t = this._format(i)), this.element.val(t), this._refresh();
      }, _destroy: function _destroy() {
        this.element.prop("disabled", !1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"), this.uiSpinner.replaceWith(this.element);
      }, stepUp: b(function (t) {
        this._stepUp(t);
      }), _stepUp: function _stepUp(t) {
        this._start() && (this._spin((t || 1) * this.options.step), this._stop());
      }, stepDown: b(function (t) {
        this._stepDown(t);
      }), _stepDown: function _stepDown(t) {
        this._start() && (this._spin((t || 1) * -this.options.step), this._stop());
      }, pageUp: b(function (t) {
        this._stepUp((t || 1) * this.options.page);
      }), pageDown: b(function (t) {
        this._stepDown((t || 1) * this.options.page);
      }), value: function value(t) {
        if (!arguments.length) return this._parse(this.element.val());b(this._value).call(this, t);
      }, widget: function widget() {
        return this.uiSpinner;
      } }), !1 !== t.uiBackCompat && t.widget("ui.spinner", t.ui.spinner, { _enhance: function _enhance() {
        this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
      }, _uiSpinnerHtml: function _uiSpinnerHtml() {
        return "<span>";
      }, _buttonHtml: function _buttonHtml() {
        return "<a></a><a></a>";
      } }), t.ui.spinner,
    /*!
     * jQuery UI Tabs 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.tabs", { version: "1.12.1", delay: 300, options: { active: null, classes: { "ui-tabs": "ui-corner-all", "ui-tabs-nav": "ui-corner-all", "ui-tabs-panel": "ui-corner-bottom", "ui-tabs-tab": "ui-corner-top" }, collapsible: !1, event: "click", heightStyle: "content", hide: null, show: null, activate: null, beforeActivate: null, beforeLoad: null, load: null }, _isLocal: (v = /#.*$/, function (t) {
        var e, i;e = t.href.replace(v, ""), i = location.href.replace(v, "");try {
          e = decodeURIComponent(e);
        } catch (t) {}try {
          i = decodeURIComponent(i);
        } catch (t) {}return t.hash.length > 1 && e === i;
      }), _create: function _create() {
        var e = this,
            i = this.options;this.running = !1, this._addClass("ui-tabs", "ui-widget ui-widget-content"), this._toggleClass("ui-tabs-collapsible", null, i.collapsible), this._processTabs(), i.active = this._initialActive(), t.isArray(i.disabled) && (i.disabled = t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"), function (t) {
          return e.tabs.index(t);
        }))).sort()), !1 !== this.options.active && this.anchors.length ? this.active = this._findActive(i.active) : this.active = t(), this._refresh(), this.active.length && this.load(i.active);
      }, _initialActive: function _initialActive() {
        var e = this.options.active,
            i = this.options.collapsible,
            n = location.hash.substring(1);return null === e && (n && this.tabs.each(function (i, s) {
          if (t(s).attr("aria-controls") === n) return e = i, !1;
        }), null === e && (e = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), null !== e && -1 !== e || (e = !!this.tabs.length && 0)), !1 !== e && -1 === (e = this.tabs.index(this.tabs.eq(e))) && (e = !i && 0), !i && !1 === e && this.anchors.length && (e = 0), e;
      }, _getCreateEventData: function _getCreateEventData() {
        return { tab: this.active, panel: this.active.length ? this._getPanelForTab(this.active) : t() };
      }, _tabKeydown: function _tabKeydown(e) {
        var i = t(t.ui.safeActiveElement(this.document[0])).closest("li"),
            n = this.tabs.index(i),
            s = !0;if (!this._handlePageNav(e)) {
          switch (e.keyCode) {case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:
              n++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:
              s = !1, n--;break;case t.ui.keyCode.END:
              n = this.anchors.length - 1;break;case t.ui.keyCode.HOME:
              n = 0;break;case t.ui.keyCode.SPACE:
              return e.preventDefault(), clearTimeout(this.activating), void this._activate(n);case t.ui.keyCode.ENTER:
              return e.preventDefault(), clearTimeout(this.activating), void this._activate(n !== this.options.active && n);default:
              return;}e.preventDefault(), clearTimeout(this.activating), n = this._focusNextTab(n, s), e.ctrlKey || e.metaKey || (i.attr("aria-selected", "false"), this.tabs.eq(n).attr("aria-selected", "true"), this.activating = this._delay(function () {
            this.option("active", n);
          }, this.delay));
        }
      }, _panelKeydown: function _panelKeydown(e) {
        this._handlePageNav(e) || e.ctrlKey && e.keyCode === t.ui.keyCode.UP && (e.preventDefault(), this.active.trigger("focus"));
      }, _handlePageNav: function _handlePageNav(e) {
        return e.altKey && e.keyCode === t.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), !0) : e.altKey && e.keyCode === t.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), !0) : void 0;
      }, _findNextTab: function _findNextTab(e, i) {
        for (var n = this.tabs.length - 1; -1 !== t.inArray((e > n && (e = 0), e < 0 && (e = n), e), this.options.disabled);) {
          e = i ? e + 1 : e - 1;
        }return e;
      }, _focusNextTab: function _focusNextTab(t, e) {
        return t = this._findNextTab(t, e), this.tabs.eq(t).trigger("focus"), t;
      }, _setOption: function _setOption(t, e) {
        "active" !== t ? (this._super(t, e), "collapsible" === t && (this._toggleClass("ui-tabs-collapsible", null, e), e || !1 !== this.options.active || this._activate(0)), "event" === t && this._setupEvents(e), "heightStyle" === t && this._setupHeightStyle(e)) : this._activate(e);
      }, _sanitizeSelector: function _sanitizeSelector(t) {
        return t ? t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
      }, refresh: function refresh() {
        var e = this.options,
            i = this.tablist.children(":has(a[href])");e.disabled = t.map(i.filter(".ui-state-disabled"), function (t) {
          return i.index(t);
        }), this._processTabs(), !1 !== e.active && this.anchors.length ? this.active.length && !t.contains(this.tablist[0], this.active[0]) ? this.tabs.length === e.disabled.length ? (e.active = !1, this.active = t()) : this._activate(this._findNextTab(Math.max(0, e.active - 1), !1)) : e.active = this.tabs.index(this.active) : (e.active = !1, this.active = t()), this._refresh();
      }, _refresh: function _refresh() {
        this._setOptionDisabled(this.options.disabled), this._setupEvents(this.options.event), this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({ "aria-hidden": "true" }), this.active.length ? (this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }), this._addClass(this.active, "ui-tabs-active", "ui-state-active"), this._getPanelForTab(this.active).show().attr({ "aria-hidden": "false" })) : this.tabs.eq(0).attr("tabIndex", 0);
      }, _processTabs: function _processTabs() {
        var e = this,
            i = this.tabs,
            n = this.anchors,
            s = this.panels;this.tablist = this._getList().attr("role", "tablist"), this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header"), this.tablist.on("mousedown" + this.eventNamespace, "> li", function (e) {
          t(this).is(".ui-state-disabled") && e.preventDefault();
        }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function () {
          t(this).closest("li").is(".ui-state-disabled") && this.blur();
        }), this.tabs = this.tablist.find("> li:has(a[href])").attr({ role: "tab", tabIndex: -1 }), this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default"), this.anchors = this.tabs.map(function () {
          return t("a", this)[0];
        }).attr({ role: "presentation", tabIndex: -1 }), this._addClass(this.anchors, "ui-tabs-anchor"), this.panels = t(), this.anchors.each(function (i, n) {
          var s,
              r,
              o,
              a = t(n).uniqueId().attr("id"),
              l = t(n).closest("li"),
              u = l.attr("aria-controls");e._isLocal(n) ? (o = (s = n.hash).substring(1), r = e.element.find(e._sanitizeSelector(s))) : (s = "#" + (o = l.attr("aria-controls") || t({}).uniqueId()[0].id), (r = e.element.find(s)).length || (r = e._createPanel(o)).insertAfter(e.panels[i - 1] || e.tablist), r.attr("aria-live", "polite")), r.length && (e.panels = e.panels.add(r)), u && l.data("ui-tabs-aria-controls", u), l.attr({ "aria-controls": o, "aria-labelledby": a }), r.attr("aria-labelledby", a);
        }), this.panels.attr("role", "tabpanel"), this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content"), i && (this._off(i.not(this.tabs)), this._off(n.not(this.anchors)), this._off(s.not(this.panels)));
      }, _getList: function _getList() {
        return this.tablist || this.element.find("ol, ul").eq(0);
      }, _createPanel: function _createPanel(e) {
        return t("<div>").attr("id", e).data("ui-tabs-destroy", !0);
      }, _setOptionDisabled: function _setOptionDisabled(e) {
        var i, n, s;for (t.isArray(e) && (e.length ? e.length === this.anchors.length && (e = !0) : e = !1), s = 0; n = this.tabs[s]; s++) {
          i = t(n), !0 === e || -1 !== t.inArray(s, e) ? (i.attr("aria-disabled", "true"), this._addClass(i, null, "ui-state-disabled")) : (i.removeAttr("aria-disabled"), this._removeClass(i, null, "ui-state-disabled"));
        }this.options.disabled = e, this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !0 === e);
      }, _setupEvents: function _setupEvents(e) {
        var i = {};e && t.each(e.split(" "), function (t, e) {
          i[e] = "_eventHandler";
        }), this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(!0, this.anchors, { click: function click(t) {
            t.preventDefault();
          } }), this._on(this.anchors, i), this._on(this.tabs, { keydown: "_tabKeydown" }), this._on(this.panels, { keydown: "_panelKeydown" }), this._focusable(this.tabs), this._hoverable(this.tabs);
      }, _setupHeightStyle: function _setupHeightStyle(e) {
        var i,
            n = this.element.parent();"fill" === e ? (i = n.height(), i -= this.element.outerHeight() - this.element.height(), this.element.siblings(":visible").each(function () {
          var e = t(this),
              n = e.css("position");"absolute" !== n && "fixed" !== n && (i -= e.outerHeight(!0));
        }), this.element.children().not(this.panels).each(function () {
          i -= t(this).outerHeight(!0);
        }), this.panels.each(function () {
          t(this).height(Math.max(0, i - t(this).innerHeight() + t(this).height()));
        }).css("overflow", "auto")) : "auto" === e && (i = 0, this.panels.each(function () {
          i = Math.max(i, t(this).height("").height());
        }).height(i));
      }, _eventHandler: function _eventHandler(e) {
        var i = this.options,
            n = this.active,
            s = t(e.currentTarget).closest("li"),
            r = s[0] === n[0],
            o = r && i.collapsible,
            a = o ? t() : this._getPanelForTab(s),
            l = n.length ? this._getPanelForTab(n) : t(),
            u = { oldTab: n, oldPanel: l, newTab: o ? t() : s, newPanel: a };e.preventDefault(), s.hasClass("ui-state-disabled") || s.hasClass("ui-tabs-loading") || this.running || r && !i.collapsible || !1 === this._trigger("beforeActivate", e, u) || (i.active = !o && this.tabs.index(s), this.active = r ? t() : s, this.xhr && this.xhr.abort(), l.length || a.length || t.error("jQuery UI Tabs: Mismatching fragment identifier."), a.length && this.load(this.tabs.index(s), e), this._toggle(e, u));
      }, _toggle: function _toggle(e, i) {
        var n = this,
            s = i.newPanel,
            r = i.oldPanel;function o() {
          n.running = !1, n._trigger("activate", e, i);
        }function a() {
          n._addClass(i.newTab.closest("li"), "ui-tabs-active", "ui-state-active"), s.length && n.options.show ? n._show(s, n.options.show, o) : (s.show(), o());
        }this.running = !0, r.length && this.options.hide ? this._hide(r, this.options.hide, function () {
          n._removeClass(i.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), a();
        }) : (this._removeClass(i.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), r.hide(), a()), r.attr("aria-hidden", "true"), i.oldTab.attr({ "aria-selected": "false", "aria-expanded": "false" }), s.length && r.length ? i.oldTab.attr("tabIndex", -1) : s.length && this.tabs.filter(function () {
          return 0 === t(this).attr("tabIndex");
        }).attr("tabIndex", -1), s.attr("aria-hidden", "false"), i.newTab.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 });
      }, _activate: function _activate(e) {
        var i,
            n = this._findActive(e);n[0] !== this.active[0] && (n.length || (n = this.active), i = n.find(".ui-tabs-anchor")[0], this._eventHandler({ target: i, currentTarget: i, preventDefault: t.noop }));
      }, _findActive: function _findActive(e) {
        return !1 === e ? t() : this.tabs.eq(e);
      }, _getIndex: function _getIndex(e) {
        return "string" == typeof e && (e = this.anchors.index(this.anchors.filter("[href$='" + t.ui.escapeSelector(e) + "']"))), e;
      }, _destroy: function _destroy() {
        this.xhr && this.xhr.abort(), this.tablist.removeAttr("role").off(this.eventNamespace), this.anchors.removeAttr("role tabIndex").removeUniqueId(), this.tabs.add(this.panels).each(function () {
          t.data(this, "ui-tabs-destroy") ? t(this).remove() : t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");
        }), this.tabs.each(function () {
          var e = t(this),
              i = e.data("ui-tabs-aria-controls");i ? e.attr("aria-controls", i).removeData("ui-tabs-aria-controls") : e.removeAttr("aria-controls");
        }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "");
      }, enable: function enable(e) {
        var i = this.options.disabled;!1 !== i && (void 0 === e ? i = !1 : (e = this._getIndex(e), i = t.isArray(i) ? t.map(i, function (t) {
          return t !== e ? t : null;
        }) : t.map(this.tabs, function (t, i) {
          return i !== e ? i : null;
        })), this._setOptionDisabled(i));
      }, disable: function disable(e) {
        var i = this.options.disabled;if (!0 !== i) {
          if (void 0 === e) i = !0;else {
            if (e = this._getIndex(e), -1 !== t.inArray(e, i)) return;i = t.isArray(i) ? t.merge([e], i).sort() : [e];
          }this._setOptionDisabled(i);
        }
      }, load: function load(e, i) {
        e = this._getIndex(e);var n = this,
            s = this.tabs.eq(e),
            r = s.find(".ui-tabs-anchor"),
            o = this._getPanelForTab(s),
            a = { tab: s, panel: o },
            l = function l(t, e) {
          "abort" === e && n.panels.stop(!1, !0), n._removeClass(s, "ui-tabs-loading"), o.removeAttr("aria-busy"), t === n.xhr && delete n.xhr;
        };this._isLocal(r[0]) || (this.xhr = t.ajax(this._ajaxSettings(r, i, a)), this.xhr && "canceled" !== this.xhr.statusText && (this._addClass(s, "ui-tabs-loading"), o.attr("aria-busy", "true"), this.xhr.done(function (t, e, s) {
          setTimeout(function () {
            o.html(t), n._trigger("load", i, a), l(s, e);
          }, 1);
        }).fail(function (t, e) {
          setTimeout(function () {
            l(t, e);
          }, 1);
        })));
      }, _ajaxSettings: function _ajaxSettings(e, i, n) {
        var s = this;return { url: e.attr("href").replace(/#.*$/, ""), beforeSend: function beforeSend(e, r) {
            return s._trigger("beforeLoad", i, t.extend({ jqXHR: e, ajaxSettings: r }, n));
          } };
      }, _getPanelForTab: function _getPanelForTab(e) {
        var i = t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#" + i));
      } }), !1 !== t.uiBackCompat && t.widget("ui.tabs", t.ui.tabs, { _processTabs: function _processTabs() {
        this._superApply(arguments), this._addClass(this.tabs, "ui-tab");
      } }), t.ui.tabs,
    /*!
     * jQuery UI Tooltip 1.12.1
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     */
    t.widget("ui.tooltip", { version: "1.12.1", options: { classes: { "ui-tooltip": "ui-corner-all ui-widget-shadow" }, content: function content() {
          var e = t(this).attr("title") || "";return t("<a>").text(e).html();
        }, hide: !0, items: "[title]:not([disabled])", position: { my: "left top+15", at: "left bottom", collision: "flipfit flip" }, show: !0, track: !1, close: null, open: null }, _addDescribedBy: function _addDescribedBy(e, i) {
        var n = (e.attr("aria-describedby") || "").split(/\s+/);n.push(i), e.data("ui-tooltip-id", i).attr("aria-describedby", t.trim(n.join(" ")));
      }, _removeDescribedBy: function _removeDescribedBy(e) {
        var i = e.data("ui-tooltip-id"),
            n = (e.attr("aria-describedby") || "").split(/\s+/),
            s = t.inArray(i, n);-1 !== s && n.splice(s, 1), e.removeData("ui-tooltip-id"), (n = t.trim(n.join(" "))) ? e.attr("aria-describedby", n) : e.removeAttr("aria-describedby");
      }, _create: function _create() {
        this._on({ mouseover: "open", focusin: "open" }), this.tooltips = {}, this.parents = {}, this.liveRegion = t("<div>").attr({ role: "log", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this.disabledTitles = t([]);
      }, _setOption: function _setOption(e, i) {
        var n = this;this._super(e, i), "content" === e && t.each(this.tooltips, function (t, e) {
          n._updateContent(e.element);
        });
      }, _setOptionDisabled: function _setOptionDisabled(t) {
        this[t ? "_disable" : "_enable"]();
      }, _disable: function _disable() {
        var e = this;t.each(this.tooltips, function (i, n) {
          var s = t.Event("blur");s.target = s.currentTarget = n.element[0], e.close(s, !0);
        }), this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function () {
          var e = t(this);if (e.is("[title]")) return e.data("ui-tooltip-title", e.attr("title")).removeAttr("title");
        }));
      }, _enable: function _enable() {
        this.disabledTitles.each(function () {
          var e = t(this);e.data("ui-tooltip-title") && e.attr("title", e.data("ui-tooltip-title"));
        }), this.disabledTitles = t([]);
      }, open: function open(e) {
        var i = this,
            n = t(e ? e.target : this.element).closest(this.options.items);n.length && !n.data("ui-tooltip-id") && (n.attr("title") && n.data("ui-tooltip-title", n.attr("title")), n.data("ui-tooltip-open", !0), e && "mouseover" === e.type && n.parents().each(function () {
          var e,
              n = t(this);n.data("ui-tooltip-open") && ((e = t.Event("blur")).target = e.currentTarget = this, i.close(e, !0)), n.attr("title") && (n.uniqueId(), i.parents[this.id] = { element: this, title: n.attr("title") }, n.attr("title", ""));
        }), this._registerCloseHandlers(e, n), this._updateContent(n, e));
      }, _updateContent: function _updateContent(t, e) {
        var i,
            n = this.options.content,
            s = this,
            r = e ? e.type : null;if ("string" == typeof n || n.nodeType || n.jquery) return this._open(e, t, n);(i = n.call(t[0], function (i) {
          s._delay(function () {
            t.data("ui-tooltip-open") && (e && (e.type = r), this._open(e, t, i));
          });
        })) && this._open(e, t, i);
      }, _open: function _open(e, i, n) {
        var s,
            r,
            o,
            a,
            l = t.extend({}, this.options.position);function u(t) {
          l.of = t, r.is(":hidden") || r.position(l);
        }n && ((s = this._find(i)) ? s.tooltip.find(".ui-tooltip-content").html(n) : (i.is("[title]") && (e && "mouseover" === e.type ? i.attr("title", "") : i.removeAttr("title")), s = this._tooltip(i), r = s.tooltip, this._addDescribedBy(i, r.attr("id")), r.find(".ui-tooltip-content").html(n), this.liveRegion.children().hide(), (a = t("<div>").html(r.find(".ui-tooltip-content").html())).removeAttr("name").find("[name]").removeAttr("name"), a.removeAttr("id").find("[id]").removeAttr("id"), a.appendTo(this.liveRegion), this.options.track && e && /^mouse/.test(e.type) ? (this._on(this.document, { mousemove: u }), u(e)) : r.position(t.extend({ of: i }, this.options.position)), r.hide(), this._show(r, this.options.show), this.options.track && this.options.show && this.options.show.delay && (o = this.delayedShow = setInterval(function () {
          r.is(":visible") && (u(l.of), clearInterval(o));
        }, t.fx.interval)), this._trigger("open", e, { tooltip: r })));
      }, _registerCloseHandlers: function _registerCloseHandlers(e, i) {
        var n = { keyup: function keyup(e) {
            if (e.keyCode === t.ui.keyCode.ESCAPE) {
              var n = t.Event(e);n.currentTarget = i[0], this.close(n, !0);
            }
          } };i[0] !== this.element[0] && (n.remove = function () {
          this._removeTooltip(this._find(i).tooltip);
        }), e && "mouseover" !== e.type || (n.mouseleave = "close"), e && "focusin" !== e.type || (n.focusout = "close"), this._on(!0, i, n);
      }, close: function close(e) {
        var i,
            n = this,
            s = t(e ? e.currentTarget : this.element),
            r = this._find(s);r ? (i = r.tooltip, r.closing || (clearInterval(this.delayedShow), s.data("ui-tooltip-title") && !s.attr("title") && s.attr("title", s.data("ui-tooltip-title")), this._removeDescribedBy(s), r.hiding = !0, i.stop(!0), this._hide(i, this.options.hide, function () {
          n._removeTooltip(t(this));
        }), s.removeData("ui-tooltip-open"), this._off(s, "mouseleave focusout keyup"), s[0] !== this.element[0] && this._off(s, "remove"), this._off(this.document, "mousemove"), e && "mouseleave" === e.type && t.each(this.parents, function (e, i) {
          t(i.element).attr("title", i.title), delete n.parents[e];
        }), r.closing = !0, this._trigger("close", e, { tooltip: i }), r.hiding || (r.closing = !1))) : s.removeData("ui-tooltip-open");
      }, _tooltip: function _tooltip(e) {
        var i = t("<div>").attr("role", "tooltip"),
            n = t("<div>").appendTo(i),
            s = i.uniqueId().attr("id");return this._addClass(n, "ui-tooltip-content"), this._addClass(i, "ui-tooltip", "ui-widget ui-widget-content"), i.appendTo(this._appendTo(e)), this.tooltips[s] = { element: e, tooltip: i };
      }, _find: function _find(t) {
        var e = t.data("ui-tooltip-id");return e ? this.tooltips[e] : null;
      }, _removeTooltip: function _removeTooltip(t) {
        t.remove(), delete this.tooltips[t.attr("id")];
      }, _appendTo: function _appendTo(t) {
        var e = t.closest(".ui-front, dialog");return e.length || (e = this.document[0].body), e;
      }, _destroy: function _destroy() {
        var e = this;t.each(this.tooltips, function (i, n) {
          var s = t.Event("blur"),
              r = n.element;s.target = s.currentTarget = r[0], e.close(s, !0), t("#" + i).remove(), r.data("ui-tooltip-title") && (r.attr("title") || r.attr("title", r.data("ui-tooltip-title")), r.removeData("ui-tooltip-title"));
        }), this.liveRegion.remove();
      } }), !1 !== t.uiBackCompat && t.widget("ui.tooltip", t.ui.tooltip, { options: { tooltipClass: null }, _tooltip: function _tooltip() {
        var t = this._superApply(arguments);return this.options.tooltipClass && t.tooltip.addClass(this.options.tooltipClass), t;
      } }), t.ui.tooltip;
  }) ? n.apply(e, s) : n) || (t.exports = r);
}, function (t, e, i) {
  i(0);t.exports = { init: function init() {
      window.editorobj = tinymce, window.editorobj.init({ selector: "#txtAJKrypInWriteContent", menubar: !1, toolbar: "undo redo | styleselect | bold italic | link image" });
    }, clear: function clear() {
      window.editorobj.activeEditor.setContent("");
    } };
}, function (t, e) {
  t.exports = { init: function init() {
      this.cacheDom();
    }, cacheDom: function cacheDom() {
      this.$bb_aj_MainKrypinSkinContainer = $(".aj_bb_KrypinSkin"), this.$bb_aj_ModalMainContainer = $("#bb_aj_GenericModalContainer");
    }, closeModal: function closeModal() {
      this.$bb_aj_ModalMainContainer.fadeOut("slow");
    }, openInModal: function openInModal() {
      this.$bb_aj_ModalMainContainer.fadeIn("slow");
    } };
}, function (t, e, i) {
  var n = i(13),
      s = i(1),
      r = i(0);r(function () {
    var t = s.config;t.userinfo.userid = r("#barnensbiblCurrentUserid").html();var e = r(".kk_aj_CurrentPageType").html();!function () {
      var i = r(".bb_aj_userskinsetting").html();r("#aj_bb_KrypinSkin").addClass(i), n.pagerequest(e, t.userinfo.userid);
    }();
  });
}, function (t, e, i) {
  var n = i(14),
      s = i(18),
      r = i(20),
      o = i(22),
      a = i(26),
      l = i(28),
      u = i(29),
      c = i(30),
      h = i(31),
      d = i(1);i(0);t.exports = { pagerequest: function pagerequest(t, e) {
      !function (t, e) {
        var i = { bb_aj_Start_Krypin: function bb_aj_Start_Krypin() {
            return n.init(e), console.log("logga detta " + d.config.dnnURL), !1;
          }, bb_aj_Boklistor_Krypin: function bb_aj_Boklistor_Krypin() {
            return s.init(e), !1;
          }, bb_aj_Skrivboken_Krypin: function bb_aj_Skrivboken_Krypin() {
            return r.init(e), !1;
          }, bb_aj_Boktips_Krypin: function bb_aj_Boktips_Krypin() {
            return o.init(e), !1;
          }, bb_aj_Scoreboard_Krypin: function bb_aj_Scoreboard_Krypin() {
            return a.init(e), !1;
          }, bb_aj_Bibblomon_Krypin: function bb_aj_Bibblomon_Krypin() {
            return l.init(e), !1;
          }, bb_aj_Inventarie_Krypin: function bb_aj_Inventarie_Krypin() {
            return u.init(e), !1;
          }, bb_aj_shop_Krypin: function bb_aj_shop_Krypin() {
            return c.init(e), !1;
          }, bb_aj_setup_krypin: function bb_aj_setup_krypin() {
            return h.init(e), !1;
          }, default: function _default() {
            return n.init(e), !1;
          } };(i[t] || i.default)();
      }(t, e);
    } };
}, function (t, e, i) {
  i(2);var n = i(0),
      s = i(3),
      r = i(6),
      o = i(4),
      a = i(5),
      l = i(1),
      u = l.usermessages,
      c = l.config;t.exports = { init: function init(t) {
      o.init("Start"), this.cacheDom(), this.BindEvent(t), this.Render(t);
    }, cacheDom: function cacheDom() {
      this.$bb_aj_MainKrypinSkinContainer = n(".aj_bb_KrypinSkin"), this.$bb_bb_aj_MainScore = n(".bibblomonMainscore"), this.$bb_aj_buttonitem_del_laserjustnu = n(".buttonitem_del_laserjustnu");
    }, BindEvent: function BindEvent(t) {
      var e = this;r.callEvents.on("userScoreupdate", function (t) {
        e.$bb_bb_aj_MainScore.html(t + " xp");
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".buttonitem_del_laserjustnu", function (i) {
        return confirm(u.laserjustnu.confirmRemove) && e.removefromLaserjustnu(t), !0;
      });
    }, Renderbiblomon: function Renderbiblomon(t) {
      var e = this,
          i = c.api.bibblomonlistor.getuserbibblomonlist;s.getjsondata(i(t), function (t) {
        r.callEvents.emit("userScoreupdate", t.Monvalue), e.$bb_bb_aj_MainScore.html(t.Monvalue + " xp");
      });
    }, Renderlaserjustnu: function Renderlaserjustnu(t) {
      var e = "#laserjustnuItems";if (this.checkIfDivExist(e)) {
        var _i3 = c.api.installningar.laserjustnu,
            _n2 = c.handlebartemplate.hb_laserjustnu_tmp;s.getjsondata(_i3(t), function (t) {
          a.injecthtmltemplate(e, _n2, t, function () {});
        });
      }
    }, RenderUserLatestBoktips: function RenderUserLatestBoktips(t) {
      var e = "#bb_aj_userlatestboktips";if (this.checkIfDivExist(e)) {
        var _i4 = c.api.installningar.userlatestboktips,
            _n3 = c.handlebartemplate.hb_userlatestboktips_tmp;s.getjsondata(_i4(t), function (t) {
          a.injecthtmltemplate(e, _n3, t, function () {});
        });
      }
    }, RenderuserScoreupdate: function RenderuserScoreupdate(t) {
      var e = this,
          i = c.api.bibblomonlistor.getuserbibblomonlist;s.getjsondata(i(t), function (t) {
        r.callEvents.emit("userScoreupdate", t.Monvalue), e.$bb_bb_aj_MainScore.html(t.Monvalue + " xp");
      });
    }, Render: function Render(t) {
      this.Renderlaserjustnu(t), this.RenderUserLatestBoktips(t), this.RenderuserScoreupdate(t);
    }, checkIfDivExist: function checkIfDivExist(t) {
      return null === document.getElementById(t);
    }, removefromLaserjustnu: function removefromLaserjustnu(t) {
      var e = this,
          i = c.api.installningar.updatesettings;s.getjsondata(i(t, 3, 0), function (i) {
        console.log("laser justnu bok borttagen"), e.Renderlaserjustnu(t);
      });
    } };
}, function (t, e) {
  var i;i = function () {
    return this;
  }();try {
    i = i || new Function("return this")();
  } catch (t) {
    "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (i = window);
  }t.exports = i;
}, function (t, e) {
  t.exports = function (t) {
    return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", { enumerable: !0, get: function get() {
        return t.l;
      } }), Object.defineProperty(t, "id", { enumerable: !0, get: function get() {
        return t.i;
      } }), t.webpackPolyfill = 1), t;
  };
}, function (t, e, i) {
  var n = i(2),
      s = (i(0), i(1));s.config;t.exports = { init: function init() {
      Handlebars.registerHelper("datagroupname", function (t) {
        var e = t.indexOf("i", 0);return t.replaceAt(e, "o"), t.replace(/\s/g, "");
      });Handlebars.registerHelper("count", function (t) {
        return "grupp" + t;
      }), Handlebars.registerHelper("categoryimg", function (t) {
        var e = s.skrivbokimages,
            i = e.catimagesrc,
            r = n.find(i, function (e) {
          return e.catid == t;
        });r || (r = n.find(i, function (t) {
          return 0 == t.catid;
        }));var o = e.catimgbase + r.imgsrc;return "<img title=" + r.catname + " src=" + o + " />";
      }), Handlebars.registerHelper("categoryUrlimg", function (t) {
        if (!t) {
          var _e5 = s.skrivbokimages,
              _i5 = _e5.catimagesrc,
              r = n.find(_i5, function (t) {
            return 0 == t.catid;
          });t = _e5.catimgbase + r.imgsrc;
        }return t;
      }), Handlebars.registerHelper("isbookinlaserjustnu", function (t) {
        return t > 0;
      });
    } };
}, function (t, e, i) {
  i(2);var n = i(0);i(9);var s = i(4),
      r = i(7),
      o = i(3),
      a = i(5),
      l = i(19),
      u = i(1),
      c = u.config,
      h = u.usermessages;t.exports = { init: function init(t) {
      r.init("Booklist"), s.init("Booklist"), l.init(), this.cacheDom(), this.BindEvent(t), this.initbooklist(t);
    }, cacheDom: function cacheDom() {
      this.$aj_bb_KrypinMainGrid = n(".bb_aj_krypincontainer"), this.$bb_aj_booklistMain = n("#bb_aj_booklistMain"), this.$bb_aj_booklist_Mod = n("#bb_aj_booklist_Mod"), this.$bb_aj_addbooklist = n("#cmdNyBoklista"), this.$bb_aj_GenericModalContainer = n("#bb_aj_GenericModalContainer");
    }, BindEvent: function BindEvent(t) {
      var e = this;this.$bb_aj_booklistMain.on("click", "#bb_aj_cmdAdd_Booklist", function (t) {
        return !0;
      }), this.$bb_aj_booklistMain.on("click", ".buttonitem_booktip", function (t) {
        return !0;
      }), this.$bb_aj_booklist_Mod.on("click", "#cmdAvbryt", function (t) {
        return r.closeboxbehavior(), !1;
      }), this.$bb_aj_booklistMain.on("click", ".buttonitem_tabort", function (i) {
        var s = n(this).attr("data-itemid"),
            r = n(this).attr("data-bookistid");e.delbookitemfromlist(r, s, t);
      }), this.$bb_aj_addbooklist.on("click", function (i) {
        var s = n("#txtBoklistanamn"),
            r = s.val();if (!r) return alert(h.boklist.confirmAlert), s.focus(), !1;confirm(h.boklist.confirmADD) && e.addBooklist(r, t);
      }), this.$bb_aj_booklistMain.on("click", ".bb_aj_booklistDelete", function (i) {
        var s = n(this).attr("data-bookistid");if (!d(s)) {
          confirm(h.boklist.confirmDel) && e.delBooklist(s, t);
        }return !1;
      }), this.$bb_aj_booklistMain.on("click", ".bb_aj_booklistEditname", function (t) {
        var e = n(this).attr("data-bookistid");return d(e) || (n(".bb_aj_booklistname" + e).toggle(), n(".bb_aj_editbooklistnamnBlock" + e).toggle()), !1;
      }), this.$bb_aj_booklistMain.on("click", ".booklistPrint", function (i) {
        var s = n(this).attr("data-bookistid"),
            r = n(".bb_aj_booklistname" + s).html();return console.log("booklistid: " + s), e.printModal(s, t, r), l.openInModal(), !1;
      }), this.$bb_aj_GenericModalContainer.on("click", "#bb_aj_PrintBoklistTemplate", function (t) {
        var e = { userid: n(this).attr("data-userid"), booklistid: n(this).attr("data-boklistId"), bgimg: n("#print_bgVal").val(), color: n("#print_RubrikColorVal").val(), font: n("#print_RubrikTypsnittVal").val(), Rubrik: n(this).attr("data-boklistNamn") },
            i = c.api.boklistor.printUrl;console.log(i(e));window.open(i(e), "Title", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200,top=" + (screen.height - 400) + ",left=" + (screen.width - 840));return !1;
      }), this.$bb_aj_GenericModalContainer.on("click", ".bb_aj_closeModal", function (t) {
        return l.closeModal(), !1;
      }), this.$bb_aj_booklistMain.on("click", ".cmdeditBoklista", function (i) {
        var s = n(this).closest(".aj_bb_KrypinMainGrid").attr("data-bookistid"),
            r = n(this).siblings(".editBoklistanamn").val();if (!d(s)) {
          confirm(h.boklist.confirmEdit) && r && s && (e.editBooklist(s, r, t), n(".bb_aj_booklistname" + s).show(), n(".bb_aj_editbooklistnamnBlock" + s).hide());
        }return !1;
      }), this.$bb_aj_booklistMain.on("click", ".cmdAvbryt", function (t) {
        var e = n(this).closest(".aj_bb_KrypinMainGrid").attr("data-bookistid");return n(".bb_aj_booklistname" + e).show(), n(".bb_aj_editbooklistnamnBlock" + e).hide(), !1;
      }), this.$bb_aj_booklistMain.on("click", ".title-clear-btn", function (t) {
        return n(".listfilter").val(""), jplist.resetControls(), !1;
      }), this.$bb_aj_booklistMain.on("click", ".buttonitem_readnow", function (i) {
        var s = n(this).attr("data-itemid");return e.Laserjustnu(t, s), !1;
      }), this.$bb_aj_booklistMain.on("click", ".boklistshow", function (t) {
        var e = n(this).attr("data-bookistid");return n(".bb_aj_gridItem[data-bookistid=" + e + "] .item").toggle(), !1;
      });
    }, Apiupdate: function Apiupdate(t, e) {
      var i = this;o.getjsondata(t, function (t) {
        i.initbooklist(e);
      });
    }, Apiupdateajax: function Apiupdateajax(t, e) {
      o.getjsondata(t, function (t) {});
    }, printModal: function printModal(t, e, i) {
      var n = c.handlebartemplate.hb_PrintModalVal_tmp,
          s = { boklistid: t, userid: e, boklistNamn: i };a.injecthtmltemplate("#bb_aj_GenericModalContainer", n, s, function () {
        console.log("klart!");
      });
    }, getbooklist: function getbooklist(t, e) {
      var i = c.handlebartemplate.hb_booklist_tmp;this.Render(t, i, e);
    }, initbooklist: function initbooklist(t) {
      var e = c.api.boklistor.getuserboklist;this.getbooklist(e(t), t);
    }, delbookitemfromlist: function delbookitemfromlist(t, e, i) {
      var n = c.api.boklistor.deluserbokitem;jplist.resetControls(), this.Apiupdate(n(t, e, i), i);
    }, addbookitemfromlist: function addbookitemfromlist(t, e, i) {
      var n = c.api.boklistor.adduserbokitem;this.Apiupdateajax(n(t, e, i), i);
    }, addBooklist: function addBooklist(t, e) {
      var i = c.api.boklistor.addbooklist;jplist.resetControls(), this.Apiupdate(i(t, e), e);
    }, editBooklist: function editBooklist(t, e, i) {
      var n = c.api.boklistor.editbooklist;jplist.resetControls(), this.Apiupdate(n(t, e, i), i);
    }, delBooklist: function delBooklist(t, e) {
      var i = c.api.boklistor.delbooklist;jplist.resetControls(), this.Apiupdate(i(t, e), e);
    }, Laserjustnu: function Laserjustnu(t, e) {
      var i = this,
          n = c.api.installningar.updatesettings;o.getjsondata(n(t, 3, e), function (e) {
        i.initbooklist(t);
      });
    }, Render: function Render(t, e, i) {
      var s = this;o.getjsondata(t, function (t) {
        a.injecthtmltemplate("#bb_aj_booklistMain", e, t, function () {
          return jplist.init(), new dragdrop.start(function (t, e) {
            t.addEventListener("drop", function (t) {
              var e = void 0,
                  r = void 0,
                  o = void 0;try {
                e = t.currentTarget.activeElement.attributes[2].value, r = t.currentTarget.activeElement.attributes[3].value;var a = p(t.target, ".bb_aj_gridItem");(o = n(a).attr("data-bookistid")) || (o = t.target.attributes[2].value);
              } catch (t) {
                e = 0, r = 0, o = 0;
              }o && r != o && (s.delbookitemfromlist(r, e, i), s.addbookitemfromlist(o, e, i));
            });
          }), !1;
        });
      });
    } };var d = function d(t) {
    return "1000000000" == t;
  },
      p = function p(t, e) {
    for (Element.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (t) {
      for (var e = (this.document || this.ownerDocument).querySelectorAll(t), i = e.length; --i >= 0 && e.item(i) !== this;) {}return i > -1;
    }); t && t !== document; t = t.parentNode) {
      if (t.matches(e)) return t;
    }return null;
  };
}, function (t, e) {
  t.exports = { init: function init() {
      this.cacheDom();
    }, cacheDom: function cacheDom() {
      this.$bb_aj_MainKrypinSkinContainer = $(".aj_bb_KrypinSkin"), this.$bb_aj_ModalMainContainer = $("#bb_aj_GenericModalContainer");
    }, closeModal: function closeModal() {
      this.$bb_aj_ModalMainContainer.fadeOut("slow");
    }, openInModal: function openInModal() {
      this.$bb_aj_ModalMainContainer.fadeIn("slow");
    } };
}, function (t, e, i) {
  var n = i(2),
      s = i(0),
      r = i(10),
      o = i(11),
      a = i(4),
      l = i(7),
      u = i(3),
      c = i(5),
      h = i(8),
      d = i(21),
      p = i(1),
      f = p.config,
      g = p.usermessages;t.exports = { init: function init(t) {
      o.init(), d.init(t), l.init("Skrivbok"), a.init("Skrivbok"), this.cacheDom(), this.BindEvent(t), this.initbooklist(t);
    }, cacheDom: function cacheDom() {
      this.$bb_aj_MainKrypinSkinContainer = s(".aj_bb_KrypinSkin"), this.$bb_aj_ModalMainContainer = s("#bb_aj_modalContainer"), this.$bb_aj_Form_txtWriterTitle = s("#txtWriterTitle"), this.$bb_aj_Form_cmdSend = s("#cmdSendSkrivbokForm"), this.$bb_aj_Form_cmdReset = s("#cmdResetSkrivbokForm"), this.$bb_aj_Form_exempleImg = s(".skrivbokenExempleimg .bookitem-image img"), this.$bb_aj_berattelseCatdrp = s("#drpTypavBerattelse"), this.$bb_aj_aj_bb_formBlock = s(".aj_bb_formBlock"), this.$bb_aj_cmdAdd = s("#bb_aj_cmdAdd");
    }, BindEvent: function BindEvent(t) {
      var e = this;r.init(), this.$bb_aj_MainKrypinSkinContainer.on("click", ".bb_aj_closeModal", function (t) {
        return o.closeModal(), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".bb_aj_openInModal", function (i) {
        var n = s(this).attr("data-id");return e.getskrivbookbyID(n, t), o.openInModal(), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".buttonitem_edit", function (i) {
        s("html, body").animate({ scrollTop: s(".bb_aj_gridItem_Header").offset().top }, "slow");var n = s(this).attr("data-id");return e.$bb_aj_Form_cmdSend.attr("data-cmd", "edit"), e.$bb_aj_Form_cmdSend.html("&Auml;ndra"), e.$bb_aj_aj_bb_formBlock.show("slow"), e.updskrivbookEdiorbyID(n, t), !1;
      }), this.$bb_aj_Form_cmdSend.on("click", function (i) {
        var n = s(this).attr("data-cmd");return "add" == n && confirm(g.skrivbok.confirmAdd) && d.addSkrivbokItem(t, function (i) {
          i ? e.formupdate(t) : alert(g.skrivbok.confirmAlert);
        }), "edit" == n && confirm(g.skrivbok.confirmEdit) && d.updateSkrivbokItem(t, function (i) {
          e.$bb_aj_Form_cmdSend.attr("data-cmd", "add"), e.$bb_aj_Form_cmdSend.html("Spara"), i ? (e.formupdate(t), e.$bb_aj_Form_cmdSend.attr("data-cmd", "add"), e.$bb_aj_Form_cmdSend.html("Spara")) : alert(g.skrivbok.confirmAlert);
        }), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".buttonitem_tabort", function (i) {
        var n = s(this).attr("data-id");return confirm(g.skrivbok.confirmDel) && d.deleteSkrivbokItem(n, t, function () {
          e.formupdate(t);
        }), !1;
      }), this.$bb_aj_Form_cmdReset.on("click", function (t) {
        return d.rensaEditform(), e.$bb_aj_Form_cmdSend.attr("data-cmd", "add"), e.$bb_aj_Form_cmdSend.html("Spara"), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("change", "#drpTypavBerattelse", function (t) {
        var i = s(this).val();return e.$bb_aj_Form_exempleImg.attr("src", h.getimageHelper(i)), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".skrivboklistshow", function (t) {
        return s(".aj_bb_formBlock").toggle("slow"), s(this).toggleClass("grader180"), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", "#bb_aj_cmdAdd", function (t) {
        return s(".aj_bb_formBlock").toggle("slow"), s(this).toggleClass("grader180"), d.rensaEditform(), !1;
      });
    }, getskrivbooklist: function getskrivbooklist(t, e) {
      var i = f.handlebartemplate.hb_skrivbokenlist_tmp;this.Render(t, i, e);
    }, getskrivbookbyID: function getskrivbookbyID(t, e) {
      d.getskrivbookByIdForEdit(t, e);
    }, updskrivbookEdiorbyID: function updskrivbookEdiorbyID(t, e) {
      d.updskrivbookEditor(t, e);
    }, formupdate: function formupdate(t) {
      d.rensaEditform(), this.initbooklist(t);
    }, initbooklist: function initbooklist(t) {
      var e = f.api.skrivbokenlistor.getuserskribokenlist;this.getskrivbooklist(e(t), t);
    }, Render: function Render(t, e, i, s) {
      s = s || "asc", u.getjsondata(t, function (t) {
        var i = t.SkrivbokenList;t.SkrivbokenList = n.orderBy(i, ["Title"], [s]), c.injecthtmltemplate("#bb_aj_skrivbokentemplatecontainer", e, t, function () {});
      });
    } };
}, function (t, e, i) {
  var n = i(0),
      s = i(3),
      r = i(5),
      o = i(8),
      a = i(1).config;var l = { Approved: "", Category: "", Gillar: "", Inserted: "", Publish: "", SkrivID: "", Story: "", Title: "", UserID: "", UserName: "" };t.exports = { init: function init(t) {
      this.cacheDom();
    }, cacheDom: function cacheDom() {
      this.$bb_aj_Form_txtWriterTitle = n("#txtWriterTitle"), this.$bb_aj_Form_lblWriterTitle = n("#lblWriterTitle"), this.$bb_aj_Form_lblAJKrypInWriteContent = n("#lblAJKrypInWriteContent"), this.$bb_aj_Form_cmdSend = n("#cmdSendSkrivbokForm"), this.$bb_aj_Form_cmdReset = n("#cmdResetSkrivbokForm"), this.$bb_aj_skrivbokenForm_exempleImg = n(".skrivbokenExempleimg .bookitem-image img");
    }, getskrivbookByIdForEdit: function getskrivbookByIdForEdit(t, e) {
      var i = a.api.skrivbokenlistor.getuserskribokenByID,
          n = a.handlebartemplate.hb_skrivbokModalView_tmp;this.Render(i(t, e), n, e);
    }, updskrivbookEditor: function updskrivbookEditor(t, e) {
      var i = this,
          r = a.api.skrivbokenlistor.getuserskribokenByID;this.rensaEditform(), s.getjsondata(r(t, e), function (t) {
        n.each(t.SkrivbokenList, function (t, e) {
          i.$bb_aj_Form_txtWriterTitle.val(e.Title), i.$bb_aj_Form_cmdSend.attr("data-id", e.SkrivID), o.HelpersetSelectedIndex(document.getElementById("drpTypavBerattelse"), e.Category), o.HelpersetSelectedIndex(document.getElementById("drp_AJKrypInWritedelad"), e.Publish), i.$bb_aj_skrivbokenForm_exempleImg.attr("src", o.getimageHelper(e.Category)), tinymce.activeEditor.execCommand("mceInsertContent", !1, e.Story);
        });
      });
    }, rensaEditform: function rensaEditform() {
      this.$bb_aj_Form_txtWriterTitle.val(""), o.HelpersetSelectedIndex(document.getElementById("drpTypavBerattelse"), "0"), o.HelpersetSelectedIndex(document.getElementById("drp_AJKrypInWritedelad"), "1"), this.$bb_aj_skrivbokenForm_exempleImg.attr("src", "/DesktopModules/bb_aj_Skrivboken_Krypin/images/skrivbok_default256_36.png"), this.$bb_aj_Form_cmdSend.attr("data-id", "0"), tinyMCE.activeEditor.setContent("");
    }, addSkrivbokItem: function addSkrivbokItem(t, e) {
      var i = a.api.skrivbokenlistor.addskribokenItem;this.ApiPostHandler(i(), t, function (t) {
        e(t);
      });
    }, updateSkrivbokItem: function updateSkrivbokItem(t, e) {
      var i = a.api.skrivbokenlistor.editskribokenItem;this.ApiPostHandler(i(), t, function (t) {
        e(t);
      });
    }, deleteSkrivbokItem: function deleteSkrivbokItem(t) {
      var e = a.api.skrivbokenlistor.delskribokenItem;this.ApiPostHandler(e(), t);
    }, ApiPostHandler: function ApiPostHandler(t, e, i) {
      var n = this.HelpercollectFormValues(e);this.validateSave(n) ? s.postjsondata(t, n, function (t) {
        i(!0);
      }) : i(!1);
    }, Render: function Render(t, e, i) {
      s.getjsondata(t, function (t) {
        r.injecthtmltemplate("#bb_aj_modalContainer", e, t, function () {
          console.log("api kört!");
        });
      });
    }, validateSave: function validateSave() {
      var t = !0;return l.Title || (this.$bb_aj_Form_lblWriterTitle.attr("style", "color:red; font-weight:bold;"), t = !1), l.Story || (this.$bb_aj_Form_lblAJKrypInWriteContent.attr("style", "color:red; font-weight:bold;"), t = !1), t && (this.$bb_aj_Form_lblWriterTitle.removeAttr("style"), this.$bb_aj_Form_lblAJKrypInWriteContent.removeAttr("style")), t;
    }, HelpercollectFormValues: function HelpercollectFormValues(t) {
      return l.SkrivID = this.$bb_aj_Form_cmdSend.attr("data-id"), l.UserID = t, l.Approved = 0, l.Title = this.$bb_aj_Form_txtWriterTitle.val(), l.Story = tinyMCE.activeEditor.getContent(), l.Category = document.getElementById("drpTypavBerattelse").value, l.Publish = document.getElementById("drp_AJKrypInWritedelad").value, l;
    } };
}, function (t, e, i) {
  var n = i(2),
      s = i(0),
      r = i(10),
      o = i(11),
      a = i(6),
      l = i(23),
      u = i(4),
      c = i(7),
      h = i(3),
      d = i(24),
      p = (i(8), i(5)),
      f = i(25),
      g = i(1),
      m = g.config,
      v = g.usermessages;t.exports = { init: function init(t) {
      var e = d.checkparamsinurl();l.init("#txtboktipsTitle"), o.init(), f.init(t, e.bookid), c.init("Boktips"), u.init("Boktips"), this.cacheDom(), this.BindEvent(t), this.initbooklist(t, e.bookid);
    }, cacheDom: function cacheDom() {
      this.$bb_aj_MainKrypinSkinContainer = s(".aj_bb_KrypinSkin"), this.$bb_aj_ModalMainContainer = s("#bb_aj_modalContainer"), this.$bb_aj_Form_txtboktipsTitle = s("#txtboktipsTitle"), this.$bb_aj_boktipsForm_cmdSend = s("#cmdSendBoktipsForm"), this.$bb_aj_boktipsForm_cmdReset = s("#cmdResetBoktipsForm"), this.$bb_aj_boktipsForm_exempleImg = s(".boktipsExempleimg .bookitem-image img"), this.$bb_aj_bb_boktipsFormBlock = s(".aj_bb_formBlock"), this.$bb_aj_boktipsCmdAdd = s("#bb_aj_cmdAdd");
    }, BindEvent: function BindEvent(t) {
      var e = this;r.init(), a.callEvents.on("updateImg", function (t) {
        e.updboktipsbyBookID(t);
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".bb_aj_closeModal", function (t) {
        return o.closeModal(), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".bb_aj_openInModal", function (i) {
        var n = s(this).attr("data-id");return e.getboktipsbyID(n, t), o.openInModal(), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".buttonitem_edit", function (i) {
        s("html, body").animate({ scrollTop: s(".bb_aj_gridItem_Header").offset().top }, "slow");var n = s(this).attr("data-id");return e.$bb_aj_boktipsForm_cmdSend.attr("data-cmd", "edit"), e.$bb_aj_boktipsForm_cmdSend.html("&Auml;ndra"), e.$bb_aj_bb_boktipsFormBlock.show("slow"), e.updboktipsEdiorbyID(n, t), !1;
      }), this.$bb_aj_boktipsForm_cmdSend.on("click", function (i) {
        var n = s(this).attr("data-cmd");return "add" == n && confirm(v.boktips.confirmAdd) && f.addBoktipsItem(t, function (i) {
          i ? e.formupdate(t) : alert(v.boktips.confirmAlert);
        }), "edit" == n && confirm(v.boktips.confirmEdit) && f.editBoktipsItem(t, function (i) {
          i ? (e.formupdate(t), e.$bb_aj_boktipsForm_cmdSend.attr("data-cmd", "add"), e.$bb_aj_boktipsForm_cmdSend.html("Spara")) : alert(v.boktips.confirmAlert);
        }), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".buttonitem_tabort", function (i) {
        var n = s(this).attr("data-id");return confirm(v.boktips.confirmDel) && f.deleteBoktipsItem(n, t, function () {
          e.formupdate(t);
        }), !1;
      }), this.$bb_aj_boktipsForm_cmdReset.on("click", function (t) {
        return f.rensaEditform(), e.$bb_aj_boktipsForm_cmdSend.attr("data-cmd", "add"), e.$bb_aj_boktipsForm_cmdSend.html("Spara"), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("change", "#drpTypavBerattelse", function (t) {
        s(this).val();return !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".skrivboklistshow", function (t) {
        return s(".aj_bb_formBlock").toggle("slow"), s(this).toggleClass("grader180"), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", "#bb_aj_boktipsCmdAdd", function (t) {
        return s(".aj_bb_formBlock").toggle("slow"), s(this).toggleClass("grader180"), f.rensaEditform(), !1;
      }), this.$bb_aj_MainKrypinSkinContainer.on("click", ".boktipslistshow", function (t) {
        return s(".aj_bb_formBlock").toggle("slow"), s(this).toggleClass("grader180"), !1;
      });
    }, getboktipslist: function getboktipslist(t, e) {
      var i = m.handlebartemplate.hb_boktipslist_tmp;this.Render(t, i, e);
    }, getboktipsbyID: function getboktipsbyID(t, e) {
      f.getBoktipsByIdForEdit(t, e);
    }, updboktipsEdiorbyID: function updboktipsEdiorbyID(t, e) {
      f.updBoktipsEditor(t, e);
    }, updboktipsbyBookID: function updboktipsbyBookID(t) {
      f.updBoktipsEditorByBookid(t);
    }, formupdate: function formupdate(t) {
      f.rensaEditform(), this.initbooklist(t);
    }, initbooklist: function initbooklist(t, e) {
      var i = m.api.boktipslistor.getuserboktipslist;this.getboktipslist(i(t), t), e && f.updBoktipsEditorByBookid(e);
    }, Render: function Render(t, e, i, s) {
      s = s || "asc", h.getjsondata(t, function (t) {
        var i = t.Boktips;t.Boktips = n.orderBy(i, ["Title"], [s]), p.injecthtmltemplate("#bb_aj_boktipstemplatecontainer", e, t, function () {});
      });
    } };
}, function (t, e, n) {
  var s = n(0),
      r = n(6),
      o = n(1).config;t.exports = { init: function init(t) {
      new autoComplete({ selector: t, minChars: 2, source: function source(t, e) {
          var i = o.api.autocomplete.geturl,
              n = (i(10), { Searchstr: t });s.ajax({ async: !0, type: "post", dataType: "json", data: n, url: i(10), success: function success(t) {
              var i = [];s.each(t.BookList, function (t, e) {
                i.push([e.Title, e.Bookid]);
              }), e(i);
            }, error: function error(t, e, i) {
              alert("Nått blev fel vid hämtning av arrangemang!");
            } });
        }, renderItem: function renderItem(t, e) {
          return '<div class="autocomplete-suggestion" data-bookid="' + t[1] + '">' + t[0] + "</div>";
        }, onSelect: function onSelect(t, e, i) {
          return r.callEvents.emit("updateImg", i.dataset.bookid), !1;
        } });
    }, demo: function demo() {
      new autoComplete({ selector: "#txtboktipsTitle2", minChars: 1, source: function source(t, e) {
          t = t.toLowerCase();var n = ["ActionScript", "AppleScript", "Asp", "Assembly", "BASIC", "Batch", "C", "C++", "CSS", "Clojure", "COBOL", "ColdFusion", "Erlang", "Fortran", "Groovy", "Haskell", "HTML", "Java", "JavaScript", "Lisp", "Perl", "PHP", "PowerShell", "Python", "Ruby", "Scala", "Scheme", "SQL", "TeX", "XML"],
              s = [];for (i = 0; i < n.length; i++) {
            ~n[i].toLowerCase().indexOf(t) && s.push(n[i]);
          }e(s);
        } });
    } };
}, function (t, e) {
  t.exports = { checkparamsinurl: function checkparamsinurl(t) {
      var e = void 0,
          i = {},
          n = /\+/g,
          s = /([^&=]+)=?([^&]*)/g,
          r = function r(t) {
        return decodeURIComponent(t.replace(n, " "));
      },
          o = window.location.search.substring(1);for (; e = s.exec(o);) {
        i[r(e[1])] = r(e[2]);
      }if (!i.tab) {
        var _t3 = window.location.href.split("/"),
            _e6 = _t3.indexOf("bookid");_e6 > 0 && (i.bookid = _t3[_e6 + 1]), (_e6 = _t3.indexOf("typ")) > 0 && (i.typ = _t3[_e6 + 1]);
      }return i;
    } };
}, function (t, e, i) {
  var n = i(0),
      s = i(3),
      r = i(5),
      o = i(8),
      a = i(1).config;var l = { Approved: "0", Author: "", Bookid: "0", Title: "", Userage: "0", HighAge: "0", LowAge: "0", Review: "", Tiptype: "0", Userid: "0", UserName: "", Category: "0", TipID: "0", ImgSrc: "" };t.exports = { init: function init(t, e) {
      this.cacheDom();
    }, cacheDom: function cacheDom() {
      this.$bb_aj_Form_txtboktipsTitle = n("#txtboktipsTitle"), this.$bb_aj_Form_lblboktipsTitle = n("#lblboktipsTitle"), this.$bb_aj_Form_lblAJKrypInWriteContent = n("#lblAJKrypInWriteContent"), this.$bb_aj_Form_cmdSend = n("#cmdSendBoktipsForm"), this.$bb_aj_Form_cmdReset = n("#cmdResetBoktipsForm"), this.$bb_aj_boktipsFormMeta = n("#bb_aj_boktipsFormMeta"), this.$bb_aj_boktipsForm_exempleImg = n(".boktipsExempleimg .bookitem-image img");
    }, getBoktipsByIdForEdit: function getBoktipsByIdForEdit(t, e) {
      var i = a.api.boktipslistor.getuserboktipsByTipID,
          n = a.handlebartemplate.hb_boktipsModalView_tmp;this.Render(i(t, e), n, e);
    }, updBoktipsEditor: function updBoktipsEditor(t, e) {
      var i = this,
          r = a.api.boktipslistor.getuserboktipsByTipID;this.rensaEditform(), s.getjsondata(r(t, e), function (t) {
        n.each(t.Boktips, function (t, e) {
          i.HelperUpdateFormValues(e);
        });
      });
    }, rensaEditform: function rensaEditform() {
      this.$bb_aj_Form_cmdSend.attr("data-id", "0"), this.$bb_aj_Form_txtboktipsTitle.val(""), tinyMCE.activeEditor.setContent(""), o.HelpersetSelectedIndex(document.getElementById("drpBoktipSuitableAgeMin"), "1"), o.HelpersetSelectedIndex(document.getElementById("drpBoktipSuitableAgeMax"), "1"), o.HelpersetSelectedIndex(document.getElementById("drpBoktipAmnen"), "1"), this.$bb_aj_boktipsFormMeta.attr("data-approved", "0"), this.$bb_aj_boktipsFormMeta.attr("data-author", ""), this.$bb_aj_boktipsFormMeta.attr("data-bookid", "0"), this.$bb_aj_boktipsFormMeta.attr("data-usernamn", ""), this.$bb_aj_boktipsFormMeta.attr("data-Userage", "0"), this.$bb_aj_boktipsForm_exempleImg.attr("src", o.getimageHelper("0")), this.$bb_aj_Form_cmdSend.attr("data-id", "0");
    }, addBoktipsItem: function addBoktipsItem(t, e) {
      var i = a.api.boktipslistor.addboktipsItem;this.ApiPostHandler(i(), t, function (t) {
        e(t);
      });
    }, editBoktipsItem: function editBoktipsItem(t, e) {
      var i = a.api.boktipslistor.editboktipsItem;this.ApiPostHandler(i(), t, function (t) {
        e(t);
      });
    }, deleteBoktipsItem: function deleteBoktipsItem(t, e, i) {
      var n = a.api.boktipslistor.delboktipsItem;l.TipID = t, l.Userid = e, s.postjsondata(n(), l, function (t) {
        i();
      });
    }, updBoktipsEditorByBookid: function updBoktipsEditorByBookid(t) {
      var e = this,
          i = a.api.boktipslistor.getbookContextByBookID;s.getjsondata(i(t), function (t) {
        n.each(t.Boktips, function (t, i) {
          e.HelperUpdateFormValues(i);
        });
      });
    }, ApiPostHandler: function ApiPostHandler(t, e, i) {
      var n = this.HelpercollectFormValues(e);this.validateSave(n) ? s.postjsondata(t, n, function (t) {
        i(!0);
      }) : i(!1);
    }, Render: function Render(t, e, i) {
      s.getjsondata(t, function (t) {
        r.injecthtmltemplate("#bb_aj_modalContainer", e, t, function () {
          console.log("api kört!");
        });
      });
    }, validateSave: function validateSave() {
      var t = !0;return l.Title || (this.$bb_aj_Form_lblboktipsTitle.attr("style", "color:red; font-weight:bold;"), t = !1), l.Review || (this.$bb_aj_Form_lblAJKrypInWriteContent.attr("style", "color:red; font-weight:bold;"), t = !1), t && (this.$bb_aj_Form_lblboktipsTitle.removeAttr("style"), this.$bb_aj_Form_lblAJKrypInWriteContent.removeAttr("style")), t;
    }, HelpercollectFormValues: function HelpercollectFormValues(t) {
      return l.Approved = this.$bb_aj_boktipsFormMeta.attr("data-approved"), l.Author = this.$bb_aj_boktipsFormMeta.attr("data-author"), l.Bookid = this.$bb_aj_boktipsFormMeta.attr("data-bookid"), l.Title = this.$bb_aj_Form_txtboktipsTitle.val(), l.Userage = this.$bb_aj_boktipsFormMeta.attr("data-Userage"), l.HighAge = document.getElementById("drpBoktipSuitableAgeMax").value, l.LowAge = document.getElementById("drpBoktipSuitableAgeMin").value, l.Review = tinyMCE.activeEditor.getContent(), l.Tiptype = "0", l.Userid = t, l.UserName = this.$bb_aj_boktipsFormMeta.attr("data-usernamn"), l.Category = document.getElementById("drpBoktipAmnen").value, l.TipID = this.$bb_aj_Form_cmdSend.attr("data-id"), l.ImgSrc = this.$bb_aj_boktipsForm_exempleImg.attr("src"), l;
    }, HelperUpdateFormValues: function HelperUpdateFormValues(t) {
      this.$bb_aj_Form_cmdSend.attr("data-id", t.TipID), this.$bb_aj_Form_txtboktipsTitle.val(t.Title), t.Review || (t.Review = "");try {
        tinyMCE.activeEditor.execCommand("mceInsertContent", !1, t.Review);
      } catch (t) {
        console.log("tinymce laddades inte som den skulle");
      }return o.HelpersetSelectedIndex(document.getElementById("drpBoktipSuitableAgeMin"), t.LowAge), o.HelpersetSelectedIndex(document.getElementById("drpBoktipSuitableAgeMax"), t.HighAge), o.HelpersetSelectedIndex(document.getElementById("drpBoktipAmnen"), t.Category), this.$bb_aj_boktipsFormMeta.attr("data-approved", t.Approved), this.$bb_aj_boktipsFormMeta.attr("data-author", t.Author), this.$bb_aj_boktipsFormMeta.attr("data-bookid", t.Bookid), this.$bb_aj_boktipsFormMeta.attr("data-usernamn", t.UserName), this.$bb_aj_boktipsFormMeta.attr("data-Userage", t.Userage), this.$bb_aj_boktipsForm_exempleImg.attr("src", t.ImgSrc), t;
    } };
}, function (t, e, i) {
  i(2);var n = i(0),
      s = i(4),
      r = i(7),
      o = (i(6), i(3)),
      a = i(5),
      l = i(27),
      u = i(1).config;t.exports = { init: function init(t) {
      r.init("Scoreboard"), s.init("Scoreboard"), this.cacheDom(), this.BindEvent(t), this.initBadges(t);
    }, cacheDom: function cacheDom() {
      this.$aj_bb_KrypinMainGrid = n(".aj_bb_KrypinMainGrid"), this.$bb_aj_skrivbokenbadgeblock = n("#bb_aj_skrivbokenbadgeblock"), this.$bb_aj_boktipsbadgeblock = n("#bb_aj_boktipsbadgeblock"), this.$bb_aj_specialbadgeblock = n("#bb_aj_specialbadgeblock"), this.$bb_aj_highscorebadgeblock = n("#bb_aj_highscorebadgeblock"), this.$bb_aj_scoreBox = n(".bb_aj_scoreBox");
    }, BindEvent: function BindEvent(t) {}, initBadges: function initBadges(t) {
      var e = u.api.scoreboard.getuserbadgeslist,
          i = u.handlebartemplate.hb_boktipslist_tmp;this.Render(e(t), i, t);
    }, SkribokenbadgesBlock_upd: function SkribokenbadgesBlock_upd(t) {
      var e = u.handlebartemplate.hb_skribokenbadges_tmp;a.injecthtmltemplate("#bb_aj_skrivbokenbadgeblock", e, t, function () {
        console.log("skrivboken badges");
      });
    }, BoktipsbadgesBlock_upd: function BoktipsbadgesBlock_upd(t) {
      var e = u.handlebartemplate.hb_boktipsbadges_tmp;a.injecthtmltemplate("#bb_aj_boktipsbadgeblock", e, t, function () {
        console.log("boktips badges");
      });
    }, SpecialbadgesBlock_upd: function SpecialbadgesBlock_upd(t) {
      var e = u.handlebartemplate.hb_specialbadges_tmp;a.injecthtmltemplate("#bb_aj_specialbadgeblock", e, t, function () {
        console.log("skrivboken badges");
      });
    }, HighscorebadgesBlock_upd: function HighscorebadgesBlock_upd(t) {
      var e = u.handlebartemplate.hb_highscorebadges_tmp;a.injecthtmltemplate("#bb_aj_highscorebadgeblock", e, t, function () {
        console.log("skrivboken badges");
      });
    }, Render: function Render(t, e, i) {
      var n = this;o.getjsondata(t, function (t) {
        l.collectBadgeblock(t, function (t) {
          n.SkribokenbadgesBlock_upd(t), n.BoktipsbadgesBlock_upd(t), n.SpecialbadgesBlock_upd(t), n.HighscorebadgesBlock_upd(t);
        });
      });
    } };
}, function (t, e, i) {
  i(2);var n = i(0);t.exports = { collectBadgeblock: function collectBadgeblock(t, e) {
      var i = this,
          r = s;n.each(t.Bokmarkelser, function (t, e) {
        switch (e.AwardGroup) {case 1:
            r.skrivbokenlist = i.createskrivbokenlist(e);break;case 2:
            r.boktipslist = i.createboktipslist(e);break;default:
            1 == e.Occures ? r.highscorelist.push(e) : r.specialbadgeslist.push(e);}
      }), e(r);
    }, createskrivbokenlist: function createskrivbokenlist(t) {
      var e = s,
          i = 1;return n.each(e.skrivbokenlist, function (n, s) {
        i < t.UserLevel && (e.skrivbokenlist[n].Badgesrc = s.Badgesrc.substring(0, s.Badgesrc.length - 9) + ".png", e.skrivbokenlist[n].Beskrivning = "Du innehar: " + e.skrivbokentitel[n].titel + " Level " + i, e.skrivbokenlist[n].AwardName = e.skrivbokentitel[n].titel), i == t.UserLevel && (e.skrivbokenlist[n] = t), i++;
      }), e.skrivbokenlist;
    }, createboktipslist: function createboktipslist(t) {
      var e = s,
          i = 1;return n.each(e.boktipslist, function (n, s) {
        i < t.UserLevel && (e.boktipslist[n].Badgesrc = s.Badgesrc.substring(0, s.Badgesrc.length - 9) + ".png", e.boktipslist[n].Beskrivning = "Du innehar: " + e.boktipstitel[n].titel + " Level " + i, e.boktipslist[n].AwardName = e.boktipstitel[n].titel), i == t.UserLevel && (e.boktipslist[n] = t), i++;
      }), e.boktipslist;
    } };var s = { skrivbokenlist: [{ Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/Lv1_Berattar_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd berättare Level 1")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/Lv2_Berattare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd berättare Level 2")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/Lv3_Skribent_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 3 Skribent")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/Lv4_Storskribent_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 4 Storskribent")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/Lv5_Forfattare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 5 Författare")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/Lv6_Guldforfattare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 6 Guldförfattare")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }], boktipslist: [{ Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/btLv1_Boktipsar_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 1 Boktipsar")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/btLv2_Boktipsare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 2 Boktipsare")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/btLv3_Storboktipsare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 3 Storboktipsare")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/btLv4_Massboktipsare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 4 Massboktipsare")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }, { Userid: "0", Awardid: "0", Counter: "0", UserLevel: "0", AwardName: "", Badgesrc: "/Portals/0/bokmarkelser/btLv5_BoktokTipsare_grey.png", Beskrivning: decodeURIComponent(escape("ej uppnådd Level 5 Boktoktipsare")), Occures: "", AwardGroup: "", TolevelUp: "", EarnFuncID: "" }], specialbadgeslist: [], highscorelist: [], skrivbokentitel: [{ titel: decodeURIComponent(escape("Berättar")) }, { titel: decodeURIComponent(escape("Berättare")) }, { titel: decodeURIComponent(escape("Skribent")) }, { titel: decodeURIComponent(escape("Storskribent")) }, { titel: decodeURIComponent(escape("Författare")) }, { titel: decodeURIComponent(escape("Guldförfattare")) }], boktipstitel: [{ titel: "Boktipsar" }, { titel: "Boktipsare" }, { titel: "Storboktipsare" }, { titel: "MassBoktipsare" }, { titel: "BoktokTipsare" }] };
}, function (t, e, i) {
  i(2);var n = i(0);i(9);var s = i(4),
      r = i(7),
      o = i(6),
      a = i(3),
      l = i(5),
      u = i(1).config;t.exports = { init: function init(t) {
      r.init("Bibblomon"), s.init("Bibblomon"), this.cacheDom(), this.BindEvent(t), this.initbibblomonList(t);
    }, cacheDom: function cacheDom() {
      this.$bb_bb_aj_MainScore = n(".bb_aj_MainScore");
    }, BindEvent: function BindEvent(t) {
      var e = this;o.callEvents.on("userScoreupdate", function (t) {
        e.$bb_bb_aj_MainScore.html(t + " xp");
      });
    }, getbibblomonList: function getbibblomonList(t, e) {
      var i = u.handlebartemplate.hb_bibblomonlist_tmp;this.Render(t, i, e);
    }, initbibblomonList: function initbibblomonList(t) {
      var e = u.api.bibblomonlistor.getuserbibblomonlist;this.getbibblomonList(e(t), t);
    }, Render: function Render(t, e, i) {
      a.getjsondata(t, function (t) {
        o.callEvents.emit("userScoreupdate", t.Monvalue), l.injecthtmltemplate("#bb_aj_bibblomonlistMain", e, t, function () {
          jplist.init();
        });
      });
    } };
}, function (t, e, i) {
  i(2), i(0);var n = i(4);t.exports = { init: function init(t) {
      n.init("Inventory");
    } };
}, function (t, e, i) {
  i(2), i(0);var n = i(4);t.exports = { init: function init(t) {
      n.init("Shop");
    } };
}, function (t, e, i) {
  i(2);var n = i(0),
      s = i(4),
      r = i(3),
      o = i(5),
      a = i(1),
      l = a.config,
      u = a.usermessages;t.exports = { init: function init(t) {
      s.init("Setup"), this.cacheDom(), this.BindEvent(t), this.initSettings(t);
    }, cacheDom: function cacheDom() {
      this.$bb_aj_CurrentAvatar = n("#bk_aj_setup_avatar"), this.$bb_aj_CurrentSkin = n("#bk_aj_setup_skin"), this.$bb_aj_avatar_maingallery = n("#avatar_maingallery"), this.$bb_aj_skin_maingallery = n("#skin_maingallery"), this.$aj_bb_KrypinSkin = n(".aj_bb_KrypinSkin"), this.$bk_aj_nav_avatar = n(".bk_aj_nav_avatar"), this.$bb_aj_btnSettingSave = n("#btnSettingSave"), this.$bb_aj_btnSettingTemp = n("#btnSettingTemp"), this.$bb_aj_btnSettingAbort = n("#btnSettingAbort");
    }, BindEvent: function BindEvent(t) {
      var e = this;this.$bb_aj_avatar_maingallery.on("click", ".bk_aj_setup_avatar_item", function (t) {
        var i = n(this).find("img").attr("src"),
            s = n(this).attr("data-avataritm");return e.$bb_aj_CurrentAvatar.attr("src", i), l.userinfo.avatarid = s, !1;
      }), this.$bb_aj_skin_maingallery.on("click", ".bk_aj_setup_skin_item", function (t) {
        var i = n(this).find("img").attr("src"),
            s = n(this).attr("data-skinitm"),
            r = n(this).attr("data-skinclass");return e.$bb_aj_CurrentSkin.attr("src", i), l.userinfo.skinid = s, e.$bb_aj_CurrentSkin.attr("data-skinclass", r), !1;
      }), this.$bb_aj_btnSettingTemp.on("click", function (t) {
        var i = e.$bb_aj_CurrentSkin.attr("data-skinclass");return e.tempupdateSkin(i), e.tempupdateAvatar(e.$bb_aj_CurrentAvatar.attr("src")), !1;
      }), this.$bb_aj_btnSettingAbort.on("click", function (t) {
        var i = n(this).attr("data-default");return e.$bb_aj_CurrentAvatar.attr("src", l.userinfo.defaultavatarimg), e.$bb_aj_CurrentSkin.attr("src", l.userinfo.defaultskinimg), e.$bb_aj_CurrentSkin.attr("data-skinclass", l.userinfo.defaultskinclass), e.$bk_aj_nav_avatar.attr("src", l.api.installningar.curAvatarsrc + "menyavatars/nav_" + l.userinfo.avatarimg), e.tempupdateSkin(i), !1;
      }), this.$bb_aj_btnSettingSave.on("click", function (i) {
        confirm(u.installningar.confirmSave) && (e.updatesettings(t, 1, l.userinfo.avatarid, function (t) {}), e.updatesettings(t, 2, l.userinfo.skinid, function (t) {}));var n = e.$bb_aj_CurrentSkin.attr("data-skinclass");return e.tempupdateSkin(n), e.tempupdateAvatar(e.$bb_aj_CurrentAvatar.attr("src")), !1;
      });
    }, updatesettings: function updatesettings(t, e, i, n) {
      var s = l.api.installningar.updatesettings;r.getjsondata(s(t, e, i), function (t) {
        n(t);
      });
    }, tempupdateSkin: function tempupdateSkin(t) {
      this.$aj_bb_KrypinSkin.removeClass(function (t, e) {
        return (e.match(/(^|\s)aj_bb_skin_\S+/g) || []).join(" ");
      }).addClass(t);
    }, tempupdateAvatar: function tempupdateAvatar(t) {
      var e = t.replace(l.api.installningar.avatarimgsrc, "");this.$bk_aj_nav_avatar.attr("src", l.api.installningar.curAvatarsrc + "menyavatars/nav_" + e);
    }, getcurrentAvatarimg: function getcurrentAvatarimg(t) {
      var e = "defautlavatar_gubbeGlad",
          i = "33",
          s = l.api.installningar.curAvatarsrc;return n.each(t.SettingOptionList, function (n, s) {
        s.SettingsID == t.SettingValue && (e = s.SettingSrc, i = s.SettingsID);
      }), s += e, this.$bb_aj_CurrentAvatar.attr("src", s), l.userinfo.avatarid = i, l.userinfo.defaultavatarimg = s, l.userinfo.defaultavatarid = i, l.userinfo.avatarimg = e, !0;
    }, getcurrentskinimg: function getcurrentskinimg(t, e) {
      var i = "GreenNycklpigeStyle",
          s = "2",
          r = "aj_bb_greenbg",
          o = l.api.installningar.curSkinsrc;return n.each(t.SettingOptionList, function (e, n) {
        n.SettingsID == t.SettingValue && (i = n.SettingName, s = n.SettingsID, r = n.SettingClass);
      }), o += i + ".jpg", this.$bb_aj_CurrentSkin.attr("src", o), this.$bb_aj_CurrentSkin.attr("data-skinclass", r), this.$bb_aj_btnSettingAbort.attr("data-default", r), l.userinfo.skinid = s, l.userinfo.defaultskinimg = o, l.userinfo.defaultskinclass = r, l.userinfo.defaultskinid = s, !0;
    }, initSettings: function initSettings(t) {
      var e = l.api.installningar.src;this.render(t, e(t));
    }, render: function render(t, e) {
      var i = this,
          n = l.handlebartemplate.hb_settingsAvatar_tmp,
          s = l.handlebartemplate.hb_settingsSkins_tmp;r.getjsondata(e, function (t) {
        i.getcurrentAvatarimg(t.SettingsList[0]), i.getcurrentskinimg(t.SettingsList[1]), o.injecthtmltemplate("#avatar_maingallery", n, t.SettingsList[0], function () {}), o.injecthtmltemplate("#skin_maingallery", s, t.SettingsList[1], function () {});
      });
    } };
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpwbGlzdC5taW4uanMiLCJoYW5kbGViYXJzLmpzIiwiZHJhZ2Ryb3AuanMiLCJhdXRvLWNvbXBsZXRlLmpzIiwiYWpfYmJfS3J5cGluYnVuZGxlV2VicGFjay4xLjAuYmFiZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdnVKQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYWpfYmJfa3J5cGluYnVuZGxlLjIuMC4wLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciBvPXRbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHIpLG8ubD0hMCxvLmV4cG9ydHN9ci5tPWUsci5jPXQsci5kPWZ1bmN0aW9uKGUsdCxuKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxyLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1yKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoci5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbyBpbiBlKXIuZChuLG8sZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxvKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gci5kKHQsXCJhXCIsdCksdH0sci5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxyLnA9XCJcIixyKHIucz0xMil9KFtmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyLG4pe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5ncm91cD0odHx8XCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCksdGhpcy5uYW1lPShyfHxcImRlZmF1bHRcIikudHJpbSgpLHRoaXMuY29udHJvbHM9bnx8W10sdGhpcy5kZWVwTGlua1BhcmFtcz1bXSxvJiZvLmhhcyh0aGlzLmdyb3VwKSYmKHRoaXMuZGVlcExpbmtQYXJhbXM9by5nZXQodGhpcy5ncm91cCl8fFtdKX1yZXR1cm4gbihlLFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UmJmUubmFtZT09PXRoaXMubmFtZSYmZS5ncm91cD09PXRoaXMuZ3JvdXAmJnRoaXMuY29udHJvbHMucHVzaChlKX19LHtrZXk6XCJnZXREZWVwTGlua1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn19LHtrZXk6XCJnZXRKdW1wUGF0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9XCJcIix0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTtpZihhLmp1bXApe2lmKFwidG9wXCI9PT1hLmp1bXApcmV0dXJuXCJ0b3BcIjt2YXIgbD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGEuanVtcCk7aWYobCl7dmFyIHU9bC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZih1LndpZHRofHx1LmhlaWdodHx8dS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aClpZihlKXt2YXIgcz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO2lmKCFzKWNvbnRpbnVlO3ZhciBjPXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dS50b3A8Yy50b3AmJihlPWEuanVtcCl9ZWxzZSBlPWEuanVtcH19fX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fXJldHVybiBlfX1dKSxlfSgpO3QuZGVmYXVsdD1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dC5kZWZhdWx0PWZ1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0JiYodGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPSh0LmdldEF0dHJpYnV0ZShcImRhdGEtanBsaXN0LWNvbnRyb2xcIil8fFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLHRoaXMuZ3JvdXA9KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1ncm91cFwiKXx8XCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCksdGhpcy5uYW1lPSh0LmdldEF0dHJpYnV0ZShcImRhdGEtbmFtZVwiKXx8dC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpfHxcImRlZmF1bHRcIikudHJpbSgpLHRoaXMuaWQ9KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKXx8XCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCksdGhpcy5qdW1wPSh0LmdldEF0dHJpYnV0ZShcImRhdGEtanVtcFwiKXx8XCJcIikudHJpbSgpKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89YShyKDApKSxpPWEocig2KSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxvLmRlZmF1bHQpLG4odCxbe2tleTpcImdldFNvcnRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTtlPWUuY29uY2F0KGEuZ2V0U29ydE9wdGlvbnMoKSl9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19cmV0dXJuIGV9fSx7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUubmFtZSE9PXRoaXMubmFtZXx8ZS5ncm91cCE9PXRoaXMuZ3JvdXApcmV0dXJuIG51bGw7dmFyIHQ9bmV3IGkuZGVmYXVsdChlLmVsZW1lbnQpO3JldHVybiB0aGlzLmNvbnRyb2xzLnB1c2godCksdH19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoMCkpLGk9YShyKDgpKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSxmdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUubmFtZSE9PXRoaXMubmFtZXx8ZS5ncm91cCE9PXRoaXMuZ3JvdXApcmV0dXJuIG51bGw7dmFyIHQ9bmV3IGkuZGVmYXVsdChlLmVsZW1lbnQpO3JldHVybiB0aGlzLmNvbnRyb2xzLnB1c2godCksdH19LHtrZXk6XCJnZXRQYXRoRmlsdGVyT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9W10sdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLmNvbnRyb2xzW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7ZT1lLmNvbmNhdChhLmdldFBhdGhGaWx0ZXJPcHRpb25zKCkpfX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fXJldHVybiBlfX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKTtyKDQ2KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHQpe2lmKHRoaXMuZWxlbWVudD10LCF0aGlzLmVsZW1lbnQpcmV0dXJuO3RoaXMucGFuZWxzPXRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10eXBlPVwicGFuZWxcIl0nKSx0aGlzLmVsZW1lbnQub3BlbmVkQ2xhc3M9KHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9wZW5lZC1jbGFzc1wiKXx8XCJqcGxpc3QtZGQtb3BlbmVkXCIpLnRyaW0oKTt2YXIgcj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT10aGlzLnBhbmVsc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShpPWEubmV4dCgpKS5kb25lKTtyPSEwKXt2YXIgbD1pLnZhbHVlO2wuaW5pdGlhbENvbnRlbnQ9bC5pbm5lckhUTUwsbC5lbGVtZW50PXR9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319dGhpcy5jb250ZW50cz10aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdHlwZT1cImNvbnRlbnRcIl0nKSx0aGlzLmhhbmRsZVBhbmVsc0NsaWNrKCl9fXJldHVybiBuKGUsW3trZXk6XCJoYW5kbGVQYW5lbHNDbGlja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLnBhbmVscyYmISh0aGlzLnBhbmVscy5sZW5ndGg8PTApKXt2YXIgdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT1mdW5jdGlvbigpe3ZhciB0PW8udmFsdWU7dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihyKXt2YXIgbj0hMSxvPSEwLGk9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbCx1PWUuY29udGVudHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEobz0obD11Lm5leHQoKSkuZG9uZSk7bz0hMCl7dmFyIHM9bC52YWx1ZTtzLmNsYXNzTGlzdC50b2dnbGUodC5lbGVtZW50Lm9wZW5lZENsYXNzKSxzLmNsYXNzTGlzdC5jb250YWlucyh0LmVsZW1lbnQub3BlbmVkQ2xhc3MpJiYobj0hMCl9fWNhdGNoKGUpe2k9ITAsYT1lfWZpbmFsbHl7dHJ5eyFvJiZ1LnJldHVybiYmdS5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgYX19bj8odC5jbGFzc0xpc3QuYWRkKHQuZWxlbWVudC5vcGVuZWRDbGFzcyksdC5lbGVtZW50LmNsYXNzTGlzdC5hZGQodC5lbGVtZW50Lm9wZW5lZENsYXNzKSk6KHQuY2xhc3NMaXN0LnJlbW92ZSh0LmVsZW1lbnQub3BlbmVkQ2xhc3MpLHQuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHQuZWxlbWVudC5vcGVuZWRDbGFzcykpfSl9LGE9dGhpcy5wYW5lbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1hLm5leHQoKSkuZG9uZSk7dD0hMClpKCl9Y2F0Y2goZSl7cj0hMCxuPWV9ZmluYWxseXt0cnl7IXQmJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBufX1kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbih0KXtlLmVsZW1lbnQuY29udGFpbnModC50YXJnZXQpfHxlLmNsb3NlKCl9KX19fSx7a2V5Olwic2V0UGFuZWxzQ29udGVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMucGFuZWxzW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe28udmFsdWUuaW5uZXJIVE1MPWV9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19fX0se2tleTpcInJlc3RvcmVQYW5lbHNDb250ZW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0hMCx0PSExLHI9dm9pZCAwO3RyeXtmb3IodmFyIG4sbz10aGlzLnBhbmVsc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShlPShuPW8ubmV4dCgpKS5kb25lKTtlPSEwKXt2YXIgaT1uLnZhbHVlO2kuaW5pdGlhbENvbnRlbnQmJihpLmlubmVySFRNTD1pLmluaXRpYWxDb250ZW50KX19Y2F0Y2goZSl7dD0hMCxyPWV9ZmluYWxseXt0cnl7IWUmJm8ucmV0dXJuJiZvLnJldHVybigpfWZpbmFsbHl7aWYodCl0aHJvdyByfX19fSx7a2V5OlwiY2xvc2VcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPSEwLHQ9ITEscj12b2lkIDA7dHJ5e2Zvcih2YXIgbixvPXRoaXMuY29udGVudHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZT0obj1vLm5leHQoKSkuZG9uZSk7ZT0hMCl7bi52YWx1ZS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMucGFuZWxzWzBdLmVsZW1lbnQub3BlbmVkQ2xhc3MpfX1jYXRjaChlKXt0PSEwLHI9ZX1maW5hbGx5e3RyeXshZSYmby5yZXR1cm4mJm8ucmV0dXJuKCl9ZmluYWxseXtpZih0KXRocm93IHJ9fXZhciBpPSEwLGE9ITEsbD12b2lkIDA7dHJ5e2Zvcih2YXIgdSxzPXRoaXMucGFuZWxzW1N5bWJvbC5pdGVyYXRvcl0oKTshKGk9KHU9cy5uZXh0KCkpLmRvbmUpO2k9ITApe3ZhciBjPXUudmFsdWU7Yy5jbGFzc0xpc3QucmVtb3ZlKGMuZWxlbWVudC5vcGVuZWRDbGFzcyksYy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoYy5lbGVtZW50Lm9wZW5lZENsYXNzKX19Y2F0Y2goZSl7YT0hMCxsPWV9ZmluYWxseXt0cnl7IWkmJnMucmV0dXJuJiZzLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyBsfX19fV0pLGV9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89YShyKDApKSxpPWEocigzMCkpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLGZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsby5kZWZhdWx0KSxuKHQsW3trZXk6XCJnZXRUZXh0RmlsdGVyT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9W10sdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLmNvbnRyb2xzW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7ZT1lLmNvbmNhdChhLmdldFRleHRGaWx0ZXJPcHRpb25zKCkpfX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fXJldHVybiBlfX0se2tleTpcImFkZENvbnRyb2xcIix2YWx1ZTpmdW5jdGlvbihlKXtpZihlLm5hbWUhPT10aGlzLm5hbWV8fGUuZ3JvdXAhPT10aGlzLmdyb3VwKXJldHVybiBudWxsO3ZhciB0PW5ldyBpLmRlZmF1bHQoZS5lbGVtZW50KTtyZXR1cm4gdGhpcy5jb250cm9scy5wdXNoKHQpLHR9fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY29udHJvbHMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkJiZcIlwiIT09ZS50ZXh0LnRyaW0oKT9lLmlkK1wiPVwiK2UudGV4dC50cmltKCk6XCJcIn0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cIlwiIT09ZX0pO3JldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoZSkpLmpvaW4oXCImXCIpfX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0ocigxKSk7dmFyIGk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciByPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwodGhpcyxlKSk7aWYoZSl7ci5wYXRoPShlLmdldEF0dHJpYnV0ZShcImRhdGEtcGF0aFwiKXx8XCJcIikudHJpbSgpLHIuZGF0YVR5cGU9KGUuZ2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIpfHxcInRleHRcIikudHJpbSgpLnRvTG93ZXJDYXNlKCksci5vcmRlcj0oZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yZGVyXCIpfHxcImFzY1wiKS50cmltKCkudG9Mb3dlckNhc2UoKSxyLnJlZ2V4PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1yZWdleFwiKXx8XCJcIixyLmRhdGVUaW1lRm9ybWF0PShlLmdldEF0dHJpYnV0ZShcImRhdGEtZGF0ZS1mb3JtYXRcIil8fFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLHIubXVsdGlwbGVTb3J0c051bWJlcj1yLmdldE11bHRpcGxlU29ydHNOdW1iZXIoZSk7Zm9yKHZhciBuPTE7bjw9ci5tdWx0aXBsZVNvcnRzTnVtYmVyO24rKylyW1wicGF0aFwiK25dPShlLmdldEF0dHJpYnV0ZShcImRhdGEtcGF0aC1cIituKXx8XCJcIikudHJpbSgpLHJbXCJkYXRhVHlwZVwiK25dPShlLmdldEF0dHJpYnV0ZShcImRhdGEtdHlwZS1cIituKXx8XCJ0ZXh0XCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLHJbXCJvcmRlclwiK25dPShlLmdldEF0dHJpYnV0ZShcImRhdGEtb3JkZXItXCIrbil8fFwiYXNjXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpLHJbXCJyZWdleFwiK25dPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1yZWdleC1cIituKXx8XCJcIixyW1wiZGF0ZVRpbWVGb3JtYXRcIituXT0oZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWRhdGUtZm9ybWF0LVwiK24pfHxcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKX1yZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxvLmRlZmF1bHQpLG4odCxbe2tleTpcImdldE11bHRpcGxlU29ydHNOdW1iZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0wLHI9ITAsbj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBpLGE9ZS5hdHRyaWJ1dGVzW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGk9YS5uZXh0KCkpLmRvbmUpO3I9ITApZm9yKHZhciBsPWkudmFsdWUsdT1udWxsLHM9L15kYXRhLXBhdGgtKFswLTldKykkL2c7dT1zLmV4ZWMobC5ub2RlTmFtZSk7KXt2YXIgYz1OdW1iZXIodVsxXSk7TnVtYmVyLmlzSW50ZWdlcihjKSYmdCsrfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXJldHVybiB0fX0se2tleTpcImdldFNvcnRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXTtpZih0aGlzLnBhdGgpe2UucHVzaCh7cGF0aDp0aGlzLnBhdGgsZGF0YVR5cGU6dGhpcy5kYXRhVHlwZSxvcmRlcjp0aGlzLm9yZGVyLGlnbm9yZVJlZ2V4OnRoaXMuaWdub3JlUmVnZXgsZGF0ZVRpbWVGb3JtYXQ6dGhpcy5kYXRlVGltZUZvcm1hdH0pO2Zvcih2YXIgdD0xO3Q8PXRoaXMubXVsdGlwbGVTb3J0c051bWJlcjt0KyspZS5wdXNoKHtwYXRoOnRoaXNbXCJwYXRoXCIrdF0sZGF0YVR5cGU6dGhpc1tcImRhdGFUeXBlXCIrdF0sb3JkZXI6dGhpc1tcIm9yZGVyXCIrdF0saWdub3JlUmVnZXg6dGhpc1tcImlnbm9yZVJlZ2V4XCIrdF0sZGF0ZVRpbWVGb3JtYXQ6dGhpc1tcImRhdGVUaW1lRm9ybWF0XCIrdF19KX1yZXR1cm4gZX19LHtrZXk6XCJpc0VxdWFsVG9cIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9ITAscj1bXCJwYXRoXCIsXCJkYXRhVHlwZVwiLFwib3JkZXJcIixcInJlZ2V4XCIsXCJkYXRlVGltZUZvcm1hdFwiXSxuPTA7bjxyLmxlbmd0aDtuKyspdD10JiZ0aGlzW3Jbbl1dPT09ZVtyW25dXTt0PXQmJnRoaXMubXVsdGlwbGVTb3J0c051bWJlcj09PWUubXVsdGlwbGVTb3J0c051bWJlcjtmb3IodmFyIG89MTtvPD10aGlzLm11bHRpcGxlU29ydHNOdW1iZXI7bysrKWZvcih2YXIgaT0wO2k8ci5sZW5ndGg7aSsrKXQ9dCYmdGhpc1tyW2ldK29dPT09ZVtyW2ldK29dO3JldHVybiB0fX1dKSx0fSgpO3QuZGVmYXVsdD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKTt0LmRlZmF1bHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHIoZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06W10sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHIpO3ZhciBpPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHIuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YocikpLmNhbGwodGhpcyxlLHQsbixvKSk7cmV0dXJuIGkuZ3JvdXA9ZSxpLm5hbWU9dCxpLmNoZWNrYm94ZXM9W10saS5yYWRpb3M9W10saX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0ocixlKSxuKHIsW3trZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGkscixuKX1pZihcInZhbHVlXCJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBhPW8uZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChuKTp2b2lkIDB9KHIucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHIucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSk7aWYobi5zZWxlY3RlZD1cInRydWVcIj09PW4uZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdGVkXCIpLG4ubW9kZT1uLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlXCIpfHxcInJhZGlvXCIsbi5pZCl7dmFyIG89dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleT09PW4uaWR9KTtvJiYobi5zZWxlY3RlZD1cIjFcIj09PW8udmFsdWUpfVwicmFkaW9cIj09PW4ubW9kZSYmKHRoaXMucmFkaW9zLnB1c2gobiksdGhpcy5oYW5kbGVSYWRpb3MoKSksXCJjaGVja2JveFwiPT09bi5tb2RlJiYodGhpcy5jaGVja2JveGVzLnB1c2gobiksdGhpcy5oYW5kbGVDaGVja2JveGVzKCkpLG4uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKXtpZihlLnByZXZlbnREZWZhdWx0KCksXCJjaGVja2JveFwiPT09bi5tb2RlJiYobi5zZWxlY3RlZD0hbi5zZWxlY3RlZCx0LmNoZWNrYm94ZXMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmlzRXF1YWxUbyhuKSYmKGUuc2VsZWN0ZWQ9bi5zZWxlY3RlZCl9KSx0LmhhbmRsZUNoZWNrYm94ZXMoKSksXCJyYWRpb1wiPT09bi5tb2RlKXt2YXIgcj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEsbD10LnJhZGlvc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShhPWwubmV4dCgpKS5kb25lKTtyPSEwKWEudmFsdWUuc2VsZWN0ZWQ9ITF9Y2F0Y2goZSl7bz0hMCxpPWV9ZmluYWxseXt0cnl7IXImJmwucmV0dXJuJiZsLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX1uLnNlbGVjdGVkPSEwLHQuaGFuZGxlUmFkaW9zKCl9d2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHQuZ3JvdXApfSl9fSx7a2V5OlwiaGFuZGxlQ2hlY2tib3hlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9ITAsdD0hMSxyPXZvaWQgMDt0cnl7Zm9yKHZhciBuLG89dGhpcy5jaGVja2JveGVzW1N5bWJvbC5pdGVyYXRvcl0oKTshKGU9KG49by5uZXh0KCkpLmRvbmUpO2U9ITApe3ZhciBpPW4udmFsdWU7aS5zZWxlY3RlZD9pLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImpwbGlzdC1zZWxlY3RlZFwiKTppLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImpwbGlzdC1zZWxlY3RlZFwiKSxpLmVsZW1lbnQuY2hlY2tlZD1pLnNlbGVjdGVkfX1jYXRjaChlKXt0PSEwLHI9ZX1maW5hbGx5e3RyeXshZSYmby5yZXR1cm4mJm8ucmV0dXJuKCl9ZmluYWxseXtpZih0KXRocm93IHJ9fX19LHtrZXk6XCJnZXRMYXN0U2VsZWN0ZWRSYWRpb1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9bnVsbCx0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMucmFkaW9zW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7YS5zZWxlY3RlZCYmKGU9YSl9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19cmV0dXJuIGV9fSx7a2V5OlwiaGFuZGxlUmFkaW9zXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLnJhZGlvcy5sZW5ndGg+MCl7dmFyIGU9dGhpcy5nZXRMYXN0U2VsZWN0ZWRSYWRpbygpLHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9dGhpcy5yYWRpb3NbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTthLnNlbGVjdGVkPSExLGEuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwianBsaXN0LXNlbGVjdGVkXCIpfX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fWUmJnRoaXMucmFkaW9zLmZvckVhY2goZnVuY3Rpb24odCl7dC5pc0VxdWFsVG8oZSkmJih0LnNlbGVjdGVkPSEwLHQuZWxlbWVudC5jaGVja2VkPSEwLHQuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNlbGVjdGVkXCIpKX0pfX19LHtrZXk6XCJnZXREZWVwTGlua1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jaGVja2JveGVzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD9lLnNlbGVjdGVkP2UuaWQrXCI9MVwiOmUuaWQrXCI9MFwiOlwiXCJ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KSx0PXRoaXMucmFkaW9zLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZCYmZS5zZWxlY3RlZD9lLmlkK1wiPTFcIjpcIlwifSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVyblwiXCIhPT1lfSkscj1lLmNvbmNhdCh0KTtyZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KHIpKS5qb2luKFwiJlwiKX19XSkscn0oKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKDEpKTt2YXIgaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIHI9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUpKTtyZXR1cm4gZSYmKHIucGF0aD0oZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhdGhcIil8fFwiXCIpLnRyaW0oKSxyLmlzSW52ZXJ0ZWQ9XCJ0cnVlXCI9PT0oZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWludmVydGVkXCIpfHxcIlwiKS50b0xvd2VyQ2FzZSgpLnRyaW0oKSkscn1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxvLmRlZmF1bHQpLG4odCxbe2tleTpcImdldFBhdGhGaWx0ZXJPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57cGF0aDp0aGlzLnBhdGgsaXNJbnZlcnRlZDp0aGlzLmlzSW52ZXJ0ZWR9fX0se2tleTpcImlzRXF1YWxUb1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnBhdGg9PT1lLnBhdGgmJnRoaXMuaXNJbnZlcnRlZD09PWUuaXNJbnZlcnRlZH19XSksdH0oKTt0LmRlZmF1bHQ9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCk7dC5kZWZhdWx0PWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiByKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOltdLG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxyKTt2YXIgaT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLChyLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHIpKS5jYWxsKHRoaXMsZSx0LG4sbykpO3JldHVybiBpLmdyb3VwPWUsaS5uYW1lPXQsaS5jaGVja2JveGVzPVtdLGl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHIsZSksbihyLFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1mdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfShyLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihyLnByb3RvdHlwZSksXCJhZGRDb250cm9sXCIsdGhpcykuY2FsbCh0aGlzLGUpO2lmKG4uc2VsZWN0ZWQ9bi5lbGVtZW50LmNoZWNrZWQsbi5pZCl7dmFyIG89dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleT09PW4uaWR9KTtvJiYobi5zZWxlY3RlZD1cIjFcIj09PW8udmFsdWUpfXRoaXMuY2hlY2tib3hlcy5wdXNoKG4pLHRoaXMuaGFuZGxlQ2hlY2tib3hlcygpLG4uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLG4uc2VsZWN0ZWQ9IW4uc2VsZWN0ZWQsdC5jaGVja2JveGVzLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5pc0VxdWFsVG8obikmJihlLnNlbGVjdGVkPW4uc2VsZWN0ZWQpfSksdC5oYW5kbGVDaGVja2JveGVzKCksd2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHQuZ3JvdXApfSl9fSx7a2V5OlwiaGFuZGxlQ2hlY2tib3hlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9ITAsdD0hMSxyPXZvaWQgMDt0cnl7Zm9yKHZhciBuLG89dGhpcy5jaGVja2JveGVzW1N5bWJvbC5pdGVyYXRvcl0oKTshKGU9KG49by5uZXh0KCkpLmRvbmUpO2U9ITApe3ZhciBpPW4udmFsdWU7aS5zZWxlY3RlZD9pLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImpwbGlzdC1zZWxlY3RlZFwiKTppLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImpwbGlzdC1zZWxlY3RlZFwiKSxpLmVsZW1lbnQuY2hlY2tlZD1pLnNlbGVjdGVkfX1jYXRjaChlKXt0PSEwLHI9ZX1maW5hbGx5e3RyeXshZSYmby5yZXR1cm4mJm8ucmV0dXJuKCl9ZmluYWxseXtpZih0KXRocm93IHJ9fX19LHtrZXk6XCJnZXREZWVwTGlua1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jaGVja2JveGVzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD9lLnNlbGVjdGVkP2UuaWQrXCI9MVwiOmUuaWQrXCI9MFwiOlwiXCJ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KTtyZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGUpKS5qb2luKFwiJlwiKX19XSkscn0oKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpO3QuZGVmYXVsdD1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7ZnVuY3Rpb24gcihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMscik7dmFyIGk9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywoci5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSkuY2FsbCh0aGlzLGUsdCxuLG8pKTtyZXR1cm4gaS5ncm91cD1lLGkubmFtZT10LGkucmFkaW9zPVtdLGl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHIsZSksbihyLFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1mdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfShyLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihyLnByb3RvdHlwZSksXCJhZGRDb250cm9sXCIsdGhpcykuY2FsbCh0aGlzLGUpO2lmKG4uc2VsZWN0ZWQ9bi5lbGVtZW50LmNoZWNrZWQsbi5pZCl7dmFyIG89dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleT09PW4uaWR9KTtvJiYobi5zZWxlY3RlZD1cIjFcIj09PW8udmFsdWUpfXRoaXMucmFkaW9zLnB1c2gobiksdGhpcy5oYW5kbGVSYWRpb3MoKSxuLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKTt2YXIgcj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEsbD10LnJhZGlvc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShhPWwubmV4dCgpKS5kb25lKTtyPSEwKWEudmFsdWUuc2VsZWN0ZWQ9ITF9Y2F0Y2goZSl7bz0hMCxpPWV9ZmluYWxseXt0cnl7IXImJmwucmV0dXJuJiZsLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX1uLnNlbGVjdGVkPSEwLHQuaGFuZGxlUmFkaW9zKCksd2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHQuZ3JvdXApfSl9fSx7a2V5OlwiZ2V0TGFzdFNlbGVjdGVkUmFkaW9cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPW51bGwsdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLnJhZGlvc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShvPWkubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vLnZhbHVlO2Euc2VsZWN0ZWQmJihlPWEpfX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fXJldHVybiBlfX0se2tleTpcImhhbmRsZVJhZGlvc1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5yYWRpb3MubGVuZ3RoPjApe3ZhciBlPXRoaXMuZ2V0TGFzdFNlbGVjdGVkUmFkaW8oKSx0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMucmFkaW9zW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7YS5zZWxlY3RlZD0hMSxhLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImpwbGlzdC1zZWxlY3RlZFwiKX19Y2F0Y2goZSl7cj0hMCxuPWV9ZmluYWxseXt0cnl7IXQmJmkucmV0dXJuJiZpLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBufX1lJiZ0aGlzLnJhZGlvcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuaXNFcXVhbFRvKGUpJiYodC5zZWxlY3RlZD0hMCx0LmVsZW1lbnQuY2hlY2tlZD0hMCx0LmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImpwbGlzdC1zZWxlY3RlZFwiKSl9KX19fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmFkaW9zLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZCYmZS5zZWxlY3RlZD9lLmlkK1wiPTFcIjpcIlwifSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVyblwiXCIhPT1lfSk7cmV0dXJuIEFycmF5LmZyb20obmV3IFNldChlKSkuam9pbihcIiZcIil9fV0pLHJ9KCl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWEocigwKSksaT1hKHIoNDApKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSxmdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUubmFtZSE9PXRoaXMubmFtZXx8ZS5ncm91cCE9PXRoaXMuZ3JvdXApcmV0dXJuIG51bGw7dmFyIHQ9bmV3IGkuZGVmYXVsdChlLmVsZW1lbnQpO3JldHVybiB0aGlzLmNvbnRyb2xzLnB1c2godCksdH19LHtrZXk6XCJnZXRSYW5nZUZpbHRlck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9dGhpcy5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShvPWkubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vLnZhbHVlO2U9ZS5jb25jYXQoYS5nZXRSYW5nZUZpbHRlck9wdGlvbnMoKSl9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19cmV0dXJuIGV9fV0pLHR9KCk7dC5kZWZhdWx0PWx9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj14KHIoMTMpKSxvPXgocigyMCkpLGk9eChyKDIxKSksYT14KHIoMjIpKSxsPXgocigyMykpLHU9eChyKDI0KSkscz14KHIoMjUpKSxjPXgocigyNikpLGY9eChyKDI5KSksZD14KHIoMzEpKSxwPXgocigzMikpLGg9eChyKDMzKSksdj14KHIoMzQpKSx5PXgocigzNSkpLGI9eChyKDM2KSksZz14KHIoMzcpKSxtPXgocigzOCkpLHc9eChyKDM5KSksTz14KHIoNDEpKSxfPXgocig0MykpLGo9eChyKDQpKSxQPXgocig0NCkpLGs9eChyKDQ1KSk7ZnVuY3Rpb24geChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19IWZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50KXt2YXIgZT1mdW5jdGlvbihlLHQpe3Q9dHx8e2J1YmJsZXM6ITEsY2FuY2VsYWJsZTohMSxkZXRhaWw6dm9pZCAwfTt2YXIgcj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO3JldHVybiByLmluaXRDdXN0b21FdmVudChlLHQuYnViYmxlcyx0LmNhbmNlbGFibGUsdC5kZXRhaWwpLHJ9O2UucHJvdG90eXBlPXdpbmRvdy5FdmVudC5wcm90b3R5cGUsd2luZG93LkN1c3RvbUV2ZW50PWV9d2luZG93LmpwbGlzdD13aW5kb3cuanBsaXN0fHx7fSx3aW5kb3cuanBsaXN0LmNvbnRyb2xUeXBlcz13aW5kb3cuanBsaXN0LmNvbnRyb2xUeXBlc3x8bmV3IE1hcChbW1wiaGlkZGVuLXNvcnRcIixvLmRlZmF1bHRdLFtcInNvcnQtYnV0dG9uc1wiLGkuZGVmYXVsdF0sW1wicmFkaW8tYnV0dG9ucy1zb3J0XCIsYS5kZWZhdWx0XSxbXCJjaGVja2JveC1zb3J0XCIsbC5kZWZhdWx0XSxbXCJzZWxlY3Qtc29ydFwiLHUuZGVmYXVsdF0sW1wiZHJvcGRvd24tc29ydFwiLHMuZGVmYXVsdF0sW1wicGFnaW5hdGlvblwiLGMuZGVmYXVsdF0sW1widGV4dGJveC1maWx0ZXJcIixmLmRlZmF1bHRdLFtcImNoZWNrYm94LXRleHQtZmlsdGVyXCIsZC5kZWZhdWx0XSxbXCJyYWRpby1idXR0b25zLXRleHQtZmlsdGVyXCIscC5kZWZhdWx0XSxbXCJidXR0b25zLXRleHQtZmlsdGVyXCIsaC5kZWZhdWx0XSxbXCJzZWxlY3QtZmlsdGVyXCIsdi5kZWZhdWx0XSxbXCJkcm9wZG93bi1maWx0ZXJcIixtLmRlZmF1bHRdLFtcImNoZWNrYm94LXBhdGgtZmlsdGVyXCIseS5kZWZhdWx0XSxbXCJyYWRpby1idXR0b25zLXBhdGgtZmlsdGVyXCIsYi5kZWZhdWx0XSxbXCJidXR0b25zLXBhdGgtZmlsdGVyXCIsZy5kZWZhdWx0XSxbXCJidXR0b25zLXJhbmdlLWZpbHRlclwiLHcuZGVmYXVsdF0sW1wic2xpZGVyLXJhbmdlLWZpbHRlclwiLE8uZGVmYXVsdF0sW1wibm8tcmVzdWx0c1wiLF8uZGVmYXVsdF0sW1wiZHJvcGRvd25cIixqLmRlZmF1bHRdLFtcImxheW91dFwiLFAuZGVmYXVsdF0sW1wicmVzZXRcIixrLmRlZmF1bHRdXSk7dmFyIHQ9bmV3IG4uZGVmYXVsdDt3aW5kb3cuanBsaXN0LmluaXQ9dC5pbml0LmJpbmQodCksd2luZG93LmpwbGlzdC5yZWZyZXNoPXQucmVmcmVzaC5iaW5kKHQpLHdpbmRvdy5qcGxpc3QucmVzZXRDb250cm9scz10LnJlc2V0Q29udHJvbHMuYmluZCh0KX0oKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiBmdW5jdGlvbihlLHQpe3ZhciByPVtdLG49ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBhLGw9ZVtTeW1ib2wuaXRlcmF0b3JdKCk7IShuPShhPWwubmV4dCgpKS5kb25lKSYmKHIucHVzaChhLnZhbHVlKSwhdHx8ci5sZW5ndGghPT10KTtuPSEwKTt9Y2F0Y2goZSl7bz0hMCxpPWV9ZmluYWxseXt0cnl7IW4mJmwucmV0dXJuJiZsLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX1yZXR1cm4gcn0oZSx0KTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX19KCksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKDE0KSk7dmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKX1yZXR1cm4gbyhlLFt7a2V5OlwiaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuc2V0dGluZ3M9T2JqZWN0LmFzc2lnbih7fSx7c3RvcmFnZTpcIlwiLHN0b3JhZ2VOYW1lOlwianBsaXN0XCIsY29va2llc0V4cGlyYXRpb246LTEsZGVlcExpbmtpbmc6ITEsaGFzaFN0YXJ0OlwiI1wifSxlKSx0aGlzLmNvbnRyb2xzPWkuZGVmYXVsdC5zcGxpdEJ5R3JvdXBBbmROYW1lKHRoaXMuc2V0dGluZ3MsZG9jdW1lbnQuYm9keSksdGhpcy5lbGVtZW50cz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtanBsaXN0LWdyb3VwXVwiKSx0aGlzLmdyb3Vwcz1pLmRlZmF1bHQuZmluZEdyb3Vwcyh0aGlzLmVsZW1lbnRzKTtmb3IodmFyIHQ9W10uY29uY2F0KGZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLHI9QXJyYXkoZS5sZW5ndGgpO3Q8ZS5sZW5ndGg7dCsrKXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm4gQXJyYXkuZnJvbShlKX0oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWpwbGlzdC1pdGVtXVwiKSkpLHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdLmpwbGlzdEluZGV4PXI7dGhpcy5yZWZyZXNoKFwiXCIpfX0se2tleTpcInJlZnJlc2hcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcIlwiO2kuZGVmYXVsdC5hcHBseSh0aGlzLnNldHRpbmdzLHRoaXMuY29udHJvbHMsdGhpcy5ncm91cHMsZSl9fSx7a2V5OlwicmVzZXRDb250cm9sc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiXCI7aWYodGhpcy5jb250cm9scyl7dmFyIHQ9ITAscj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBhLGw9dGhpcy5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShhPWwubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgdT1uKGEudmFsdWUsMikscz0odVswXSx1WzFdKSxjPSEwLGY9ITEsZD12b2lkIDA7dHJ5e2Zvcih2YXIgcCxoPXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoYz0ocD1oLm5leHQoKSkuZG9uZSk7Yz0hMCl7dmFyIHY9cC52YWx1ZSx5PSEwLGI9ITEsZz12b2lkIDA7dHJ5e2Zvcih2YXIgbSx3PXYuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoeT0obT13Lm5leHQoKSkuZG9uZSk7eT0hMCl7dmFyIE89bS52YWx1ZTtPLmVsZW1lbnQmJk8uZWxlbWVudC5pbml0aWFsSFRNTCYmKE8uZWxlbWVudC5vdXRlckhUTUw9Ty5lbGVtZW50LmluaXRpYWxIVE1MKX19Y2F0Y2goZSl7Yj0hMCxnPWV9ZmluYWxseXt0cnl7IXkmJncucmV0dXJuJiZ3LnJldHVybigpfWZpbmFsbHl7aWYoYil0aHJvdyBnfX19fWNhdGNoKGUpe2Y9ITAsZD1lfWZpbmFsbHl7dHJ5eyFjJiZoLnJldHVybiYmaC5yZXR1cm4oKX1maW5hbGx5e2lmKGYpdGhyb3cgZH19fX1jYXRjaChlKXtyPSEwLG89ZX1maW5hbGx5e3RyeXshdCYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG99fX10aGlzLmNvbnRyb2xzPWkuZGVmYXVsdC5zcGxpdEJ5R3JvdXBBbmROYW1lKHRoaXMuc2V0dGluZ3MsZG9jdW1lbnQuYm9keSksdGhpcy5yZWZyZXNoKGUpfX1dKSxlfSgpO3QuZGVmYXVsdD1hfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIHI9W10sbj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEsbD1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKG49KGE9bC5uZXh0KCkpLmRvbmUpJiYoci5wdXNoKGEudmFsdWUpLCF0fHxyLmxlbmd0aCE9PXQpO249ITApO31jYXRjaChlKXtvPSEwLGk9ZX1maW5hbGx5e3RyeXshbiYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiByfShlLHQpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfX0oKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksaT1mKHIoMTUpKSxhPWYocigxNikpLGw9ZihyKDEpKSx1PWYocigxNykpLHM9ZihyKDE4KSksYz1mKHIoMTkpKTtmdW5jdGlvbiBmKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBkKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLHI9QXJyYXkoZS5sZW5ndGgpO3Q8ZS5sZW5ndGg7dCsrKXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm4gQXJyYXkuZnJvbShlKX12YXIgcD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpfXJldHVybiBvKGUsbnVsbCxbe2tleTpcImFwcGx5XCIsdmFsdWU6ZnVuY3Rpb24odCxyLG8pe3ZhciBsPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpcIlwiO2lmKHImJm8pe3ZhciB1PSEwLGY9ITEsZD12b2lkIDA7dHJ5e2Zvcih2YXIgcCxoPW9bU3ltYm9sLml0ZXJhdG9yXSgpOyEodT0ocD1oLm5leHQoKSkuZG9uZSk7dT0hMCl7dmFyIHY9bihwLnZhbHVlLDIpLHk9dlswXSxiPXZbMV07aWYobCYmbD09PXl8fCFsKXt2YXIgZz1yLmdldCh5KSxtPWUuY29sbGVjdENvbnRyb2xzT3B0aW9ucyhnKSx3PSEwLE89ITEsXz12b2lkIDA7dHJ5e2Zvcih2YXIgaixQPWJbU3ltYm9sLml0ZXJhdG9yXSgpOyEodz0oaj1QLm5leHQoKSkuZG9uZSk7dz0hMCl7dmFyIGs9ai52YWx1ZSx4PWsuaXRlbXMubGVuZ3RoLFM9ZS5nZXRJdGVtc0ZyYWdtZW50KGsuaXRlbXMpO20uc29ydE9wdGlvbnMmJm0uc29ydE9wdGlvbnMubGVuZ3RoPjAmJihpLmRlZmF1bHQuc29ydChrLml0ZW1zLG0uc29ydE9wdGlvbnMpLFM9ZS5nZXRJdGVtc0ZyYWdtZW50KGsuaXRlbXMpKTt2YXIgQz1rLml0ZW1zO2lmKG0ucGF0aEZpbHRlck9wdGlvbnMpe3ZhciBFPSEwLEw9ITEsVD12b2lkIDA7dHJ5e2Zvcih2YXIgTixNPW0ucGF0aEZpbHRlck9wdGlvbnNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoRT0oTj1NLm5leHQoKSkuZG9uZSk7RT0hMCl7dmFyIEE9Ti52YWx1ZTt4PShDPWMuZGVmYXVsdC5wYXRoRmlsdGVyKEMsQS5wYXRoLEEuaXNJbnZlcnRlZCkpLmxlbmd0aCxTPWUuZ2V0SXRlbXNGcmFnbWVudChDKX19Y2F0Y2goZSl7TD0hMCxUPWV9ZmluYWxseXt0cnl7IUUmJk0ucmV0dXJuJiZNLnJldHVybigpfWZpbmFsbHl7aWYoTCl0aHJvdyBUfX19aWYobS5yYW5nZUZpbHRlck9wdGlvbnMpe3ZhciBGPSEwLFI9ITEsRD12b2lkIDA7dHJ5e2Zvcih2YXIgQixxPW0ucmFuZ2VGaWx0ZXJPcHRpb25zW1N5bWJvbC5pdGVyYXRvcl0oKTshKEY9KEI9cS5uZXh0KCkpLmRvbmUpO0Y9ITApe3ZhciBJPUIudmFsdWU7eD0oQz1jLmRlZmF1bHQucmFuZ2VGaWx0ZXIoQyxJLnBhdGgsSS5mcm9tLEkudG8sSS5taW4sSS5tYXgpKS5sZW5ndGgsUz1lLmdldEl0ZW1zRnJhZ21lbnQoQyl9fWNhdGNoKGUpe1I9ITAsRD1lfWZpbmFsbHl7dHJ5eyFGJiZxLnJldHVybiYmcS5yZXR1cm4oKX1maW5hbGx5e2lmKFIpdGhyb3cgRH19fWlmKG0udGV4dEZpbHRlck9wdGlvbnMpe3ZhciBIPSEwLFY9ITEsVz12b2lkIDA7dHJ5e2Zvcih2YXIgRyx6PW0udGV4dEZpbHRlck9wdGlvbnNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoSD0oRz16Lm5leHQoKSkuZG9uZSk7SD0hMCl7dmFyIFU9Ry52YWx1ZTt4PShDPWMuZGVmYXVsdC50ZXh0RmlsdGVyKEMsVS50ZXh0LFUucGF0aCxVLm1vZGUsVS5pZ25vcmVSZWdleCkpLmxlbmd0aCxTPWUuZ2V0SXRlbXNGcmFnbWVudChDKX19Y2F0Y2goZSl7Vj0hMCxXPWV9ZmluYWxseXt0cnl7IUgmJnoucmV0dXJuJiZ6LnJldHVybigpfWZpbmFsbHl7aWYoVil0aHJvdyBXfX19aWYobS5wYWdpbmF0aW9uT3B0aW9ucyl7dmFyIFk9bmV3IGEuZGVmYXVsdChtLnBhZ2luYXRpb25PcHRpb25zLmN1cnJlbnRQYWdlLG0ucGFnaW5hdGlvbk9wdGlvbnMuaXRlbXNQZXJQYWdlLEMubGVuZ3RoLG0ucGFnaW5hdGlvbk9wdGlvbnMucmFuZ2UpO2lmKGcubGVuZ3RoPjApe3ZhciBKPSEwLFg9ITEsWj12b2lkIDA7dHJ5e2Zvcih2YXIgJCxLPWdbU3ltYm9sLml0ZXJhdG9yXSgpOyEoSj0oJD1LLm5leHQoKSkuZG9uZSk7Sj0hMCl7dmFyIFE9JC52YWx1ZTtRLnNldFBhZ2luYXRpb25PcHRpb25zJiZRLnNldFBhZ2luYXRpb25PcHRpb25zKFkpfX1jYXRjaChlKXtYPSEwLFo9ZX1maW5hbGx5e3RyeXshSiYmSy5yZXR1cm4mJksucmV0dXJuKCl9ZmluYWxseXtpZihYKXRocm93IFp9fX12YXIgZWU9Qy5zbGljZShZLnN0YXJ0LFkuZW5kKTt4PWVlLmxlbmd0aCxTPWUuZ2V0SXRlbXNGcmFnbWVudChlZSl9ay5yb290LmFwcGVuZENoaWxkKFMpLGUuc2VuZFN0YXRlRXZlbnQobSx4LGcpfX1jYXRjaChlKXtPPSEwLF89ZX1maW5hbGx5e3RyeXshdyYmUC5yZXR1cm4mJlAucmV0dXJuKCl9ZmluYWxseXtpZihPKXRocm93IF99fWUuanVtcChnKX19fWNhdGNoKGUpe2Y9ITAsZD1lfWZpbmFsbHl7dHJ5eyF1JiZoLnJldHVybiYmaC5yZXR1cm4oKX1maW5hbGx5e2lmKGYpdGhyb3cgZH19dC5kZWVwTGlua2luZz9lLnVwZGF0ZURlZXBMaW5rKGUuZ2V0RGVlcExpbmsocixvKSx0Lmhhc2hTdGFydCk6dC5zdG9yYWdlJiZzLmRlZmF1bHQuc2V0KGUuZ2V0RGVlcExpbmsocixvKSx0LnN0b3JhZ2UsdC5zdG9yYWdlTmFtZSx0LmNvb2tpZXNFeHBpcmF0aW9uKX19fSx7a2V5OlwianVtcFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUmJiEoZS5sZW5ndGg8PTApKXt2YXIgdD0tMSxyPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPWVbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIGw9aS52YWx1ZS5nZXRKdW1wUGF0aCgpO2lmKGwpe2lmKFwidG9wXCI9PT1sKXt0PTA7YnJlYWt9dmFyIHU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihsKTtpZih1KXt2YXIgcz11LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2lmKHUud2lkdGh8fHUuaGVpZ2h0fHx1LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKXt2YXIgYz1kb2N1bWVudC5jbGllbnRUb3B8fGRvY3VtZW50LmJvZHkuY2xpZW50VG9wfHwwO3Q8MD90PXMudG9wK3dpbmRvdy5wYWdlWU9mZnNldC1jOnMudG9wK3dpbmRvdy5wYWdlWU9mZnNldC1jPHQmJih0PXMudG9wK3dpbmRvdy5wYWdlWU9mZnNldC1jKX19fX19Y2F0Y2goZSl7bj0hMCxvPWV9ZmluYWxseXt0cnl7IXImJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYobil0aHJvdyBvfX10Pj0wJiZ3aW5kb3cuc2Nyb2xsKDAsdCl9fX0se2tleTpcInNlbmRTdGF0ZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKHIpe3ZhciBuPW5ldyBDdXN0b21FdmVudChcImpwbGlzdC5zdGF0ZVwiKTtuLmpwbGlzdFN0YXRlPXtvcHRpb25zOmUsaXRlbXNOdW1iZXI6dH07dmFyIG89ITAsaT0hMSxhPXZvaWQgMDt0cnl7Zm9yKHZhciBsLHU9cltTeW1ib2wuaXRlcmF0b3JdKCk7IShvPShsPXUubmV4dCgpKS5kb25lKTtvPSEwKXt2YXIgcz1sLnZhbHVlLGM9ITAsZj0hMSxkPXZvaWQgMDt0cnl7Zm9yKHZhciBwLGg9cy5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShjPShwPWgubmV4dCgpKS5kb25lKTtjPSEwKXtwLnZhbHVlLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuKX19Y2F0Y2goZSl7Zj0hMCxkPWV9ZmluYWxseXt0cnl7IWMmJmgucmV0dXJuJiZoLnJldHVybigpfWZpbmFsbHl7aWYoZil0aHJvdyBkfX19fWNhdGNoKGUpe2k9ITAsYT1lfWZpbmFsbHl7dHJ5eyFvJiZ1LnJldHVybiYmdS5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgYX19fX19LHtrZXk6XCJjb2xsZWN0Q29udHJvbHNPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9e3NvcnRPcHRpb25zOltdLHBhZ2luYXRpb25PcHRpb25zOm51bGwsdGV4dEZpbHRlck9wdGlvbnM6W10scGF0aEZpbHRlck9wdGlvbnM6W10scmFuZ2VGaWx0ZXJPcHRpb25zOltdfTtpZighZSlyZXR1cm4gdDt2YXIgcj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGk9YS5uZXh0KCkpLmRvbmUpO3I9ITApe3ZhciBsPWkudmFsdWU7bC5nZXRTb3J0T3B0aW9ucyYmKHQuc29ydE9wdGlvbnM9dC5zb3J0T3B0aW9ucy5jb25jYXQobC5nZXRTb3J0T3B0aW9ucygpKSksbC5nZXRUZXh0RmlsdGVyT3B0aW9ucyYmKHQudGV4dEZpbHRlck9wdGlvbnM9dC50ZXh0RmlsdGVyT3B0aW9ucy5jb25jYXQobC5nZXRUZXh0RmlsdGVyT3B0aW9ucygpKSksbC5nZXRQYXRoRmlsdGVyT3B0aW9ucyYmKHQucGF0aEZpbHRlck9wdGlvbnM9dC5wYXRoRmlsdGVyT3B0aW9ucy5jb25jYXQobC5nZXRQYXRoRmlsdGVyT3B0aW9ucygpKSksbC5nZXRSYW5nZUZpbHRlck9wdGlvbnMmJih0LnJhbmdlRmlsdGVyT3B0aW9ucz10LnJhbmdlRmlsdGVyT3B0aW9ucy5jb25jYXQobC5nZXRSYW5nZUZpbHRlck9wdGlvbnMoKSkpLGwuZ2V0UGFnaW5hdGlvbk9wdGlvbnMmJih0LnBhZ2luYXRpb25PcHRpb25zPWwuZ2V0UGFnaW5hdGlvbk9wdGlvbnMoKSl9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319cmV0dXJuIHR9fSx7a2V5OlwiZ2V0SXRlbXNGcmFnbWVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxyPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPWVbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIGw9aS52YWx1ZTt0LmFwcGVuZENoaWxkKGwpfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXJldHVybiB0fX0se2tleTpcInVwZGF0ZURlZXBMaW5rXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiI1wiLHI9ZS5yZXBsYWNlKHQsXCJcIikudHJpbSgpO2lmKHI9XCJcIj09PXI/dDp0K3Isd2luZG93LmxvY2F0aW9uLmhhc2ghPT1yKXt2YXIgbj13aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKHQpLG89dm9pZCAwO289LTE9PT1uP3dpbmRvdy5sb2NhdGlvbi5ocmVmK3I6d2luZG93LmxvY2F0aW9uLmhyZWYuc3Vic3RyaW5nKDAsbikrcixcInJlcGxhY2VTdGF0ZVwiaW4gd2luZG93Lmhpc3Rvcnk/d2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFwiXCIsXCJcIixvKTp3aW5kb3cubG9jYXRpb24ucmVwbGFjZShvKX19fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPVtdLG49ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBhLGw9dC5rZXlzKClbU3ltYm9sLml0ZXJhdG9yXSgpOyEobj0oYT1sLm5leHQoKSkuZG9uZSk7bj0hMCl7dmFyIHU9YS52YWx1ZSxzPWUuZ2V0KHUpLGM9W10sZj0hMCxkPSExLHA9dm9pZCAwO3RyeXtmb3IodmFyIGgsdj1zW1N5bWJvbC5pdGVyYXRvcl0oKTshKGY9KGg9di5uZXh0KCkpLmRvbmUpO2Y9ITApe3ZhciB5PWgudmFsdWUuZ2V0RGVlcExpbmsoKTt5JiZjLnB1c2goeSl9fWNhdGNoKGUpe2Q9ITAscD1lfWZpbmFsbHl7dHJ5eyFmJiZ2LnJldHVybiYmdi5yZXR1cm4oKX1maW5hbGx5e2lmKGQpdGhyb3cgcH19Yy5sZW5ndGg+MCYmKHIucHVzaChcImdyb3VwPVwiK3UpLHI9ci5jb25jYXQoYykpfX1jYXRjaChlKXtvPSEwLGk9ZX1maW5hbGx5e3RyeXshbiYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiByLmpvaW4oXCImXCIpfX0se2tleTpcImZpbmRHcm91cHNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1uZXcgTWFwO2lmKCFlKXJldHVybiB0O3ZhciByPVtdLmNvbmNhdChkKGUpKSxuPSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgYSxsPXJbU3ltYm9sLml0ZXJhdG9yXSgpOyEobj0oYT1sLm5leHQoKSkuZG9uZSk7bj0hMCl7dmFyIHU9YS52YWx1ZSxzPXUuZ2V0QXR0cmlidXRlKFwiZGF0YS1qcGxpc3QtZ3JvdXBcIiksYz1bXTt0LmhhcyhzKSYmKGM9dC5nZXQocykpLGMucHVzaCh7cm9vdDp1LGl0ZW1zOltdLmNvbmNhdChkKHUucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWpwbGlzdC1pdGVtXVwiKSkpLGZyYWdtZW50OmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKX0pLHQuc2V0KHMsYyl9fWNhdGNoKGUpe289ITAsaT1lfWZpbmFsbHl7dHJ5eyFuJiZsLnJldHVybiYmbC5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19cmV0dXJuIHR9fSx7a2V5OlwiZmluZENvbnRyb2xzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuW107dmFyIHQ9W10scj1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1qcGxpc3QtY29udHJvbF1cIik7aWYocil7dmFyIG49ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBhLHU9cltTeW1ib2wuaXRlcmF0b3JdKCk7IShuPShhPXUubmV4dCgpKS5kb25lKTtuPSEwKXt2YXIgcz1hLnZhbHVlO2lmKHMuZ2V0QXR0cmlidXRlKFwiZGF0YS1qcGxpc3QtY29udHJvbFwiKSl7cy5pbml0aWFsSFRNTD1zLm91dGVySFRNTDt2YXIgYz1uZXcgbC5kZWZhdWx0KHMpO3QucHVzaChjKX19fWNhdGNoKGUpe289ITAsaT1lfWZpbmFsbHl7dHJ5eyFuJiZ1LnJldHVybiYmdS5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19fXJldHVybiB0fX0se2tleTpcImZpbmRDb250cm9sR3JvdXBzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IE1hcDtpZihlKXt2YXIgcj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGk9YS5uZXh0KCkpLmRvbmUpO3I9ITApe3ZhciBsPWkudmFsdWUsdT1bXTt0LmhhcyhsLmdyb3VwKSYmKHU9dC5nZXQobC5ncm91cCkpLHUucHVzaChsKSx0LnNldChsLmdyb3VwLHUpfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fX1yZXR1cm4gdH19LHtrZXk6XCJmaW5kU2FtZU5hbWVDb250cm9sc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IE1hcDtpZih0KXt2YXIgbj1udWxsO2lmKGUuZGVlcExpbmtpbmcpbj11LmRlZmF1bHQuZ2V0VXJsUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5oYXNoLGUuaGFzaFN0YXJ0KTtlbHNlIGlmKGUuc3RvcmFnZSl7dmFyIG89cy5kZWZhdWx0LmdldChlLnN0b3JhZ2UsZS5zdG9yYWdlTmFtZSk7bj11LmRlZmF1bHQuZ2V0VXJsUGFyYW1zKG8sXCJcIil9dmFyIGk9ITAsYT0hMSxsPXZvaWQgMDt0cnl7Zm9yKHZhciBjLGY9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShpPShjPWYubmV4dCgpKS5kb25lKTtpPSEwKXt2YXIgZD1jLnZhbHVlO2lmKGQudHlwZSYmd2luZG93LmpwbGlzdC5jb250cm9sVHlwZXMuaGFzKGQudHlwZSkpe3ZhciBwPXdpbmRvdy5qcGxpc3QuY29udHJvbFR5cGVzLmdldChkLnR5cGUpO2lmKHApe3ZhciBoPW51bGw7KGg9ci5oYXMoZC5uYW1lKT9yLmdldChkLm5hbWUpOm5ldyBwKGQuZ3JvdXAsZC5uYW1lLFtdLG4pKS5hZGRDb250cm9sKGQpLHIuc2V0KGQubmFtZSxoKX19fX1jYXRjaChlKXthPSEwLGw9ZX1maW5hbGx5e3RyeXshaSYmZi5yZXR1cm4mJmYucmV0dXJuKCl9ZmluYWxseXtpZihhKXRocm93IGx9fX1yZXR1cm4gcn19LHtrZXk6XCJzcGxpdEJ5R3JvdXBBbmROYW1lXCIsdmFsdWU6ZnVuY3Rpb24odCxyKXt2YXIgbz1uZXcgTWFwO2lmKCFyKXJldHVybiBvO3ZhciBpPWUuZmluZENvbnRyb2xzKHIpLGE9ZS5maW5kQ29udHJvbEdyb3VwcyhpKSxsPSEwLHU9ITEscz12b2lkIDA7dHJ5e2Zvcih2YXIgYyxmPWFbU3ltYm9sLml0ZXJhdG9yXSgpOyEobD0oYz1mLm5leHQoKSkuZG9uZSk7bD0hMCl7dmFyIGQ9bihjLnZhbHVlLDIpLHA9ZFswXSxoPWRbMV0sdj1lLmZpbmRTYW1lTmFtZUNvbnRyb2xzKHQsaCkseT1bXSxiPSEwLGc9ITEsbT12b2lkIDA7dHJ5e2Zvcih2YXIgdyxPPXYudmFsdWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpOyEoYj0odz1PLm5leHQoKSkuZG9uZSk7Yj0hMCl7dmFyIF89dy52YWx1ZTt5LnB1c2goXyl9fWNhdGNoKGUpe2c9ITAsbT1lfWZpbmFsbHl7dHJ5eyFiJiZPLnJldHVybiYmTy5yZXR1cm4oKX1maW5hbGx5e2lmKGcpdGhyb3cgbX19by5zZXQocCx5KX19Y2F0Y2goZSl7dT0hMCxzPWV9ZmluYWxseXt0cnl7IWwmJmYucmV0dXJuJiZmLnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBzfX1yZXR1cm4gb319XSksZX0oKTt0LmRlZmF1bHQ9cH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKX1yZXR1cm4gbihlLG51bGwsW3trZXk6XCJzb3J0XCIsdmFsdWU6ZnVuY3Rpb24odCxyKXtyZXR1cm4hcnx8ci5sZW5ndGg8PTA/KHQuc29ydChmdW5jdGlvbih0LHIpe3JldHVybiBlLnNvcnRCeUluZGV4KHQscil9KSx0KToodC5zb3J0KGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUuc29ydEhlbHBlcih0LG4sciwwKX0pLHQpfX0se2tleTpcInNvcnRIZWxwZXJcIix2YWx1ZTpmdW5jdGlvbih0LHIsbixvKXtpZighbnx8bi5sZW5ndGg8PTB8fG8+PW4ubGVuZ3RoKXJldHVybiAwO3ZhciBpPTAsYT1uW29dO2lmKFwiZGVmYXVsdFwiIT09YS5wYXRoKXN3aXRjaChhLmRhdGFUeXBlKXtjYXNlXCJudW1iZXJcIjppPWUuc29ydE51bWJlcnModCxyLGEucGF0aCxhLm9yZGVyKTticmVhaztjYXNlXCJkYXRldGltZVwiOmk9ZS5zb3J0RGF0ZVRpbWUodCxyLGEucGF0aCxhLm9yZGVyLGEuZGF0ZVRpbWVGb3JtYXQpO2JyZWFrO2RlZmF1bHQ6aT1lLnNvcnRUZXh0KHQscixhLnBhdGgsYS5vcmRlcixhLmlnbm9yZVJlZ2V4KX1lbHNlIGk9ZS5zb3J0QnlJbmRleCh0LHIpO3JldHVybiAwPT09aSYmbysxPG4ubGVuZ3RoJiYoaT1lLnNvcnRIZWxwZXIodCxyLG4sbysxKSksaX19LHtrZXk6XCJzb3J0VGV4dFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiXCIsbj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106XCJhc2NcIixvPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTpcIlwiO2lmKCFlfHwhdClyZXR1cm4gMDt2YXIgaT1yP2UucXVlcnlTZWxlY3RvcihyKTplLGE9cj90LnF1ZXJ5U2VsZWN0b3Iocik6dDtpZighaXx8IWEpcmV0dXJuIDA7dmFyIGw9aS50ZXh0Q29udGVudC50cmltKCkudG9Mb3dlckNhc2UoKSx1PWEudGV4dENvbnRlbnQudHJpbSgpLnRvTG93ZXJDYXNlKCk7aWYobyl7dmFyIHM9bmV3IFJlZ0V4cChvLFwiaWdcIik7bD1sLnJlcGxhY2UocyxcIlwiKS50cmltKCksdT11LnJlcGxhY2UocyxcIlwiKS50cmltKCl9cmV0dXJuIGw9PT11PzA6KG58fChuPVwiYXNjXCIpLFwiXCIubG9jYWxlQ29tcGFyZT9cImFzY1wiPT09bj9sLmxvY2FsZUNvbXBhcmUodSk6dS5sb2NhbGVDb21wYXJlKGwpOlwiYXNjXCI9PT1uP2w+dT8xOi0xOmw8dT8xOi0xKX19LHtrZXk6XCJzb3J0TnVtYmVyc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiXCIsbj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106XCJhc2NcIjtpZighZXx8IXQpcmV0dXJuIDA7dmFyIG89cj9lLnF1ZXJ5U2VsZWN0b3Iocik6ZSxpPXI/dC5xdWVyeVNlbGVjdG9yKHIpOnQ7aWYoIW98fCFpKXJldHVybiAwO3ZhciBhPW8udGV4dENvbnRlbnQudHJpbSgpLnRvTG93ZXJDYXNlKCksbD1pLnRleHRDb250ZW50LnRyaW0oKS50b0xvd2VyQ2FzZSgpO3JldHVybiBhPXBhcnNlRmxvYXQoYS5yZXBsYWNlKC9bXi0wLTkuXSsvZyxcIlwiKSksbD1wYXJzZUZsb2F0KGwucmVwbGFjZSgvW14tMC05Ll0rL2csXCJcIikpLGlzTmFOKGEpfHxpc05hTihsKT9pc05hTihhKSYmaXNOYU4obCk/MDppc05hTihhKT8xOi0xOmE9PT1sPzA6KG58fChuPVwiYXNjXCIpLFwiYXNjXCI9PT1uP2EtbDpsLWEpfX0se2tleTpcInNvcnRCeUluZGV4XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZighZXx8IXQpcmV0dXJuIDA7dmFyIHI9TnVtYmVyKGUuanBsaXN0SW5kZXgpLG49TnVtYmVyKHQuanBsaXN0SW5kZXgpO3JldHVybiBpc05hTihyKXx8aXNOYU4obik/MDpyLW59fSx7a2V5Olwic29ydERhdGVUaW1lXCIsdmFsdWU6ZnVuY3Rpb24odCxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCJcIixvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpcImFzY1wiLGk9YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOlwiXCI7aWYoIXR8fCFyKXJldHVybiAwO3ZhciBhPW4/dC5xdWVyeVNlbGVjdG9yKG4pOnQsbD1uP3IucXVlcnlTZWxlY3RvcihuKTpyO2lmKCFhfHwhbClyZXR1cm4gMDt2YXIgdT1hLnRleHRDb250ZW50LnRyaW0oKS50b0xvd2VyQ2FzZSgpLHM9bC50ZXh0Q29udGVudC50cmltKCkudG9Mb3dlckNhc2UoKSxjPXZvaWQgMCxmPXZvaWQgMDtyZXR1cm4oaT1pLnRyaW0oKSk/KGM9ZS5nZXREYXRlRnJvbVN0cmluZyh1LGkpLGY9ZS5nZXREYXRlRnJvbVN0cmluZyhzLGkpKTooYz1uZXcgRGF0ZShEYXRlLnBhcnNlKHUpKSxmPW5ldyBEYXRlKERhdGUucGFyc2UocykpKSxjLmdldFRpbWUoKT09PWYuZ2V0VGltZSgpPzA6KG98fChvPVwiYXNjXCIpLFwiYXNjXCI9PT1vP2MuZ2V0VGltZSgpPmYuZ2V0VGltZSgpPzE6LTE6Yy5nZXRUaW1lKCk8Zi5nZXRUaW1lKCk/MTotMSl9fSx7a2V5OlwiZ2V0RGF0ZUZyb21TdHJpbmdcIix2YWx1ZTpmdW5jdGlvbih0LHIpe3I9KHI9KHI9KHI9KHI9ci5yZXBsYWNlKC9cXC4vZyxcIlxcXFwuXCIpKS5yZXBsYWNlKC9cXCgvZyxcIlxcXFwoXCIpKS5yZXBsYWNlKC9cXCkvZyxcIlxcXFwpXCIpKS5yZXBsYWNlKC9cXFsvZyxcIlxcXFxbXCIpKS5yZXBsYWNlKC9cXF0vZyxcIlxcXFxdXCIpO3ZhciBuPWUuZ2V0RGF0ZVdpbGRjYXJkVmFsdWUocixcInt5ZWFyfVwiLHQpO249TnVtYmVyKG4pfHwxOTAwO3ZhciBvPWUuZ2V0RGF0ZVdpbGRjYXJkVmFsdWUocixcIntkYXl9XCIsdCk7bz1OdW1iZXIobyl8fDE7dmFyIGk9ZS5nZXREYXRlV2lsZGNhcmRWYWx1ZShyLFwie21vbnRofVwiLHQpOy0xPT09KGk9ZS5nZXRNb250aEJ5V2lsZGNhcmQoaSkpJiYoaT0wKTt2YXIgYT1lLmdldERhdGVXaWxkY2FyZFZhbHVlKHIsXCJ7aG91cn1cIix0KTthPU51bWJlcihhKXx8MDt2YXIgbD1lLmdldERhdGVXaWxkY2FyZFZhbHVlKHIsXCJ7bWlufVwiLHQpO2w9TnVtYmVyKGwpfHwwO3ZhciB1PWUuZ2V0RGF0ZVdpbGRjYXJkVmFsdWUocixcIntzZWN9XCIsdCk7cmV0dXJuIHU9TnVtYmVyKHUpfHwwLG5ldyBEYXRlKG4saSxvLGEsbCx1KX19LHtrZXk6XCJnZXREYXRlV2lsZGNhcmRWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1udWxsLG89ZS5yZXBsYWNlKHQsXCIoLiopXCIpLnJlcGxhY2UoL3t5ZWFyfXx7bW9udGh9fHtkYXl9fHtob3VyfXx7bWlufXx7c2VjfS9nLFwiLipcIiksaT1uZXcgUmVnRXhwKG8sXCJnXCIpLmV4ZWMocik7cmV0dXJuIGkmJmkubGVuZ3RoPjEmJihuPWlbMV0pLG59fSx7a2V5OlwiZ2V0TW9udGhCeVdpbGRjYXJkXCIsdmFsdWU6ZnVuY3Rpb24odCl7dD10P3QudHJpbSgpLnRvTG93ZXJDYXNlKCk6XCJcIjt2YXIgcj1OdW1iZXIodCk7cmV0dXJuIGlzTmFOKHIpP2UubW9udGhzLmZpbmRJbmRleChmdW5jdGlvbihlKXtyZXR1cm4gZS5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKT09PXR9KX0pOnItMTwwPy0xOnItMX19LHtrZXk6XCJtb250aHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bW1wiamFudWFyeVwiLFwiamFuXCIsXCJqYW4uXCJdLFtcImZlYnJ1YXJ5XCIsXCJmZWJcIixcImZlYi5cIl0sW1wibWFyY2hcIixcIm1hclwiLFwibWFyLlwiXSxbXCJhcHJpbFwiLFwiYXByXCIsXCJhcHIuXCJdLFtcIm1heVwiXSxbXCJqdW5lXCIsXCJqdW4uXCJdLFtcImp1bHlcIixcImp1bFwiLFwianVsLlwiXSxbXCJhdWd1c3RcIixcImF1Z1wiLFwiYXVnLlwiXSxbXCJzZXB0ZW1iZXJcIixcInNlcFwiLFwic2VwLlwiXSxbXCJvY3RvYmVyXCIsXCJvY3RcIixcIm9jdC5cIl0sW1wibm92ZW1iZXJcIixcIm5vdlwiLFwibm92LlwiXSxbXCJkZWNlbWJlclwiLFwiZGVjXCIsXCJkZWMuXCJdXX19XSksZX0oKTt0LmRlZmF1bHQ9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3QuZGVmYXVsdD1mdW5jdGlvbiBlKHQscixuLG8peyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5pdGVtc051bWJlcj1OdW1iZXIobil8fDAsdGhpcy5pdGVtc1BlclBhZ2U9TnVtYmVyLmlzSW50ZWdlcihyKT9OdW1iZXIocik6dGhpcy5pdGVtc051bWJlciwwPT09dGhpcy5pdGVtc1BlclBhZ2UmJih0aGlzLml0ZW1zUGVyUGFnZT1uKSx0aGlzLnBhZ2VzTnVtYmVyPTA9PT10aGlzLml0ZW1zUGVyUGFnZT8wOk1hdGguY2VpbCh0aGlzLml0ZW1zTnVtYmVyL3RoaXMuaXRlbXNQZXJQYWdlKSx0aGlzLmN1cnJlbnRQYWdlPU51bWJlcih0KXx8MCx0aGlzLmN1cnJlbnRQYWdlPnRoaXMucGFnZXNOdW1iZXItMSYmKHRoaXMuY3VycmVudFBhZ2U9MCksdGhpcy5zdGFydD10aGlzLmN1cnJlbnRQYWdlKnRoaXMuaXRlbXNQZXJQYWdlLHRoaXMuZW5kPXRoaXMuc3RhcnQrdGhpcy5pdGVtc1BlclBhZ2UsdGhpcy5lbmQ+dGhpcy5pdGVtc051bWJlciYmKHRoaXMuZW5kPXRoaXMuaXRlbXNOdW1iZXIpLHRoaXMucHJldlBhZ2U9dGhpcy5jdXJyZW50UGFnZTw9MD8wOnRoaXMuY3VycmVudFBhZ2UtMSx0aGlzLm5leHRQYWdlPTA9PT10aGlzLnBhZ2VzTnVtYmVyPzA6dGhpcy5jdXJyZW50UGFnZT49dGhpcy5wYWdlc051bWJlci0xP3RoaXMucGFnZXNOdW1iZXItMTp0aGlzLmN1cnJlbnRQYWdlKzEsdGhpcy5yYW5nZT1OdW1iZXIobyl8fDEwO3ZhciBpPU1hdGguY2VpbCgodGhpcy5yYW5nZS0xKS8yKTt0aGlzLnJhbmdlU3RhcnQ9dGhpcy5jdXJyZW50UGFnZS1pLHRoaXMucmFuZ2VFbmQ9TWF0aC5taW4odGhpcy5yYW5nZVN0YXJ0K3RoaXMucmFuZ2UtMSx0aGlzLnBhZ2VzTnVtYmVyLTEpLHRoaXMucmFuZ2VTdGFydDw9MCYmKHRoaXMucmFuZ2VTdGFydD0wLHRoaXMucmFuZ2VFbmQ9TWF0aC5taW4odGhpcy5yYW5nZS0xLHRoaXMucGFnZXNOdW1iZXItMSkpLHRoaXMucmFuZ2VFbmQ+PXRoaXMucGFnZXNOdW1iZXItMSYmKHRoaXMucmFuZ2VTdGFydD1NYXRoLm1heCh0aGlzLnBhZ2VzTnVtYmVyLXRoaXMucmFuZ2UsMCksdGhpcy5yYW5nZUVuZD10aGlzLnBhZ2VzTnVtYmVyLTEpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKX1yZXR1cm4gbihlLG51bGwsW3trZXk6XCJnZXRQYXJhbVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBudWxsO3ZhciB0PWUuc3BsaXQoXCI9XCIpO3JldHVybiB0Lmxlbmd0aDwyP251bGw6e2tleTp0WzBdLnRyaW0oKS50b0xvd2VyQ2FzZSgpLHZhbHVlOnRbMV0udHJpbSgpLnRvTG93ZXJDYXNlKCl9fX0se2tleTpcImdldFVybFBhcmFtc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIiNcIixuPW5ldyBNYXA7aWYoIXQpcmV0dXJuIG47dmFyIG89d2luZG93LmRlY29kZVVSSUNvbXBvbmVudCh0LnJlcGxhY2UocixcIlwiKSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7aWYoIW8pcmV0dXJuIG47dmFyIGk9by5zcGxpdChcIiZcIiksYT1cIlwiLGw9ITAsdT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBjLGY9aVtTeW1ib2wuaXRlcmF0b3JdKCk7IShsPShjPWYubmV4dCgpKS5kb25lKTtsPSEwKXt2YXIgZD1jLnZhbHVlLHA9ZS5nZXRQYXJhbShkKTtpZihwKWlmKFwiZ3JvdXBcIj09PXAua2V5KWE9cC52YWx1ZSxuLmhhcyhwLnZhbHVlKXx8bi5zZXQocC52YWx1ZSxbXSk7ZWxzZXt2YXIgaD1uLmdldChhKTtoJiZoLnB1c2gocCksbi5zZXQoYSxoKX19fWNhdGNoKGUpe3U9ITAscz1lfWZpbmFsbHl7dHJ5eyFsJiZmLnJldHVybiYmZi5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgc319cmV0dXJuIG59fV0pLGV9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSl9cmV0dXJuIG4oZSxudWxsLFt7a2V5OlwiaXNTdXBwb3J0ZWRcIix2YWx1ZTpmdW5jdGlvbihlKXtpZihcImNvb2tpZXNcIj09PWUpcmV0dXJuITA7dHJ5e3JldHVybiBlIGluIHdpbmRvdyYmbnVsbCE9PXdpbmRvd1tlXX1jYXRjaChlKXtyZXR1cm4hMX19fSx7a2V5Olwic2V0XCIsdmFsdWU6ZnVuY3Rpb24odCxyLG4pe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTotMTtpZihcImNvb2tpZXNcIj09PXIpe3ZhciBpPWVuY29kZVVSSUNvbXBvbmVudCh0KSxhPW5ldyBEYXRlOy0xPT09KG89TnVtYmVyKG8pfHwtMSk/ZG9jdW1lbnQuY29va2llPW5hbWUrXCI9XCIraStcIjtwYXRoPS87XCI6KGEuc2V0TWludXRlcyhhLmdldE1pbnV0ZXMoKStvKSxkb2N1bWVudC5jb29raWU9bmFtZStcIj1cIitpK1wiO3BhdGg9LzsgZXhwaXJlcz1cIithLnRvVVRDU3RyaW5nKCkpfWVsc2UgZS5pc1N1cHBvcnRlZChyKSYmKHdpbmRvd1tyXVtuXT10KX19LHtrZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbih0LHIpe3ZhciBuPVwiXCI7aWYoXCJjb29raWVzXCI9PT10KWZvcih2YXIgbz1kb2N1bWVudC5jb29raWUuc3BsaXQoXCI7XCIpLGk9MDtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9b1tpXS5zdWJzdHIoMCxvW2ldLmluZGV4T2YoXCI9XCIpKSxsPW9baV0uc3Vic3RyKG9baV0uaW5kZXhPZihcIj1cIikrMSk7aWYoKGE9YS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpKT09PXIpe249ZGVjb2RlVVJJQ29tcG9uZW50KGwpO2JyZWFrfX1lbHNlIGUuaXNTdXBwb3J0ZWQodCkmJihuPXdpbmRvd1t0XVtyXXx8XCJcIik7cmV0dXJuIG59fV0pLGV9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSl9cmV0dXJuIG4oZSxudWxsLFt7a2V5OlwidGV4dEZpbHRlclwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiXCIsbj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106XCJjb250YWluc1wiLG89YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOlwiXCIsaT1bXTtpZighZSlyZXR1cm5bXTtpZihcImRlZmF1bHRcIj09PXIpcmV0dXJuIGU7dmFyIGE9dC5yZXBsYWNlKG5ldyBSZWdFeHAobyxcImlnXCIpLFwiXCIpLnRvTG93ZXJDYXNlKCkudHJpbSgpLGw9ITAsdT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBjLGY9ZVtTeW1ib2wuaXRlcmF0b3JdKCk7IShsPShjPWYubmV4dCgpKS5kb25lKTtsPSEwKXt2YXIgZD1jLnZhbHVlLHA9cj9kLnF1ZXJ5U2VsZWN0b3JBbGwocik6W2RdO2lmKHApe3ZhciBoPSExLHY9ITAseT0hMSxiPXZvaWQgMDt0cnl7Zm9yKHZhciBnLG09cFtTeW1ib2wuaXRlcmF0b3JdKCk7ISh2PShnPW0ubmV4dCgpKS5kb25lKTt2PSEwKXt2YXIgdz1nLnZhbHVlLnRleHRDb250ZW50LnJlcGxhY2UobmV3IFJlZ0V4cChvLFwiaWdcIiksXCJcIikudG9Mb3dlckNhc2UoKS50cmltKCk7c3dpdGNoKG4pe2Nhc2VcInN0YXJ0c1dpdGhcIjp3LnN0YXJ0c1dpdGgoYSkmJihoPSEwKTticmVhaztjYXNlXCJlbmRzV2l0aFwiOncuZW5kc1dpdGgoYSkmJihoPSEwKTticmVhaztjYXNlXCJlcXVhbFwiOnc9PT1hJiYoaD0hMCk7YnJlYWs7ZGVmYXVsdDotMSE9PXcuaW5kZXhPZihhKSYmKGg9ITApfWlmKGgpYnJlYWt9fWNhdGNoKGUpe3k9ITAsYj1lfWZpbmFsbHl7dHJ5eyF2JiZtLnJldHVybiYmbS5yZXR1cm4oKX1maW5hbGx5e2lmKHkpdGhyb3cgYn19aCYmaS5wdXNoKGQpfX19Y2F0Y2goZSl7dT0hMCxzPWV9ZmluYWxseXt0cnl7IWwmJmYucmV0dXJuJiZmLnJldHVybigpfWZpbmFsbHl7aWYodSl0aHJvdyBzfX1yZXR1cm4gaX19LHtrZXk6XCJwYXRoRmlsdGVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiXCIscj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG49W107aWYoIWUpcmV0dXJuW107aWYoXCJkZWZhdWx0XCI9PT10fHwhdClyZXR1cm4gZTt2YXIgbz0hMCxpPSExLGE9dm9pZCAwO3RyeXtmb3IodmFyIGwsdT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKG89KGw9dS5uZXh0KCkpLmRvbmUpO289ITApe3ZhciBzPWwudmFsdWUsYz1zLnF1ZXJ5U2VsZWN0b3IodCk7KGMmJiFyfHwhYyYmcikmJm4ucHVzaChzKX19Y2F0Y2goZSl7aT0hMCxhPWV9ZmluYWxseXt0cnl7IW8mJnUucmV0dXJuJiZ1LnJldHVybigpfWZpbmFsbHl7aWYoaSl0aHJvdyBhfX1yZXR1cm4gbn19LHtrZXk6XCJpc051bWVyaWNcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4haXNOYU4ocGFyc2VGbG9hdChlKSkmJmlzRmluaXRlKGUpfX0se2tleTpcInJhbmdlRmlsdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiXCIsbj1hcmd1bWVudHNbMl0sbz1hcmd1bWVudHNbM10saT1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06bixhPWFyZ3VtZW50cy5sZW5ndGg+NSYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTpvLGw9W107aWYoIXQpcmV0dXJuW107aWYoXCJkZWZhdWx0XCI9PT1yKXJldHVybiB0O249TWF0aC5tYXgobixpKSxvPU1hdGgubWluKG8sYSk7dmFyIHU9ITAscz0hMSxjPXZvaWQgMDt0cnl7Zm9yKHZhciBmLGQ9dFtTeW1ib2wuaXRlcmF0b3JdKCk7ISh1PShmPWQubmV4dCgpKS5kb25lKTt1PSEwKXt2YXIgcD1mLnZhbHVlLGg9cj9wLnF1ZXJ5U2VsZWN0b3JBbGwocik6W3BdO2lmKGgpe3ZhciB2PVtdLHk9ITAsYj0hMSxnPXZvaWQgMDt0cnl7Zm9yKHZhciBtLHc9aFtTeW1ib2wuaXRlcmF0b3JdKCk7ISh5PShtPXcubmV4dCgpKS5kb25lKTt5PSEwKXt2YXIgTz1tLnZhbHVlLF89TnVtYmVyKE8udGV4dENvbnRlbnQudHJpbSgpLnJlcGxhY2UoL1teLTAtOS5dKy9nLFwiXCIpKTtpc05hTihfKXx8di5wdXNoKF8pfX1jYXRjaChlKXtiPSEwLGc9ZX1maW5hbGx5e3RyeXsheSYmdy5yZXR1cm4mJncucmV0dXJuKCl9ZmluYWxseXtpZihiKXRocm93IGd9fWlmKHYubGVuZ3RoPjApe3ZhciBqPU1hdGgubWF4LmFwcGx5KE1hdGgsdiksUD1NYXRoLm1pbi5hcHBseShNYXRoLHYpLGs9ITA7ZS5pc051bWVyaWMobikmJm4+UCYmKGs9ITEpLGUuaXNOdW1lcmljKG8pJiZqPm8mJihrPSExKSxrJiZsLnB1c2gocCl9fX19Y2F0Y2goZSl7cz0hMCxjPWV9ZmluYWxseXt0cnl7IXUmJmQucmV0dXJuJiZkLnJldHVybigpfWZpbmFsbHl7aWYocyl0aHJvdyBjfX1yZXR1cm4gbH19XSksZX0oKTt0LmRlZmF1bHQ9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0ocigyKSk7dmFyIG89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxuLmRlZmF1bHQpLHR9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKDIpKTt2YXIgaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOltdLG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KTt2YXIgaT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsKHRoaXMsZSxyLG4sbykpO3JldHVybiBpLmdyb3VwPWUsaS5uYW1lPXIsaS5jaGVja2JveGVzPVtdLGkucmFkaW9zPVtdLGl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsby5kZWZhdWx0KSxuKHQsW3trZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcyxuPWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGkscixuKX1pZihcInZhbHVlXCJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBhPW8uZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChuKTp2b2lkIDB9KHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSk7aWYobi5zZWxlY3RlZD1cInRydWVcIj09PW4uZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdGVkXCIpLG4ubW9kZT1uLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlXCIpfHxcInJhZGlvXCIsbi5pZCl7dmFyIG89dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleT09PW4uaWR9KTtvJiYobi5zZWxlY3RlZD1cIjFcIj09PW8udmFsdWUpfVwicmFkaW9cIj09PW4ubW9kZSYmKHRoaXMucmFkaW9zLnB1c2gobiksdGhpcy5oYW5kbGVSYWRpb3MoKSksXCJjaGVja2JveFwiPT09bi5tb2RlJiYodGhpcy5jaGVja2JveGVzLnB1c2gobiksdGhpcy5oYW5kbGVDaGVja2JveGVzKCkpLG4uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKXtpZihlLnByZXZlbnREZWZhdWx0KCksXCJjaGVja2JveFwiPT09bi5tb2RlJiYobi5zZWxlY3RlZD0hbi5zZWxlY3RlZCxyLmNoZWNrYm94ZXMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmlzRXF1YWxUbyhuKSYmKGUuc2VsZWN0ZWQ9bi5zZWxlY3RlZCl9KSxyLmhhbmRsZUNoZWNrYm94ZXMoKSksXCJyYWRpb1wiPT09bi5tb2RlKXt2YXIgdD0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEsbD1yLnJhZGlvc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShhPWwubmV4dCgpKS5kb25lKTt0PSEwKXthLnZhbHVlLnNlbGVjdGVkPSExfX1jYXRjaChlKXtvPSEwLGk9ZX1maW5hbGx5e3RyeXshdCYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fW4uc2VsZWN0ZWQ9ITAsci5oYW5kbGVSYWRpb3MoKX13aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlZnJlc2goci5ncm91cCl9KX19LHtrZXk6XCJoYW5kbGVDaGVja2JveGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0hMCx0PSExLHI9dm9pZCAwO3RyeXtmb3IodmFyIG4sbz10aGlzLmNoZWNrYm94ZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZT0obj1vLm5leHQoKSkuZG9uZSk7ZT0hMCl7dmFyIGk9bi52YWx1ZTtpLnNlbGVjdGVkP2kuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNlbGVjdGVkXCIpOmkuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwianBsaXN0LXNlbGVjdGVkXCIpfX1jYXRjaChlKXt0PSEwLHI9ZX1maW5hbGx5e3RyeXshZSYmby5yZXR1cm4mJm8ucmV0dXJuKCl9ZmluYWxseXtpZih0KXRocm93IHJ9fX19LHtrZXk6XCJnZXRMYXN0U2VsZWN0ZWRSYWRpb1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9bnVsbCx0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMucmFkaW9zW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7YS5zZWxlY3RlZCYmKGU9YSl9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19cmV0dXJuIGV9fSx7a2V5OlwiaGFuZGxlUmFkaW9zXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLnJhZGlvcy5sZW5ndGg+MCl7dmFyIGU9dGhpcy5nZXRMYXN0U2VsZWN0ZWRSYWRpbygpLHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9dGhpcy5yYWRpb3NbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTthLnNlbGVjdGVkPSExLGEuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwianBsaXN0LXNlbGVjdGVkXCIpfX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fWUmJnRoaXMucmFkaW9zLmZvckVhY2goZnVuY3Rpb24odCl7dC5pc0VxdWFsVG8oZSkmJih0LnNlbGVjdGVkPSEwLHQuZWxlbWVudC5jaGVja2VkPSEwLHQuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNlbGVjdGVkXCIpKX0pfX19LHtrZXk6XCJnZXRTb3J0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9W10sdD0hMSxyPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXRoaXMuY2hlY2tib3hlc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShpPWEubmV4dCgpKS5kb25lKTtyPSEwKXt2YXIgbD1pLnZhbHVlO2wuc2VsZWN0ZWQ/ZT1lLmNvbmNhdChsLmdldFNvcnRPcHRpb25zKCkpOnQ9ITB9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319dCYmKGU9ZS5jb25jYXQoW3twYXRoOlwiZGVmYXVsdFwifV0pKTt2YXIgdT10aGlzLmdldExhc3RTZWxlY3RlZFJhZGlvKCk7cmV0dXJuIHUmJihlPWUuY29uY2F0KHUuZ2V0U29ydE9wdGlvbnMoKSkpLGV9fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY2hlY2tib3hlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQmJmUuc2VsZWN0ZWQ/ZS5pZCtcIj0xXCI6XCJcIn0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cIlwiIT09ZX0pLHQ9dGhpcy5yYWRpb3MubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkJiZlLnNlbGVjdGVkP2UuaWQrXCI9MVwiOlwiXCJ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KSxyPWUuY29uY2F0KHQpO3JldHVybiBBcnJheS5mcm9tKG5ldyBTZXQocikpLmpvaW4oXCImXCIpfX1dKSx0fSgpO3QuZGVmYXVsdD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0ocigyKSk7dmFyIGk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUscixuLG8pKTtyZXR1cm4gaS5ncm91cD1lLGkubmFtZT1yLGkucmFkaW9zPVtdLGl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsby5kZWZhdWx0KSxuKHQsW3trZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcyxuPWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGkscixuKX1pZihcInZhbHVlXCJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBhPW8uZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChuKTp2b2lkIDB9KHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSk7aWYobi5zZWxlY3RlZD1uLmVsZW1lbnQuY2hlY2tlZCxuLmlkKXt2YXIgbz10aGlzLmRlZXBMaW5rUGFyYW1zLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIGUua2V5PT09bi5pZH0pO28mJihuLnNlbGVjdGVkPVwiMVwiPT09by52YWx1ZSl9dGhpcy5yYWRpb3MucHVzaChuKSx0aGlzLmhhbmRsZVJhZGlvcygpLG4uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgYSxsPXIucmFkaW9zW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KGE9bC5uZXh0KCkpLmRvbmUpO3Q9ITApe2EudmFsdWUuc2VsZWN0ZWQ9ITF9fWNhdGNoKGUpe289ITAsaT1lfWZpbmFsbHl7dHJ5eyF0JiZsLnJldHVybiYmbC5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19bi5zZWxlY3RlZD0hMCxyLmhhbmRsZVJhZGlvcygpLHdpbmRvdy5qcGxpc3QmJndpbmRvdy5qcGxpc3QucmVmcmVzaChyLmdyb3VwKX0pfX0se2tleTpcImdldExhc3RTZWxlY3RlZFJhZGlvXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1udWxsLHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9dGhpcy5yYWRpb3NbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTthLnNlbGVjdGVkJiYoZT1hKX19Y2F0Y2goZSl7cj0hMCxuPWV9ZmluYWxseXt0cnl7IXQmJmkucmV0dXJuJiZpLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBufX1yZXR1cm4gZX19LHtrZXk6XCJoYW5kbGVSYWRpb3NcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMucmFkaW9zLmxlbmd0aD4wKXt2YXIgZT10aGlzLmdldExhc3RTZWxlY3RlZFJhZGlvKCksdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLnJhZGlvc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShvPWkubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vLnZhbHVlO2Euc2VsZWN0ZWQ9ITEsYS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJqcGxpc3Qtc2VsZWN0ZWRcIil9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19ZSYmdGhpcy5yYWRpb3MuZm9yRWFjaChmdW5jdGlvbih0KXt0LmlzRXF1YWxUbyhlKSYmKHQuc2VsZWN0ZWQ9ITAsdC5lbGVtZW50LmNoZWNrZWQ9ITAsdC5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJqcGxpc3Qtc2VsZWN0ZWRcIikpfSl9fX0se2tleTpcImdldFNvcnRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PXRoaXMuZ2V0TGFzdFNlbGVjdGVkUmFkaW8oKTtyZXR1cm4gdCYmKGU9ZS5jb25jYXQodC5nZXRTb3J0T3B0aW9ucygpKSksZX19LHtrZXk6XCJnZXREZWVwTGlua1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yYWRpb3MubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkJiZlLnNlbGVjdGVkP2UuaWQrXCI9MVwiOlwiXCJ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KTtyZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGUpKS5qb2luKFwiJlwiKX19XSksdH0oKTt0LmRlZmF1bHQ9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KHIoMikpO3ZhciBpPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06W10sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciBpPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwodGhpcyxlLHIsbixvKSk7cmV0dXJuIGkuZ3JvdXA9ZSxpLm5hbWU9cixpLmNoZWNrYm94ZXM9W10saX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxvLmRlZmF1bHQpLG4odCxbe2tleTpcImFkZENvbnRyb2xcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgcj10aGlzLG49ZnVuY3Rpb24gZSh0LHIsbil7bnVsbD09PXQmJih0PUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOmUoaSxyLG4pfWlmKFwidmFsdWVcImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGE9by5nZXQ7cmV0dXJuIHZvaWQgMCE9PWE/YS5jYWxsKG4pOnZvaWQgMH0odC5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiYWRkQ29udHJvbFwiLHRoaXMpLmNhbGwodGhpcyxlKTtpZihuLnNlbGVjdGVkPW4uZWxlbWVudC5jaGVja2VkLG4uaWQpe3ZhciBvPXRoaXMuZGVlcExpbmtQYXJhbXMuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5rZXk9PT1uLmlkfSk7byYmKG4uc2VsZWN0ZWQ9XCIxXCI9PT1vLnZhbHVlKX10aGlzLmNoZWNrYm94ZXMucHVzaChuKSx0aGlzLmhhbmRsZUNoZWNrYm94ZXMoKSxuLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxuLnNlbGVjdGVkPSFuLnNlbGVjdGVkLHIuY2hlY2tib3hlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuaXNFcXVhbFRvKG4pJiYoZS5zZWxlY3RlZD1uLnNlbGVjdGVkKX0pLHIuaGFuZGxlQ2hlY2tib3hlcygpLHdpbmRvdy5qcGxpc3QmJndpbmRvdy5qcGxpc3QucmVmcmVzaChyLmdyb3VwKX0pfX0se2tleTpcImhhbmRsZUNoZWNrYm94ZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPSEwLHQ9ITEscj12b2lkIDA7dHJ5e2Zvcih2YXIgbixvPXRoaXMuY2hlY2tib3hlc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShlPShuPW8ubmV4dCgpKS5kb25lKTtlPSEwKXt2YXIgaT1uLnZhbHVlO2kuc2VsZWN0ZWQ/aS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJqcGxpc3Qtc2VsZWN0ZWRcIik6aS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJqcGxpc3Qtc2VsZWN0ZWRcIiksaS5lbGVtZW50LmNoZWNrZWQ9aS5zZWxlY3RlZH19Y2F0Y2goZSl7dD0hMCxyPWV9ZmluYWxseXt0cnl7IWUmJm8ucmV0dXJuJiZvLnJldHVybigpfWZpbmFsbHl7aWYodCl0aHJvdyByfX19fSx7a2V5OlwiZ2V0U29ydE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9ITEscj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT10aGlzLmNoZWNrYm94ZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIGw9aS52YWx1ZTtsLnNlbGVjdGVkP2U9ZS5jb25jYXQobC5nZXRTb3J0T3B0aW9ucygpKTp0PSEwfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXJldHVybiB0JiYoZT1lLmNvbmNhdChbe3BhdGg6XCJkZWZhdWx0XCJ9XSkpLGV9fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY2hlY2tib3hlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQ/ZS5zZWxlY3RlZD9lLmlkK1wiPTFcIjplLmlkK1wiPTBcIjpcIlwifSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVyblwiXCIhPT1lfSk7cmV0dXJuIEFycmF5LmZyb20obmV3IFNldChlKSkuam9pbihcIiZcIil9fV0pLHR9KCk7dC5kZWZhdWx0PWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89YShyKDIpKSxpPWEocig2KSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUscixuLG8pKTtyZXR1cm4gaS5ncm91cD1lLGkubmFtZT1yLGkub3B0aW9ucz1bXSxpLnNlbGVjdGVkPVwiXCIsaS5pZD1cIlwiLGl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsby5kZWZhdWx0KSxuKHQsW3trZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcyxuPWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGkscixuKX1pZihcInZhbHVlXCJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBhPW8uZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChuKTp2b2lkIDB9KHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSksbz1uLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIm9wdGlvblwiKSxhPSEwLGw9ITEsdT12b2lkIDA7dHJ5e2Zvcih2YXIgcyxjPWZ1bmN0aW9uKCl7dmFyIGU9cy52YWx1ZTtlLnNldEF0dHJpYnV0ZShcImRhdGEtbmFtZVwiLHIubmFtZSksZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWdyb3VwXCIsci5ncm91cCksci5vcHRpb25zLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQuZWxlbWVudC52YWx1ZT09PWUudmFsdWV9KXx8ci5vcHRpb25zLnB1c2gobmV3IGkuZGVmYXVsdChlKSl9LGY9b1tTeW1ib2wuaXRlcmF0b3JdKCk7IShhPShzPWYubmV4dCgpKS5kb25lKTthPSEwKWMoKX1jYXRjaChlKXtsPSEwLHU9ZX1maW5hbGx5e3RyeXshYSYmZi5yZXR1cm4mJmYucmV0dXJuKCl9ZmluYWxseXtpZihsKXRocm93IHV9fWlmKHRoaXMuc2VsZWN0ZWQ9bi5lbGVtZW50LnZhbHVlLG4uaWQpe3RoaXMuaWQ9bi5pZDt2YXIgZD10aGlzLmRlZXBMaW5rUGFyYW1zLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIGUua2V5PT09bi5pZH0pO2QmJihuLmVsZW1lbnQudmFsdWU9ZC52YWx1ZSx0aGlzLnNlbGVjdGVkPWQudmFsdWUpfW4uZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLHIuc2VsZWN0ZWQ9ZS50YXJnZXQudmFsdWU7dmFyIHQ9ITAsbj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBpLGE9ci5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShpPWEubmV4dCgpKS5kb25lKTt0PSEwKXtpLnZhbHVlLmVsZW1lbnQudmFsdWU9ci5zZWxlY3RlZH19Y2F0Y2goZSl7bj0hMCxvPWV9ZmluYWxseXt0cnl7IXQmJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYobil0aHJvdyBvfX13aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlZnJlc2goci5ncm91cCl9KX19LHtrZXk6XCJnZXRTb3J0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMub3B0aW9ucy5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVsZW1lbnQudmFsdWU9PT1lLnNlbGVjdGVkfSk7cmV0dXJuIHQ/dC5nZXRTb3J0T3B0aW9ucygpOltdfX0se2tleTpcImdldERlZXBMaW5rXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5vcHRpb25zLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQuZWxlbWVudC52YWx1ZT09PWUuc2VsZWN0ZWR9KTtyZXR1cm4gdGhpcy5pZD90aGlzLmlkK1wiPVwiK3QuZWxlbWVudC52YWx1ZTpcIlwifX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWwocigyKSksaT1sKHIoNikpLGE9bChyKDQpKTtmdW5jdGlvbiBsKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOltdLG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KTt2YXIgaT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsKHRoaXMsZSxyLG4sbykpO3JldHVybiBpLmdyb3VwPWUsaS5uYW1lPXIsaS5zZWxlY3RlZD1udWxsLGkuaWQ9XCJcIixpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXMsbj1mdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfSh0LnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJhZGRDb250cm9sXCIsdGhpcykuY2FsbCh0aGlzLGUpO24uZHJvcGRvd249bmV3IGEuZGVmYXVsdChlLmVsZW1lbnQpLG4uYnV0dG9ucz1bXTt2YXIgbz1uLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXBhdGhdXCIpLGw9ITAsdT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBjLGY9ZnVuY3Rpb24oKXt2YXIgZT1jLnZhbHVlO2Uuc2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIsci5uYW1lKSxlLnNldEF0dHJpYnV0ZShcImRhdGEtZ3JvdXBcIixyLmdyb3VwKTt2YXIgdD1uZXcgaS5kZWZhdWx0KGUpO24uYnV0dG9ucy5wdXNoKHQpLHQuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksci5zZWxlY3RlZD10LHIuc2V0U2VsZWN0ZWRCdXR0b24obik7dmFyIG89ITAsaT0hMSxhPXZvaWQgMDt0cnl7Zm9yKHZhciBsLHU9ci5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShvPShsPXUubmV4dCgpKS5kb25lKTtvPSEwKXt2YXIgcz1sLnZhbHVlO3MuZHJvcGRvd24mJnMuZHJvcGRvd24uY2xvc2UoKX19Y2F0Y2goZSl7aT0hMCxhPWV9ZmluYWxseXt0cnl7IW8mJnUucmV0dXJuJiZ1LnJldHVybigpfWZpbmFsbHl7aWYoaSl0aHJvdyBhfX13aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlZnJlc2goci5ncm91cCl9KX0sZD1vW1N5bWJvbC5pdGVyYXRvcl0oKTshKGw9KGM9ZC5uZXh0KCkpLmRvbmUpO2w9ITApZigpfWNhdGNoKGUpe3U9ITAscz1lfWZpbmFsbHl7dHJ5eyFsJiZkLnJldHVybiYmZC5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgc319aWYodGhpcy5zZWxlY3RlZD10LmdldFNlbGVjdGVkQnV0dG9uKG4uYnV0dG9ucyksdGhpcy5zZXRTZWxlY3RlZEJ1dHRvbihuKSxuLmlkKXt0aGlzLmlkPW4uaWQ7dmFyIHA9dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleT09PW4uaWR9KTtpZihwKXt2YXIgaD1uLmJ1dHRvbnMuZmluZChmdW5jdGlvbihlKXt2YXIgdD1lLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiKTtyZXR1cm4gcC52YWx1ZT09PXQ/ZTpudWxsfSk7aCYmKHRoaXMuc2VsZWN0ZWQ9aCx0aGlzLnNldFNlbGVjdGVkQnV0dG9uKG4pKX19fX0se2tleTpcImdldFNvcnRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3RlZD90aGlzLnNlbGVjdGVkLmdldFNvcnRPcHRpb25zKCk6W119fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlkJiZ0aGlzLnNlbGVjdGVkJiZ0aGlzLmlkK1wiPVwiK3RoaXMuc2VsZWN0ZWQuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpfHxcIlwifX0se2tleTpcInNldFNlbGVjdGVkQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXRoaXMuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIGw9aS52YWx1ZTtpZihsLmRyb3Bkb3duKXt2YXIgdT1lLmJ1dHRvbnMuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gdC5zZWxlY3RlZC5pc0VxdWFsVG8oZSl9KTt1JiZsLmRyb3Bkb3duLnNldFBhbmVsc0NvbnRlbnQodS5lbGVtZW50LnRleHRDb250ZW50KX19fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319fX1dLFt7a2V5OlwiZ2V0U2VsZWN0ZWRCdXR0b25cIix2YWx1ZTpmdW5jdGlvbihlKXtpZihlLmxlbmd0aDw9MClyZXR1cm4gbnVsbDt2YXIgdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7aWYoXCJ0cnVlXCI9PT1hLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zZWxlY3RlZFwiKSlyZXR1cm4gYX19Y2F0Y2goZSl7cj0hMCxuPWV9ZmluYWxseXt0cnl7IXQmJmkucmV0dXJuJiZpLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBufX1yZXR1cm4gZVswXX19XSksdH0oKTt0LmRlZmF1bHQ9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoMjcpKSxpPWEocig0KSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUscixuLG8pKTtyZXR1cm4gaS5jdXJyZW50UGFnZT0wLGkuaXRlbXNQZXJQYWdlPTAsaS5yYW5nZT0wLGkuaWQ9XCJcIixpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGkscixuKX1pZihcInZhbHVlXCJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBhPW8uZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChuKTp2b2lkIDB9KHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSk7aWYodGhpcy5jdXJyZW50UGFnZT1yLmN1cnJlbnRQYWdlLHRoaXMuaXRlbXNQZXJQYWdlPU51bWJlcihyLml0ZW1zUGVyUGFnZSl8fDAsdGhpcy5yYW5nZT1yLnJhbmdlLHRoaXMucmVzdG9yZUZyb21EZWVwTGluayhyKSxyLnBhZ2VCdXR0b25zSG9sZGVyPXIuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10eXBlPVwicGFnZXNcIl0nKSxyLnBhZ2VCdXR0b25zSG9sZGVyJiYoci5idG5UZW1wbGF0ZT1yLnBhZ2VCdXR0b25zSG9sZGVyLmlubmVySFRNTCksci5maXJzdEJ1dHRvbnM9ci5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXR5cGU9XCJmaXJzdFwiXScpLHIubGFzdEJ1dHRvbnM9ci5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXR5cGU9XCJsYXN0XCJdJyksci5wcmV2QnV0dG9ucz1yLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdHlwZT1cInByZXZcIl0nKSxyLm5leHRCdXR0b25zPXIuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10eXBlPVwibmV4dFwiXScpLHQuYmluZEV2ZW50SGFuZGxlcihyLmZpcnN0QnV0dG9ucyxcImNsaWNrXCIsdGhpcy5wYWdlQnV0dG9uQ2xpY2suYmluZCh0aGlzKSksdC5iaW5kRXZlbnRIYW5kbGVyKHIubGFzdEJ1dHRvbnMsXCJjbGlja1wiLHRoaXMucGFnZUJ1dHRvbkNsaWNrLmJpbmQodGhpcykpLHQuYmluZEV2ZW50SGFuZGxlcihyLnByZXZCdXR0b25zLFwiY2xpY2tcIix0aGlzLnBhZ2VCdXR0b25DbGljay5iaW5kKHRoaXMpKSx0LmJpbmRFdmVudEhhbmRsZXIoci5uZXh0QnV0dG9ucyxcImNsaWNrXCIsdGhpcy5wYWdlQnV0dG9uQ2xpY2suYmluZCh0aGlzKSksci5pdGVtc1BlclBhZ2VTZWxlY3RzPUFycmF5LmZyb20oci5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXR5cGU9XCJpdGVtcy1wZXItcGFnZVwiXScpKSx0aGlzLnVwZGF0ZUl0ZW1zUGVyUGFnZVNlbGVjdChyLml0ZW1zUGVyUGFnZVNlbGVjdHMpLHIuaXRlbXNQZXJQYWdlREQ9QXJyYXkuZnJvbShyLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdHlwZT1cIml0ZW1zLXBlci1wYWdlLWRkXCJdJykpLHRoaXMuaW5pdEN1c3RvbURyb3Bkb3ducyhyLml0ZW1zUGVyUGFnZUREKSx0LmJpbmRFdmVudEhhbmRsZXIoci5pdGVtc1BlclBhZ2VTZWxlY3RzLFwiY2hhbmdlXCIsdGhpcy5zZWxlY3RDaGFuZ2UuYmluZCh0aGlzKSksci5sYWJlbHM9ci5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXR5cGU9XCJpbmZvXCJdJyksci5sYWJlbHMpe3ZhciBuPSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgYSxsPXIubGFiZWxzW1N5bWJvbC5pdGVyYXRvcl0oKTshKG49KGE9bC5uZXh0KCkpLmRvbmUpO249ITApe3ZhciB1PWEudmFsdWU7dS50ZW1wbGF0ZT11LmlubmVySFRNTH19Y2F0Y2goZSl7bz0hMCxpPWV9ZmluYWxseXt0cnl7IW4mJmwucmV0dXJuJiZsLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX19fX0se2tleTpcInVwZGF0ZUl0ZW1zUGVyUGFnZVNlbGVjdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGk9YS5uZXh0KCkpLmRvbmUpO3I9ITApe3ZhciBsPWkudmFsdWUsdT1BcnJheS5mcm9tKGwub3B0aW9ucykuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS52YWx1ZT09PXQuaXRlbXNQZXJQYWdlLnRvU3RyaW5nKCl9KTtsLnZhbHVlPXUmJk51bWJlcih0aGlzLml0ZW1zUGVyUGFnZSl8fDB9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319fX0se2tleTpcImluaXRDdXN0b21Ecm9wZG93bnNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKGUmJiEoZS5sZW5ndGg8PTApKXt2YXIgcj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGEsbD1mdW5jdGlvbigpe3ZhciBlPWEudmFsdWU7ZS5kcm9wZG93bj1uZXcgaS5kZWZhdWx0KGUpLGUuYnV0dG9ucz1BcnJheS5mcm9tKGUucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXZhbHVlXVwiKSk7dmFyIHI9ITAsbj0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciBsLHU9ZnVuY3Rpb24oKXt2YXIgcj1sLnZhbHVlO3IuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLHQuaXRlbXNQZXJQYWdlPU51bWJlcihyLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIikpfHwwLHQuc2V0U2VsZWN0ZWRCdXR0b24oKSxlLmRyb3Bkb3duLmNsb3NlKCksd2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHQuZ3JvdXApfSl9LHM9ZS5idXR0b25zW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGw9cy5uZXh0KCkpLmRvbmUpO3I9ITApdSgpfWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZzLnJldHVybiYmcy5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319fSx1PWVbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oYT11Lm5leHQoKSkuZG9uZSk7cj0hMClsKCl9Y2F0Y2goZSl7bj0hMCxvPWV9ZmluYWxseXt0cnl7IXImJnUucmV0dXJuJiZ1LnJldHVybigpfWZpbmFsbHl7aWYobil0aHJvdyBvfX10aGlzLnNldFNlbGVjdGVkQnV0dG9uKCl9fX0se2tleTpcInNldFNlbGVjdGVkQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9dGhpcy5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShvPWkubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vLnZhbHVlO2lmKGEuaXRlbXNQZXJQYWdlREQpe3ZhciBsPSEwLHU9ITEscz12b2lkIDA7dHJ5e2Zvcih2YXIgYyxmPWEuaXRlbXNQZXJQYWdlRERbU3ltYm9sLml0ZXJhdG9yXSgpOyEobD0oYz1mLm5leHQoKSkuZG9uZSk7bD0hMCl7dmFyIGQ9Yy52YWx1ZTtpZihkLmJ1dHRvbnMpe3ZhciBwPWQuYnV0dG9ucy5maW5kKGZ1bmN0aW9uKHQpe3JldHVybihOdW1iZXIodC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpKXx8MCk9PT1lLml0ZW1zUGVyUGFnZX0pO3B8fChwPWQuYnV0dG9ucy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiAwPT09KE51bWJlcihlLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIikpfHwwKX0pKSxwJiZkLmRyb3Bkb3duLnNldFBhbmVsc0NvbnRlbnQocC50ZXh0Q29udGVudCl9fX1jYXRjaChlKXt1PSEwLHM9ZX1maW5hbGx5e3RyeXshbCYmZi5yZXR1cm4mJmYucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IHN9fX19fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19fX0se2tleTpcImdldFBhZ2luYXRpb25PcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57aXRlbXNQZXJQYWdlOnRoaXMuaXRlbXNQZXJQYWdlLGN1cnJlbnRQYWdlOnRoaXMuY3VycmVudFBhZ2UscmFuZ2U6dGhpcy5yYW5nZX19fSx7a2V5Olwic2V0UGFnaW5hdGlvbk9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgcj10aGlzO2lmKGUpe3RoaXMuY3VycmVudFBhZ2U9ZS5jdXJyZW50UGFnZSx0aGlzLml0ZW1zUGVyUGFnZT1lLml0ZW1zUGVyUGFnZTt2YXIgbj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEsbD10aGlzLmNvbnRyb2xzW1N5bWJvbC5pdGVyYXRvcl0oKTshKG49KGE9bC5uZXh0KCkpLmRvbmUpO249ITApe3ZhciB1PWEudmFsdWU7aWYodS5idG5UZW1wbGF0ZSYmdS5wYWdlQnV0dG9uc0hvbGRlcil7Zm9yKDt1LnBhZ2VCdXR0b25zSG9sZGVyLmZpcnN0Q2hpbGQ7KXUucGFnZUJ1dHRvbnNIb2xkZXIucmVtb3ZlQ2hpbGQodS5wYWdlQnV0dG9uc0hvbGRlci5maXJzdENoaWxkKTtmb3IodmFyIHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LmlubmVySFRNTD11LmJ0blRlbXBsYXRlLnJlcGxhY2UobmV3IFJlZ0V4cChcIntwYWdlTnVtYmVyfVwiLFwiZ1wiKSxlKzEpLnRyaW0oKTt2YXIgbj10LmZpcnN0Q2hpbGQsbz1uLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXR5cGU9XCJwYWdlXCJdJyk7b3x8KG89biksby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIixlLnRvU3RyaW5nKCkpLGU9PT1yLmN1cnJlbnRQYWdlJiYoby5jbGFzc0xpc3QuYWRkKHUuc2VsZWN0ZWRDbGFzcyksby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdGVkXCIsXCJ0cnVlXCIpKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGUpe3IucGFnZUJ1dHRvbkNsaWNrKGUsbyl9KSx1LnBhZ2VCdXR0b25zSG9sZGVyLmFwcGVuZENoaWxkKG4pfSxjPWUucmFuZ2VTdGFydDtjPD1lLnJhbmdlRW5kO2MrKylzKGMpO3Quc2V0UGFnZUF0dHIodS5maXJzdEJ1dHRvbnMsMCwwIT09dGhpcy5jdXJyZW50UGFnZSx1LmRpc2FibGVkQ2xhc3MpLHQuc2V0UGFnZUF0dHIodS5sYXN0QnV0dG9ucyxlLnBhZ2VzTnVtYmVyLTEsdGhpcy5jdXJyZW50UGFnZSE9PWUucGFnZXNOdW1iZXItMSx1LmRpc2FibGVkQ2xhc3MpLHQuc2V0UGFnZUF0dHIodS5wcmV2QnV0dG9ucyxlLnByZXZQYWdlLDAhPT10aGlzLmN1cnJlbnRQYWdlLHUuZGlzYWJsZWRDbGFzcyksdC5zZXRQYWdlQXR0cih1Lm5leHRCdXR0b25zLGUubmV4dFBhZ2UsdGhpcy5jdXJyZW50UGFnZSE9PWUucGFnZXNOdW1iZXItMSx1LmRpc2FibGVkQ2xhc3MpO3ZhciBmPVt7a2V5Olwie3BhZ2VOdW1iZXJ9XCIsdmFsdWU6ZS5jdXJyZW50UGFnZSsxfSx7a2V5Olwie3BhZ2VzTnVtYmVyfVwiLHZhbHVlOmUucGFnZXNOdW1iZXJ9LHtrZXk6XCJ7c3RhcnRJdGVtfVwiLHZhbHVlOmUuc3RhcnQrMX0se2tleTpcIntlbmRJdGVtfVwiLHZhbHVlOmUuZW5kfSx7a2V5Olwie2l0ZW1zTnVtYmVyfVwiLHZhbHVlOmUuaXRlbXNOdW1iZXJ9XTtpZih1LmxhYmVscyl7dmFyIGQ9ITAscD0hMSxoPXZvaWQgMDt0cnl7Zm9yKHZhciB2LHk9dS5sYWJlbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZD0odj15Lm5leHQoKSkuZG9uZSk7ZD0hMCl7dmFyIGI9di52YWx1ZTtpZihiLnRlbXBsYXRlKXt2YXIgZz1iLnRlbXBsYXRlLG09ITAsdz0hMSxPPXZvaWQgMDt0cnl7Zm9yKHZhciBfLGo9ZltTeW1ib2wuaXRlcmF0b3JdKCk7IShtPShfPWoubmV4dCgpKS5kb25lKTttPSEwKXt2YXIgUD1fLnZhbHVlO2c9Zy5yZXBsYWNlKG5ldyBSZWdFeHAoUC5rZXksXCJnXCIpLFAudmFsdWUpfX1jYXRjaChlKXt3PSEwLE89ZX1maW5hbGx5e3RyeXshbSYmai5yZXR1cm4mJmoucmV0dXJuKCl9ZmluYWxseXtpZih3KXRocm93IE99fWIuaW5uZXJIVE1MPWd9fX1jYXRjaChlKXtwPSEwLGg9ZX1maW5hbGx5e3RyeXshZCYmeS5yZXR1cm4mJnkucmV0dXJuKCl9ZmluYWxseXtpZihwKXRocm93IGh9fX19fX1jYXRjaChlKXtvPSEwLGk9ZX1maW5hbGx5e3RyeXshbiYmbC5yZXR1cm4mJmwucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fX19fSx7a2V5OlwicGFnZUJ1dHRvbkNsaWNrXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtlJiZlLnByZXZlbnREZWZhdWx0KCk7dmFyIHI9dD90LmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiKTplLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIik7dGhpcy5jdXJyZW50UGFnZT1OdW1iZXIocil8fDAsd2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHRoaXMuZ3JvdXApfX0se2tleTpcInNlbGVjdENoYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKTt2YXIgdD1OdW1iZXIoZS50YXJnZXQudmFsdWUpO2lmKCFpc05hTih0KSl7dGhpcy5pdGVtc1BlclBhZ2U9dDt2YXIgcj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT10aGlzLmNvbnRyb2xzW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGk9YS5uZXh0KCkpLmRvbmUpO3I9ITApe3ZhciBsPWkudmFsdWU7dGhpcy51cGRhdGVJdGVtc1BlclBhZ2VTZWxlY3QobC5pdGVtc1BlclBhZ2VTZWxlY3RzKX19Y2F0Y2goZSl7bj0hMCxvPWV9ZmluYWxseXt0cnl7IXImJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYobil0aHJvdyBvfX19d2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHRoaXMuZ3JvdXApfX0se2tleTpcInJlc3RvcmVGcm9tRGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbihlKXtpZihlLmlkKXt0aGlzLmlkPWUuaWQ7dmFyIHQ9dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0LmtleT09PWUuaWR9KTtpZih0KXt2YXIgcj10LnZhbHVlLnNwbGl0KFwiLVwiKTtpZigyIT09ci5sZW5ndGgpcmV0dXJuO3ZhciBuPU51bWJlcihyWzBdKSxvPU51bWJlcihyWzFdKTtpZihpc05hTihuKXx8aXNOYU4obykpcmV0dXJuO3RoaXMuY3VycmVudFBhZ2U9bix0aGlzLml0ZW1zUGVyUGFnZT1vfX19fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlkP3RoaXMuaWQrXCI9XCIrdGhpcy5jdXJyZW50UGFnZStcIi1cIit0aGlzLml0ZW1zUGVyUGFnZTpcIlwifX1dLFt7a2V5Olwic2V0UGFnZUF0dHJcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZihlKXt2YXIgbz0hMCxpPSExLGE9dm9pZCAwO3RyeXtmb3IodmFyIGwsdT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKG89KGw9dS5uZXh0KCkpLmRvbmUpO289ITApe3ZhciBzPWwudmFsdWU7cy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIix0KSxyP3MuY2xhc3NMaXN0LnJlbW92ZShuKTpzLmNsYXNzTGlzdC5hZGQobil9fWNhdGNoKGUpe2k9ITAsYT1lfWZpbmFsbHl7dHJ5eyFvJiZ1LnJldHVybiYmdS5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgYX19fX19LHtrZXk6XCJiaW5kRXZlbnRIYW5kbGVyXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKGUpe3ZhciBuPSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgYSxsPWZ1bmN0aW9uKCl7dmFyIGU9YS52YWx1ZTtlLmFkZEV2ZW50TGlzdGVuZXIodCxmdW5jdGlvbih0KXtyKHQsZSl9KX0sdT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKG49KGE9dS5uZXh0KCkpLmRvbmUpO249ITApbCgpfWNhdGNoKGUpe289ITAsaT1lfWZpbmFsbHl7dHJ5eyFuJiZ1LnJldHVybiYmdS5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19fX19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoMCkpLGk9YShyKDI4KSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCxvLmRlZmF1bHQpLG4odCxbe2tleTpcImdldFBhZ2luYXRpb25PcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250cm9scy5sZW5ndGg+MD90aGlzLmNvbnRyb2xzW3RoaXMuY29udHJvbHMubGVuZ3RoLTFdLmdldFBhZ2luYXRpb25PcHRpb25zKCk6bnVsbH19LHtrZXk6XCJzZXRQYWdpbmF0aW9uT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe319LHtrZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoZS5uYW1lIT09dGhpcy5uYW1lfHxlLmdyb3VwIT09dGhpcy5ncm91cClyZXR1cm4gbnVsbDt2YXIgdD1uZXcgaS5kZWZhdWx0KGUuZWxlbWVudCk7cmV0dXJuIHRoaXMuY29udHJvbHMucHVzaCh0KSx0fX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0ocigxKSk7dmFyIGk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciByPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwodGhpcyxlKSk7cmV0dXJuIGUmJihyLml0ZW1zUGVyUGFnZT1OdW1iZXIoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWl0ZW1zLXBlci1wYWdlXCIpKXx8MTAsci5jdXJyZW50UGFnZT1OdW1iZXIoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWN1cnJlbnQtcGFnZVwiKSl8fDAsci5yYW5nZT1OdW1iZXIoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJhbmdlXCIpKXx8MTAsci5kaXNhYmxlZENsYXNzPShlLmdldEF0dHJpYnV0ZShcImRhdGEtZGlzYWJsZWQtY2xhc3NcIil8fFwianBsaXN0LWRpc2FibGVkXCIpLnRyaW0oKSxyLnNlbGVjdGVkQ2xhc3M9KGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zZWxlY3RlZC1jbGFzc1wiKXx8XCJqcGxpc3Qtc2VsZWN0ZWRcIikudHJpbSgpKSxyfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiZ2V0UGFnaW5hdGlvbk9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybntpdGVtc1BlclBhZ2U6dGhpcy5pdGVtc1BlclBhZ2UsY3VycmVudFBhZ2U6dGhpcy5jdXJyZW50UGFnZSxyYW5nZTp0aGlzLnJhbmdlfX19XSksdH0oKTt0LmRlZmF1bHQ9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KHIoNSkpO3ZhciBpPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06W10sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciBpPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwodGhpcyxlLHIsbixvKSk7cmV0dXJuIGkuZ3JvdXA9ZSxpLm5hbWU9cixpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXMsbj1mdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfSh0LnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJhZGRDb250cm9sXCIsdGhpcykuY2FsbCh0aGlzLGUpO2lmKG4uaWQpe3ZhciBvPXRoaXMuZGVlcExpbmtQYXJhbXMuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5rZXk9PT1uLmlkfSk7byYmKG4udGV4dD1vLnZhbHVlLG4uZWxlbWVudC52YWx1ZT1vLnZhbHVlKX1pZihuLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLG4udGV4dD1lLnRhcmdldC52YWx1ZSxyLnRleHRDaGFuZ2VkKG4pfSksbi5jbGVhckJ1dHRvbklEPShuLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jbGVhci1idG4taWRcIil8fFwiXCIpLnRyaW0oKSxuLmNsZWFyQnV0dG9uSUQpe3ZhciBpPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG4uY2xlYXJCdXR0b25JRCk7aSYmaS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksbi50ZXh0PVwiXCIsci50ZXh0Q2hhbmdlZChuKX0pfX19LHtrZXk6XCJ0ZXh0Q2hhbmdlZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbih0KXt0LmlzRXF1YWxUbyhlLCExKSYmKHQuZWxlbWVudC52YWx1ZT1lLnRleHQsdC50ZXh0PWUudGV4dCl9KSx3aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlZnJlc2godGhpcy5ncm91cCl9fV0pLHR9KCk7dC5kZWZhdWx0PWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKDEpKTt2YXIgaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIHI9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUpKTtyZXR1cm4gZSYmKHIucGF0aD0oZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhdGhcIil8fFwiXCIpLnRyaW0oKSxyLl90ZXh0PShlLmdldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiKXx8ZS52YWx1ZXx8XCJcIikudHJpbSgpLHIubW9kZT0oZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVcIil8fFwiY29udGFpbnNcIikudHJpbSgpLHIucmVnZXg9ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJlZ2V4XCIpfHxcIlwiKSxyfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiZ2V0VGV4dEZpbHRlck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybntwYXRoOnRoaXMucGF0aCx0ZXh0OnRoaXMudGV4dCxtb2RlOnRoaXMubW9kZSxpZ25vcmVSZWdleDp0aGlzLnJlZ2V4fX19LHtrZXk6XCJpc0VxdWFsVG9cIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0hKGFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdKXx8YXJndW1lbnRzWzFdLHI9dGhpcy5wYXRoPT09ZS5wYXRoJiZ0aGlzLm1vZGU9PT1lLm1vZGUmJnRoaXMucmVnZXg9PT1lLnJlZ2V4O3JldHVybiB0JiYocj1yJiZ0aGlzLnRleHQ9PT1lLnRleHQpLHJ9fSx7a2V5OlwidGV4dFwiLHNldDpmdW5jdGlvbihlKXt0aGlzLl90ZXh0PShlfHxcIlwiKS50cmltKCl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXh0fX1dKSx0fSgpO3QuZGVmYXVsdD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWEocig1KSksaT1hKHIoOSkpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLGZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsKDAsaS5kZWZhdWx0KShvLmRlZmF1bHQpKSxuKHQsW3trZXk6XCJnZXRUZXh0RmlsdGVyT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9W10sdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLmNoZWNrYm94ZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTthLnNlbGVjdGVkJiYoZT1lLmNvbmNhdChhLmdldFRleHRGaWx0ZXJPcHRpb25zKCkpKX19Y2F0Y2goZSl7cj0hMCxuPWV9ZmluYWxseXt0cnl7IXQmJmkucmV0dXJuJiZpLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBufX1yZXR1cm4gZX19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoNSkpLGk9YShyKDEwKSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCwoMCxpLmRlZmF1bHQpKG8uZGVmYXVsdCkpLG4odCxbe2tleTpcImdldFRleHRGaWx0ZXJPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PXRoaXMuZ2V0TGFzdFNlbGVjdGVkUmFkaW8oKTtyZXR1cm4gdCYmKGU9ZS5jb25jYXQodC5nZXRUZXh0RmlsdGVyT3B0aW9ucygpKSksZX19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoNSkpLGk9YShyKDcpKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSxmdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LCgwLGkuZGVmYXVsdCkoby5kZWZhdWx0KSksbih0LFt7a2V5OlwiZ2V0VGV4dEZpbHRlck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcy5nZXRMYXN0U2VsZWN0ZWRSYWRpbygpO3QmJihlPWUuY29uY2F0KHQuZ2V0VGV4dEZpbHRlck9wdGlvbnMoKSkpO3ZhciByPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXRoaXMuY2hlY2tib3hlc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShpPWEubmV4dCgpKS5kb25lKTtyPSEwKXt2YXIgbD1pLnZhbHVlO2wuc2VsZWN0ZWQmJihlPWUuY29uY2F0KGwuZ2V0VGV4dEZpbHRlck9wdGlvbnMoKSkpfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXJldHVybiBlfX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWEocigzKSksaT1hKHIoOCkpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06W10sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpO3ZhciBpPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwodGhpcyxlLHIsbixvKSk7cmV0dXJuIGkuZ3JvdXA9ZSxpLm5hbWU9cixpLm9wdGlvbnM9W10saS5zZWxlY3RlZD1cIlwiLGkuaWQ9XCJcIixpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXMsbj1mdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfSh0LnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJhZGRDb250cm9sXCIsdGhpcykuY2FsbCh0aGlzLGUpLG89bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJvcHRpb25cIiksYT0hMCxsPSExLHU9dm9pZCAwO3RyeXtmb3IodmFyIHMsYz1mdW5jdGlvbigpe3ZhciBlPXMudmFsdWU7ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW5hbWVcIixyLm5hbWUpLGUuc2V0QXR0cmlidXRlKFwiZGF0YS1ncm91cFwiLHIuZ3JvdXApLHIub3B0aW9ucy5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVsZW1lbnQudmFsdWU9PT1lLnZhbHVlfSl8fHIub3B0aW9ucy5wdXNoKG5ldyBpLmRlZmF1bHQoZSkpfSxmPW9bU3ltYm9sLml0ZXJhdG9yXSgpOyEoYT0ocz1mLm5leHQoKSkuZG9uZSk7YT0hMCljKCl9Y2F0Y2goZSl7bD0hMCx1PWV9ZmluYWxseXt0cnl7IWEmJmYucmV0dXJuJiZmLnJldHVybigpfWZpbmFsbHl7aWYobCl0aHJvdyB1fX1pZih0aGlzLnNlbGVjdGVkPW4uZWxlbWVudC52YWx1ZSxuLmlkKXt0aGlzLmlkPW4uaWQ7dmFyIGQ9dGhpcy5kZWVwTGlua1BhcmFtcy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleT09PW4uaWR9KTtkJiYobi5lbGVtZW50LnZhbHVlPWQudmFsdWUsdGhpcy5zZWxlY3RlZD1kLnZhbHVlKX1uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxyLnNlbGVjdGVkPWUudGFyZ2V0LnZhbHVlO3ZhciB0PSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXIuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0oaT1hLm5leHQoKSkuZG9uZSk7dD0hMCl7aS52YWx1ZS5lbGVtZW50LnZhbHVlPXIuc2VsZWN0ZWR9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyF0JiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319d2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHIuZ3JvdXApfSl9fSx7a2V5OlwiZ2V0UGF0aEZpbHRlck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLm9wdGlvbnMuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbGVtZW50LnZhbHVlPT09ZS5zZWxlY3RlZH0pO3JldHVybiB0P1t0LmdldFBhdGhGaWx0ZXJPcHRpb25zKCldOltdfX0se2tleTpcImdldERlZXBMaW5rXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5vcHRpb25zLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQuZWxlbWVudC52YWx1ZT09PWUuc2VsZWN0ZWR9KTtyZXR1cm4gdGhpcy5pZD90aGlzLmlkK1wiPVwiK3QuZWxlbWVudC52YWx1ZTpcIlwifX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWEocigzKSksaT1hKHIoOSkpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLGZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsKDAsaS5kZWZhdWx0KShvLmRlZmF1bHQpKSxuKHQsW3trZXk6XCJnZXRQYXRoRmlsdGVyT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9W10sdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLmNoZWNrYm94ZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTthLnNlbGVjdGVkJiYoZT1lLmNvbmNhdChhLmdldFBhdGhGaWx0ZXJPcHRpb25zKCkpKX19Y2F0Y2goZSl7cj0hMCxuPWV9ZmluYWxseXt0cnl7IXQmJmkucmV0dXJuJiZpLnJldHVybigpfWZpbmFsbHl7aWYocil0aHJvdyBufX1yZXR1cm4gZX19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoMykpLGk9YShyKDEwKSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX0odCwoMCxpLmRlZmF1bHQpKG8uZGVmYXVsdCkpLG4odCxbe2tleTpcImdldFBhdGhGaWx0ZXJPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PXRoaXMuZ2V0TGFzdFNlbGVjdGVkUmFkaW8oKTtyZXR1cm4gdCYmKGU9ZS5jb25jYXQodC5nZXRQYXRoRmlsdGVyT3B0aW9ucygpKSksZX19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1hKHIoMykpLGk9YShyKDcpKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgbD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSxmdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LCgwLGkuZGVmYXVsdCkoby5kZWZhdWx0KSksbih0LFt7a2V5OlwiZ2V0UGF0aEZpbHRlck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcy5nZXRMYXN0U2VsZWN0ZWRSYWRpbygpO3QmJihlPWUuY29uY2F0KHQuZ2V0UGF0aEZpbHRlck9wdGlvbnMoKSkpO3ZhciByPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXRoaXMuY2hlY2tib3hlc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShpPWEubmV4dCgpKS5kb25lKTtyPSEwKXt2YXIgbD1pLnZhbHVlO2wuc2VsZWN0ZWQmJihlPWUuY29uY2F0KGwuZ2V0UGF0aEZpbHRlck9wdGlvbnMoKSkpfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fXJldHVybiBlfX1dKSx0fSgpO3QuZGVmYXVsdD1sfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWwocigzKSksaT1sKHIoOCkpLGE9bChyKDQpKTtmdW5jdGlvbiBsKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX12YXIgdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscil7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOltdLG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KTt2YXIgaT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsKHRoaXMsZSxyLG4sbykpO3JldHVybiBpLmdyb3VwPWUsaS5uYW1lPXIsaS5zZWxlY3RlZD1cIlwiLGkuaWQ9XCJcIixpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXMsbj1mdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfSh0LnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJhZGRDb250cm9sXCIsdGhpcykuY2FsbCh0aGlzLGUpO24uZHJvcGRvd249bmV3IGEuZGVmYXVsdChlLmVsZW1lbnQpLG4uYnV0dG9ucz1bXTt2YXIgbz1uLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXBhdGhdXCIpLGw9ITAsdT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBjLGY9ZnVuY3Rpb24oKXt2YXIgZT1jLnZhbHVlO2Uuc2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIsci5uYW1lKSxlLnNldEF0dHJpYnV0ZShcImRhdGEtZ3JvdXBcIixyLmdyb3VwKTt2YXIgdD1uZXcgaS5kZWZhdWx0KGUpO24uYnV0dG9ucy5wdXNoKHQpLHQuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksci5zZWxlY3RlZD10LHIuc2V0U2VsZWN0ZWRCdXR0b24obiksd2luZG93LmpwbGlzdCYmd2luZG93LmpwbGlzdC5yZWZyZXNoKHIuZ3JvdXApfSl9LGQ9b1tTeW1ib2wuaXRlcmF0b3JdKCk7IShsPShjPWQubmV4dCgpKS5kb25lKTtsPSEwKWYoKX1jYXRjaChlKXt1PSEwLHM9ZX1maW5hbGx5e3RyeXshbCYmZC5yZXR1cm4mJmQucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IHN9fWlmKHRoaXMuc2VsZWN0ZWQ9dC5nZXRTZWxlY3RlZEJ1dHRvbihuLmJ1dHRvbnMpLHRoaXMuc2V0U2VsZWN0ZWRCdXR0b24obiksbi5pZCl7dGhpcy5pZD1uLmlkO3ZhciBwPXRoaXMuZGVlcExpbmtQYXJhbXMuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5rZXk9PT1uLmlkfSk7aWYocCl7dmFyIGg9bi5idXR0b25zLmZpbmQoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIik7cmV0dXJuIHAudmFsdWU9PT10P2U6bnVsbH0pO2gmJih0aGlzLnNlbGVjdGVkPWgsdGhpcy5zZXRTZWxlY3RlZEJ1dHRvbihuKSl9fX19LHtrZXk6XCJnZXRQYXRoRmlsdGVyT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWQ/W3RoaXMuc2VsZWN0ZWQuZ2V0UGF0aEZpbHRlck9wdGlvbnMoKV06W119fSx7a2V5OlwiZ2V0RGVlcExpbmtcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlkJiZ0aGlzLnNlbGVjdGVkJiZ0aGlzLmlkK1wiPVwiK3RoaXMuc2VsZWN0ZWQuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpfHxcIlwifX0se2tleTpcInNldFNlbGVjdGVkQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXRoaXMuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIGw9aS52YWx1ZTtpZihsLmRyb3Bkb3duKXt2YXIgdT1lLmJ1dHRvbnMuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gdC5zZWxlY3RlZC5pc0VxdWFsVG8oZSl9KTt1JiZsLmRyb3Bkb3duLnNldFBhbmVsc0NvbnRlbnQodS5lbGVtZW50LnRleHRDb250ZW50KSxsLmRyb3Bkb3duLmNsb3NlKCl9fX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fX19XSxbe2tleTpcImdldFNlbGVjdGVkQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoZS5sZW5ndGg8PTApcmV0dXJuIG51bGw7dmFyIHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9ZVtTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShvPWkubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vLnZhbHVlO2lmKFwidHJ1ZVwiPT09YS5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtc2VsZWN0ZWRcIikpcmV0dXJuIGF9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19cmV0dXJuIGVbMF19fV0pLHR9KCk7dC5kZWZhdWx0PXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89YShyKDExKSksaT1hKHIoNykpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fXZhciBsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLGZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsKDAsaS5kZWZhdWx0KShvLmRlZmF1bHQpKSxuKHQsW3trZXk6XCJnZXRSYW5nZUZpbHRlck9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcy5nZXRMYXN0U2VsZWN0ZWRSYWRpbygpO3QmJihlPWUuY29uY2F0KHQuZ2V0UmFuZ2VGaWx0ZXJPcHRpb25zKCkpKTt2YXIgcj0hMCxuPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGksYT10aGlzLmNoZWNrYm94ZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIGw9aS52YWx1ZTtsLnNlbGVjdGVkJiYoZT1lLmNvbmNhdChsLmdldFJhbmdlRmlsdGVyT3B0aW9ucygpKSl9fWNhdGNoKGUpe249ITAsbz1lfWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG4pdGhyb3cgb319cmV0dXJuIGV9fV0pLHR9KCk7dC5kZWZhdWx0PWx9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKDEpKTt2YXIgaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIHI9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUpKTtpZihlKXtyLnBhdGg9KGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wYXRoXCIpfHxcIlwiKS50cmltKCk7dmFyIG49ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZyb21cIik7ci5mcm9tPW51bGw9PT1uPy0xLzA6TnVtYmVyKG4pLGlzTmFOKHIuZnJvbSkmJihyLmZyb209LTEvMCk7dmFyIG89ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvXCIpO3IudG89bnVsbD09PW8/MS8wOk51bWJlcihvKSxpc05hTihyLnRvKSYmKHIudG89MS8wKTt2YXIgaT1lLmdldEF0dHJpYnV0ZShcImRhdGEtbWluXCIpO3IubWluPW51bGw9PT1pP3IuZnJvbTpOdW1iZXIoaSksaXNOYU4oci5taW4pJiYoci5taW49ci5mcm9tKTt2YXIgYT1lLmdldEF0dHJpYnV0ZShcImRhdGEtbWF4XCIpO3IubWF4PW51bGw9PT1hP3IudG86TnVtYmVyKGEpLGlzTmFOKHIubWF4KSYmKHIubWF4PXIudG8pfXJldHVybiByfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiZ2V0UmFuZ2VGaWx0ZXJPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57cGF0aDp0aGlzLnBhdGgsbWluOnRoaXMubWluLGZyb206dGhpcy5mcm9tLHRvOnRoaXMudG8sbWF4OnRoaXMubWF4fX19LHtrZXk6XCJpc0VxdWFsVG9cIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wYXRoPT09ZS5wYXRoJiZ0aGlzLmZyb209PT1lLmZyb20mJnRoaXMudG89PT1lLnRvJiZ0aGlzLm1pbj09PWUubWluJiZ0aGlzLm1heD09PWUubWF4fX1dKSx0fSgpO3QuZGVmYXVsdD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWEocigxMSkpLGk9YShyKDQyKSk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUscixuLG8pKTtyZXR1cm4gaS5ncm91cD1lLGkubmFtZT1yLGl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsby5kZWZhdWx0KSxuKHQsW3trZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcyxuPWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDplKGkscixuKX1pZihcInZhbHVlXCJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBhPW8uZ2V0O3JldHVybiB2b2lkIDAhPT1hP2EuY2FsbChuKTp2b2lkIDB9KHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSksbz1lLmVsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdHlwZT1cInNsaWRlclwiXScpO2lmKG4udmFsMUVsZW1lbnRzPWUuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10eXBlPVwidmFsdWUtMVwiXScpLG4udmFsMkVsZW1lbnRzPWUuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10eXBlPVwidmFsdWUtMlwiXScpLG4ubWluRWxlbWVudHM9ZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXR5cGU9XCJtaW5cIl0nKSxuLm1heEVsZW1lbnRzPWUuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10eXBlPVwibWF4XCJdJyksbyl7dmFyIGE9ZS5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtb3JpZW50YXRpb25cIil8fFwiaG9yaXpvbnRhbFwiLGw9ITAsdT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBjLGY9bi5taW5FbGVtZW50c1tTeW1ib2wuaXRlcmF0b3JdKCk7IShsPShjPWYubmV4dCgpKS5kb25lKTtsPSEwKXtjLnZhbHVlLnRleHRDb250ZW50PW4ubWlufX1jYXRjaChlKXt1PSEwLHM9ZX1maW5hbGx5e3RyeXshbCYmZi5yZXR1cm4mJmYucmV0dXJuKCl9ZmluYWxseXtpZih1KXRocm93IHN9fXZhciBkPSEwLHA9ITEsaD12b2lkIDA7dHJ5e2Zvcih2YXIgdix5PW4ubWF4RWxlbWVudHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZD0odj15Lm5leHQoKSkuZG9uZSk7ZD0hMCl7di52YWx1ZS50ZXh0Q29udGVudD1uLm1heH19Y2F0Y2goZSl7cD0hMCxoPWV9ZmluYWxseXt0cnl7IWQmJnkucmV0dXJuJiZ5LnJldHVybigpfWZpbmFsbHl7aWYocCl0aHJvdyBofX1pZihuLmlkKXt2YXIgYj10aGlzLmRlZXBMaW5rUGFyYW1zLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIGUua2V5PT09bi5pZH0pO2lmKGImJmIudmFsdWUpe3ZhciBnPWIudmFsdWUuc3BsaXQoXCJfXCIpOzI9PT1nLmxlbmd0aCYmKG4uZnJvbT1OdW1iZXIoZ1swXSl8fDAsbi50bz1OdW1iZXIoZ1sxXSl8fDApfX1uLnNsaWRlcj1uZXcgaS5kZWZhdWx0KG8sXCJ2ZXJ0aWNhbFwiPT09YSxuLm1pbixuLmZyb20sbi50byxuLm1heCxmdW5jdGlvbihlLHQpe3ZhciBvPSEwLGk9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbCx1PW4udmFsMUVsZW1lbnRzW1N5bWJvbC5pdGVyYXRvcl0oKTshKG89KGw9dS5uZXh0KCkpLmRvbmUpO289ITApe2wudmFsdWUudGV4dENvbnRlbnQ9TWF0aC5yb3VuZChlKX19Y2F0Y2goZSl7aT0hMCxhPWV9ZmluYWxseXt0cnl7IW8mJnUucmV0dXJuJiZ1LnJldHVybigpfWZpbmFsbHl7aWYoaSl0aHJvdyBhfX12YXIgcz0hMCxjPSExLGY9dm9pZCAwO3RyeXtmb3IodmFyIGQscD1uLnZhbDJFbGVtZW50c1tTeW1ib2wuaXRlcmF0b3JdKCk7IShzPShkPXAubmV4dCgpKS5kb25lKTtzPSEwKXtkLnZhbHVlLnRleHRDb250ZW50PU1hdGgucm91bmQodCl9fWNhdGNoKGUpe2M9ITAsZj1lfWZpbmFsbHl7dHJ5eyFzJiZwLnJldHVybiYmcC5yZXR1cm4oKX1maW5hbGx5e2lmKGMpdGhyb3cgZn19dmFyIGg9ITAsdj0hMSx5PXZvaWQgMDt0cnl7Zm9yKHZhciBiLGc9ci5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7IShoPShiPWcubmV4dCgpKS5kb25lKTtoPSEwKXt2YXIgbT1iLnZhbHVlO20uc2xpZGVyJiZtLnNsaWRlci5zZXRWYWx1ZXMoZSx0LCExKX19Y2F0Y2goZSl7dj0hMCx5PWV9ZmluYWxseXt0cnl7IWgmJmcucmV0dXJuJiZnLnJldHVybigpfWZpbmFsbHl7aWYodil0aHJvdyB5fX13aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlZnJlc2goci5ncm91cCl9KX19fSx7a2V5OlwiZ2V0UmFuZ2VGaWx0ZXJPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgbyxpPXRoaXMuY29udHJvbHNbU3ltYm9sLml0ZXJhdG9yXSgpOyEodD0obz1pLm5leHQoKSkuZG9uZSk7dD0hMCl7dmFyIGE9by52YWx1ZTtpZihhLnNsaWRlciYmYS5zbGlkZXIuaGFuZGxlcjEmJmEuc2xpZGVyLmhhbmRsZXIyKXt2YXIgbD1hLmdldFJhbmdlRmlsdGVyT3B0aW9ucygpO2wuZnJvbT1hLnNsaWRlci5oYW5kbGVyMS52YWx1ZSxsLnRvPWEuc2xpZGVyLmhhbmRsZXIyLnZhbHVlLGU9ZS5jb25jYXQobCl9fX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fXJldHVybiBlfX0se2tleTpcImdldERlZXBMaW5rXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbnRyb2xzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZCYmZS5zbGlkZXImJmUuc2xpZGVyLmhhbmRsZXIxJiZlLnNsaWRlci5oYW5kbGVyMj9lLmlkK1wiPVwiK2Uuc2xpZGVyLmhhbmRsZXIxLnZhbHVlK1wiX1wiK2Uuc2xpZGVyLmhhbmRsZXIyLnZhbHVlOlwiXCJ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KTtyZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGUpKS5qb2luKFwiJlwiKX19XSksdH0oKTt0LmRlZmF1bHQ9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCk7cig1MSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MCxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTowLGk9YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsYT1hcmd1bWVudHMubGVuZ3RoPjUmJnZvaWQgMCE9PWFyZ3VtZW50c1s1XT9hcmd1bWVudHNbNV06MCxsPWFyZ3VtZW50cy5sZW5ndGg+NiYmdm9pZCAwIT09YXJndW1lbnRzWzZdP2FyZ3VtZW50c1s2XTpmdW5jdGlvbihlLHQpe307aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHQpe2lmKHRoaXMuZWxlbWVudD10LHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNsaWRlclwiKSwhdGhpcy5lbGVtZW50KXJldHVybjt0aGlzLmlzVmVydGljYWw9cix0aGlzLmNhbGxiYWNrPWwsdGhpcy5taW49bix0aGlzLm1heD1hLHImJnRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNsaWRlci12ZXJ0aWNhbFwiKSx0aGlzLmhhbmRsZXIxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHRoaXMuaGFuZGxlcjEuY2xhc3NMaXN0LmFkZChcImpwbGlzdC1zbGlkZXItaG9sZGVyLTFcIiksdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaGFuZGxlcjEpLHRoaXMucmFuZ2U9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksdGhpcy5yYW5nZS5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNsaWRlci1yYW5nZVwiKSx0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5yYW5nZSksdGhpcy5oYW5kbGVyMS5sZWZ0PTAsdGhpcy5oYW5kbGVyMS50b3A9MCx0aGlzLmhhbmRsZXIyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHRoaXMuaGFuZGxlcjIuY2xhc3NMaXN0LmFkZChcImpwbGlzdC1zbGlkZXItaG9sZGVyLTJcIiksdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaGFuZGxlcjIpLHRoaXMuaGFuZGxlcjIubGVmdD0wLHRoaXMuaGFuZGxlcjIudG9wPTAsdGhpcy5kcmFnZ2luZz1udWxsLHRoaXMuaGFuZGxlcjEuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHRoaXMuc3RhcnQuYmluZCh0aGlzKSksdGhpcy5oYW5kbGVyMi5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5zdGFydC5iaW5kKHRoaXMpKSx0aGlzLmhhbmRsZXIxLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5zdGFydC5iaW5kKHRoaXMpKSx0aGlzLmhhbmRsZXIyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5zdGFydC5iaW5kKHRoaXMpKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5yZW5kZXIuYmluZCh0aGlzKSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHRoaXMucmVuZGVyLmJpbmQodGhpcykpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5yZXNpemUuYmluZCh0aGlzKSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLnN0b3AuYmluZCh0aGlzKSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsdGhpcy5zdG9wLmJpbmQodGhpcykpLGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIix0aGlzLnN0b3AuYmluZCh0aGlzKSksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIix0aGlzLmp1bXAuYmluZCh0aGlzKSksdGhpcy5zZXRWYWx1ZXMobyxpKX19cmV0dXJuIG4oZSxbe2tleTpcInNldFZhbHVlc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9IShhcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSl8fGFyZ3VtZW50c1syXTt0PGUmJih0PWUpO3ZhciBuPXRoaXMuZ2V0SW5uZXJWYWx1ZShlLHRoaXMubWluLHRoaXMubWF4KSxvPXRoaXMuZ2V0SW5uZXJWYWx1ZSh0LHRoaXMubWluLHRoaXMubWF4KTt0aGlzLnVwZGF0ZSh7eDpvLHk6b30sdGhpcy5oYW5kbGVyMixyKSx0aGlzLnVwZGF0ZSh7eDpuLHk6bn0sdGhpcy5oYW5kbGVyMSxyKX19LHtrZXk6XCJnZXRQcmV2aWV3VmFsdWVcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dCxvPXI7cmV0dXJuKGUtMCkvKHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmlzVmVydGljYWw/XCJoZWlnaHRcIjpcIndpZHRoXCJdLTApKihvLW4pK259fSx7a2V5OlwiZ2V0SW5uZXJWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4oZS10KS8oci10KSoodGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RoaXMuaXNWZXJ0aWNhbD9cImhlaWdodFwiOlwid2lkdGhcIl0tMCkrMH19LHtrZXk6XCJqdW1wXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PXRoaXMuZ2V0SGFuZGxlclBvcyhlKTt0aGlzLmlzVmVydGljYWw/dGhpcy5kcmFnZ2luZz1NYXRoLmFicyh0LnktdGhpcy5oYW5kbGVyMS50b3ApPE1hdGguYWJzKHQueS10aGlzLmhhbmRsZXIyLnRvcCk/dGhpcy5oYW5kbGVyMTp0aGlzLmhhbmRsZXIyOnRoaXMuZHJhZ2dpbmc9TWF0aC5hYnModC54LXRoaXMuaGFuZGxlcjEubGVmdCk8TWF0aC5hYnModC54LXRoaXMuaGFuZGxlcjIubGVmdCk/dGhpcy5oYW5kbGVyMTp0aGlzLmhhbmRsZXIyLHRoaXMucmVuZGVyKGUpfX0se2tleTpcInNldFpJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9d2luZG93LmdldENvbXB1dGVkU3R5bGUmJk51bWJlcihkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuaGFuZGxlcjEsbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInotaW5kZXhcIikpfHwyMDAsdD13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSYmTnVtYmVyKGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodGhpcy5oYW5kbGVyMixudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwiei1pbmRleFwiKSl8fDIwMDtpZihlPT09dCl0aGlzLmRyYWdnaW5nLnN0eWxlW1wiei1pbmRleFwiXT1lKzE7ZWxzZXt2YXIgcj1NYXRoLm1heChlLHQpLG49TWF0aC5taW4oZSx0KTt0aGlzLmhhbmRsZXIxLnN0eWxlW1wiei1pbmRleFwiXT1uLHRoaXMuaGFuZGxlcjIuc3R5bGVbXCJ6LWluZGV4XCJdPW4sdGhpcy5kcmFnZ2luZy5zdHlsZVtcInotaW5kZXhcIl09cn19fSx7a2V5Olwic3RhcnRcIix2YWx1ZTpmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLmRyYWdnaW5nPWUudGFyZ2V0LHRoaXMuc2V0WkluZGV4KCksdGhpcy5yZW5kZXIoKX19LHtrZXk6XCJzdG9wXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5kcmFnZ2luZz1udWxsfX0se2tleTpcInJlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlcjEmJnRoaXMuaGFuZGxlcjImJnRoaXMuc2V0VmFsdWVzKHRoaXMuaGFuZGxlcjEudmFsdWUsdGhpcy5oYW5kbGVyMi52YWx1ZSl9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmdGhpcy5kcmFnZ2luZyYmdGhpcy51cGRhdGUodGhpcy5nZXRIYW5kbGVyUG9zKGUpLHRoaXMuZHJhZ2dpbmcpfX0se2tleTpcInVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9IShhcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSl8fGFyZ3VtZW50c1syXTtpZih0KXt2YXIgbj10aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz10aGlzLmlzVmVydGljYWw/XCJoZWlnaHRcIjpcIndpZHRoXCIsaT10aGlzLmlzVmVydGljYWw/XCJ5XCI6XCJ4XCIsYT10aGlzLmlzVmVydGljYWw/XCJ0b3BcIjpcImxlZnRcIjtlW2ldPDAmJihlW2ldPTApLGVbaV0+bltvXSYmKGVbaV09bltvXSksdD09PXRoaXMuaGFuZGxlcjEmJmVbaV0+PXRoaXMuaGFuZGxlcjJbYV0mJihlW2ldPXRoaXMuaGFuZGxlcjJbYV0pLHQ9PT10aGlzLmhhbmRsZXIyJiZlW2ldPD10aGlzLmhhbmRsZXIxW2FdJiYoZVtpXT10aGlzLmhhbmRsZXIxW2FdKSx0W2FdPWVbaV0sdC52YWx1ZT10aGlzLmdldFByZXZpZXdWYWx1ZShlW2ldLHRoaXMubWluLHRoaXMubWF4KSx0LnN0eWxlW2FdPWVbaV0rXCJweFwiLHRoaXMucmFuZ2Uuc3R5bGVbYV09dGhpcy5oYW5kbGVyMVthXStcInB4XCI7dmFyIGw9dGhpcy5oYW5kbGVyMlthXS10aGlzLmhhbmRsZXIxW2FdO3RoaXMucmFuZ2Uuc3R5bGVbb109KGw+PTA/bDowKStcInB4XCIsdGhpcy5jYWxsYmFjayYmciYmdGhpcy5jYWxsYmFjayh0aGlzLmhhbmRsZXIxLnZhbHVlLHRoaXMuaGFuZGxlcjIudmFsdWUpfX19LHtrZXk6XCJnZXRIYW5kbGVyUG9zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49e3g6dC50b3VjaGVzJiZ0LnRvdWNoZXMubGVuZ3RoPjA/dC50b3VjaGVzWzBdLnBhZ2VYOnQuY2xpZW50WCx5OnQudG91Y2hlcyYmdC50b3VjaGVzLmxlbmd0aD4wP3QudG91Y2hlc1swXS5wYWdlWTp0LmNsaWVudFl9LG89e3g6ci5sZWZ0LHk6ci50b3B9O3JldHVybiBlLnN1YihuLG8pfX1dLFt7a2V5Olwic3ViXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm57eDplLngtdC54LHk6ZS55LXQueX19fV0pLGV9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShyKDApKTt2YXIgaT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KSxmdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpeyhmdW5jdGlvbiBlKHQscixuKXtudWxsPT09dCYmKHQ9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO3JldHVybiBudWxsPT09aT92b2lkIDA6ZShpLHIsbil9aWYoXCJ2YWx1ZVwiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgYT1vLmdldDtyZXR1cm4gdm9pZCAwIT09YT9hLmNhbGwobik6dm9pZCAwfSkodC5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiYWRkQ29udHJvbFwiLHRoaXMpLmNhbGwodGhpcyxlKSxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImpwbGlzdC5zdGF0ZVwiLGZ1bmN0aW9uKHQpe2lmKHQuanBsaXN0U3RhdGUpe3ZhciByPU51bWJlcih0LmpwbGlzdFN0YXRlLml0ZW1zTnVtYmVyKXx8MDtlLmVsZW1lbnQuc3R5bGUuZGlzcGxheT0wPT09cj9cIlwiOlwibm9uZVwifX0sITEpfX1dKSx0fSgpO3QuZGVmYXVsdD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxvPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0ocigwKSk7dmFyIGk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpbXSxvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsOyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH0odGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUscixuLG8pKTtyZXR1cm4gaS5ncm91cD1lLGkubmFtZT1yLGkuY2xhc3NOYW1lcz1uZXcgU2V0LGkuc2VsZWN0ZWRDbGFzc05hbWU9XCJcIixpfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfSh0LG8uZGVmYXVsdCksbih0LFt7a2V5OlwiYWRkQ29udHJvbFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXM7aWYoZnVuY3Rpb24gZSh0LHIsbil7bnVsbD09PXQmJih0PUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOmUoaSxyLG4pfWlmKFwidmFsdWVcImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGE9by5nZXQ7cmV0dXJuIHZvaWQgMCE9PWE/YS5jYWxsKG4pOnZvaWQgMH0odC5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiYWRkQ29udHJvbFwiLHRoaXMpLmNhbGwodGhpcyxlKSxlLmdyb3VwQ2xhc3NOYW1lPWUuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNsYXNzXCIpfHxcIlwiLGUuc2VsZWN0ZWQ9XCJ0cnVlXCI9PT1lLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zZWxlY3RlZFwiKSxlLmlkKXt2YXIgbj10aGlzLmRlZXBMaW5rUGFyYW1zLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQua2V5PT09ZS5pZH0pO24mJihlLnNlbGVjdGVkPVwiMVwiPT09bi52YWx1ZSl9dGhpcy5jbGFzc05hbWVzLmFkZChlLmdyb3VwQ2xhc3NOYW1lKSxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHIuaGFuZGxlU2VsZWN0ZWRDb250cm9scyhlLmdyb3VwQ2xhc3NOYW1lKSxyLmhhbmRsZUNsYXNzZXMoKSx3aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlZnJlc2goci5ncm91cCl9LCExKSx0aGlzLmhhbmRsZUNsYXNzZXMoKX19LHtrZXk6XCJoYW5kbGVDbGFzc2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1qcGxpc3QtZ3JvdXA9XCInK3RoaXMuZ3JvdXArJ1wiXScpO3RoaXMucmVzZXRBbGxHcm91cHMoZSk7dmFyIHI9dGhpcy5nZXRMYXRlc3RTZWxlY3RlZENvbnRyb2woKTtyJiYodGhpcy5oYW5kbGVTZWxlY3RlZENvbnRyb2xzKHIuZ3JvdXBDbGFzc05hbWUpLHQuYWRkQ2xhc3NUb0dyb3VwcyhyLmdyb3VwQ2xhc3NOYW1lLGUpKX19LHtrZXk6XCJnZXRMYXRlc3RTZWxlY3RlZENvbnRyb2xcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPW51bGwsdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT10aGlzLmNvbnRyb2xzW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWU7YS5zZWxlY3RlZCYmKGU9YSl9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19cmV0dXJuIWUmJnRoaXMuY29udHJvbHMubGVuZ3RoPjAmJihlPXRoaXMuY29udHJvbHNbMF0pLGV9fSx7a2V5OlwicmVzZXRBbGxHcm91cHNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0hMCxyPSExLG49dm9pZCAwO3RyeXtmb3IodmFyIG8saT1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHQ9KG89aS5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPW8udmFsdWUsbD0hMCx1PSExLHM9dm9pZCAwO3RyeXtmb3IodmFyIGMsZj10aGlzLmNsYXNzTmFtZXNbU3ltYm9sLml0ZXJhdG9yXSgpOyEobD0oYz1mLm5leHQoKSkuZG9uZSk7bD0hMCl7dmFyIGQ9Yy52YWx1ZTthLmNsYXNzTGlzdC5yZW1vdmUoZCl9fWNhdGNoKGUpe3U9ITAscz1lfWZpbmFsbHl7dHJ5eyFsJiZmLnJldHVybiYmZi5yZXR1cm4oKX1maW5hbGx5e2lmKHUpdGhyb3cgc319fX1jYXRjaChlKXtyPSEwLG49ZX1maW5hbGx5e3RyeXshdCYmaS5yZXR1cm4mJmkucmV0dXJuKCl9ZmluYWxseXtpZihyKXRocm93IG59fX19LHtrZXk6XCJoYW5kbGVTZWxlY3RlZENvbnRyb2xzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBvLGk9dGhpcy5jb250cm9sc1tTeW1ib2wuaXRlcmF0b3JdKCk7ISh0PShvPWkubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vLnZhbHVlO2EuZ3JvdXBDbGFzc05hbWU9PT1lPyhhLnNlbGVjdGVkPSEwLGEuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwianBsaXN0LXNlbGVjdGVkXCIpKTooYS5zZWxlY3RlZD0hMSxhLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImpwbGlzdC1zZWxlY3RlZFwiKSl9fWNhdGNoKGUpe3I9ITAsbj1lfWZpbmFsbHl7dHJ5eyF0JiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgbn19fX0se2tleTpcImdldERlZXBMaW5rXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbnRyb2xzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD9lLnNlbGVjdGVkP2UuaWQrXCI9MVwiOmUuaWQrXCI9MFwiOlwiXCJ9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIiE9PWV9KTtyZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGUpKS5qb2luKFwiJlwiKX19XSxbe2tleTpcImFkZENsYXNzVG9Hcm91cHNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPSEwLG49ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgaSxhPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0oaT1hLm5leHQoKSkuZG9uZSk7cj0hMCl7aS52YWx1ZS5jbGFzc0xpc3QuYWRkKGUpfX1jYXRjaChlKXtuPSEwLG89ZX1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihuKXRocm93IG99fX19XSksdH0oKTt0LmRlZmF1bHQ9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCksbz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KHIoMCkpO3ZhciBpPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLGZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9KHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9KHQsby5kZWZhdWx0KSxuKHQsW3trZXk6XCJhZGRDb250cm9sXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHI9dGhpczsoZnVuY3Rpb24gZSh0LHIsbil7bnVsbD09PXQmJih0PUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOmUoaSxyLG4pfWlmKFwidmFsdWVcImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGE9by5nZXQ7cmV0dXJuIHZvaWQgMCE9PWE/YS5jYWxsKG4pOnZvaWQgMH0pKHQucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImFkZENvbnRyb2xcIix0aGlzKS5jYWxsKHRoaXMsZSksZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx3aW5kb3cuanBsaXN0JiZ3aW5kb3cuanBsaXN0LnJlc2V0Q29udHJvbHMoci5ncm91cCl9LCExKX19XSksdH0oKTt0LmRlZmF1bHQ9aX0sZnVuY3Rpb24oZSx0KXt9LCwsLCxmdW5jdGlvbihlLHQpe31dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpwbGlzdC5taW4uanMubWFwIiwiLyoqIVxyXG5BTkRSRUFTIEhBTkRMRUJBUlNcclxuIEBsaWNlbnNlXHJcbiBoYW5kbGViYXJzIHY0LjAuMTBcclxuXHJcbkNvcHlyaWdodCAoQykgMjAxMS0yMDE2IGJ5IFllaHVkYSBLYXR6XHJcblxyXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcblRIRSBTT0ZUV0FSRS5cclxuXHJcbiovXHJcbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XHJcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXHJcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xyXG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxyXG5cdFx0ZXhwb3J0c1tcIkhhbmRsZWJhcnNcIl0gPSBmYWN0b3J5KCk7XHJcblx0ZWxzZVxyXG5cdFx0cm9vdFtcIkhhbmRsZWJhcnNcIl0gPSBmYWN0b3J5KCk7XHJcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xyXG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcCBBTkRSRUFTIEhBTkRMRUJBUlNcclxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXHJcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcclxuXHJcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cclxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XHJcblxyXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXHJcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XHJcblxyXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcclxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcclxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXHJcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxyXG4vKioqKioqLyBcdFx0fTtcclxuXHJcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cclxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xyXG5cclxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcclxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xyXG5cclxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXHJcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XHJcbi8qKioqKiovIFx0fVxyXG5cclxuXHJcbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xyXG5cclxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XHJcblxyXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcclxuXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbi8qKioqKiovIH0pXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKioqKiovIChbXHJcbi8qIDAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzUnVudGltZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzUnVudGltZSk7XHJcblxyXG5cdC8vIENvbXBpbGVyIGltcG9ydHNcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVyQXN0KTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XHJcblxyXG5cdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XHJcblxyXG5cdHZhciBfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNOb0NvbmZsaWN0KTtcclxuXHJcblx0dmFyIF9jcmVhdGUgPSBfaGFuZGxlYmFyc1J1bnRpbWUyWydkZWZhdWx0J10uY3JlYXRlO1xyXG5cdGZ1bmN0aW9uIGNyZWF0ZSgpIHtcclxuXHQgIHZhciBoYiA9IF9jcmVhdGUoKTtcclxuXHJcblx0ICBoYi5jb21waWxlID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XHJcblx0ICAgIHJldHVybiBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xyXG5cdCAgfTtcclxuXHQgIGhiLnByZWNvbXBpbGUgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcclxuXHQgICAgcmV0dXJuIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5wcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XHJcblx0ICB9O1xyXG5cclxuXHQgIGhiLkFTVCA9IF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyWydkZWZhdWx0J107XHJcblx0ICBoYi5Db21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5Db21waWxlcjtcclxuXHQgIGhiLkphdmFTY3JpcHRDb21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyWydkZWZhdWx0J107XHJcblx0ICBoYi5QYXJzZXIgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZS5wYXJzZXI7XHJcblx0ICBoYi5wYXJzZSA9IF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlLnBhcnNlO1xyXG5cclxuXHQgIHJldHVybiBoYjtcclxuXHR9XHJcblxyXG5cdHZhciBpbnN0ID0gY3JlYXRlKCk7XHJcblx0aW5zdC5jcmVhdGUgPSBjcmVhdGU7XHJcblxyXG5cdF9oYW5kbGViYXJzTm9Db25mbGljdDJbJ2RlZmF1bHQnXShpbnN0KTtcclxuXHJcblx0aW5zdC5WaXNpdG9yID0gX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IyWydkZWZhdWx0J107XHJcblxyXG5cdGluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XHJcblxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHQgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XHJcblx0ICAgIFwiZGVmYXVsdFwiOiBvYmpcclxuXHQgIH07XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpWydkZWZhdWx0J107XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNCYXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuXHJcblx0dmFyIGJhc2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc0Jhc2UpO1xyXG5cclxuXHQvLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXHJcblx0Ly8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzU2FmZVN0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNTYWZlU3RyaW5nKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNFeGNlcHRpb24pO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzVXRpbHMpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XHJcblxyXG5cdHZhciBydW50aW1lID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNSdW50aW1lKTtcclxuXHJcblx0dmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xyXG5cclxuXHR2YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNOb0NvbmZsaWN0KTtcclxuXHJcblx0Ly8gRm9yIGNvbXBhdGliaWxpdHkgYW5kIHVzYWdlIG91dHNpZGUgb2YgbW9kdWxlIHN5c3RlbXMsIG1ha2UgdGhlIEhhbmRsZWJhcnMgb2JqZWN0IGEgbmFtZXNwYWNlXHJcblx0ZnVuY3Rpb24gY3JlYXRlKCkge1xyXG5cdCAgdmFyIGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XHJcblxyXG5cdCAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcclxuXHQgIGhiLlNhZmVTdHJpbmcgPSBfaGFuZGxlYmFyc1NhZmVTdHJpbmcyWydkZWZhdWx0J107XHJcblx0ICBoYi5FeGNlcHRpb24gPSBfaGFuZGxlYmFyc0V4Y2VwdGlvbjJbJ2RlZmF1bHQnXTtcclxuXHQgIGhiLlV0aWxzID0gVXRpbHM7XHJcblx0ICBoYi5lc2NhcGVFeHByZXNzaW9uID0gVXRpbHMuZXNjYXBlRXhwcmVzc2lvbjtcclxuXHJcblx0ICBoYi5WTSA9IHJ1bnRpbWU7XHJcblx0ICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChzcGVjKSB7XHJcblx0ICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcclxuXHQgIH07XHJcblxyXG5cdCAgcmV0dXJuIGhiO1xyXG5cdH1cclxuXHJcblx0dmFyIGluc3QgPSBjcmVhdGUoKTtcclxuXHRpbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcclxuXHJcblx0X2hhbmRsZWJhcnNOb0NvbmZsaWN0MlsnZGVmYXVsdCddKGluc3QpO1xyXG5cclxuXHRpbnN0WydkZWZhdWx0J10gPSBpbnN0O1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBpbnN0O1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAob2JqKSB7XHJcblx0ICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XHJcblx0ICAgIHJldHVybiBvYmo7XHJcblx0ICB9IGVsc2Uge1xyXG5cdCAgICB2YXIgbmV3T2JqID0ge307XHJcblxyXG5cdCAgICBpZiAob2JqICE9IG51bGwpIHtcclxuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcblx0ICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XHJcblx0ICAgIHJldHVybiBuZXdPYmo7XHJcblx0ICB9XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHRleHBvcnRzLkhhbmRsZWJhcnNFbnZpcm9ubWVudCA9IEhhbmRsZWJhcnNFbnZpcm9ubWVudDtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0dmFyIF9oZWxwZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcblxyXG5cdHZhciBfZGVjb3JhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xyXG5cclxuXHR2YXIgX2xvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xyXG5cclxuXHR2YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xyXG5cclxuXHR2YXIgVkVSU0lPTiA9ICc0LjAuMTAnO1xyXG5cdGV4cG9ydHMuVkVSU0lPTiA9IFZFUlNJT047XHJcblx0dmFyIENPTVBJTEVSX1JFVklTSU9OID0gNztcclxuXHJcblx0ZXhwb3J0cy5DT01QSUxFUl9SRVZJU0lPTiA9IENPTVBJTEVSX1JFVklTSU9OO1xyXG5cdHZhciBSRVZJU0lPTl9DSEFOR0VTID0ge1xyXG5cdCAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcclxuXHQgIDI6ICc9PSAxLjAuMC1yYy4zJyxcclxuXHQgIDM6ICc9PSAxLjAuMC1yYy40JyxcclxuXHQgIDQ6ICc9PSAxLngueCcsXHJcblx0ICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXHJcblx0ICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcclxuXHQgIDc6ICc+PSA0LjAuMCdcclxuXHR9O1xyXG5cclxuXHRleHBvcnRzLlJFVklTSU9OX0NIQU5HRVMgPSBSRVZJU0lPTl9DSEFOR0VTO1xyXG5cdHZhciBvYmplY3RUeXBlID0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcblxyXG5cdGZ1bmN0aW9uIEhhbmRsZWJhcnNFbnZpcm9ubWVudChoZWxwZXJzLCBwYXJ0aWFscywgZGVjb3JhdG9ycykge1xyXG5cdCAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcclxuXHQgIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcclxuXHQgIHRoaXMuZGVjb3JhdG9ycyA9IGRlY29yYXRvcnMgfHwge307XHJcblxyXG5cdCAgX2hlbHBlcnMucmVnaXN0ZXJEZWZhdWx0SGVscGVycyh0aGlzKTtcclxuXHQgIF9kZWNvcmF0b3JzLnJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XHJcblx0fVxyXG5cclxuXHRIYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xyXG5cdCAgY29uc3RydWN0b3I6IEhhbmRsZWJhcnNFbnZpcm9ubWVudCxcclxuXHJcblx0ICBsb2dnZXI6IF9sb2dnZXIyWydkZWZhdWx0J10sXHJcblx0ICBsb2c6IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nLFxyXG5cclxuXHQgIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiByZWdpc3RlckhlbHBlcihuYW1lLCBmbikge1xyXG5cdCAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcclxuXHQgICAgICBpZiAoZm4pIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gdW5yZWdpc3RlckhlbHBlcihuYW1lKSB7XHJcblx0ICAgIGRlbGV0ZSB0aGlzLmhlbHBlcnNbbmFtZV07XHJcblx0ICB9LFxyXG5cclxuXHQgIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gcmVnaXN0ZXJQYXJ0aWFsKG5hbWUsIHBhcnRpYWwpIHtcclxuXHQgICAgaWYgKF91dGlscy50b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XHJcblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLnBhcnRpYWxzLCBuYW1lKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0ICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJyArIG5hbWUgKyAnXCIgYXMgdW5kZWZpbmVkJyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQYXJ0aWFsKG5hbWUpIHtcclxuXHQgICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XHJcblx0ICB9LFxyXG5cclxuXHQgIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihuYW1lLCBmbikge1xyXG5cdCAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcclxuXHQgICAgICBpZiAoZm4pIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgX3V0aWxzLmV4dGVuZCh0aGlzLmRlY29yYXRvcnMsIG5hbWUpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gdW5yZWdpc3RlckRlY29yYXRvcihuYW1lKSB7XHJcblx0ICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XHJcblx0ICB9XHJcblx0fTtcclxuXHJcblx0dmFyIGxvZyA9IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nO1xyXG5cclxuXHRleHBvcnRzLmxvZyA9IGxvZztcclxuXHRleHBvcnRzLmNyZWF0ZUZyYW1lID0gX3V0aWxzLmNyZWF0ZUZyYW1lO1xyXG5cdGV4cG9ydHMubG9nZ2VyID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA1ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xyXG5cdGV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XHJcblx0ZXhwb3J0cy5lc2NhcGVFeHByZXNzaW9uID0gZXNjYXBlRXhwcmVzc2lvbjtcclxuXHRleHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xyXG5cdGV4cG9ydHMuY3JlYXRlRnJhbWUgPSBjcmVhdGVGcmFtZTtcclxuXHRleHBvcnRzLmJsb2NrUGFyYW1zID0gYmxvY2tQYXJhbXM7XHJcblx0ZXhwb3J0cy5hcHBlbmRDb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoO1xyXG5cdHZhciBlc2NhcGUgPSB7XHJcblx0ICAnJic6ICcmYW1wOycsXHJcblx0ICAnPCc6ICcmbHQ7JyxcclxuXHQgICc+JzogJyZndDsnLFxyXG5cdCAgJ1wiJzogJyZxdW90OycsXHJcblx0ICBcIidcIjogJyYjeDI3OycsXHJcblx0ICAnYCc6ICcmI3g2MDsnLFxyXG5cdCAgJz0nOiAnJiN4M0Q7J1xyXG5cdH07XHJcblxyXG5cdHZhciBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXHJcblx0ICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xyXG5cclxuXHRmdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xyXG5cdCAgcmV0dXJuIGVzY2FwZVtjaHJdO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZXh0ZW5kKG9iaiAvKiAsIC4uLnNvdXJjZSAqLykge1xyXG5cdCAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xyXG5cdCAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XHJcblx0ICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHJldHVybiBvYmo7XHJcblx0fVxyXG5cclxuXHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG5cclxuXHRleHBvcnRzLnRvU3RyaW5nID0gdG9TdHJpbmc7XHJcblx0Ly8gU291cmNlZCBmcm9tIGxvZGFzaFxyXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcclxuXHQvKiBlc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlICovXHJcblx0dmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XHJcblx0ICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xyXG5cdH07XHJcblx0Ly8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXHJcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHRpZiAoaXNGdW5jdGlvbigveC8pKSB7XHJcblx0ICBleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XHJcblx0ICB9O1xyXG5cdH1cclxuXHRleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xyXG5cclxuXHQvKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cclxuXHJcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHR2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcclxuXHQvLyBPbGRlciBJRSB2ZXJzaW9ucyBkbyBub3QgZGlyZWN0bHkgc3VwcG9ydCBpbmRleE9mIHNvIHdlIG11c3QgaW1wbGVtZW50IG91ciBvd24sIHNhZGx5LlxyXG5cclxuXHRmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xyXG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcclxuXHQgICAgICByZXR1cm4gaTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdCAgcmV0dXJuIC0xO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcclxuXHQgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xyXG5cdCAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXHJcblx0ICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xyXG5cdCAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XHJcblx0ICAgIH0gZWxzZSBpZiAoc3RyaW5nID09IG51bGwpIHtcclxuXHQgICAgICByZXR1cm4gJyc7XHJcblx0ICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xyXG5cdCAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXHJcblx0ICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxyXG5cdCAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cclxuXHQgICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcclxuXHQgICAgcmV0dXJuIHN0cmluZztcclxuXHQgIH1cclxuXHQgIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XHJcblx0ICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9IGVsc2Uge1xyXG5cdCAgICByZXR1cm4gZmFsc2U7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcclxuXHQgIHZhciBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcclxuXHQgIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XHJcblx0ICByZXR1cm4gZnJhbWU7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBibG9ja1BhcmFtcyhwYXJhbXMsIGlkcykge1xyXG5cdCAgcGFyYW1zLnBhdGggPSBpZHM7XHJcblx0ICByZXR1cm4gcGFyYW1zO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XHJcblx0ICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9PYmplY3QkZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBlcnJvclByb3BzID0gWydkZXNjcmlwdGlvbicsICdmaWxlTmFtZScsICdsaW5lTnVtYmVyJywgJ21lc3NhZ2UnLCAnbmFtZScsICdudW1iZXInLCAnc3RhY2snXTtcclxuXHJcblx0ZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcclxuXHQgIHZhciBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxyXG5cdCAgICAgIGxpbmUgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgY29sdW1uID0gdW5kZWZpbmVkO1xyXG5cdCAgaWYgKGxvYykge1xyXG5cdCAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XHJcblx0ICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XHJcblxyXG5cdCAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcclxuXHQgIH1cclxuXHJcblx0ICB2YXIgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XHJcblxyXG5cdCAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXHJcblx0ICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBlcnJvclByb3BzLmxlbmd0aDsgaWR4KyspIHtcclxuXHQgICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XHJcblx0ICB9XHJcblxyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuXHQgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG5cdCAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xyXG5cdCAgfVxyXG5cclxuXHQgIHRyeSB7XHJcblx0ICAgIGlmIChsb2MpIHtcclxuXHQgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xyXG5cclxuXHQgICAgICAvLyBXb3JrIGFyb3VuZCBpc3N1ZSB1bmRlciBzYWZhcmkgd2hlcmUgd2UgY2FuJ3QgZGlyZWN0bHkgc2V0IHRoZSBjb2x1bW4gdmFsdWVcclxuXHQgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgICAgIGlmIChfT2JqZWN0JGRlZmluZVByb3BlcnR5KSB7XHJcblx0ICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcclxuXHQgICAgICAgICAgdmFsdWU6IGNvbHVtbixcclxuXHQgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfSBjYXRjaCAobm9wKSB7XHJcblx0ICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cclxuXHQgIH1cclxuXHR9XHJcblxyXG5cdEV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gRXhjZXB0aW9uO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oOCksIF9fZXNNb2R1bGU6IHRydWUgfTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA4ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0dmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7XHJcblx0ICByZXR1cm4gJC5zZXREZXNjKGl0LCBrZXksIGRlc2MpO1xyXG5cdH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogOSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdHZhciAkT2JqZWN0ID0gT2JqZWN0O1xyXG5cdG1vZHVsZS5leHBvcnRzID0ge1xyXG5cdCAgY3JlYXRlOiAgICAgJE9iamVjdC5jcmVhdGUsXHJcblx0ICBnZXRQcm90bzogICAkT2JqZWN0LmdldFByb3RvdHlwZU9mLFxyXG5cdCAgaXNFbnVtOiAgICAge30ucHJvcGVydHlJc0VudW1lcmFibGUsXHJcblx0ICBnZXREZXNjOiAgICAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcclxuXHQgIHNldERlc2M6ICAgICRPYmplY3QuZGVmaW5lUHJvcGVydHksXHJcblx0ICBzZXREZXNjczogICAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXHJcblx0ICBnZXRLZXlzOiAgICAkT2JqZWN0LmtleXMsXHJcblx0ICBnZXROYW1lczogICAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXHJcblx0ICBnZXRTeW1ib2xzOiAkT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcclxuXHQgIGVhY2g6ICAgICAgIFtdLmZvckVhY2hcclxuXHR9O1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDEwICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHRleHBvcnRzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMgPSByZWdpc3RlckRlZmF1bHRIZWxwZXJzO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcclxuXHJcblx0dmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNFYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XHJcblxyXG5cdHZhciBfaGVscGVyc0VhY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0VhY2gpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNIZWxwZXJNaXNzaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XHJcblxyXG5cdHZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc0hlbHBlck1pc3NpbmcpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNJZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNJZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzSWYpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNMb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcclxuXHJcblx0dmFyIF9oZWxwZXJzTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb2cpO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNMb29rdXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcclxuXHJcblx0dmFyIF9oZWxwZXJzTG9va3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb29rdXApO1xyXG5cclxuXHR2YXIgX2hlbHBlcnNXaXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XHJcblxyXG5cdHZhciBfaGVscGVyc1dpdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc1dpdGgpO1xyXG5cclxuXHRmdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XHJcblx0ICBfaGVscGVyc0Jsb2NrSGVscGVyTWlzc2luZzJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XHJcblx0ICBfaGVscGVyc0VhY2gyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcclxuXHQgIF9oZWxwZXJzSWYyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNMb2cyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNMb29rdXAyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xyXG5cdCAgX2hlbHBlcnNXaXRoMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTEgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xyXG5cdCAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcclxuXHQgICAgICAgIGZuID0gb3B0aW9ucy5mbjtcclxuXHJcblx0ICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XHJcblx0ICAgICAgcmV0dXJuIGZuKHRoaXMpO1xyXG5cdCAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xyXG5cdCAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xyXG5cdCAgICB9IGVsc2UgaWYgKF91dGlscy5pc0FycmF5KGNvbnRleHQpKSB7XHJcblx0ICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XHJcblx0ICAgICAgICAgIG9wdGlvbnMuaWRzID0gW29wdGlvbnMubmFtZV07XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcclxuXHQgICAgICAgIHZhciBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5uYW1lKTtcclxuXHQgICAgICAgIG9wdGlvbnMgPSB7IGRhdGE6IGRhdGEgfTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTIgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdlYWNoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcclxuXHQgICAgaWYgKCFvcHRpb25zKSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgZm4gPSBvcHRpb25zLmZuLFxyXG5cdCAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcclxuXHQgICAgICAgIGkgPSAwLFxyXG5cdCAgICAgICAgcmV0ID0gJycsXHJcblx0ICAgICAgICBkYXRhID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgY29udGV4dFBhdGggPSB1bmRlZmluZWQ7XHJcblxyXG5cdCAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XHJcblx0ICAgICAgY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xyXG5cdCAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChvcHRpb25zLmRhdGEpIHtcclxuXHQgICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGV4ZWNJdGVyYXRpb24oZmllbGQsIGluZGV4LCBsYXN0KSB7XHJcblx0ICAgICAgaWYgKGRhdGEpIHtcclxuXHQgICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XHJcblx0ICAgICAgICBkYXRhLmluZGV4ID0gaW5kZXg7XHJcblx0ICAgICAgICBkYXRhLmZpcnN0ID0gaW5kZXggPT09IDA7XHJcblx0ICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XHJcblxyXG5cdCAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XHJcblx0ICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGZpZWxkO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcclxuXHQgICAgICAgIGRhdGE6IGRhdGEsXHJcblx0ICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLCBbY29udGV4dFBhdGggKyBmaWVsZCwgbnVsbF0pXHJcblx0ICAgICAgfSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xyXG5cdCAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xyXG5cdCAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcblx0ICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcclxuXHQgICAgICAgICAgICBleGVjSXRlcmF0aW9uKGksIGksIGkgPT09IGNvbnRleHQubGVuZ3RoIC0gMSk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgdmFyIHByaW9yS2V5ID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBjb250ZXh0KSB7XHJcblx0ICAgICAgICAgIGlmIChjb250ZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcclxuXHQgICAgICAgICAgICAvLyBXZSdyZSBydW5uaW5nIHRoZSBpdGVyYXRpb25zIG9uZSBzdGVwIG91dCBvZiBzeW5jIHNvIHdlIGNhbiBkZXRlY3RcclxuXHQgICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXHJcblx0ICAgICAgICAgICAgLy8gYW4gaXRlcm1lZGlhdGUga2V5cyBhcnJheS5cclxuXHQgICAgICAgICAgICBpZiAocHJpb3JLZXkgIT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBwcmlvcktleSA9IGtleTtcclxuXHQgICAgICAgICAgICBpKys7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmIChpID09PSAwKSB7XHJcblx0ICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0pO1xyXG5cdH07XHJcblxyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDEzICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdoZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKCkgLyogW2FyZ3MsIF1vcHRpb25zICove1xyXG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG5cdCAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxyXG5cdCAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ01pc3NpbmcgaGVscGVyOiBcIicgKyBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdLm5hbWUgKyAnXCInKTtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTQgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xyXG5cdCAgICBpZiAoX3V0aWxzLmlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XHJcblx0ICAgICAgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHJlbmRlciB0aGUgcG9zaXRpdmUgcGF0aCBpZiB0aGUgdmFsdWUgaXMgdHJ1dGh5IGFuZCBub3QgZW1wdHkuXHJcblx0ICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXHJcblx0ICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXHJcblx0ICAgIGlmICghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCB8fCBfdXRpbHMuaXNFbXB0eShjb25kaXRpb25hbCkpIHtcclxuXHQgICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xyXG5cdCAgICB9XHJcblx0ICB9KTtcclxuXHJcblx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XHJcblx0ICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHsgZm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNoIH0pO1xyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTUgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG5cdCAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uICgpIC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi97XHJcblx0ICAgIHZhciBhcmdzID0gW3VuZGVmaW5lZF0sXHJcblx0ICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcclxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcblx0ICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBsZXZlbCA9IDE7XHJcblx0ICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xyXG5cdCAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xyXG5cdCAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGEubGV2ZWwgIT0gbnVsbCkge1xyXG5cdCAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xyXG5cdCAgICB9XHJcblx0ICAgIGFyZ3NbMF0gPSBsZXZlbDtcclxuXHJcblx0ICAgIGluc3RhbmNlLmxvZy5hcHBseShpbnN0YW5jZSwgYXJncyk7XHJcblx0ICB9KTtcclxuXHR9O1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAxNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcblx0ICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24gKG9iaiwgZmllbGQpIHtcclxuXHQgICAgcmV0dXJuIG9iaiAmJiBvYmpbZmllbGRdO1xyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcclxuXHQgICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbnRleHQpKSB7XHJcblx0ICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcclxuXHJcblx0ICAgIGlmICghX3V0aWxzLmlzRW1wdHkoY29udGV4dCkpIHtcclxuXHQgICAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcclxuXHQgICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XHJcblx0ICAgICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcclxuXHQgICAgICAgIGRhdGE6IGRhdGEsXHJcblx0ICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXHJcblx0ICAgICAgfSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcblx0fTtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTggKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyA9IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnM7XHJcblxyXG5cdHZhciBfZGVjb3JhdG9yc0lubGluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xyXG5cclxuXHR2YXIgX2RlY29yYXRvcnNJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjb3JhdG9yc0lubGluZSk7XHJcblxyXG5cdGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcclxuXHQgIF9kZWNvcmF0b3JzSW5saW5lMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMTkgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHQgIGluc3RhbmNlLnJlZ2lzdGVyRGVjb3JhdG9yKCdpbmxpbmUnLCBmdW5jdGlvbiAoZm4sIHByb3BzLCBjb250YWluZXIsIG9wdGlvbnMpIHtcclxuXHQgICAgdmFyIHJldCA9IGZuO1xyXG5cdCAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XHJcblx0ICAgICAgcHJvcHMucGFydGlhbHMgPSB7fTtcclxuXHQgICAgICByZXQgPSBmdW5jdGlvbiAoY29udGV4dCwgb3B0aW9ucykge1xyXG5cdCAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXHJcblx0ICAgICAgICB2YXIgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XHJcblx0ICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBfdXRpbHMuZXh0ZW5kKHt9LCBvcmlnaW5hbCwgcHJvcHMucGFydGlhbHMpO1xyXG5cdCAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3JpZ2luYWw7XHJcblx0ICAgICAgICByZXR1cm4gcmV0O1xyXG5cdCAgICAgIH07XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHByb3BzLnBhcnRpYWxzW29wdGlvbnMuYXJnc1swXV0gPSBvcHRpb25zLmZuO1xyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0pO1xyXG5cdH07XHJcblxyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDIwICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHJcblx0dmFyIGxvZ2dlciA9IHtcclxuXHQgIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcclxuXHQgIGxldmVsOiAnaW5mbycsXHJcblxyXG5cdCAgLy8gTWFwcyBhIGdpdmVuIGxldmVsIHZhbHVlIHRvIHRoZSBgbWV0aG9kTWFwYCBpbmRleGVzIGFib3ZlLlxyXG5cdCAgbG9va3VwTGV2ZWw6IGZ1bmN0aW9uIGxvb2t1cExldmVsKGxldmVsKSB7XHJcblx0ICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XHJcblx0ICAgICAgdmFyIGxldmVsTWFwID0gX3V0aWxzLmluZGV4T2YobG9nZ2VyLm1ldGhvZE1hcCwgbGV2ZWwudG9Mb3dlckNhc2UoKSk7XHJcblx0ICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcclxuXHQgICAgICAgIGxldmVsID0gbGV2ZWxNYXA7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiBsZXZlbDtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcclxuXHQgIGxvZzogZnVuY3Rpb24gbG9nKGxldmVsKSB7XHJcblx0ICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcclxuXHJcblx0ICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWwpIHtcclxuXHQgICAgICB2YXIgbWV0aG9kID0gbG9nZ2VyLm1ldGhvZE1hcFtsZXZlbF07XHJcblx0ICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcclxuXHQgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG5cdCAgICAgICAgbWV0aG9kID0gJ2xvZyc7XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuXHQgICAgICAgIG1lc3NhZ2VbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgY29uc29sZVttZXRob2RdLmFwcGx5KGNvbnNvbGUsIG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdH07XHJcblxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGxvZ2dlcjtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyMSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdC8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGZ1bmN0aW9uIFNhZmVTdHJpbmcoc3RyaW5nKSB7XHJcblx0ICB0aGlzLnN0cmluZyA9IHN0cmluZztcclxuXHR9XHJcblxyXG5cdFNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgcmV0dXJuICcnICsgdGhpcy5zdHJpbmc7XHJcblx0fTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU2FmZVN0cmluZztcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyMiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9PYmplY3Qkc2VhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpWydkZWZhdWx0J107XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMylbJ2RlZmF1bHQnXTtcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblx0ZXhwb3J0cy5jaGVja1JldmlzaW9uID0gY2hlY2tSZXZpc2lvbjtcclxuXHRleHBvcnRzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcblx0ZXhwb3J0cy53cmFwUHJvZ3JhbSA9IHdyYXBQcm9ncmFtO1xyXG5cdGV4cG9ydHMucmVzb2x2ZVBhcnRpYWwgPSByZXNvbHZlUGFydGlhbDtcclxuXHRleHBvcnRzLmludm9rZVBhcnRpYWwgPSBpbnZva2VQYXJ0aWFsO1xyXG5cdGV4cG9ydHMubm9vcCA9IG5vb3A7XHJcblxyXG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5cclxuXHR2YXIgVXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfdXRpbHMpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XHJcblxyXG5cdHZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcblxyXG5cdGZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XHJcblx0ICB2YXIgY29tcGlsZXJSZXZpc2lvbiA9IGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0gfHwgMSxcclxuXHQgICAgICBjdXJyZW50UmV2aXNpb24gPSBfYmFzZS5DT01QSUxFUl9SRVZJU0lPTjtcclxuXHJcblx0ICBpZiAoY29tcGlsZXJSZXZpc2lvbiAhPT0gY3VycmVudFJldmlzaW9uKSB7XHJcblx0ICAgIGlmIChjb21waWxlclJldmlzaW9uIDwgY3VycmVudFJldmlzaW9uKSB7XHJcblx0ICAgICAgdmFyIHJ1bnRpbWVWZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbY3VycmVudFJldmlzaW9uXSxcclxuXHQgICAgICAgICAgY29tcGlsZXJWZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbY29tcGlsZXJSZXZpc2lvbl07XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHByZWNvbXBpbGVyIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIHJ1bnRpbWVWZXJzaW9ucyArICcpIG9yIGRvd25ncmFkZSB5b3VyIHJ1bnRpbWUgdG8gYW4gb2xkZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVyVmVyc2lvbnMgKyAnKS4nKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYSBuZXdlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICsgJ1BsZWFzZSB1cGRhdGUgeW91ciBydW50aW1lIHRvIGEgbmV3ZXIgdmVyc2lvbiAoJyArIGNvbXBpbGVySW5mb1sxXSArICcpLicpO1xyXG5cdCAgICB9XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgIGlmICghZW52KSB7XHJcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcclxuXHQgIH1cclxuXHQgIGlmICghdGVtcGxhdGVTcGVjIHx8ICF0ZW1wbGF0ZVNwZWMubWFpbikge1xyXG5cdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0ZW1wbGF0ZSBvYmplY3Q6ICcgKyB0eXBlb2YgdGVtcGxhdGVTcGVjKTtcclxuXHQgIH1cclxuXHJcblx0ICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xyXG5cclxuXHQgIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XHJcblx0ICAvLyBmb3IgZXh0ZXJuYWwgdXNlcnMgdG8gb3ZlcnJpZGUgdGhlc2UgYXMgcHN1ZWRvLXN1cHBvcnRlZCBBUElzLlxyXG5cdCAgZW52LlZNLmNoZWNrUmV2aXNpb24odGVtcGxhdGVTcGVjLmNvbXBpbGVyKTtcclxuXHJcblx0ICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XHJcblx0ICAgIGlmIChvcHRpb25zLmhhc2gpIHtcclxuXHQgICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xyXG5cdCAgICAgIGlmIChvcHRpb25zLmlkcykge1xyXG5cdCAgICAgICAgb3B0aW9ucy5pZHNbMF0gPSB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgICB2YXIgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcclxuXHJcblx0ICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xyXG5cdCAgICAgIG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHRlbXBsYXRlU3BlYy5jb21waWxlck9wdGlvbnMsIGVudik7XHJcblx0ICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xyXG5cdCAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xyXG5cdCAgICAgICAgdmFyIGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcXG4nKTtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcclxuXHQgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmVzdWx0ID0gbGluZXMuam9pbignXFxuJyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHJldHVybiByZXN1bHQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIC8vIEp1c3QgYWRkIHdhdGVyXHJcblx0ICB2YXIgY29udGFpbmVyID0ge1xyXG5cdCAgICBzdHJpY3Q6IGZ1bmN0aW9uIHN0cmljdChvYmosIG5hbWUpIHtcclxuXHQgICAgICBpZiAoIShuYW1lIGluIG9iaikpIHtcclxuXHQgICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdcIicgKyBuYW1lICsgJ1wiIG5vdCBkZWZpbmVkIGluICcgKyBvYmopO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICByZXR1cm4gb2JqW25hbWVdO1xyXG5cdCAgICB9LFxyXG5cdCAgICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChkZXB0aHMsIG5hbWUpIHtcclxuXHQgICAgICB2YXIgbGVuID0gZGVwdGhzLmxlbmd0aDtcclxuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XHJcblx0ICAgICAgICAgIHJldHVybiBkZXB0aHNbaV1bbmFtZV07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdCAgICB9LFxyXG5cdCAgICBsYW1iZGE6IGZ1bmN0aW9uIGxhbWJkYShjdXJyZW50LCBjb250ZXh0KSB7XHJcblx0ICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIGVzY2FwZUV4cHJlc3Npb246IFV0aWxzLmVzY2FwZUV4cHJlc3Npb24sXHJcblx0ICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxyXG5cclxuXHQgICAgZm46IGZ1bmN0aW9uIGZuKGkpIHtcclxuXHQgICAgICB2YXIgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xyXG5cdCAgICAgIHJldC5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWNbaSArICdfZCddO1xyXG5cdCAgICAgIHJldHVybiByZXQ7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICBwcm9ncmFtczogW10sXHJcblx0ICAgIHByb2dyYW06IGZ1bmN0aW9uIHByb2dyYW0oaSwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xyXG5cdCAgICAgIHZhciBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXHJcblx0ICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcclxuXHQgICAgICBpZiAoZGF0YSB8fCBkZXB0aHMgfHwgYmxvY2tQYXJhbXMgfHwgZGVjbGFyZWRCbG9ja1BhcmFtcykge1xyXG5cdCAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XHJcblx0ICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcclxuXHQgICAgICAgIHByb2dyYW1XcmFwcGVyID0gdGhpcy5wcm9ncmFtc1tpXSA9IHdyYXBQcm9ncmFtKHRoaXMsIGksIGZuKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgZGF0YTogZnVuY3Rpb24gZGF0YSh2YWx1ZSwgZGVwdGgpIHtcclxuXHQgICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xyXG5cdCAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xyXG5cdCAgICAgIH1cclxuXHQgICAgICByZXR1cm4gdmFsdWU7XHJcblx0ICAgIH0sXHJcblx0ICAgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShwYXJhbSwgY29tbW9uKSB7XHJcblx0ICAgICAgdmFyIG9iaiA9IHBhcmFtIHx8IGNvbW1vbjtcclxuXHJcblx0ICAgICAgaWYgKHBhcmFtICYmIGNvbW1vbiAmJiBwYXJhbSAhPT0gY29tbW9uKSB7XHJcblx0ICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgcmV0dXJuIG9iajtcclxuXHQgICAgfSxcclxuXHQgICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xyXG5cdCAgICBudWxsQ29udGV4dDogX09iamVjdCRzZWFsKHt9KSxcclxuXHJcblx0ICAgIG5vb3A6IGVudi5WTS5ub29wLFxyXG5cdCAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxyXG5cdCAgfTtcclxuXHJcblx0ICBmdW5jdGlvbiByZXQoY29udGV4dCkge1xyXG5cdCAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xyXG5cclxuXHQgICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7XHJcblxyXG5cdCAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xyXG5cdCAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xyXG5cdCAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcclxuXHQgICAgfVxyXG5cdCAgICB2YXIgZGVwdGhzID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcclxuXHQgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VEZXB0aHMpIHtcclxuXHQgICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcclxuXHQgICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xyXG5cdCAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBtYWluKGNvbnRleHQgLyosIG9wdGlvbnMqLykge1xyXG5cdCAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XHJcblx0ICAgIH1cclxuXHQgICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XHJcblx0ICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgfVxyXG5cdCAgcmV0LmlzVG9wID0gdHJ1ZTtcclxuXHJcblx0ICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcclxuXHQgICAgICBjb250YWluZXIuaGVscGVycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmhlbHBlcnMsIGVudi5oZWxwZXJzKTtcclxuXHJcblx0ICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XHJcblx0ICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XHJcblx0ICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5tZXJnZShvcHRpb25zLmRlY29yYXRvcnMsIGVudi5kZWNvcmF0b3JzKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBvcHRpb25zLmhlbHBlcnM7XHJcblx0ICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcclxuXHQgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHJcblx0ICByZXQuX2NoaWxkID0gZnVuY3Rpb24gKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcclxuXHQgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCAwLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcclxuXHQgIH07XHJcblx0ICByZXR1cm4gcmV0O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocykge1xyXG5cdCAgZnVuY3Rpb24gcHJvZyhjb250ZXh0KSB7XHJcblx0ICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XHJcblxyXG5cdCAgICB2YXIgY3VycmVudERlcHRocyA9IGRlcHRocztcclxuXHQgICAgaWYgKGRlcHRocyAmJiBjb250ZXh0ICE9IGRlcHRoc1swXSAmJiAhKGNvbnRleHQgPT09IGNvbnRhaW5lci5udWxsQ29udGV4dCAmJiBkZXB0aHNbMF0gPT09IG51bGwpKSB7XHJcblx0ICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIGZuKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgb3B0aW9ucy5kYXRhIHx8IGRhdGEsIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLCBjdXJyZW50RGVwdGhzKTtcclxuXHQgIH1cclxuXHJcblx0ICBwcm9nID0gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcyk7XHJcblxyXG5cdCAgcHJvZy5wcm9ncmFtID0gaTtcclxuXHQgIHByb2cuZGVwdGggPSBkZXB0aHMgPyBkZXB0aHMubGVuZ3RoIDogMDtcclxuXHQgIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XHJcblx0ICByZXR1cm4gcHJvZztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcclxuXHQgIGlmICghcGFydGlhbCkge1xyXG5cdCAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XHJcblx0ICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XHJcblx0ICAgIH1cclxuXHQgIH0gZWxzZSBpZiAoIXBhcnRpYWwuY2FsbCAmJiAhb3B0aW9ucy5uYW1lKSB7XHJcblx0ICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xyXG5cdCAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xyXG5cdCAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1twYXJ0aWFsXTtcclxuXHQgIH1cclxuXHQgIHJldHVybiBwYXJ0aWFsO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XHJcblx0ICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXHJcblx0ICB2YXIgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcclxuXHQgIG9wdGlvbnMucGFydGlhbCA9IHRydWU7XHJcblx0ICBpZiAob3B0aW9ucy5pZHMpIHtcclxuXHQgICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBwYXJ0aWFsQmxvY2sgPSB1bmRlZmluZWQ7XHJcblx0ICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XHJcblx0ICAgIChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgb3B0aW9ucy5kYXRhID0gX2Jhc2UuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcclxuXHQgICAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXHJcblx0ICAgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcclxuXHQgICAgICBwYXJ0aWFsQmxvY2sgPSBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGZ1bmN0aW9uIHBhcnRpYWxCbG9ja1dyYXBwZXIoY29udGV4dCkge1xyXG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcclxuXHJcblx0ICAgICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXHJcblx0ICAgICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cclxuXHQgICAgICAgIG9wdGlvbnMuZGF0YSA9IF9iYXNlLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XHJcblx0ICAgICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XHJcblx0ICAgICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XHJcblx0ICAgICAgfTtcclxuXHQgICAgICBpZiAoZm4ucGFydGlhbHMpIHtcclxuXHQgICAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0pKCk7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcclxuXHQgICAgcGFydGlhbCA9IHBhcnRpYWxCbG9jaztcclxuXHQgIH1cclxuXHJcblx0ICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcclxuXHQgIH0gZWxzZSBpZiAocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcblx0ICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xyXG5cdCAgfVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gbm9vcCgpIHtcclxuXHQgIHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcclxuXHQgIGlmICghZGF0YSB8fCAhKCdyb290JyBpbiBkYXRhKSkge1xyXG5cdCAgICBkYXRhID0gZGF0YSA/IF9iYXNlLmNyZWF0ZUZyYW1lKGRhdGEpIDoge307XHJcblx0ICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XHJcblx0ICB9XHJcblx0ICByZXR1cm4gZGF0YTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcclxuXHQgIGlmIChmbi5kZWNvcmF0b3IpIHtcclxuXHQgICAgdmFyIHByb3BzID0ge307XHJcblx0ICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XHJcblx0ICAgIFV0aWxzLmV4dGVuZChwcm9nLCBwcm9wcyk7XHJcblx0ICB9XHJcblx0ICByZXR1cm4gcHJvZztcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMjQpLCBfX2VzTW9kdWxlOiB0cnVlIH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjQgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzApLk9iamVjdC5zZWFsO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDI1ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0Ly8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXHJcblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XHJcblxyXG5cdF9fd2VicGFja19yZXF1aXJlX18oMjcpKCdzZWFsJywgZnVuY3Rpb24oJHNlYWwpe1xyXG5cdCAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xyXG5cdCAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwoaXQpIDogaXQ7XHJcblx0ICB9O1xyXG5cdH0pO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDI2ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XHJcblx0ICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xyXG5cdH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcclxuXHR2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpXHJcblx0ICAsIGNvcmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKVxyXG5cdCAgLCBmYWlscyAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xyXG5cdCAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxyXG5cdCAgICAsIGV4cCA9IHt9O1xyXG5cdCAgZXhwW0tFWV0gPSBleGVjKGZuKTtcclxuXHQgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcclxuXHR9O1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDI4ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0dmFyIGdsb2JhbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXHJcblx0ICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXHJcblx0ICAsIGN0eCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXHJcblx0ICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xyXG5cclxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XHJcblx0ICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxyXG5cdCAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcclxuXHQgICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXHJcblx0ICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxyXG5cdCAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcclxuXHQgICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXHJcblx0ICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcclxuXHQgICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXHJcblx0ICAgICwga2V5LCBvd24sIG91dDtcclxuXHQgIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xyXG5cdCAgZm9yKGtleSBpbiBzb3VyY2Upe1xyXG5cdCAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcclxuXHQgICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcclxuXHQgICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xyXG5cdCAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxyXG5cdCAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xyXG5cdCAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcclxuXHQgICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cclxuXHQgICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcclxuXHQgICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcclxuXHQgICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcclxuXHQgICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcclxuXHQgICAgICB2YXIgRiA9IGZ1bmN0aW9uKHBhcmFtKXtcclxuXHQgICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pO1xyXG5cdCAgICAgIH07XHJcblx0ICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xyXG5cdCAgICAgIHJldHVybiBGO1xyXG5cdCAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcclxuXHQgICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xyXG5cdCAgICBpZihJU19QUk9UTykoZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkpW2tleV0gPSBvdXQ7XHJcblx0ICB9XHJcblx0fTtcclxuXHQvLyB0eXBlIGJpdG1hcFxyXG5cdCRleHBvcnQuRiA9IDE7ICAvLyBmb3JjZWRcclxuXHQkZXhwb3J0LkcgPSAyOyAgLy8gZ2xvYmFsXHJcblx0JGV4cG9ydC5TID0gNDsgIC8vIHN0YXRpY1xyXG5cdCRleHBvcnQuUCA9IDg7ICAvLyBwcm90b1xyXG5cdCRleHBvcnQuQiA9IDE2OyAvLyBiaW5kXHJcblx0JGV4cG9ydC5XID0gMzI7IC8vIHdyYXBcclxuXHRtb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XHJcblxyXG4vKioqLyB9KSxcclxuLyogMjkgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxyXG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxyXG5cdCAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xyXG5cdGlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXHJcblxyXG4vKioqLyB9KSxcclxuLyogMzAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHR2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xyXG5cdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMxICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0Ly8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXHJcblx0dmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XHJcblx0ICBhRnVuY3Rpb24oZm4pO1xyXG5cdCAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcclxuXHQgIHN3aXRjaChsZW5ndGgpe1xyXG5cdCAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcclxuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcclxuXHQgICAgfTtcclxuXHQgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XHJcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XHJcblx0ICAgIH07XHJcblx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xyXG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xyXG5cdCAgICB9O1xyXG5cdCAgfVxyXG5cdCAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xyXG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcclxuXHQgIH07XHJcblx0fTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAzMiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XHJcblxyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xyXG5cdCAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuXHQgIHJldHVybiBpdDtcclxuXHR9O1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMzICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcclxuXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcclxuXHQgIHRyeSB7XHJcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcclxuXHQgIH0gY2F0Y2goZSl7XHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfVxyXG5cdH07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMzQgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7LyogZ2xvYmFsIHdpbmRvdyAqL1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKEhhbmRsZWJhcnMpIHtcclxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcblx0ICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93LFxyXG5cdCAgICAgICRIYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzO1xyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgIEhhbmRsZWJhcnMubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgaWYgKHJvb3QuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xyXG5cdCAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBIYW5kbGViYXJzO1xyXG5cdCAgfTtcclxuXHR9O1xyXG5cclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXHJcblxyXG4vKioqLyB9KSxcclxuLyogMzUgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblx0dmFyIEFTVCA9IHtcclxuXHQgIC8vIFB1YmxpYyBBUEkgdXNlZCB0byBldmFsdWF0ZSBkZXJpdmVkIGF0dHJpYnV0ZXMgcmVnYXJkaW5nIEFTVCBub2Rlc1xyXG5cdCAgaGVscGVyczoge1xyXG5cdCAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XHJcblx0ICAgIC8vICogaXQgaXMgYW4gZWxpZ2libGUgaGVscGVyLCBhbmRcclxuXHQgICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcclxuXHQgICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24gaGVscGVyRXhwcmVzc2lvbihub2RlKSB7XHJcblx0ICAgICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nIHx8IChub2RlLnR5cGUgPT09ICdNdXN0YWNoZVN0YXRlbWVudCcgfHwgbm9kZS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSAmJiAhIShub2RlLnBhcmFtcyAmJiBub2RlLnBhcmFtcy5sZW5ndGggfHwgbm9kZS5oYXNoKTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIHNjb3BlZElkOiBmdW5jdGlvbiBzY29wZWRJZChwYXRoKSB7XHJcblx0ICAgICAgcmV0dXJuICgvXlxcLnx0aGlzXFxiLy50ZXN0KHBhdGgub3JpZ2luYWwpXHJcblx0ICAgICAgKTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8vIGFuIElEIGlzIHNpbXBsZSBpZiBpdCBvbmx5IGhhcyBvbmUgcGFydCwgYW5kIHRoYXQgcGFydCBpcyBub3RcclxuXHQgICAgLy8gYC4uYCBvciBgdGhpc2AuXHJcblx0ICAgIHNpbXBsZUlkOiBmdW5jdGlvbiBzaW1wbGVJZChwYXRoKSB7XHJcblx0ICAgICAgcmV0dXJuIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aDtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdH07XHJcblxyXG5cdC8vIE11c3QgYmUgZXhwb3J0ZWQgYXMgYW4gb2JqZWN0IHJhdGhlciB0aGFuIHRoZSByb290IG9mIHRoZSBtb2R1bGUgYXMgdGhlIGppc29uIGxleGVyXHJcblx0Ly8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxyXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFTVDtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAzNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oMylbJ2RlZmF1bHQnXTtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHRleHBvcnRzLnBhcnNlID0gcGFyc2U7XHJcblxyXG5cdHZhciBfcGFyc2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XHJcblxyXG5cdHZhciBfcGFyc2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlcik7XHJcblxyXG5cdHZhciBfd2hpdGVzcGFjZUNvbnRyb2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcclxuXHJcblx0dmFyIF93aGl0ZXNwYWNlQ29udHJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGl0ZXNwYWNlQ29udHJvbCk7XHJcblxyXG5cdHZhciBfaGVscGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xyXG5cclxuXHR2YXIgSGVscGVycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oZWxwZXJzKTtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdGV4cG9ydHMucGFyc2VyID0gX3BhcnNlcjJbJ2RlZmF1bHQnXTtcclxuXHJcblx0dmFyIHl5ID0ge307XHJcblx0X3V0aWxzLmV4dGVuZCh5eSwgSGVscGVycyk7XHJcblxyXG5cdGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XHJcblx0ICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxyXG5cdCAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykge1xyXG5cdCAgICByZXR1cm4gaW5wdXQ7XHJcblx0ICB9XHJcblxyXG5cdCAgX3BhcnNlcjJbJ2RlZmF1bHQnXS55eSA9IHl5O1xyXG5cclxuXHQgIC8vIEFsdGVyaW5nIHRoZSBzaGFyZWQgb2JqZWN0IGhlcmUsIGJ1dCB0aGlzIGlzIG9rIGFzIHBhcnNlciBpcyBhIHN5bmMgb3BlcmF0aW9uXHJcblx0ICB5eS5sb2NJbmZvID0gZnVuY3Rpb24gKGxvY0luZm8pIHtcclxuXHQgICAgcmV0dXJuIG5ldyB5eS5Tb3VyY2VMb2NhdGlvbihvcHRpb25zICYmIG9wdGlvbnMuc3JjTmFtZSwgbG9jSW5mbyk7XHJcblx0ICB9O1xyXG5cclxuXHQgIHZhciBzdHJpcCA9IG5ldyBfd2hpdGVzcGFjZUNvbnRyb2wyWydkZWZhdWx0J10ob3B0aW9ucyk7XHJcblx0ICByZXR1cm4gc3RyaXAuYWNjZXB0KF9wYXJzZXIyWydkZWZhdWx0J10ucGFyc2UoaW5wdXQpKTtcclxuXHR9XHJcblxyXG4vKioqLyB9KSxcclxuLyogMzcgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xyXG5cclxuXHQvLyBGaWxlIGlnbm9yZWQgaW4gY292ZXJhZ2UgdGVzdHMgdmlhIHNldHRpbmcgaW4gLmlzdGFuYnVsLnltbFxyXG5cdC8qIEppc29uIGdlbmVyYXRlZCBwYXJzZXIgKi9cclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuXHR2YXIgaGFuZGxlYmFycyA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBwYXJzZXIgPSB7IHRyYWNlOiBmdW5jdGlvbiB0cmFjZSgpIHt9LFxyXG5cdCAgICAgICAgeXk6IHt9LFxyXG5cdCAgICAgICAgc3ltYm9sc186IHsgXCJlcnJvclwiOiAyLCBcInJvb3RcIjogMywgXCJwcm9ncmFtXCI6IDQsIFwiRU9GXCI6IDUsIFwicHJvZ3JhbV9yZXBldGl0aW9uMFwiOiA2LCBcInN0YXRlbWVudFwiOiA3LCBcIm11c3RhY2hlXCI6IDgsIFwiYmxvY2tcIjogOSwgXCJyYXdCbG9ja1wiOiAxMCwgXCJwYXJ0aWFsXCI6IDExLCBcInBhcnRpYWxCbG9ja1wiOiAxMiwgXCJjb250ZW50XCI6IDEzLCBcIkNPTU1FTlRcIjogMTQsIFwiQ09OVEVOVFwiOiAxNSwgXCJvcGVuUmF3QmxvY2tcIjogMTYsIFwicmF3QmxvY2tfcmVwZXRpdGlvbl9wbHVzMFwiOiAxNywgXCJFTkRfUkFXX0JMT0NLXCI6IDE4LCBcIk9QRU5fUkFXX0JMT0NLXCI6IDE5LCBcImhlbHBlck5hbWVcIjogMjAsIFwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6IDIxLCBcIm9wZW5SYXdCbG9ja19vcHRpb24wXCI6IDIyLCBcIkNMT1NFX1JBV19CTE9DS1wiOiAyMywgXCJvcGVuQmxvY2tcIjogMjQsIFwiYmxvY2tfb3B0aW9uMFwiOiAyNSwgXCJjbG9zZUJsb2NrXCI6IDI2LCBcIm9wZW5JbnZlcnNlXCI6IDI3LCBcImJsb2NrX29wdGlvbjFcIjogMjgsIFwiT1BFTl9CTE9DS1wiOiAyOSwgXCJvcGVuQmxvY2tfcmVwZXRpdGlvbjBcIjogMzAsIFwib3BlbkJsb2NrX29wdGlvbjBcIjogMzEsIFwib3BlbkJsb2NrX29wdGlvbjFcIjogMzIsIFwiQ0xPU0VcIjogMzMsIFwiT1BFTl9JTlZFUlNFXCI6IDM0LCBcIm9wZW5JbnZlcnNlX3JlcGV0aXRpb24wXCI6IDM1LCBcIm9wZW5JbnZlcnNlX29wdGlvbjBcIjogMzYsIFwib3BlbkludmVyc2Vfb3B0aW9uMVwiOiAzNywgXCJvcGVuSW52ZXJzZUNoYWluXCI6IDM4LCBcIk9QRU5fSU5WRVJTRV9DSEFJTlwiOiAzOSwgXCJvcGVuSW52ZXJzZUNoYWluX3JlcGV0aXRpb24wXCI6IDQwLCBcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMFwiOiA0MSwgXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjFcIjogNDIsIFwiaW52ZXJzZUFuZFByb2dyYW1cIjogNDMsIFwiSU5WRVJTRVwiOiA0NCwgXCJpbnZlcnNlQ2hhaW5cIjogNDUsIFwiaW52ZXJzZUNoYWluX29wdGlvbjBcIjogNDYsIFwiT1BFTl9FTkRCTE9DS1wiOiA0NywgXCJPUEVOXCI6IDQ4LCBcIm11c3RhY2hlX3JlcGV0aXRpb24wXCI6IDQ5LCBcIm11c3RhY2hlX29wdGlvbjBcIjogNTAsIFwiT1BFTl9VTkVTQ0FQRURcIjogNTEsIFwibXVzdGFjaGVfcmVwZXRpdGlvbjFcIjogNTIsIFwibXVzdGFjaGVfb3B0aW9uMVwiOiA1MywgXCJDTE9TRV9VTkVTQ0FQRURcIjogNTQsIFwiT1BFTl9QQVJUSUFMXCI6IDU1LCBcInBhcnRpYWxOYW1lXCI6IDU2LCBcInBhcnRpYWxfcmVwZXRpdGlvbjBcIjogNTcsIFwicGFydGlhbF9vcHRpb24wXCI6IDU4LCBcIm9wZW5QYXJ0aWFsQmxvY2tcIjogNTksIFwiT1BFTl9QQVJUSUFMX0JMT0NLXCI6IDYwLCBcIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjBcIjogNjEsIFwib3BlblBhcnRpYWxCbG9ja19vcHRpb24wXCI6IDYyLCBcInBhcmFtXCI6IDYzLCBcInNleHByXCI6IDY0LCBcIk9QRU5fU0VYUFJcIjogNjUsIFwic2V4cHJfcmVwZXRpdGlvbjBcIjogNjYsIFwic2V4cHJfb3B0aW9uMFwiOiA2NywgXCJDTE9TRV9TRVhQUlwiOiA2OCwgXCJoYXNoXCI6IDY5LCBcImhhc2hfcmVwZXRpdGlvbl9wbHVzMFwiOiA3MCwgXCJoYXNoU2VnbWVudFwiOiA3MSwgXCJJRFwiOiA3MiwgXCJFUVVBTFNcIjogNzMsIFwiYmxvY2tQYXJhbXNcIjogNzQsIFwiT1BFTl9CTE9DS19QQVJBTVNcIjogNzUsIFwiYmxvY2tQYXJhbXNfcmVwZXRpdGlvbl9wbHVzMFwiOiA3NiwgXCJDTE9TRV9CTE9DS19QQVJBTVNcIjogNzcsIFwicGF0aFwiOiA3OCwgXCJkYXRhTmFtZVwiOiA3OSwgXCJTVFJJTkdcIjogODAsIFwiTlVNQkVSXCI6IDgxLCBcIkJPT0xFQU5cIjogODIsIFwiVU5ERUZJTkVEXCI6IDgzLCBcIk5VTExcIjogODQsIFwiREFUQVwiOiA4NSwgXCJwYXRoU2VnbWVudHNcIjogODYsIFwiU0VQXCI6IDg3LCBcIiRhY2NlcHRcIjogMCwgXCIkZW5kXCI6IDEgfSxcclxuXHQgICAgICAgIHRlcm1pbmFsc186IHsgMjogXCJlcnJvclwiLCA1OiBcIkVPRlwiLCAxNDogXCJDT01NRU5UXCIsIDE1OiBcIkNPTlRFTlRcIiwgMTg6IFwiRU5EX1JBV19CTE9DS1wiLCAxOTogXCJPUEVOX1JBV19CTE9DS1wiLCAyMzogXCJDTE9TRV9SQVdfQkxPQ0tcIiwgMjk6IFwiT1BFTl9CTE9DS1wiLCAzMzogXCJDTE9TRVwiLCAzNDogXCJPUEVOX0lOVkVSU0VcIiwgMzk6IFwiT1BFTl9JTlZFUlNFX0NIQUlOXCIsIDQ0OiBcIklOVkVSU0VcIiwgNDc6IFwiT1BFTl9FTkRCTE9DS1wiLCA0ODogXCJPUEVOXCIsIDUxOiBcIk9QRU5fVU5FU0NBUEVEXCIsIDU0OiBcIkNMT1NFX1VORVNDQVBFRFwiLCA1NTogXCJPUEVOX1BBUlRJQUxcIiwgNjA6IFwiT1BFTl9QQVJUSUFMX0JMT0NLXCIsIDY1OiBcIk9QRU5fU0VYUFJcIiwgNjg6IFwiQ0xPU0VfU0VYUFJcIiwgNzI6IFwiSURcIiwgNzM6IFwiRVFVQUxTXCIsIDc1OiBcIk9QRU5fQkxPQ0tfUEFSQU1TXCIsIDc3OiBcIkNMT1NFX0JMT0NLX1BBUkFNU1wiLCA4MDogXCJTVFJJTkdcIiwgODE6IFwiTlVNQkVSXCIsIDgyOiBcIkJPT0xFQU5cIiwgODM6IFwiVU5ERUZJTkVEXCIsIDg0OiBcIk5VTExcIiwgODU6IFwiREFUQVwiLCA4NzogXCJTRVBcIiB9LFxyXG5cdCAgICAgICAgcHJvZHVjdGlvbnNfOiBbMCwgWzMsIDJdLCBbNCwgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzEzLCAxXSwgWzEwLCAzXSwgWzE2LCA1XSwgWzksIDRdLCBbOSwgNF0sIFsyNCwgNl0sIFsyNywgNl0sIFszOCwgNl0sIFs0MywgMl0sIFs0NSwgM10sIFs0NSwgMV0sIFsyNiwgM10sIFs4LCA1XSwgWzgsIDVdLCBbMTEsIDVdLCBbMTIsIDNdLCBbNTksIDVdLCBbNjMsIDFdLCBbNjMsIDFdLCBbNjQsIDVdLCBbNjksIDFdLCBbNzEsIDNdLCBbNzQsIDNdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbMjAsIDFdLCBbNTYsIDFdLCBbNTYsIDFdLCBbNzksIDJdLCBbNzgsIDFdLCBbODYsIDNdLCBbODYsIDFdLCBbNiwgMF0sIFs2LCAyXSwgWzE3LCAxXSwgWzE3LCAyXSwgWzIxLCAwXSwgWzIxLCAyXSwgWzIyLCAwXSwgWzIyLCAxXSwgWzI1LCAwXSwgWzI1LCAxXSwgWzI4LCAwXSwgWzI4LCAxXSwgWzMwLCAwXSwgWzMwLCAyXSwgWzMxLCAwXSwgWzMxLCAxXSwgWzMyLCAwXSwgWzMyLCAxXSwgWzM1LCAwXSwgWzM1LCAyXSwgWzM2LCAwXSwgWzM2LCAxXSwgWzM3LCAwXSwgWzM3LCAxXSwgWzQwLCAwXSwgWzQwLCAyXSwgWzQxLCAwXSwgWzQxLCAxXSwgWzQyLCAwXSwgWzQyLCAxXSwgWzQ2LCAwXSwgWzQ2LCAxXSwgWzQ5LCAwXSwgWzQ5LCAyXSwgWzUwLCAwXSwgWzUwLCAxXSwgWzUyLCAwXSwgWzUyLCAyXSwgWzUzLCAwXSwgWzUzLCAxXSwgWzU3LCAwXSwgWzU3LCAyXSwgWzU4LCAwXSwgWzU4LCAxXSwgWzYxLCAwXSwgWzYxLCAyXSwgWzYyLCAwXSwgWzYyLCAxXSwgWzY2LCAwXSwgWzY2LCAyXSwgWzY3LCAwXSwgWzY3LCAxXSwgWzcwLCAxXSwgWzcwLCAyXSwgWzc2LCAxXSwgWzc2LCAyXV0sXHJcblx0ICAgICAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB5eSwgeXlzdGF0ZSwgJCQsIF8kXHJcblx0ICAgICAgICAvKiovKSB7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XHJcblx0ICAgICAgICAgICAgc3dpdGNoICh5eXN0YXRlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAkJFskMCAtIDFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQcm9ncmFtKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDb21tZW50U3RhdGVtZW50JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeXkuc3RyaXBDb21tZW50KCQkWyQwXSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDBdLCAkJFskMF0pLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQ29udGVudFN0YXRlbWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWw6ICQkWyQwXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJCRbJDBdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVSYXdCbG9jaygkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTI6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gM10sIHBhcmFtczogJCRbJDAgLSAyXSwgaGFzaDogJCRbJDAgLSAxXSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxNDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVCbG9jaygkJFskMCAtIDNdLCAkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRydWUsIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IG9wZW46ICQkWyQwIC0gNV0sIHBhdGg6ICQkWyQwIC0gNF0sIHBhcmFtczogJCRbJDAgLSAzXSwgaGFzaDogJCRbJDAgLSAyXSwgYmxvY2tQYXJhbXM6ICQkWyQwIC0gMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNV0sICQkWyQwXSkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE2OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBwYXRoOiAkJFskMCAtIDRdLCBwYXJhbXM6ICQkWyQwIC0gM10sIGhhc2g6ICQkWyQwIC0gMl0sIGJsb2NrUGFyYW1zOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDVdLCAkJFskMF0pIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxNzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSA0XSwgcGFyYW1zOiAkJFskMCAtIDNdLCBoYXNoOiAkJFskMCAtIDJdLCBibG9ja1BhcmFtczogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA1XSwgJCRbJDBdKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gMV0sICQkWyQwIC0gMV0pLCBwcm9ncmFtOiAkJFskMF0gfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGludmVyc2UgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCAkJFskMF0sIGZhbHNlLCB0aGlzLl8kKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtID0geXkucHJlcGFyZVByb2dyYW0oW2ludmVyc2VdLCAkJFskMCAtIDFdLmxvYyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmNoYWluZWQgPSB0cnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgc3RyaXA6ICQkWyQwIC0gMl0uc3RyaXAsIHByb2dyYW06IHByb2dyYW0sIGNoYWluOiB0cnVlIH07XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjA6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSAyXSwgJCRbJDBdKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjI6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDAgLSA0XSwgeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pLCB0aGlzLl8kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDIzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwIC0gNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSwgdGhpcy5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyNDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUGFydGlhbFN0YXRlbWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJCRbJDAgLSAzXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6ICQkWyQwIC0gMl0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogJCRbJDAgLSAxXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6ICcnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNF0sICQkWyQwXSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZVBhcnRpYWxCbG9jaygkJFskMCAtIDJdLCAkJFskMCAtIDFdLCAkJFskMF0sIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjY6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gM10sIHBhcmFtczogJCRbJDAgLSAyXSwgaGFzaDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTdWJFeHByZXNzaW9uJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAkJFskMCAtIDNdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogJCRbJDAgLSAyXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoYXNoOiAkJFskMCAtIDFdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0hhc2gnLCBwYWlyczogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDMxOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnSGFzaFBhaXInLCBrZXk6IHl5LmlkKCQkWyQwIC0gMl0pLCB2YWx1ZTogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkuaWQoJCRbJDAgLSAxXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdTdHJpbmdMaXRlcmFsJywgdmFsdWU6ICQkWyQwXSwgb3JpZ2luYWw6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ051bWJlckxpdGVyYWwnLCB2YWx1ZTogTnVtYmVyKCQkWyQwXSksIG9yaWdpbmFsOiBOdW1iZXIoJCRbJDBdKSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzNzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0Jvb2xlYW5MaXRlcmFsJywgdmFsdWU6ICQkWyQwXSA9PT0gJ3RydWUnLCBvcmlnaW5hbDogJCRbJDBdID09PSAndHJ1ZScsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdVbmRlZmluZWRMaXRlcmFsJywgb3JpZ2luYWw6IHVuZGVmaW5lZCwgdmFsdWU6IHVuZGVmaW5lZCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ051bGxMaXRlcmFsJywgb3JpZ2luYWw6IG51bGwsIHZhbHVlOiBudWxsLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDE6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKHRydWUsICQkWyQwXSwgdGhpcy5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKGZhbHNlLCAkJFskMF0sIHRoaXMuXyQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDJdLnB1c2goeyBwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdLCBzZXBhcmF0b3I6ICQkWyQwIC0gMV0gfSk7dGhpcy4kID0gJCRbJDAgLSAyXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW3sgcGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXSB9XTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ2OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0NzpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDg6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbJCRbJDBdXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQ5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA1MDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNTE6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDU4OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA1OTpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNjQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDY1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA3MDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNzE6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDc4OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA3OTpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgODI6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDgzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA4NjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgODc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDkwOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA5MTpcclxuXHQgICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDk1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA5ODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgOTk6XHJcblx0ICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDEwMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTAxOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgdGFibGU6IFt7IDM6IDEsIDQ6IDIsIDU6IFsyLCA0Nl0sIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyAxOiBbM10gfSwgeyA1OiBbMSwgNF0gfSwgeyA1OiBbMiwgMl0sIDc6IDUsIDg6IDYsIDk6IDcsIDEwOiA4LCAxMTogOSwgMTI6IDEwLCAxMzogMTEsIDE0OiBbMSwgMTJdLCAxNTogWzEsIDIwXSwgMTY6IDE3LCAxOTogWzEsIDIzXSwgMjQ6IDE1LCAyNzogMTYsIDI5OiBbMSwgMjFdLCAzNDogWzEsIDIyXSwgMzk6IFsyLCAyXSwgNDQ6IFsyLCAyXSwgNDc6IFsyLCAyXSwgNDg6IFsxLCAxM10sIDUxOiBbMSwgMTRdLCA1NTogWzEsIDE4XSwgNTk6IDE5LCA2MDogWzEsIDI0XSB9LCB7IDE6IFsyLCAxXSB9LCB7IDU6IFsyLCA0N10sIDE0OiBbMiwgNDddLCAxNTogWzIsIDQ3XSwgMTk6IFsyLCA0N10sIDI5OiBbMiwgNDddLCAzNDogWzIsIDQ3XSwgMzk6IFsyLCA0N10sIDQ0OiBbMiwgNDddLCA0NzogWzIsIDQ3XSwgNDg6IFsyLCA0N10sIDUxOiBbMiwgNDddLCA1NTogWzIsIDQ3XSwgNjA6IFsyLCA0N10gfSwgeyA1OiBbMiwgM10sIDE0OiBbMiwgM10sIDE1OiBbMiwgM10sIDE5OiBbMiwgM10sIDI5OiBbMiwgM10sIDM0OiBbMiwgM10sIDM5OiBbMiwgM10sIDQ0OiBbMiwgM10sIDQ3OiBbMiwgM10sIDQ4OiBbMiwgM10sIDUxOiBbMiwgM10sIDU1OiBbMiwgM10sIDYwOiBbMiwgM10gfSwgeyA1OiBbMiwgNF0sIDE0OiBbMiwgNF0sIDE1OiBbMiwgNF0sIDE5OiBbMiwgNF0sIDI5OiBbMiwgNF0sIDM0OiBbMiwgNF0sIDM5OiBbMiwgNF0sIDQ0OiBbMiwgNF0sIDQ3OiBbMiwgNF0sIDQ4OiBbMiwgNF0sIDUxOiBbMiwgNF0sIDU1OiBbMiwgNF0sIDYwOiBbMiwgNF0gfSwgeyA1OiBbMiwgNV0sIDE0OiBbMiwgNV0sIDE1OiBbMiwgNV0sIDE5OiBbMiwgNV0sIDI5OiBbMiwgNV0sIDM0OiBbMiwgNV0sIDM5OiBbMiwgNV0sIDQ0OiBbMiwgNV0sIDQ3OiBbMiwgNV0sIDQ4OiBbMiwgNV0sIDUxOiBbMiwgNV0sIDU1OiBbMiwgNV0sIDYwOiBbMiwgNV0gfSwgeyA1OiBbMiwgNl0sIDE0OiBbMiwgNl0sIDE1OiBbMiwgNl0sIDE5OiBbMiwgNl0sIDI5OiBbMiwgNl0sIDM0OiBbMiwgNl0sIDM5OiBbMiwgNl0sIDQ0OiBbMiwgNl0sIDQ3OiBbMiwgNl0sIDQ4OiBbMiwgNl0sIDUxOiBbMiwgNl0sIDU1OiBbMiwgNl0sIDYwOiBbMiwgNl0gfSwgeyA1OiBbMiwgN10sIDE0OiBbMiwgN10sIDE1OiBbMiwgN10sIDE5OiBbMiwgN10sIDI5OiBbMiwgN10sIDM0OiBbMiwgN10sIDM5OiBbMiwgN10sIDQ0OiBbMiwgN10sIDQ3OiBbMiwgN10sIDQ4OiBbMiwgN10sIDUxOiBbMiwgN10sIDU1OiBbMiwgN10sIDYwOiBbMiwgN10gfSwgeyA1OiBbMiwgOF0sIDE0OiBbMiwgOF0sIDE1OiBbMiwgOF0sIDE5OiBbMiwgOF0sIDI5OiBbMiwgOF0sIDM0OiBbMiwgOF0sIDM5OiBbMiwgOF0sIDQ0OiBbMiwgOF0sIDQ3OiBbMiwgOF0sIDQ4OiBbMiwgOF0sIDUxOiBbMiwgOF0sIDU1OiBbMiwgOF0sIDYwOiBbMiwgOF0gfSwgeyA1OiBbMiwgOV0sIDE0OiBbMiwgOV0sIDE1OiBbMiwgOV0sIDE5OiBbMiwgOV0sIDI5OiBbMiwgOV0sIDM0OiBbMiwgOV0sIDM5OiBbMiwgOV0sIDQ0OiBbMiwgOV0sIDQ3OiBbMiwgOV0sIDQ4OiBbMiwgOV0sIDUxOiBbMiwgOV0sIDU1OiBbMiwgOV0sIDYwOiBbMiwgOV0gfSwgeyAyMDogMjUsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDM2LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDQ6IDM3LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDM5OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgNDogMzgsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgNDQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDEzOiA0MCwgMTU6IFsxLCAyMF0sIDE3OiAzOSB9LCB7IDIwOiA0MiwgNTY6IDQxLCA2NDogNDMsIDY1OiBbMSwgNDRdLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDQ6IDQ1LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDU6IFsyLCAxMF0sIDE0OiBbMiwgMTBdLCAxNTogWzIsIDEwXSwgMTg6IFsyLCAxMF0sIDE5OiBbMiwgMTBdLCAyOTogWzIsIDEwXSwgMzQ6IFsyLCAxMF0sIDM5OiBbMiwgMTBdLCA0NDogWzIsIDEwXSwgNDc6IFsyLCAxMF0sIDQ4OiBbMiwgMTBdLCA1MTogWzIsIDEwXSwgNTU6IFsyLCAxMF0sIDYwOiBbMiwgMTBdIH0sIHsgMjA6IDQ2LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA0NywgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNDgsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDQyLCA1NjogNDksIDY0OiA0MywgNjU6IFsxLCA0NF0sIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMzM6IFsyLCA3OF0sIDQ5OiA1MCwgNjU6IFsyLCA3OF0sIDcyOiBbMiwgNzhdLCA4MDogWzIsIDc4XSwgODE6IFsyLCA3OF0sIDgyOiBbMiwgNzhdLCA4MzogWzIsIDc4XSwgODQ6IFsyLCA3OF0sIDg1OiBbMiwgNzhdIH0sIHsgMjM6IFsyLCAzM10sIDMzOiBbMiwgMzNdLCA1NDogWzIsIDMzXSwgNjU6IFsyLCAzM10sIDY4OiBbMiwgMzNdLCA3MjogWzIsIDMzXSwgNzU6IFsyLCAzM10sIDgwOiBbMiwgMzNdLCA4MTogWzIsIDMzXSwgODI6IFsyLCAzM10sIDgzOiBbMiwgMzNdLCA4NDogWzIsIDMzXSwgODU6IFsyLCAzM10gfSwgeyAyMzogWzIsIDM0XSwgMzM6IFsyLCAzNF0sIDU0OiBbMiwgMzRdLCA2NTogWzIsIDM0XSwgNjg6IFsyLCAzNF0sIDcyOiBbMiwgMzRdLCA3NTogWzIsIDM0XSwgODA6IFsyLCAzNF0sIDgxOiBbMiwgMzRdLCA4MjogWzIsIDM0XSwgODM6IFsyLCAzNF0sIDg0OiBbMiwgMzRdLCA4NTogWzIsIDM0XSB9LCB7IDIzOiBbMiwgMzVdLCAzMzogWzIsIDM1XSwgNTQ6IFsyLCAzNV0sIDY1OiBbMiwgMzVdLCA2ODogWzIsIDM1XSwgNzI6IFsyLCAzNV0sIDc1OiBbMiwgMzVdLCA4MDogWzIsIDM1XSwgODE6IFsyLCAzNV0sIDgyOiBbMiwgMzVdLCA4MzogWzIsIDM1XSwgODQ6IFsyLCAzNV0sIDg1OiBbMiwgMzVdIH0sIHsgMjM6IFsyLCAzNl0sIDMzOiBbMiwgMzZdLCA1NDogWzIsIDM2XSwgNjU6IFsyLCAzNl0sIDY4OiBbMiwgMzZdLCA3MjogWzIsIDM2XSwgNzU6IFsyLCAzNl0sIDgwOiBbMiwgMzZdLCA4MTogWzIsIDM2XSwgODI6IFsyLCAzNl0sIDgzOiBbMiwgMzZdLCA4NDogWzIsIDM2XSwgODU6IFsyLCAzNl0gfSwgeyAyMzogWzIsIDM3XSwgMzM6IFsyLCAzN10sIDU0OiBbMiwgMzddLCA2NTogWzIsIDM3XSwgNjg6IFsyLCAzN10sIDcyOiBbMiwgMzddLCA3NTogWzIsIDM3XSwgODA6IFsyLCAzN10sIDgxOiBbMiwgMzddLCA4MjogWzIsIDM3XSwgODM6IFsyLCAzN10sIDg0OiBbMiwgMzddLCA4NTogWzIsIDM3XSB9LCB7IDIzOiBbMiwgMzhdLCAzMzogWzIsIDM4XSwgNTQ6IFsyLCAzOF0sIDY1OiBbMiwgMzhdLCA2ODogWzIsIDM4XSwgNzI6IFsyLCAzOF0sIDc1OiBbMiwgMzhdLCA4MDogWzIsIDM4XSwgODE6IFsyLCAzOF0sIDgyOiBbMiwgMzhdLCA4MzogWzIsIDM4XSwgODQ6IFsyLCAzOF0sIDg1OiBbMiwgMzhdIH0sIHsgMjM6IFsyLCAzOV0sIDMzOiBbMiwgMzldLCA1NDogWzIsIDM5XSwgNjU6IFsyLCAzOV0sIDY4OiBbMiwgMzldLCA3MjogWzIsIDM5XSwgNzU6IFsyLCAzOV0sIDgwOiBbMiwgMzldLCA4MTogWzIsIDM5XSwgODI6IFsyLCAzOV0sIDgzOiBbMiwgMzldLCA4NDogWzIsIDM5XSwgODU6IFsyLCAzOV0gfSwgeyAyMzogWzIsIDQzXSwgMzM6IFsyLCA0M10sIDU0OiBbMiwgNDNdLCA2NTogWzIsIDQzXSwgNjg6IFsyLCA0M10sIDcyOiBbMiwgNDNdLCA3NTogWzIsIDQzXSwgODA6IFsyLCA0M10sIDgxOiBbMiwgNDNdLCA4MjogWzIsIDQzXSwgODM6IFsyLCA0M10sIDg0OiBbMiwgNDNdLCA4NTogWzIsIDQzXSwgODc6IFsxLCA1MV0gfSwgeyA3MjogWzEsIDM1XSwgODY6IDUyIH0sIHsgMjM6IFsyLCA0NV0sIDMzOiBbMiwgNDVdLCA1NDogWzIsIDQ1XSwgNjU6IFsyLCA0NV0sIDY4OiBbMiwgNDVdLCA3MjogWzIsIDQ1XSwgNzU6IFsyLCA0NV0sIDgwOiBbMiwgNDVdLCA4MTogWzIsIDQ1XSwgODI6IFsyLCA0NV0sIDgzOiBbMiwgNDVdLCA4NDogWzIsIDQ1XSwgODU6IFsyLCA0NV0sIDg3OiBbMiwgNDVdIH0sIHsgNTI6IDUzLCA1NDogWzIsIDgyXSwgNjU6IFsyLCA4Ml0sIDcyOiBbMiwgODJdLCA4MDogWzIsIDgyXSwgODE6IFsyLCA4Ml0sIDgyOiBbMiwgODJdLCA4MzogWzIsIDgyXSwgODQ6IFsyLCA4Ml0sIDg1OiBbMiwgODJdIH0sIHsgMjU6IDU0LCAzODogNTYsIDM5OiBbMSwgNThdLCA0MzogNTcsIDQ0OiBbMSwgNTldLCA0NTogNTUsIDQ3OiBbMiwgNTRdIH0sIHsgMjg6IDYwLCA0MzogNjEsIDQ0OiBbMSwgNTldLCA0NzogWzIsIDU2XSB9LCB7IDEzOiA2MywgMTU6IFsxLCAyMF0sIDE4OiBbMSwgNjJdIH0sIHsgMTU6IFsyLCA0OF0sIDE4OiBbMiwgNDhdIH0sIHsgMzM6IFsyLCA4Nl0sIDU3OiA2NCwgNjU6IFsyLCA4Nl0sIDcyOiBbMiwgODZdLCA4MDogWzIsIDg2XSwgODE6IFsyLCA4Nl0sIDgyOiBbMiwgODZdLCA4MzogWzIsIDg2XSwgODQ6IFsyLCA4Nl0sIDg1OiBbMiwgODZdIH0sIHsgMzM6IFsyLCA0MF0sIDY1OiBbMiwgNDBdLCA3MjogWzIsIDQwXSwgODA6IFsyLCA0MF0sIDgxOiBbMiwgNDBdLCA4MjogWzIsIDQwXSwgODM6IFsyLCA0MF0sIDg0OiBbMiwgNDBdLCA4NTogWzIsIDQwXSB9LCB7IDMzOiBbMiwgNDFdLCA2NTogWzIsIDQxXSwgNzI6IFsyLCA0MV0sIDgwOiBbMiwgNDFdLCA4MTogWzIsIDQxXSwgODI6IFsyLCA0MV0sIDgzOiBbMiwgNDFdLCA4NDogWzIsIDQxXSwgODU6IFsyLCA0MV0gfSwgeyAyMDogNjUsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjY6IDY2LCA0NzogWzEsIDY3XSB9LCB7IDMwOiA2OCwgMzM6IFsyLCA1OF0sIDY1OiBbMiwgNThdLCA3MjogWzIsIDU4XSwgNzU6IFsyLCA1OF0sIDgwOiBbMiwgNThdLCA4MTogWzIsIDU4XSwgODI6IFsyLCA1OF0sIDgzOiBbMiwgNThdLCA4NDogWzIsIDU4XSwgODU6IFsyLCA1OF0gfSwgeyAzMzogWzIsIDY0XSwgMzU6IDY5LCA2NTogWzIsIDY0XSwgNzI6IFsyLCA2NF0sIDc1OiBbMiwgNjRdLCA4MDogWzIsIDY0XSwgODE6IFsyLCA2NF0sIDgyOiBbMiwgNjRdLCA4MzogWzIsIDY0XSwgODQ6IFsyLCA2NF0sIDg1OiBbMiwgNjRdIH0sIHsgMjE6IDcwLCAyMzogWzIsIDUwXSwgNjU6IFsyLCA1MF0sIDcyOiBbMiwgNTBdLCA4MDogWzIsIDUwXSwgODE6IFsyLCA1MF0sIDgyOiBbMiwgNTBdLCA4MzogWzIsIDUwXSwgODQ6IFsyLCA1MF0sIDg1OiBbMiwgNTBdIH0sIHsgMzM6IFsyLCA5MF0sIDYxOiA3MSwgNjU6IFsyLCA5MF0sIDcyOiBbMiwgOTBdLCA4MDogWzIsIDkwXSwgODE6IFsyLCA5MF0sIDgyOiBbMiwgOTBdLCA4MzogWzIsIDkwXSwgODQ6IFsyLCA5MF0sIDg1OiBbMiwgOTBdIH0sIHsgMjA6IDc1LCAzMzogWzIsIDgwXSwgNTA6IDcyLCA2MzogNzMsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY5OiA3NCwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNzI6IFsxLCA4MF0gfSwgeyAyMzogWzIsIDQyXSwgMzM6IFsyLCA0Ml0sIDU0OiBbMiwgNDJdLCA2NTogWzIsIDQyXSwgNjg6IFsyLCA0Ml0sIDcyOiBbMiwgNDJdLCA3NTogWzIsIDQyXSwgODA6IFsyLCA0Ml0sIDgxOiBbMiwgNDJdLCA4MjogWzIsIDQyXSwgODM6IFsyLCA0Ml0sIDg0OiBbMiwgNDJdLCA4NTogWzIsIDQyXSwgODc6IFsxLCA1MV0gfSwgeyAyMDogNzUsIDUzOiA4MSwgNTQ6IFsyLCA4NF0sIDYzOiA4MiwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDgzLCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyNjogODQsIDQ3OiBbMSwgNjddIH0sIHsgNDc6IFsyLCA1NV0gfSwgeyA0OiA4NSwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCAzOTogWzIsIDQ2XSwgNDQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDQ3OiBbMiwgMjBdIH0sIHsgMjA6IDg2LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDQ6IDg3LCA2OiAzLCAxNDogWzIsIDQ2XSwgMTU6IFsyLCA0Nl0sIDE5OiBbMiwgNDZdLCAyOTogWzIsIDQ2XSwgMzQ6IFsyLCA0Nl0sIDQ3OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDI2OiA4OCwgNDc6IFsxLCA2N10gfSwgeyA0NzogWzIsIDU3XSB9LCB7IDU6IFsyLCAxMV0sIDE0OiBbMiwgMTFdLCAxNTogWzIsIDExXSwgMTk6IFsyLCAxMV0sIDI5OiBbMiwgMTFdLCAzNDogWzIsIDExXSwgMzk6IFsyLCAxMV0sIDQ0OiBbMiwgMTFdLCA0NzogWzIsIDExXSwgNDg6IFsyLCAxMV0sIDUxOiBbMiwgMTFdLCA1NTogWzIsIDExXSwgNjA6IFsyLCAxMV0gfSwgeyAxNTogWzIsIDQ5XSwgMTg6IFsyLCA0OV0gfSwgeyAyMDogNzUsIDMzOiBbMiwgODhdLCA1ODogODksIDYzOiA5MCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDkxLCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA2NTogWzIsIDk0XSwgNjY6IDkyLCA2ODogWzIsIDk0XSwgNzI6IFsyLCA5NF0sIDgwOiBbMiwgOTRdLCA4MTogWzIsIDk0XSwgODI6IFsyLCA5NF0sIDgzOiBbMiwgOTRdLCA4NDogWzIsIDk0XSwgODU6IFsyLCA5NF0gfSwgeyA1OiBbMiwgMjVdLCAxNDogWzIsIDI1XSwgMTU6IFsyLCAyNV0sIDE5OiBbMiwgMjVdLCAyOTogWzIsIDI1XSwgMzQ6IFsyLCAyNV0sIDM5OiBbMiwgMjVdLCA0NDogWzIsIDI1XSwgNDc6IFsyLCAyNV0sIDQ4OiBbMiwgMjVdLCA1MTogWzIsIDI1XSwgNTU6IFsyLCAyNV0sIDYwOiBbMiwgMjVdIH0sIHsgMjA6IDkzLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA3NSwgMzE6IDk0LCAzMzogWzIsIDYwXSwgNjM6IDk1LCA2NDogNzYsIDY1OiBbMSwgNDRdLCA2OTogOTYsIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzU6IFsyLCA2MF0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzUsIDMzOiBbMiwgNjZdLCAzNjogOTcsIDYzOiA5OCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDk5LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc1OiBbMiwgNjZdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc1LCAyMjogMTAwLCAyMzogWzIsIDUyXSwgNjM6IDEwMSwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDEwMiwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc1LCAzMzogWzIsIDkyXSwgNjI6IDEwMywgNjM6IDEwNCwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNjk6IDEwNSwgNzA6IDc3LCA3MTogNzgsIDcyOiBbMSwgNzldLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMzM6IFsxLCAxMDZdIH0sIHsgMzM6IFsyLCA3OV0sIDY1OiBbMiwgNzldLCA3MjogWzIsIDc5XSwgODA6IFsyLCA3OV0sIDgxOiBbMiwgNzldLCA4MjogWzIsIDc5XSwgODM6IFsyLCA3OV0sIDg0OiBbMiwgNzldLCA4NTogWzIsIDc5XSB9LCB7IDMzOiBbMiwgODFdIH0sIHsgMjM6IFsyLCAyN10sIDMzOiBbMiwgMjddLCA1NDogWzIsIDI3XSwgNjU6IFsyLCAyN10sIDY4OiBbMiwgMjddLCA3MjogWzIsIDI3XSwgNzU6IFsyLCAyN10sIDgwOiBbMiwgMjddLCA4MTogWzIsIDI3XSwgODI6IFsyLCAyN10sIDgzOiBbMiwgMjddLCA4NDogWzIsIDI3XSwgODU6IFsyLCAyN10gfSwgeyAyMzogWzIsIDI4XSwgMzM6IFsyLCAyOF0sIDU0OiBbMiwgMjhdLCA2NTogWzIsIDI4XSwgNjg6IFsyLCAyOF0sIDcyOiBbMiwgMjhdLCA3NTogWzIsIDI4XSwgODA6IFsyLCAyOF0sIDgxOiBbMiwgMjhdLCA4MjogWzIsIDI4XSwgODM6IFsyLCAyOF0sIDg0OiBbMiwgMjhdLCA4NTogWzIsIDI4XSB9LCB7IDIzOiBbMiwgMzBdLCAzMzogWzIsIDMwXSwgNTQ6IFsyLCAzMF0sIDY4OiBbMiwgMzBdLCA3MTogMTA3LCA3MjogWzEsIDEwOF0sIDc1OiBbMiwgMzBdIH0sIHsgMjM6IFsyLCA5OF0sIDMzOiBbMiwgOThdLCA1NDogWzIsIDk4XSwgNjg6IFsyLCA5OF0sIDcyOiBbMiwgOThdLCA3NTogWzIsIDk4XSB9LCB7IDIzOiBbMiwgNDVdLCAzMzogWzIsIDQ1XSwgNTQ6IFsyLCA0NV0sIDY1OiBbMiwgNDVdLCA2ODogWzIsIDQ1XSwgNzI6IFsyLCA0NV0sIDczOiBbMSwgMTA5XSwgNzU6IFsyLCA0NV0sIDgwOiBbMiwgNDVdLCA4MTogWzIsIDQ1XSwgODI6IFsyLCA0NV0sIDgzOiBbMiwgNDVdLCA4NDogWzIsIDQ1XSwgODU6IFsyLCA0NV0sIDg3OiBbMiwgNDVdIH0sIHsgMjM6IFsyLCA0NF0sIDMzOiBbMiwgNDRdLCA1NDogWzIsIDQ0XSwgNjU6IFsyLCA0NF0sIDY4OiBbMiwgNDRdLCA3MjogWzIsIDQ0XSwgNzU6IFsyLCA0NF0sIDgwOiBbMiwgNDRdLCA4MTogWzIsIDQ0XSwgODI6IFsyLCA0NF0sIDgzOiBbMiwgNDRdLCA4NDogWzIsIDQ0XSwgODU6IFsyLCA0NF0sIDg3OiBbMiwgNDRdIH0sIHsgNTQ6IFsxLCAxMTBdIH0sIHsgNTQ6IFsyLCA4M10sIDY1OiBbMiwgODNdLCA3MjogWzIsIDgzXSwgODA6IFsyLCA4M10sIDgxOiBbMiwgODNdLCA4MjogWzIsIDgzXSwgODM6IFsyLCA4M10sIDg0OiBbMiwgODNdLCA4NTogWzIsIDgzXSB9LCB7IDU0OiBbMiwgODVdIH0sIHsgNTogWzIsIDEzXSwgMTQ6IFsyLCAxM10sIDE1OiBbMiwgMTNdLCAxOTogWzIsIDEzXSwgMjk6IFsyLCAxM10sIDM0OiBbMiwgMTNdLCAzOTogWzIsIDEzXSwgNDQ6IFsyLCAxM10sIDQ3OiBbMiwgMTNdLCA0ODogWzIsIDEzXSwgNTE6IFsyLCAxM10sIDU1OiBbMiwgMTNdLCA2MDogWzIsIDEzXSB9LCB7IDM4OiA1NiwgMzk6IFsxLCA1OF0sIDQzOiA1NywgNDQ6IFsxLCA1OV0sIDQ1OiAxMTIsIDQ2OiAxMTEsIDQ3OiBbMiwgNzZdIH0sIHsgMzM6IFsyLCA3MF0sIDQwOiAxMTMsIDY1OiBbMiwgNzBdLCA3MjogWzIsIDcwXSwgNzU6IFsyLCA3MF0sIDgwOiBbMiwgNzBdLCA4MTogWzIsIDcwXSwgODI6IFsyLCA3MF0sIDgzOiBbMiwgNzBdLCA4NDogWzIsIDcwXSwgODU6IFsyLCA3MF0gfSwgeyA0NzogWzIsIDE4XSB9LCB7IDU6IFsyLCAxNF0sIDE0OiBbMiwgMTRdLCAxNTogWzIsIDE0XSwgMTk6IFsyLCAxNF0sIDI5OiBbMiwgMTRdLCAzNDogWzIsIDE0XSwgMzk6IFsyLCAxNF0sIDQ0OiBbMiwgMTRdLCA0NzogWzIsIDE0XSwgNDg6IFsyLCAxNF0sIDUxOiBbMiwgMTRdLCA1NTogWzIsIDE0XSwgNjA6IFsyLCAxNF0gfSwgeyAzMzogWzEsIDExNF0gfSwgeyAzMzogWzIsIDg3XSwgNjU6IFsyLCA4N10sIDcyOiBbMiwgODddLCA4MDogWzIsIDg3XSwgODE6IFsyLCA4N10sIDgyOiBbMiwgODddLCA4MzogWzIsIDg3XSwgODQ6IFsyLCA4N10sIDg1OiBbMiwgODddIH0sIHsgMzM6IFsyLCA4OV0gfSwgeyAyMDogNzUsIDYzOiAxMTYsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY3OiAxMTUsIDY4OiBbMiwgOTZdLCA2OTogMTE3LCA3MDogNzcsIDcxOiA3OCwgNzI6IFsxLCA3OV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzEsIDExOF0gfSwgeyAzMjogMTE5LCAzMzogWzIsIDYyXSwgNzQ6IDEyMCwgNzU6IFsxLCAxMjFdIH0sIHsgMzM6IFsyLCA1OV0sIDY1OiBbMiwgNTldLCA3MjogWzIsIDU5XSwgNzU6IFsyLCA1OV0sIDgwOiBbMiwgNTldLCA4MTogWzIsIDU5XSwgODI6IFsyLCA1OV0sIDgzOiBbMiwgNTldLCA4NDogWzIsIDU5XSwgODU6IFsyLCA1OV0gfSwgeyAzMzogWzIsIDYxXSwgNzU6IFsyLCA2MV0gfSwgeyAzMzogWzIsIDY4XSwgMzc6IDEyMiwgNzQ6IDEyMywgNzU6IFsxLCAxMjFdIH0sIHsgMzM6IFsyLCA2NV0sIDY1OiBbMiwgNjVdLCA3MjogWzIsIDY1XSwgNzU6IFsyLCA2NV0sIDgwOiBbMiwgNjVdLCA4MTogWzIsIDY1XSwgODI6IFsyLCA2NV0sIDgzOiBbMiwgNjVdLCA4NDogWzIsIDY1XSwgODU6IFsyLCA2NV0gfSwgeyAzMzogWzIsIDY3XSwgNzU6IFsyLCA2N10gfSwgeyAyMzogWzEsIDEyNF0gfSwgeyAyMzogWzIsIDUxXSwgNjU6IFsyLCA1MV0sIDcyOiBbMiwgNTFdLCA4MDogWzIsIDUxXSwgODE6IFsyLCA1MV0sIDgyOiBbMiwgNTFdLCA4MzogWzIsIDUxXSwgODQ6IFsyLCA1MV0sIDg1OiBbMiwgNTFdIH0sIHsgMjM6IFsyLCA1M10gfSwgeyAzMzogWzEsIDEyNV0gfSwgeyAzMzogWzIsIDkxXSwgNjU6IFsyLCA5MV0sIDcyOiBbMiwgOTFdLCA4MDogWzIsIDkxXSwgODE6IFsyLCA5MV0sIDgyOiBbMiwgOTFdLCA4MzogWzIsIDkxXSwgODQ6IFsyLCA5MV0sIDg1OiBbMiwgOTFdIH0sIHsgMzM6IFsyLCA5M10gfSwgeyA1OiBbMiwgMjJdLCAxNDogWzIsIDIyXSwgMTU6IFsyLCAyMl0sIDE5OiBbMiwgMjJdLCAyOTogWzIsIDIyXSwgMzQ6IFsyLCAyMl0sIDM5OiBbMiwgMjJdLCA0NDogWzIsIDIyXSwgNDc6IFsyLCAyMl0sIDQ4OiBbMiwgMjJdLCA1MTogWzIsIDIyXSwgNTU6IFsyLCAyMl0sIDYwOiBbMiwgMjJdIH0sIHsgMjM6IFsyLCA5OV0sIDMzOiBbMiwgOTldLCA1NDogWzIsIDk5XSwgNjg6IFsyLCA5OV0sIDcyOiBbMiwgOTldLCA3NTogWzIsIDk5XSB9LCB7IDczOiBbMSwgMTA5XSB9LCB7IDIwOiA3NSwgNjM6IDEyNiwgNjQ6IDc2LCA2NTogWzEsIDQ0XSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA1OiBbMiwgMjNdLCAxNDogWzIsIDIzXSwgMTU6IFsyLCAyM10sIDE5OiBbMiwgMjNdLCAyOTogWzIsIDIzXSwgMzQ6IFsyLCAyM10sIDM5OiBbMiwgMjNdLCA0NDogWzIsIDIzXSwgNDc6IFsyLCAyM10sIDQ4OiBbMiwgMjNdLCA1MTogWzIsIDIzXSwgNTU6IFsyLCAyM10sIDYwOiBbMiwgMjNdIH0sIHsgNDc6IFsyLCAxOV0gfSwgeyA0NzogWzIsIDc3XSB9LCB7IDIwOiA3NSwgMzM6IFsyLCA3Ml0sIDQxOiAxMjcsIDYzOiAxMjgsIDY0OiA3NiwgNjU6IFsxLCA0NF0sIDY5OiAxMjksIDcwOiA3NywgNzE6IDc4LCA3MjogWzEsIDc5XSwgNzU6IFsyLCA3Ml0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA1OiBbMiwgMjRdLCAxNDogWzIsIDI0XSwgMTU6IFsyLCAyNF0sIDE5OiBbMiwgMjRdLCAyOTogWzIsIDI0XSwgMzQ6IFsyLCAyNF0sIDM5OiBbMiwgMjRdLCA0NDogWzIsIDI0XSwgNDc6IFsyLCAyNF0sIDQ4OiBbMiwgMjRdLCA1MTogWzIsIDI0XSwgNTU6IFsyLCAyNF0sIDYwOiBbMiwgMjRdIH0sIHsgNjg6IFsxLCAxMzBdIH0sIHsgNjU6IFsyLCA5NV0sIDY4OiBbMiwgOTVdLCA3MjogWzIsIDk1XSwgODA6IFsyLCA5NV0sIDgxOiBbMiwgOTVdLCA4MjogWzIsIDk1XSwgODM6IFsyLCA5NV0sIDg0OiBbMiwgOTVdLCA4NTogWzIsIDk1XSB9LCB7IDY4OiBbMiwgOTddIH0sIHsgNTogWzIsIDIxXSwgMTQ6IFsyLCAyMV0sIDE1OiBbMiwgMjFdLCAxOTogWzIsIDIxXSwgMjk6IFsyLCAyMV0sIDM0OiBbMiwgMjFdLCAzOTogWzIsIDIxXSwgNDQ6IFsyLCAyMV0sIDQ3OiBbMiwgMjFdLCA0ODogWzIsIDIxXSwgNTE6IFsyLCAyMV0sIDU1OiBbMiwgMjFdLCA2MDogWzIsIDIxXSB9LCB7IDMzOiBbMSwgMTMxXSB9LCB7IDMzOiBbMiwgNjNdIH0sIHsgNzI6IFsxLCAxMzNdLCA3NjogMTMyIH0sIHsgMzM6IFsxLCAxMzRdIH0sIHsgMzM6IFsyLCA2OV0gfSwgeyAxNTogWzIsIDEyXSB9LCB7IDE0OiBbMiwgMjZdLCAxNTogWzIsIDI2XSwgMTk6IFsyLCAyNl0sIDI5OiBbMiwgMjZdLCAzNDogWzIsIDI2XSwgNDc6IFsyLCAyNl0sIDQ4OiBbMiwgMjZdLCA1MTogWzIsIDI2XSwgNTU6IFsyLCAyNl0sIDYwOiBbMiwgMjZdIH0sIHsgMjM6IFsyLCAzMV0sIDMzOiBbMiwgMzFdLCA1NDogWzIsIDMxXSwgNjg6IFsyLCAzMV0sIDcyOiBbMiwgMzFdLCA3NTogWzIsIDMxXSB9LCB7IDMzOiBbMiwgNzRdLCA0MjogMTM1LCA3NDogMTM2LCA3NTogWzEsIDEyMV0gfSwgeyAzMzogWzIsIDcxXSwgNjU6IFsyLCA3MV0sIDcyOiBbMiwgNzFdLCA3NTogWzIsIDcxXSwgODA6IFsyLCA3MV0sIDgxOiBbMiwgNzFdLCA4MjogWzIsIDcxXSwgODM6IFsyLCA3MV0sIDg0OiBbMiwgNzFdLCA4NTogWzIsIDcxXSB9LCB7IDMzOiBbMiwgNzNdLCA3NTogWzIsIDczXSB9LCB7IDIzOiBbMiwgMjldLCAzMzogWzIsIDI5XSwgNTQ6IFsyLCAyOV0sIDY1OiBbMiwgMjldLCA2ODogWzIsIDI5XSwgNzI6IFsyLCAyOV0sIDc1OiBbMiwgMjldLCA4MDogWzIsIDI5XSwgODE6IFsyLCAyOV0sIDgyOiBbMiwgMjldLCA4MzogWzIsIDI5XSwgODQ6IFsyLCAyOV0sIDg1OiBbMiwgMjldIH0sIHsgMTQ6IFsyLCAxNV0sIDE1OiBbMiwgMTVdLCAxOTogWzIsIDE1XSwgMjk6IFsyLCAxNV0sIDM0OiBbMiwgMTVdLCAzOTogWzIsIDE1XSwgNDQ6IFsyLCAxNV0sIDQ3OiBbMiwgMTVdLCA0ODogWzIsIDE1XSwgNTE6IFsyLCAxNV0sIDU1OiBbMiwgMTVdLCA2MDogWzIsIDE1XSB9LCB7IDcyOiBbMSwgMTM4XSwgNzc6IFsxLCAxMzddIH0sIHsgNzI6IFsyLCAxMDBdLCA3NzogWzIsIDEwMF0gfSwgeyAxNDogWzIsIDE2XSwgMTU6IFsyLCAxNl0sIDE5OiBbMiwgMTZdLCAyOTogWzIsIDE2XSwgMzQ6IFsyLCAxNl0sIDQ0OiBbMiwgMTZdLCA0NzogWzIsIDE2XSwgNDg6IFsyLCAxNl0sIDUxOiBbMiwgMTZdLCA1NTogWzIsIDE2XSwgNjA6IFsyLCAxNl0gfSwgeyAzMzogWzEsIDEzOV0gfSwgeyAzMzogWzIsIDc1XSB9LCB7IDMzOiBbMiwgMzJdIH0sIHsgNzI6IFsyLCAxMDFdLCA3NzogWzIsIDEwMV0gfSwgeyAxNDogWzIsIDE3XSwgMTU6IFsyLCAxN10sIDE5OiBbMiwgMTddLCAyOTogWzIsIDE3XSwgMzQ6IFsyLCAxN10sIDM5OiBbMiwgMTddLCA0NDogWzIsIDE3XSwgNDc6IFsyLCAxN10sIDQ4OiBbMiwgMTddLCA1MTogWzIsIDE3XSwgNTU6IFsyLCAxN10sIDYwOiBbMiwgMTddIH1dLFxyXG5cdCAgICAgICAgZGVmYXVsdEFjdGlvbnM6IHsgNDogWzIsIDFdLCA1NTogWzIsIDU1XSwgNTc6IFsyLCAyMF0sIDYxOiBbMiwgNTddLCA3NDogWzIsIDgxXSwgODM6IFsyLCA4NV0sIDg3OiBbMiwgMThdLCA5MTogWzIsIDg5XSwgMTAyOiBbMiwgNTNdLCAxMDU6IFsyLCA5M10sIDExMTogWzIsIDE5XSwgMTEyOiBbMiwgNzddLCAxMTc6IFsyLCA5N10sIDEyMDogWzIsIDYzXSwgMTIzOiBbMiwgNjldLCAxMjQ6IFsyLCAxMl0sIDEzNjogWzIsIDc1XSwgMTM3OiBbMiwgMzJdIH0sXHJcblx0ICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xyXG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xyXG5cdCAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgc3RhY2sgPSBbMF0sXHJcblx0ICAgICAgICAgICAgICAgIHZzdGFjayA9IFtudWxsXSxcclxuXHQgICAgICAgICAgICAgICAgbHN0YWNrID0gW10sXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gdGhpcy50YWJsZSxcclxuXHQgICAgICAgICAgICAgICAgeXl0ZXh0ID0gXCJcIixcclxuXHQgICAgICAgICAgICAgICAgeXlsaW5lbm8gPSAwLFxyXG5cdCAgICAgICAgICAgICAgICB5eWxlbmcgPSAwLFxyXG5cdCAgICAgICAgICAgICAgICByZWNvdmVyaW5nID0gMCxcclxuXHQgICAgICAgICAgICAgICAgVEVSUk9SID0gMixcclxuXHQgICAgICAgICAgICAgICAgRU9GID0gMTtcclxuXHQgICAgICAgICAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTtcclxuXHQgICAgICAgICAgICB0aGlzLmxleGVyLnl5ID0gdGhpcy55eTtcclxuXHQgICAgICAgICAgICB0aGlzLnl5LmxleGVyID0gdGhpcy5sZXhlcjtcclxuXHQgICAgICAgICAgICB0aGlzLnl5LnBhcnNlciA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxleGVyLnl5bGxvYyA9PSBcInVuZGVmaW5lZFwiKSB0aGlzLmxleGVyLnl5bGxvYyA9IHt9O1xyXG5cdCAgICAgICAgICAgIHZhciB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xyXG5cdCAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5sZXhlci5vcHRpb25zICYmIHRoaXMubGV4ZXIub3B0aW9ucy5yYW5nZXM7XHJcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnl5LnBhcnNlRXJyb3IgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yO1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMiAqIG47XHJcblx0ICAgICAgICAgICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjtcclxuXHQgICAgICAgICAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBsZXgoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbjtcclxuXHQgICAgICAgICAgICAgICAgdG9rZW4gPSBzZWxmLmxleGVyLmxleCgpIHx8IDE7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgc3ltYm9sLFxyXG5cdCAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCxcclxuXHQgICAgICAgICAgICAgICAgc3RhdGUsXHJcblx0ICAgICAgICAgICAgICAgIGFjdGlvbixcclxuXHQgICAgICAgICAgICAgICAgYSxcclxuXHQgICAgICAgICAgICAgICAgcixcclxuXHQgICAgICAgICAgICAgICAgeXl2YWwgPSB7fSxcclxuXHQgICAgICAgICAgICAgICAgcCxcclxuXHQgICAgICAgICAgICAgICAgbGVuLFxyXG5cdCAgICAgICAgICAgICAgICBuZXdTdGF0ZSxcclxuXHQgICAgICAgICAgICAgICAgZXhwZWN0ZWQ7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwidW5kZWZpbmVkXCIgfHwgIWFjdGlvbi5sZW5ndGggfHwgIWFjdGlvblswXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVyclN0ciA9IFwiXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY292ZXJpbmcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IDIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaChcIidcIiArIHRoaXMudGVybWluYWxzX1twXSArIFwiJ1wiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyB0aGlzLmxleGVyLnNob3dQb3NpdGlvbigpICsgXCJcXG5FeHBlY3RpbmcgXCIgKyBleHBlY3RlZC5qb2luKFwiLCBcIikgKyBcIiwgZ290ICdcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjogVW5leHBlY3RlZCBcIiArIChzeW1ib2wgPT0gMSA/IFwiZW5kIG9mIGlucHV0XCIgOiBcIidcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlRXJyb3IoZXJyU3RyLCB7IHRleHQ6IHRoaXMubGV4ZXIubWF0Y2gsIHRva2VuOiB0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wsIGxpbmU6IHRoaXMubGV4ZXIueXlsaW5lbm8sIGxvYzogeXlsb2MsIGV4cGVjdGVkOiBleHBlY3RlZCB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHRoaXMubGV4ZXIueXlsbG9jKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXlsaW5lbm8gPSB0aGlzLmxleGVyLnl5bGluZW5vO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApIHJlY292ZXJpbmctLTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeXl2YWwuXyQgPSB7IGZpcnN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfbGluZSwgbGFzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfbGluZSwgZmlyc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2NvbHVtbiwgbGFzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9jb2x1bW4gfTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW2xzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0ucmFuZ2VbMF0sIGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ucmFuZ2VbMV1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHN0YWNrID0gbHN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCh0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzdGFja1tzdGFjay5sZW5ndGggLSAyXV1bc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvKiBKaXNvbiBnZW5lcmF0ZWQgbGV4ZXIgKi9cclxuXHQgICAgdmFyIGxleGVyID0gKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBsZXhlciA9IHsgRU9GOiAxLFxyXG5cdCAgICAgICAgICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvcihzdHIsIGhhc2gpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHNldElucHV0OiBmdW5jdGlvbiBzZXRJbnB1dChpbnB1dCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gdGhpcy5fbGVzcyA9IHRoaXMuZG9uZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5bGluZW5vID0gdGhpcy55eWxlbmcgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9IHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2ggPSAnJztcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogMSwgZmlyc3RfY29sdW1uOiAwLCBsYXN0X2xpbmU6IDEsIGxhc3RfY29sdW1uOiAwIH07XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB0aGlzLnl5bGxvYy5yYW5nZSA9IFswLCAwXTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiBpbnB1dCgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5faW5wdXRbMF07XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnl5bGVuZysrO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCsrO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoICs9IGNoO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IGNoLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGxpbmVzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUrKztcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHRoaXMueXlsbG9jLnJhbmdlWzFdKys7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKDEpO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gY2g7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICB1bnB1dDogZnVuY3Rpb24gdW5wdXQoY2gpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoIC0gbGVuIC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XHJcblx0ICAgICAgICAgICAgICAgIHZhciBvbGRMaW5lcyA9IHRoaXMubWF0Y2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoIC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIDEpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAtIDEpIHRoaXMueXlsaW5lbm8gLT0gbGluZXMubGVuZ3RoIC0gMTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnl5bGxvYy5yYW5nZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jID0geyBmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5maXJzdF9saW5lLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID8gKGxpbmVzLmxlbmd0aCA9PT0gb2xkTGluZXMubGVuZ3RoID8gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uIDogMCkgKyBvbGRMaW5lc1tvbGRMaW5lcy5sZW5ndGggLSBsaW5lcy5sZW5ndGhdLmxlbmd0aCAtIGxpbmVzWzBdLmxlbmd0aCA6IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiAtIGxlblxyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3JbMF0sIHJbMF0gKyB0aGlzLnl5bGVuZyAtIGxlbl07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBtb3JlOiBmdW5jdGlvbiBtb3JlKCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBsZXNzOiBmdW5jdGlvbiBsZXNzKG4pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy51bnB1dCh0aGlzLm1hdGNoLnNsaWNlKG4pKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHBhc3RJbnB1dDogZnVuY3Rpb24gcGFzdElucHV0KCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcGFzdCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIHRoaXMubWF0Y2gubGVuZ3RoKTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChwYXN0Lmxlbmd0aCA+IDIwID8gJy4uLicgOiAnJykgKyBwYXN0LnN1YnN0cigtMjApLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHVwY29taW5nSW5wdXQ6IGZ1bmN0aW9uIHVwY29taW5nSW5wdXQoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5tYXRjaDtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwIC0gbmV4dC5sZW5ndGgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwgMjApICsgKG5leHQubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgc2hvd1Bvc2l0aW9uOiBmdW5jdGlvbiBzaG93UG9zaXRpb24oKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjICsgXCJeXCI7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kb25lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gdHJ1ZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbiwgbWF0Y2gsIHRlbXBNYXRjaCwgaW5kZXgsIGNvbCwgbGluZXM7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9yZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSAnJztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLl9jdXJyZW50UnVsZXMoKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBNYXRjaCAmJiAoIW1hdGNoIHx8IHRlbXBNYXRjaFswXS5sZW5ndGggPiBtYXRjaFswXS5sZW5ndGgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmZsZXgpIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMpIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MgPSB7IGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID8gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoIC0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1xccj9cXG4/LylbMF0ubGVuZ3RoIDogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gKyBtYXRjaFswXS5sZW5ndGggfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IG1hdGNoWzBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IG1hdGNoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XHJcblx0ICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2luZGV4XSwgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47ZWxzZSByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJyArICh0aGlzLnl5bGluZW5vICsgMSkgKyAnLiBVbnJlY29nbml6ZWQgdGV4dC5cXG4nICsgdGhpcy5zaG93UG9zaXRpb24oKSwgeyB0ZXh0OiBcIlwiLCB0b2tlbjogbnVsbCwgbGluZTogdGhpcy55eWxpbmVubyB9KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgbGV4OiBmdW5jdGlvbiBsZXgoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGJlZ2luOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24gcG9wU3RhdGUoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLnBvcCgpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV1dLnJ1bGVzO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgdG9wU3RhdGU6IGZ1bmN0aW9uIHRvcFN0YXRlKCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDJdO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgcHVzaFN0YXRlOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihjb25kaXRpb24pO1xyXG5cdCAgICAgICAgICAgIH0gfTtcclxuXHQgICAgICAgIGxleGVyLm9wdGlvbnMgPSB7fTtcclxuXHQgICAgICAgIGxleGVyLnBlcmZvcm1BY3Rpb24gPSBmdW5jdGlvbiBhbm9ueW1vdXMoeXksIHl5XywgJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucywgWVlfU1RBUlRcclxuXHQgICAgICAgIC8qKi8pIHtcclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gc3RyaXAoc3RhcnQsIGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4geXlfLnl5dGV4dCA9IHl5Xy55eXRleHQuc3Vic3RyKHN0YXJ0LCB5eV8ueXlsZW5nIC0gZW5kKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBZWVNUQVRFID0gWVlfU1RBUlQ7XHJcblx0ICAgICAgICAgICAgc3dpdGNoICgkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0yKSA9PT0gXCJcXFxcXFxcXFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwgMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0xKSA9PT0gXCJcXFxcXCIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLCAxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwiZW11XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwibXVcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoeXlfLnl5dGV4dCkgcmV0dXJuIDE1O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtyZXR1cm4gMTU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHVzaW5nIGB0aGlzLnRvcFN0YXRlKClgIGJlbG93LCBidXQgaXQgY3VycmVudGx5XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIHRoZSBzZWNvbmQgdG9wIGluc3RlYWQgb2YgdGhlIGZpcnN0IHRvcC4gT3BlbmVkIGFuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZSBhYm91dCBpdCBhdCBodHRwczovL2dpdGh1Yi5jb20vemFhY2gvamlzb24vaXNzdWVzLzI5MVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSA9PT0gJ3JhdycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cig1LCB5eV8ueXlsZW5nIC0gOSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdFTkRfUkFXX0JMT0NLJztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDY1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA2ODtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDk6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ3JhdycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIzO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDExOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDU1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTI6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNjA7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAyOTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ3O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTU6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDQ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTY6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDQ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMTc6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAxODpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAzOTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjA6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudW5wdXQoeXlfLnl5dGV4dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdjb20nKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA0ODtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDczO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjU6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAyNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3MjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDI3OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg3O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjg6XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgd2hpdGVzcGFjZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMjk6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDU0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzA6XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDMzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzE6XHJcblx0ICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0gc3RyaXAoMSwgMikucmVwbGFjZSgvXFxcXFwiL2csICdcIicpO3JldHVybiA4MDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHN0cmlwKDEsIDIpLnJlcGxhY2UoL1xcXFwnL2csIFwiJ1wiKTtyZXR1cm4gODA7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzMzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4NTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDgyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzU6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzNjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA4MztcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDM3OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gODE7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA3NTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDc3O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgNDE6XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MjpcclxuXHQgICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnJlcGxhY2UoL1xcXFwoW1xcXFxcXF1dKS9nLCAnJDEnKTtyZXR1cm4gNzI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0MzpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnSU5WQUxJRCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSA0NDpcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGxleGVyLnJ1bGVzID0gWy9eKD86W15cXHgwMF0qPyg/PShcXHtcXHspKSkvLCAvXig/OlteXFx4MDBdKykvLCAvXig/OlteXFx4MDBdezIsfT8oPz0oXFx7XFx7fFxcXFxcXHtcXHt8XFxcXFxcXFxcXHtcXHt8JCkpKS8sIC9eKD86XFx7XFx7XFx7XFx7KD89W15cXC9dKSkvLCAvXig/Olxce1xce1xce1xce1xcL1teXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz1bPX1cXHNcXC8uXSlcXH1cXH1cXH1cXH0pLywgL14oPzpbXlxceDAwXSo/KD89KFxce1xce1xce1xceykpKS8sIC9eKD86W1xcc1xcU10qPy0tKH4pP1xcfVxcfSkvLCAvXig/OlxcKCkvLCAvXig/OlxcKSkvLCAvXig/Olxce1xce1xce1xceykvLCAvXig/OlxcfVxcfVxcfVxcfSkvLCAvXig/Olxce1xceyh+KT8+KS8sIC9eKD86XFx7XFx7KH4pPyM+KS8sIC9eKD86XFx7XFx7KH4pPyNcXCo/KS8sIC9eKD86XFx7XFx7KH4pP1xcLykvLCAvXig/Olxce1xceyh+KT9cXF5cXHMqKH4pP1xcfVxcfSkvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxccyoofik/XFx9XFx9KS8sIC9eKD86XFx7XFx7KH4pP1xcXikvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxcYikvLCAvXig/Olxce1xceyh+KT9cXHspLywgL14oPzpcXHtcXHsofik/JikvLCAvXig/Olxce1xceyh+KT8hLS0pLywgL14oPzpcXHtcXHsofik/IVtcXHNcXFNdKj9cXH1cXH0pLywgL14oPzpcXHtcXHsofik/XFwqPykvLCAvXig/Oj0pLywgL14oPzpcXC5cXC4pLywgL14oPzpcXC4oPz0oWz1+fVxcc1xcLy4pfF0pKSkvLCAvXig/OltcXC8uXSkvLCAvXig/OlxccyspLywgL14oPzpcXH0ofik/XFx9XFx9KS8sIC9eKD86KH4pP1xcfVxcfSkvLCAvXig/OlwiKFxcXFxbXCJdfFteXCJdKSpcIikvLCAvXig/OicoXFxcXFsnXXxbXiddKSonKS8sIC9eKD86QCkvLCAvXig/OnRydWUoPz0oW359XFxzKV0pKSkvLCAvXig/OmZhbHNlKD89KFt+fVxccyldKSkpLywgL14oPzp1bmRlZmluZWQoPz0oW359XFxzKV0pKSkvLCAvXig/Om51bGwoPz0oW359XFxzKV0pKSkvLCAvXig/Oi0/WzAtOV0rKD86XFwuWzAtOV0rKT8oPz0oW359XFxzKV0pKSkvLCAvXig/OmFzXFxzK1xcfCkvLCAvXig/OlxcfCkvLCAvXig/OihbXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89KFs9fn1cXHNcXC8uKXxdKSkpKS8sIC9eKD86XFxbKFxcXFxcXF18W15cXF1dKSpcXF0pLywgL14oPzouKS8sIC9eKD86JCkvXTtcclxuXHQgICAgICAgIGxleGVyLmNvbmRpdGlvbnMgPSB7IFwibXVcIjogeyBcInJ1bGVzXCI6IFs3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNiwgMTcsIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjYsIDI3LCAyOCwgMjksIDMwLCAzMSwgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDRdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcImVtdVwiOiB7IFwicnVsZXNcIjogWzJdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcImNvbVwiOiB7IFwicnVsZXNcIjogWzZdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcInJhd1wiOiB7IFwicnVsZXNcIjogWzMsIDQsIDVdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcIklOSVRJQUxcIjogeyBcInJ1bGVzXCI6IFswLCAxLCA0NF0sIFwiaW5jbHVzaXZlXCI6IHRydWUgfSB9O1xyXG5cdCAgICAgICAgcmV0dXJuIGxleGVyO1xyXG5cdCAgICB9KSgpO1xyXG5cdCAgICBwYXJzZXIubGV4ZXIgPSBsZXhlcjtcclxuXHQgICAgZnVuY3Rpb24gUGFyc2VyKCkge1xyXG5cdCAgICAgICAgdGhpcy55eSA9IHt9O1xyXG5cdCAgICB9UGFyc2VyLnByb3RvdHlwZSA9IHBhcnNlcjtwYXJzZXIuUGFyc2VyID0gUGFyc2VyO1xyXG5cdCAgICByZXR1cm4gbmV3IFBhcnNlcigpO1xyXG5cdH0pKCk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBoYW5kbGViYXJzO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XHJcblxyXG4vKioqLyB9KSxcclxuLyogMzggKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3Zpc2l0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcclxuXHJcblx0dmFyIF92aXNpdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Zpc2l0b3IpO1xyXG5cclxuXHRmdW5jdGlvbiBXaGl0ZXNwYWNlQ29udHJvbCgpIHtcclxuXHQgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XHJcblxyXG5cdCAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHR9XHJcblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlID0gbmV3IF92aXNpdG9yMlsnZGVmYXVsdCddKCk7XHJcblxyXG5cdFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5Qcm9ncmFtID0gZnVuY3Rpb24gKHByb2dyYW0pIHtcclxuXHQgIHZhciBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XHJcblxyXG5cdCAgdmFyIGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XHJcblx0ICB0aGlzLmlzUm9vdFNlZW4gPSB0cnVlO1xyXG5cclxuXHQgIHZhciBib2R5ID0gcHJvZ3JhbS5ib2R5O1xyXG5cdCAgZm9yICh2YXIgaSA9IDAsIGwgPSBib2R5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICB2YXIgY3VycmVudCA9IGJvZHlbaV0sXHJcblx0ICAgICAgICBzdHJpcCA9IHRoaXMuYWNjZXB0KGN1cnJlbnQpO1xyXG5cclxuXHQgICAgaWYgKCFzdHJpcCkge1xyXG5cdCAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgX2lzUHJldldoaXRlc3BhY2UgPSBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXHJcblx0ICAgICAgICBfaXNOZXh0V2hpdGVzcGFjZSA9IGlzTmV4dFdoaXRlc3BhY2UoYm9keSwgaSwgaXNSb290KSxcclxuXHQgICAgICAgIG9wZW5TdGFuZGFsb25lID0gc3RyaXAub3BlblN0YW5kYWxvbmUgJiYgX2lzUHJldldoaXRlc3BhY2UsXHJcblx0ICAgICAgICBjbG9zZVN0YW5kYWxvbmUgPSBzdHJpcC5jbG9zZVN0YW5kYWxvbmUgJiYgX2lzTmV4dFdoaXRlc3BhY2UsXHJcblx0ICAgICAgICBpbmxpbmVTdGFuZGFsb25lID0gc3RyaXAuaW5saW5lU3RhbmRhbG9uZSAmJiBfaXNQcmV2V2hpdGVzcGFjZSAmJiBfaXNOZXh0V2hpdGVzcGFjZTtcclxuXHJcblx0ICAgIGlmIChzdHJpcC5jbG9zZSkge1xyXG5cdCAgICAgIG9taXRSaWdodChib2R5LCBpLCB0cnVlKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoc3RyaXAub3Blbikge1xyXG5cdCAgICAgIG9taXRMZWZ0KGJvZHksIGksIHRydWUpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIGlubGluZVN0YW5kYWxvbmUpIHtcclxuXHQgICAgICBvbWl0UmlnaHQoYm9keSwgaSk7XHJcblxyXG5cdCAgICAgIGlmIChvbWl0TGVmdChib2R5LCBpKSkge1xyXG5cdCAgICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhbmRhbG9uZSBub2RlLCBzYXZlIHRoZSBpbmRlbnQgaW5mbyBmb3IgcGFydGlhbHNcclxuXHQgICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdQYXJ0aWFsU3RhdGVtZW50Jykge1xyXG5cdCAgICAgICAgICAvLyBQdWxsIG91dCB0aGUgd2hpdGVzcGFjZSBmcm9tIHRoZSBmaW5hbCBsaW5lXHJcblx0ICAgICAgICAgIGN1cnJlbnQuaW5kZW50ID0gLyhbIFxcdF0rJCkvLmV4ZWMoYm9keVtpIC0gMV0ub3JpZ2luYWwpWzFdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIG9wZW5TdGFuZGFsb25lKSB7XHJcblx0ICAgICAgb21pdFJpZ2h0KChjdXJyZW50LnByb2dyYW0gfHwgY3VycmVudC5pbnZlcnNlKS5ib2R5KTtcclxuXHJcblx0ICAgICAgLy8gU3RyaXAgb3V0IHRoZSBwcmV2aW91cyBjb250ZW50IG5vZGUgaWYgaXQncyB3aGl0ZXNwYWNlIG9ubHlcclxuXHQgICAgICBvbWl0TGVmdChib2R5LCBpKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoZG9TdGFuZGFsb25lICYmIGNsb3NlU3RhbmRhbG9uZSkge1xyXG5cdCAgICAgIC8vIEFsd2F5cyBzdHJpcCB0aGUgbmV4dCBub2RlXHJcblx0ICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xyXG5cclxuXHQgICAgICBvbWl0TGVmdCgoY3VycmVudC5pbnZlcnNlIHx8IGN1cnJlbnQucHJvZ3JhbSkuYm9keSk7XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHJcblx0ICByZXR1cm4gcHJvZ3JhbTtcclxuXHR9O1xyXG5cclxuXHRXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuQmxvY2tTdGF0ZW1lbnQgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24gKGJsb2NrKSB7XHJcblx0ICB0aGlzLmFjY2VwdChibG9jay5wcm9ncmFtKTtcclxuXHQgIHRoaXMuYWNjZXB0KGJsb2NrLmludmVyc2UpO1xyXG5cclxuXHQgIC8vIEZpbmQgdGhlIGludmVyc2UgcHJvZ3JhbSB0aGF0IGlzIGludm9sZWQgd2l0aCB3aGl0ZXNwYWNlIHN0cmlwcGluZy5cclxuXHQgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSB8fCBibG9jay5pbnZlcnNlLFxyXG5cdCAgICAgIGludmVyc2UgPSBibG9jay5wcm9ncmFtICYmIGJsb2NrLmludmVyc2UsXHJcblx0ICAgICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZSxcclxuXHQgICAgICBsYXN0SW52ZXJzZSA9IGludmVyc2U7XHJcblxyXG5cdCAgaWYgKGludmVyc2UgJiYgaW52ZXJzZS5jaGFpbmVkKSB7XHJcblx0ICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UuYm9keVswXS5wcm9ncmFtO1xyXG5cclxuXHQgICAgLy8gV2FsayB0aGUgaW52ZXJzZSBjaGFpbiB0byBmaW5kIHRoZSBsYXN0IGludmVyc2UgdGhhdCBpcyBhY3R1YWxseSBpbiB0aGUgY2hhaW4uXHJcblx0ICAgIHdoaWxlIChsYXN0SW52ZXJzZS5jaGFpbmVkKSB7XHJcblx0ICAgICAgbGFzdEludmVyc2UgPSBsYXN0SW52ZXJzZS5ib2R5W2xhc3RJbnZlcnNlLmJvZHkubGVuZ3RoIC0gMV0ucHJvZ3JhbTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBzdHJpcCA9IHtcclxuXHQgICAgb3BlbjogYmxvY2sub3BlblN0cmlwLm9wZW4sXHJcblx0ICAgIGNsb3NlOiBibG9jay5jbG9zZVN0cmlwLmNsb3NlLFxyXG5cclxuXHQgICAgLy8gRGV0ZXJtaW5lIHRoZSBzdGFuZGFsb25lIGNhbmRpYWN5LiBCYXNpY2FsbHkgZmxhZyBvdXIgY29udGVudCBhcyBiZWluZyBwb3NzaWJseSBzdGFuZGFsb25lXHJcblx0ICAgIC8vIHNvIG91ciBwYXJlbnQgY2FuIGRldGVybWluZSBpZiB3ZSBhY3R1YWxseSBhcmUgc3RhbmRhbG9uZVxyXG5cdCAgICBvcGVuU3RhbmRhbG9uZTogaXNOZXh0V2hpdGVzcGFjZShwcm9ncmFtLmJvZHkpLFxyXG5cdCAgICBjbG9zZVN0YW5kYWxvbmU6IGlzUHJldldoaXRlc3BhY2UoKGZpcnN0SW52ZXJzZSB8fCBwcm9ncmFtKS5ib2R5KVxyXG5cdCAgfTtcclxuXHJcblx0ICBpZiAoYmxvY2sub3BlblN0cmlwLmNsb3NlKSB7XHJcblx0ICAgIG9taXRSaWdodChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xyXG5cdCAgfVxyXG5cclxuXHQgIGlmIChpbnZlcnNlKSB7XHJcblx0ICAgIHZhciBpbnZlcnNlU3RyaXAgPSBibG9jay5pbnZlcnNlU3RyaXA7XHJcblxyXG5cdCAgICBpZiAoaW52ZXJzZVN0cmlwLm9wZW4pIHtcclxuXHQgICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoaW52ZXJzZVN0cmlwLmNsb3NlKSB7XHJcblx0ICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5LCBudWxsLCB0cnVlKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XHJcblx0ICAgICAgb21pdExlZnQobGFzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEZpbmQgc3RhbmRhbG9uZSBlbHNlIHN0YXRtZW50c1xyXG5cdCAgICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lICYmIGlzUHJldldoaXRlc3BhY2UocHJvZ3JhbS5ib2R5KSAmJiBpc05leHRXaGl0ZXNwYWNlKGZpcnN0SW52ZXJzZS5ib2R5KSkge1xyXG5cdCAgICAgIG9taXRMZWZ0KHByb2dyYW0uYm9keSk7XHJcblx0ICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5KTtcclxuXHQgICAgfVxyXG5cdCAgfSBlbHNlIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcclxuXHQgICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcclxuXHQgIH1cclxuXHJcblx0ICByZXR1cm4gc3RyaXA7XHJcblx0fTtcclxuXHJcblx0V2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkRlY29yYXRvciA9IFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5NdXN0YWNoZVN0YXRlbWVudCA9IGZ1bmN0aW9uIChtdXN0YWNoZSkge1xyXG5cdCAgcmV0dXJuIG11c3RhY2hlLnN0cmlwO1xyXG5cdH07XHJcblxyXG5cdFdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5QYXJ0aWFsU3RhdGVtZW50ID0gV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLkNvbW1lbnRTdGF0ZW1lbnQgPSBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgIHZhciBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XHJcblx0ICByZXR1cm4ge1xyXG5cdCAgICBpbmxpbmVTdGFuZGFsb25lOiB0cnVlLFxyXG5cdCAgICBvcGVuOiBzdHJpcC5vcGVuLFxyXG5cdCAgICBjbG9zZTogc3RyaXAuY2xvc2VcclxuXHQgIH07XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcclxuXHQgIGlmIChpID09PSB1bmRlZmluZWQpIHtcclxuXHQgICAgaSA9IGJvZHkubGVuZ3RoO1xyXG5cdCAgfVxyXG5cclxuXHQgIC8vIE5vZGVzIHRoYXQgZW5kIHdpdGggbmV3bGluZXMgYXJlIGNvbnNpZGVyZWQgd2hpdGVzcGFjZSAoYnV0IGFyZSBzcGVjaWFsXHJcblx0ICAvLyBjYXNlZCBmb3Igc3RyaXAgb3BlcmF0aW9ucylcclxuXHQgIHZhciBwcmV2ID0gYm9keVtpIC0gMV0sXHJcblx0ICAgICAgc2libGluZyA9IGJvZHlbaSAtIDJdO1xyXG5cdCAgaWYgKCFwcmV2KSB7XHJcblx0ICAgIHJldHVybiBpc1Jvb3Q7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKHByZXYudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XHJcblx0ICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gL1xccj9cXG5cXHMqPyQvIDogLyhefFxccj9cXG4pXFxzKj8kLykudGVzdChwcmV2Lm9yaWdpbmFsKTtcclxuXHQgIH1cclxuXHR9XHJcblx0ZnVuY3Rpb24gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcclxuXHQgIGlmIChpID09PSB1bmRlZmluZWQpIHtcclxuXHQgICAgaSA9IC0xO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBuZXh0ID0gYm9keVtpICsgMV0sXHJcblx0ICAgICAgc2libGluZyA9IGJvZHlbaSArIDJdO1xyXG5cdCAgaWYgKCFuZXh0KSB7XHJcblx0ICAgIHJldHVybiBpc1Jvb3Q7XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKG5leHQudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XHJcblx0ICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gL15cXHMqP1xccj9cXG4vIDogL15cXHMqPyhcXHI/XFxufCQpLykudGVzdChuZXh0Lm9yaWdpbmFsKTtcclxuXHQgIH1cclxuXHR9XHJcblxyXG5cdC8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSByaWdodCBvZiB0aGUgcG9zaXRpb24gYXMgb21pdHRlZC5cclxuXHQvLyBJLmUuIHt7Zm9vfX0nICcgd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxyXG5cdC8vXHJcblx0Ly8gSWYgaSBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXHJcblx0Ly9cclxuXHQvLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxyXG5cdC8vIGNvbnRlbnQgaXMgbWV0LlxyXG5cdGZ1bmN0aW9uIG9taXRSaWdodChib2R5LCBpLCBtdWx0aXBsZSkge1xyXG5cdCAgdmFyIGN1cnJlbnQgPSBib2R5W2kgPT0gbnVsbCA/IDAgOiBpICsgMV07XHJcblx0ICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHwgIW11bHRpcGxlICYmIGN1cnJlbnQucmlnaHRTdHJpcHBlZCkge1xyXG5cdCAgICByZXR1cm47XHJcblx0ICB9XHJcblxyXG5cdCAgdmFyIG9yaWdpbmFsID0gY3VycmVudC52YWx1ZTtcclxuXHQgIGN1cnJlbnQudmFsdWUgPSBjdXJyZW50LnZhbHVlLnJlcGxhY2UobXVsdGlwbGUgPyAvXlxccysvIDogL15bIFxcdF0qXFxyP1xcbj8vLCAnJyk7XHJcblx0ICBjdXJyZW50LnJpZ2h0U3RyaXBwZWQgPSBjdXJyZW50LnZhbHVlICE9PSBvcmlnaW5hbDtcclxuXHR9XHJcblxyXG5cdC8vIE1hcmtzIHRoZSBub2RlIHRvIHRoZSBsZWZ0IG9mIHRoZSBwb3NpdGlvbiBhcyBvbWl0dGVkLlxyXG5cdC8vIEkuZS4gJyAne3tmb299fSB3aWxsIG1hcmsgdGhlICcgJyBub2RlIGFzIG9taXR0ZWQuXHJcblx0Ly9cclxuXHQvLyBJZiBpIGlzIHVuZGVmaW5lZCB0aGVuIHRoZSBsYXN0IGNoaWxkIHdpbGwgYmUgbWFya2VkIGFzIHN1Y2guXHJcblx0Ly9cclxuXHQvLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxyXG5cdC8vIGNvbnRlbnQgaXMgbWV0LlxyXG5cdGZ1bmN0aW9uIG9taXRMZWZ0KGJvZHksIGksIG11bHRpcGxlKSB7XHJcblx0ICB2YXIgY3VycmVudCA9IGJvZHlbaSA9PSBudWxsID8gYm9keS5sZW5ndGggLSAxIDogaSAtIDFdO1xyXG5cdCAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICFtdWx0aXBsZSAmJiBjdXJyZW50LmxlZnRTdHJpcHBlZCkge1xyXG5cdCAgICByZXR1cm47XHJcblx0ICB9XHJcblxyXG5cdCAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VlZGVkIGJ5IGEgbm9uLWNvbnRlbnQgbm9kZS5cclxuXHQgIHZhciBvcmlnaW5hbCA9IGN1cnJlbnQudmFsdWU7XHJcblx0ICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL1xccyskLyA6IC9bIFxcdF0rJC8sICcnKTtcclxuXHQgIGN1cnJlbnQubGVmdFN0cmlwcGVkID0gY3VycmVudC52YWx1ZSAhPT0gb3JpZ2luYWw7XHJcblx0ICByZXR1cm4gY3VycmVudC5sZWZ0U3RyaXBwZWQ7XHJcblx0fVxyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBXaGl0ZXNwYWNlQ29udHJvbDtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAzOSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0ZnVuY3Rpb24gVmlzaXRvcigpIHtcclxuXHQgIHRoaXMucGFyZW50cyA9IFtdO1xyXG5cdH1cclxuXHJcblx0VmlzaXRvci5wcm90b3R5cGUgPSB7XHJcblx0ICBjb25zdHJ1Y3RvcjogVmlzaXRvcixcclxuXHQgIG11dGF0aW5nOiBmYWxzZSxcclxuXHJcblx0ICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxyXG5cdCAgYWNjZXB0S2V5OiBmdW5jdGlvbiBhY2NlcHRLZXkobm9kZSwgbmFtZSkge1xyXG5cdCAgICB2YXIgdmFsdWUgPSB0aGlzLmFjY2VwdChub2RlW25hbWVdKTtcclxuXHQgICAgaWYgKHRoaXMubXV0YXRpbmcpIHtcclxuXHQgICAgICAvLyBIYWNreSBzYW5pdHkgY2hlY2s6IFRoaXMgbWF5IGhhdmUgYSBmZXcgZmFsc2UgcG9zaXRpdmVzIGZvciB0eXBlIGZvciB0aGUgaGVscGVyXHJcblx0ICAgICAgLy8gbWV0aG9kcyBidXQgd2lsbCBnZW5lcmFsbHkgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGhvdXQgYSBsb3Qgb2Ygb3ZlcmhlYWQuXHJcblx0ICAgICAgaWYgKHZhbHVlICYmICFWaXNpdG9yLnByb3RvdHlwZVt2YWx1ZS50eXBlXSkge1xyXG5cdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1VuZXhwZWN0ZWQgbm9kZSB0eXBlIFwiJyArIHZhbHVlLnR5cGUgKyAnXCIgZm91bmQgd2hlbiBhY2NlcHRpbmcgJyArIG5hbWUgKyAnIG9uICcgKyBub2RlLnR5cGUpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICBub2RlW25hbWVdID0gdmFsdWU7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gUGVyZm9ybXMgYW4gYWNjZXB0IG9wZXJhdGlvbiB3aXRoIGFkZGVkIHNhbml0eSBjaGVjayB0byBlbnN1cmVcclxuXHQgIC8vIHJlcXVpcmVkIGtleXMgYXJlIG5vdCByZW1vdmVkLlxyXG5cdCAgYWNjZXB0UmVxdWlyZWQ6IGZ1bmN0aW9uIGFjY2VwdFJlcXVpcmVkKG5vZGUsIG5hbWUpIHtcclxuXHQgICAgdGhpcy5hY2NlcHRLZXkobm9kZSwgbmFtZSk7XHJcblxyXG5cdCAgICBpZiAoIW5vZGVbbmFtZV0pIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBUcmF2ZXJzZXMgYSBnaXZlbiBhcnJheS4gSWYgbXV0YXRpbmcsIGVtcHR5IHJlc3Buc2VzIHdpbGwgYmUgcmVtb3ZlZFxyXG5cdCAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxyXG5cdCAgYWNjZXB0QXJyYXk6IGZ1bmN0aW9uIGFjY2VwdEFycmF5KGFycmF5KSB7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xyXG5cclxuXHQgICAgICBpZiAoIWFycmF5W2ldKSB7XHJcblx0ICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XHJcblx0ICAgICAgICBpLS07XHJcblx0ICAgICAgICBsLS07XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KG9iamVjdCkge1xyXG5cdCAgICBpZiAoIW9iamVjdCkge1xyXG5cdCAgICAgIHJldHVybjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXHJcblx0ICAgIGlmICghdGhpc1tvYmplY3QudHlwZV0pIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0eXBlOiAnICsgb2JqZWN0LnR5cGUsIG9iamVjdCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh0aGlzLmN1cnJlbnQpIHtcclxuXHQgICAgICB0aGlzLnBhcmVudHMudW5zaGlmdCh0aGlzLmN1cnJlbnQpO1xyXG5cdCAgICB9XHJcblx0ICAgIHRoaXMuY3VycmVudCA9IG9iamVjdDtcclxuXHJcblx0ICAgIHZhciByZXQgPSB0aGlzW29iamVjdC50eXBlXShvYmplY3QpO1xyXG5cclxuXHQgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5wYXJlbnRzLnNoaWZ0KCk7XHJcblxyXG5cdCAgICBpZiAoIXRoaXMubXV0YXRpbmcgfHwgcmV0KSB7XHJcblx0ICAgICAgcmV0dXJuIHJldDtcclxuXHQgICAgfSBlbHNlIGlmIChyZXQgIT09IGZhbHNlKSB7XHJcblx0ICAgICAgcmV0dXJuIG9iamVjdDtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBQcm9ncmFtOiBmdW5jdGlvbiBQcm9ncmFtKHByb2dyYW0pIHtcclxuXHQgICAgdGhpcy5hY2NlcHRBcnJheShwcm9ncmFtLmJvZHkpO1xyXG5cdCAgfSxcclxuXHJcblx0ICBNdXN0YWNoZVN0YXRlbWVudDogdmlzaXRTdWJFeHByZXNzaW9uLFxyXG5cdCAgRGVjb3JhdG9yOiB2aXNpdFN1YkV4cHJlc3Npb24sXHJcblxyXG5cdCAgQmxvY2tTdGF0ZW1lbnQ6IHZpc2l0QmxvY2ssXHJcblx0ICBEZWNvcmF0b3JCbG9jazogdmlzaXRCbG9jayxcclxuXHJcblx0ICBQYXJ0aWFsU3RhdGVtZW50OiB2aXNpdFBhcnRpYWwsXHJcblx0ICBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxCbG9ja1N0YXRlbWVudChwYXJ0aWFsKSB7XHJcblx0ICAgIHZpc2l0UGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwpO1xyXG5cclxuXHQgICAgdGhpcy5hY2NlcHRLZXkocGFydGlhbCwgJ3Byb2dyYW0nKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgQ29udGVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29udGVudFN0YXRlbWVudCgpIC8qIGNvbnRlbnQgKi97fSxcclxuXHQgIENvbW1lbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbW1lbnRTdGF0ZW1lbnQoKSAvKiBjb21tZW50ICove30sXHJcblxyXG5cdCAgU3ViRXhwcmVzc2lvbjogdmlzaXRTdWJFeHByZXNzaW9uLFxyXG5cclxuXHQgIFBhdGhFeHByZXNzaW9uOiBmdW5jdGlvbiBQYXRoRXhwcmVzc2lvbigpIC8qIHBhdGggKi97fSxcclxuXHJcblx0ICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKCkgLyogc3RyaW5nICove30sXHJcblx0ICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbiBOdW1iZXJMaXRlcmFsKCkgLyogbnVtYmVyICove30sXHJcblx0ICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24gQm9vbGVhbkxpdGVyYWwoKSAvKiBib29sICove30sXHJcblx0ICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkgLyogbGl0ZXJhbCAqL3t9LFxyXG5cdCAgTnVsbExpdGVyYWw6IGZ1bmN0aW9uIE51bGxMaXRlcmFsKCkgLyogbGl0ZXJhbCAqL3t9LFxyXG5cclxuXHQgIEhhc2g6IGZ1bmN0aW9uIEhhc2goaGFzaCkge1xyXG5cdCAgICB0aGlzLmFjY2VwdEFycmF5KGhhc2gucGFpcnMpO1xyXG5cdCAgfSxcclxuXHQgIEhhc2hQYWlyOiBmdW5jdGlvbiBIYXNoUGFpcihwYWlyKSB7XHJcblx0ICAgIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFpciwgJ3ZhbHVlJyk7XHJcblx0ICB9XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gdmlzaXRTdWJFeHByZXNzaW9uKG11c3RhY2hlKSB7XHJcblx0ICB0aGlzLmFjY2VwdFJlcXVpcmVkKG11c3RhY2hlLCAncGF0aCcpO1xyXG5cdCAgdGhpcy5hY2NlcHRBcnJheShtdXN0YWNoZS5wYXJhbXMpO1xyXG5cdCAgdGhpcy5hY2NlcHRLZXkobXVzdGFjaGUsICdoYXNoJyk7XHJcblx0fVxyXG5cdGZ1bmN0aW9uIHZpc2l0QmxvY2soYmxvY2spIHtcclxuXHQgIHZpc2l0U3ViRXhwcmVzc2lvbi5jYWxsKHRoaXMsIGJsb2NrKTtcclxuXHJcblx0ICB0aGlzLmFjY2VwdEtleShibG9jaywgJ3Byb2dyYW0nKTtcclxuXHQgIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAnaW52ZXJzZScpO1xyXG5cdH1cclxuXHRmdW5jdGlvbiB2aXNpdFBhcnRpYWwocGFydGlhbCkge1xyXG5cdCAgdGhpcy5hY2NlcHRSZXF1aXJlZChwYXJ0aWFsLCAnbmFtZScpO1xyXG5cdCAgdGhpcy5hY2NlcHRBcnJheShwYXJ0aWFsLnBhcmFtcyk7XHJcblx0ICB0aGlzLmFjY2VwdEtleShwYXJ0aWFsLCAnaGFzaCcpO1xyXG5cdH1cclxuXHJcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gVmlzaXRvcjtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0MCAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblx0ZXhwb3J0cy5Tb3VyY2VMb2NhdGlvbiA9IFNvdXJjZUxvY2F0aW9uO1xyXG5cdGV4cG9ydHMuaWQgPSBpZDtcclxuXHRleHBvcnRzLnN0cmlwRmxhZ3MgPSBzdHJpcEZsYWdzO1xyXG5cdGV4cG9ydHMuc3RyaXBDb21tZW50ID0gc3RyaXBDb21tZW50O1xyXG5cdGV4cG9ydHMucHJlcGFyZVBhdGggPSBwcmVwYXJlUGF0aDtcclxuXHRleHBvcnRzLnByZXBhcmVNdXN0YWNoZSA9IHByZXBhcmVNdXN0YWNoZTtcclxuXHRleHBvcnRzLnByZXBhcmVSYXdCbG9jayA9IHByZXBhcmVSYXdCbG9jaztcclxuXHRleHBvcnRzLnByZXBhcmVCbG9jayA9IHByZXBhcmVCbG9jaztcclxuXHRleHBvcnRzLnByZXBhcmVQcm9ncmFtID0gcHJlcGFyZVByb2dyYW07XHJcblx0ZXhwb3J0cy5wcmVwYXJlUGFydGlhbEJsb2NrID0gcHJlcGFyZVBhcnRpYWxCbG9jaztcclxuXHJcblx0dmFyIF9leGNlcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xyXG5cclxuXHR2YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xyXG5cclxuXHRmdW5jdGlvbiB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKSB7XHJcblx0ICBjbG9zZSA9IGNsb3NlLnBhdGggPyBjbG9zZS5wYXRoLm9yaWdpbmFsIDogY2xvc2U7XHJcblxyXG5cdCAgaWYgKG9wZW4ucGF0aC5vcmlnaW5hbCAhPT0gY2xvc2UpIHtcclxuXHQgICAgdmFyIGVycm9yTm9kZSA9IHsgbG9jOiBvcGVuLnBhdGgubG9jIH07XHJcblxyXG5cdCAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShvcGVuLnBhdGgub3JpZ2luYWwgKyBcIiBkb2Vzbid0IG1hdGNoIFwiICsgY2xvc2UsIGVycm9yTm9kZSk7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihzb3VyY2UsIGxvY0luZm8pIHtcclxuXHQgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG5cdCAgdGhpcy5zdGFydCA9IHtcclxuXHQgICAgbGluZTogbG9jSW5mby5maXJzdF9saW5lLFxyXG5cdCAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXHJcblx0ICB9O1xyXG5cdCAgdGhpcy5lbmQgPSB7XHJcblx0ICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxyXG5cdCAgICBjb2x1bW46IGxvY0luZm8ubGFzdF9jb2x1bW5cclxuXHQgIH07XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpZCh0b2tlbikge1xyXG5cdCAgaWYgKC9eXFxbLipcXF0kLy50ZXN0KHRva2VuKSkge1xyXG5cdCAgICByZXR1cm4gdG9rZW4uc3Vic3RyKDEsIHRva2VuLmxlbmd0aCAtIDIpO1xyXG5cdCAgfSBlbHNlIHtcclxuXHQgICAgcmV0dXJuIHRva2VuO1xyXG5cdCAgfVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xyXG5cdCAgcmV0dXJuIHtcclxuXHQgICAgb3Blbjogb3Blbi5jaGFyQXQoMikgPT09ICd+JyxcclxuXHQgICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc3RyaXBDb21tZW50KGNvbW1lbnQpIHtcclxuXHQgIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+P1xcIS0/LT8vLCAnJykucmVwbGFjZSgvLT8tP34/XFx9XFx9JC8sICcnKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZXBhcmVQYXRoKGRhdGEsIHBhcnRzLCBsb2MpIHtcclxuXHQgIGxvYyA9IHRoaXMubG9jSW5mbyhsb2MpO1xyXG5cclxuXHQgIHZhciBvcmlnaW5hbCA9IGRhdGEgPyAnQCcgOiAnJyxcclxuXHQgICAgICBkaWcgPSBbXSxcclxuXHQgICAgICBkZXB0aCA9IDAsXHJcblx0ICAgICAgZGVwdGhTdHJpbmcgPSAnJztcclxuXHJcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICB2YXIgcGFydCA9IHBhcnRzW2ldLnBhcnQsXHJcblxyXG5cdCAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxyXG5cdCAgICAvLyBpLmUuIGZvby5bdGhpc10gcmVzb2x2ZXMgdG8gYXBwcm94aW1hdGVseSBjb250ZXh0LmZvb1sndGhpcyddXHJcblx0ICAgIGlzTGl0ZXJhbCA9IHBhcnRzW2ldLm9yaWdpbmFsICE9PSBwYXJ0O1xyXG5cdCAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XHJcblxyXG5cdCAgICBpZiAoIWlzTGl0ZXJhbCAmJiAocGFydCA9PT0gJy4uJyB8fCBwYXJ0ID09PSAnLicgfHwgcGFydCA9PT0gJ3RoaXMnKSkge1xyXG5cdCAgICAgIGlmIChkaWcubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgcGF0aDogJyArIG9yaWdpbmFsLCB7IGxvYzogbG9jIH0pO1xyXG5cdCAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xyXG5cdCAgICAgICAgZGVwdGgrKztcclxuXHQgICAgICAgIGRlcHRoU3RyaW5nICs9ICcuLi8nO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBkaWcucHVzaChwYXJ0KTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHJldHVybiB7XHJcblx0ICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXHJcblx0ICAgIGRhdGE6IGRhdGEsXHJcblx0ICAgIGRlcHRoOiBkZXB0aCxcclxuXHQgICAgcGFydHM6IGRpZyxcclxuXHQgICAgb3JpZ2luYWw6IG9yaWdpbmFsLFxyXG5cdCAgICBsb2M6IGxvY1xyXG5cdCAgfTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZXBhcmVNdXN0YWNoZShwYXRoLCBwYXJhbXMsIGhhc2gsIG9wZW4sIHN0cmlwLCBsb2NJbmZvKSB7XHJcblx0ICAvLyBNdXN0IHVzZSBjaGFyQXQgdG8gc3VwcG9ydCBJRSBwcmUtMTBcclxuXHQgIHZhciBlc2NhcGVGbGFnID0gb3Blbi5jaGFyQXQoMykgfHwgb3Blbi5jaGFyQXQoMiksXHJcblx0ICAgICAgZXNjYXBlZCA9IGVzY2FwZUZsYWcgIT09ICd7JyAmJiBlc2NhcGVGbGFnICE9PSAnJic7XHJcblxyXG5cdCAgdmFyIGRlY29yYXRvciA9IC9cXCovLnRlc3Qob3Blbik7XHJcblx0ICByZXR1cm4ge1xyXG5cdCAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXHJcblx0ICAgIHBhdGg6IHBhdGgsXHJcblx0ICAgIHBhcmFtczogcGFyYW1zLFxyXG5cdCAgICBoYXNoOiBoYXNoLFxyXG5cdCAgICBlc2NhcGVkOiBlc2NhcGVkLFxyXG5cdCAgICBzdHJpcDogc3RyaXAsXHJcblx0ICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcHJlcGFyZVJhd0Jsb2NrKG9wZW5SYXdCbG9jaywgY29udGVudHMsIGNsb3NlLCBsb2NJbmZvKSB7XHJcblx0ICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xyXG5cclxuXHQgIGxvY0luZm8gPSB0aGlzLmxvY0luZm8obG9jSW5mbyk7XHJcblx0ICB2YXIgcHJvZ3JhbSA9IHtcclxuXHQgICAgdHlwZTogJ1Byb2dyYW0nLFxyXG5cdCAgICBib2R5OiBjb250ZW50cyxcclxuXHQgICAgc3RyaXA6IHt9LFxyXG5cdCAgICBsb2M6IGxvY0luZm9cclxuXHQgIH07XHJcblxyXG5cdCAgcmV0dXJuIHtcclxuXHQgICAgdHlwZTogJ0Jsb2NrU3RhdGVtZW50JyxcclxuXHQgICAgcGF0aDogb3BlblJhd0Jsb2NrLnBhdGgsXHJcblx0ICAgIHBhcmFtczogb3BlblJhd0Jsb2NrLnBhcmFtcyxcclxuXHQgICAgaGFzaDogb3BlblJhd0Jsb2NrLmhhc2gsXHJcblx0ICAgIHByb2dyYW06IHByb2dyYW0sXHJcblx0ICAgIG9wZW5TdHJpcDoge30sXHJcblx0ICAgIGludmVyc2VTdHJpcDoge30sXHJcblx0ICAgIGNsb3NlU3RyaXA6IHt9LFxyXG5cdCAgICBsb2M6IGxvY0luZm9cclxuXHQgIH07XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwcmVwYXJlQmxvY2sob3BlbkJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlQW5kUHJvZ3JhbSwgY2xvc2UsIGludmVydGVkLCBsb2NJbmZvKSB7XHJcblx0ICBpZiAoY2xvc2UgJiYgY2xvc2UucGF0aCkge1xyXG5cdCAgICB2YWxpZGF0ZUNsb3NlKG9wZW5CbG9jaywgY2xvc2UpO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBkZWNvcmF0b3IgPSAvXFwqLy50ZXN0KG9wZW5CbG9jay5vcGVuKTtcclxuXHJcblx0ICBwcm9ncmFtLmJsb2NrUGFyYW1zID0gb3BlbkJsb2NrLmJsb2NrUGFyYW1zO1xyXG5cclxuXHQgIHZhciBpbnZlcnNlID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgIGludmVyc2VTdHJpcCA9IHVuZGVmaW5lZDtcclxuXHJcblx0ICBpZiAoaW52ZXJzZUFuZFByb2dyYW0pIHtcclxuXHQgICAgaWYgKGRlY29yYXRvcikge1xyXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmV4cGVjdGVkIGludmVyc2UgYmxvY2sgb24gZGVjb3JhdG9yJywgaW52ZXJzZUFuZFByb2dyYW0pO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcclxuXHQgICAgICBpbnZlcnNlQW5kUHJvZ3JhbS5wcm9ncmFtLmJvZHlbMF0uY2xvc2VTdHJpcCA9IGNsb3NlLnN0cmlwO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpbnZlcnNlU3RyaXAgPSBpbnZlcnNlQW5kUHJvZ3JhbS5zdHJpcDtcclxuXHQgICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XHJcblx0ICB9XHJcblxyXG5cdCAgaWYgKGludmVydGVkKSB7XHJcblx0ICAgIGludmVydGVkID0gaW52ZXJzZTtcclxuXHQgICAgaW52ZXJzZSA9IHByb2dyYW07XHJcblx0ICAgIHByb2dyYW0gPSBpbnZlcnRlZDtcclxuXHQgIH1cclxuXHJcblx0ICByZXR1cm4ge1xyXG5cdCAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50JyxcclxuXHQgICAgcGF0aDogb3BlbkJsb2NrLnBhdGgsXHJcblx0ICAgIHBhcmFtczogb3BlbkJsb2NrLnBhcmFtcyxcclxuXHQgICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXHJcblx0ICAgIHByb2dyYW06IHByb2dyYW0sXHJcblx0ICAgIGludmVyc2U6IGludmVyc2UsXHJcblx0ICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxyXG5cdCAgICBpbnZlcnNlU3RyaXA6IGludmVyc2VTdHJpcCxcclxuXHQgICAgY2xvc2VTdHJpcDogY2xvc2UgJiYgY2xvc2Uuc3RyaXAsXHJcblx0ICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcHJlcGFyZVByb2dyYW0oc3RhdGVtZW50cywgbG9jKSB7XHJcblx0ICBpZiAoIWxvYyAmJiBzdGF0ZW1lbnRzLmxlbmd0aCkge1xyXG5cdCAgICB2YXIgZmlyc3RMb2MgPSBzdGF0ZW1lbnRzWzBdLmxvYyxcclxuXHQgICAgICAgIGxhc3RMb2MgPSBzdGF0ZW1lbnRzW3N0YXRlbWVudHMubGVuZ3RoIC0gMV0ubG9jO1xyXG5cclxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuXHQgICAgaWYgKGZpcnN0TG9jICYmIGxhc3RMb2MpIHtcclxuXHQgICAgICBsb2MgPSB7XHJcblx0ICAgICAgICBzb3VyY2U6IGZpcnN0TG9jLnNvdXJjZSxcclxuXHQgICAgICAgIHN0YXJ0OiB7XHJcblx0ICAgICAgICAgIGxpbmU6IGZpcnN0TG9jLnN0YXJ0LmxpbmUsXHJcblx0ICAgICAgICAgIGNvbHVtbjogZmlyc3RMb2Muc3RhcnQuY29sdW1uXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZW5kOiB7XHJcblx0ICAgICAgICAgIGxpbmU6IGxhc3RMb2MuZW5kLmxpbmUsXHJcblx0ICAgICAgICAgIGNvbHVtbjogbGFzdExvYy5lbmQuY29sdW1uXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cclxuXHQgIHJldHVybiB7XHJcblx0ICAgIHR5cGU6ICdQcm9ncmFtJyxcclxuXHQgICAgYm9keTogc3RhdGVtZW50cyxcclxuXHQgICAgc3RyaXA6IHt9LFxyXG5cdCAgICBsb2M6IGxvY1xyXG5cdCAgfTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZXBhcmVQYXJ0aWFsQmxvY2sob3BlbiwgcHJvZ3JhbSwgY2xvc2UsIGxvY0luZm8pIHtcclxuXHQgIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpO1xyXG5cclxuXHQgIHJldHVybiB7XHJcblx0ICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxyXG5cdCAgICBuYW1lOiBvcGVuLnBhdGgsXHJcblx0ICAgIHBhcmFtczogb3Blbi5wYXJhbXMsXHJcblx0ICAgIGhhc2g6IG9wZW4uaGFzaCxcclxuXHQgICAgcHJvZ3JhbTogcHJvZ3JhbSxcclxuXHQgICAgb3BlblN0cmlwOiBvcGVuLnN0cmlwLFxyXG5cdCAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcclxuXHQgICAgbG9jOiB0aGlzLmxvY0luZm8obG9jSW5mbylcclxuXHQgIH07XHJcblx0fVxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDQxICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblx0LyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xyXG5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVsnZGVmYXVsdCddO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cdGV4cG9ydHMuQ29tcGlsZXIgPSBDb21waWxlcjtcclxuXHRleHBvcnRzLnByZWNvbXBpbGUgPSBwcmVjb21waWxlO1xyXG5cdGV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGU7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBfYXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XHJcblxyXG5cdHZhciBfYXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzdCk7XHJcblxyXG5cdHZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuXHRmdW5jdGlvbiBDb21waWxlcigpIHt9XHJcblxyXG5cdC8vIHRoZSBmb3VuZEhlbHBlciByZWdpc3RlciB3aWxsIGRpc2FtYmlndWF0ZSBoZWxwZXIgbG9va3VwIGZyb20gZmluZGluZyBhXHJcblx0Ly8gZnVuY3Rpb24gaW4gYSBjb250ZXh0LiBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgbXVzdGFjaGUgY29tcGF0aWJpbGl0eSwgd2hpY2hcclxuXHQvLyByZXF1aXJlcyB0aGF0IGNvbnRleHQgZnVuY3Rpb25zIGluIGJsb2NrcyBhcmUgZXZhbHVhdGVkIGJ5IGJsb2NrSGVscGVyTWlzc2luZyxcclxuXHQvLyBhbmQgdGhlbiBwcm9jZWVkIGFzIGlmIHRoZSByZXN1bHRpbmcgdmFsdWUgd2FzIHByb3ZpZGVkIHRvIGJsb2NrSGVscGVyTWlzc2luZy5cclxuXHJcblx0Q29tcGlsZXIucHJvdG90eXBlID0ge1xyXG5cdCAgY29tcGlsZXI6IENvbXBpbGVyLFxyXG5cclxuXHQgIGVxdWFsczogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XHJcblx0ICAgIHZhciBsZW4gPSB0aGlzLm9wY29kZXMubGVuZ3RoO1xyXG5cdCAgICBpZiAob3RoZXIub3Bjb2Rlcy5sZW5ndGggIT09IGxlbikge1xyXG5cdCAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgIHZhciBvcGNvZGUgPSB0aGlzLm9wY29kZXNbaV0sXHJcblx0ICAgICAgICAgIG90aGVyT3Bjb2RlID0gb3RoZXIub3Bjb2Rlc1tpXTtcclxuXHQgICAgICBpZiAob3Bjb2RlLm9wY29kZSAhPT0gb3RoZXJPcGNvZGUub3Bjb2RlIHx8ICFhcmdFcXVhbHMob3Bjb2RlLmFyZ3MsIG90aGVyT3Bjb2RlLmFyZ3MpKSB7XHJcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBXZSBrbm93IHRoYXQgbGVuZ3RoIGlzIHRoZSBzYW1lIGJldHdlZW4gdGhlIHR3byBhcnJheXMgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSB0aWVkXHJcblx0ICAgIC8vIHRvIHRoZSBvcGNvZGUgYmVoYXZpb3IgYWJvdmUuXHJcblx0ICAgIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xyXG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2ldLmVxdWFscyhvdGhlci5jaGlsZHJlbltpXSkpIHtcclxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfSxcclxuXHJcblx0ICBndWlkOiAwLFxyXG5cclxuXHQgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUocHJvZ3JhbSwgb3B0aW9ucykge1xyXG5cdCAgICB0aGlzLnNvdXJjZU5vZGUgPSBbXTtcclxuXHQgICAgdGhpcy5vcGNvZGVzID0gW107XHJcblx0ICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHQgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSBvcHRpb25zLnN0cmluZ1BhcmFtcztcclxuXHQgICAgdGhpcy50cmFja0lkcyA9IG9wdGlvbnMudHJhY2tJZHM7XHJcblxyXG5cdCAgICBvcHRpb25zLmJsb2NrUGFyYW1zID0gb3B0aW9ucy5ibG9ja1BhcmFtcyB8fCBbXTtcclxuXHJcblx0ICAgIC8vIFRoZXNlIGNoYW5nZXMgd2lsbCBwcm9wYWdhdGUgdG8gdGhlIG90aGVyIGNvbXBpbGVyIGNvbXBvbmVudHNcclxuXHQgICAgdmFyIGtub3duSGVscGVycyA9IG9wdGlvbnMua25vd25IZWxwZXJzO1xyXG5cdCAgICBvcHRpb25zLmtub3duSGVscGVycyA9IHtcclxuXHQgICAgICAnaGVscGVyTWlzc2luZyc6IHRydWUsXHJcblx0ICAgICAgJ2Jsb2NrSGVscGVyTWlzc2luZyc6IHRydWUsXHJcblx0ICAgICAgJ2VhY2gnOiB0cnVlLFxyXG5cdCAgICAgICdpZic6IHRydWUsXHJcblx0ICAgICAgJ3VubGVzcyc6IHRydWUsXHJcblx0ICAgICAgJ3dpdGgnOiB0cnVlLFxyXG5cdCAgICAgICdsb2cnOiB0cnVlLFxyXG5cdCAgICAgICdsb29rdXAnOiB0cnVlXHJcblx0ICAgIH07XHJcblx0ICAgIGlmIChrbm93bkhlbHBlcnMpIHtcclxuXHQgICAgICBmb3IgKHZhciBfbmFtZSBpbiBrbm93bkhlbHBlcnMpIHtcclxuXHQgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcblx0ICAgICAgICBpZiAoX25hbWUgaW4ga25vd25IZWxwZXJzKSB7XHJcblx0ICAgICAgICAgIHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbX25hbWVdID0ga25vd25IZWxwZXJzW19uYW1lXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB0aGlzLmFjY2VwdChwcm9ncmFtKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgY29tcGlsZVByb2dyYW06IGZ1bmN0aW9uIGNvbXBpbGVQcm9ncmFtKHByb2dyYW0pIHtcclxuXHQgICAgdmFyIGNoaWxkQ29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpLFxyXG5cdCAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXHJcblx0ICAgIHJlc3VsdCA9IGNoaWxkQ29tcGlsZXIuY29tcGlsZShwcm9ncmFtLCB0aGlzLm9wdGlvbnMpLFxyXG5cdCAgICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrO1xyXG5cclxuXHQgICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xyXG5cclxuXHQgICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDtcclxuXHQgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCByZXN1bHQudXNlRGVwdGhzO1xyXG5cclxuXHQgICAgcmV0dXJuIGd1aWQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KG5vZGUpIHtcclxuXHQgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXHJcblx0ICAgIGlmICghdGhpc1tub2RlLnR5cGVdKSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdHlwZTogJyArIG5vZGUudHlwZSwgbm9kZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMuc291cmNlTm9kZS51bnNoaWZ0KG5vZGUpO1xyXG5cdCAgICB2YXIgcmV0ID0gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xyXG5cdCAgICB0aGlzLnNvdXJjZU5vZGUuc2hpZnQoKTtcclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0sXHJcblxyXG5cdCAgUHJvZ3JhbTogZnVuY3Rpb24gUHJvZ3JhbShwcm9ncmFtKSB7XHJcblx0ICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy51bnNoaWZ0KHByb2dyYW0uYmxvY2tQYXJhbXMpO1xyXG5cclxuXHQgICAgdmFyIGJvZHkgPSBwcm9ncmFtLmJvZHksXHJcblx0ICAgICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keUxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgdGhpcy5hY2NlcHQoYm9keVtpXSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5zaGlmdCgpO1xyXG5cclxuXHQgICAgdGhpcy5pc1NpbXBsZSA9IGJvZHlMZW5ndGggPT09IDE7XHJcblx0ICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBwcm9ncmFtLmJsb2NrUGFyYW1zID8gcHJvZ3JhbS5ibG9ja1BhcmFtcy5sZW5ndGggOiAwO1xyXG5cclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9LFxyXG5cclxuXHQgIEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBCbG9ja1N0YXRlbWVudChibG9jaykge1xyXG5cdCAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKGJsb2NrKTtcclxuXHJcblx0ICAgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSxcclxuXHQgICAgICAgIGludmVyc2UgPSBibG9jay5pbnZlcnNlO1xyXG5cclxuXHQgICAgcHJvZ3JhbSA9IHByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHQgICAgaW52ZXJzZSA9IGludmVyc2UgJiYgdGhpcy5jb21waWxlUHJvZ3JhbShpbnZlcnNlKTtcclxuXHJcblx0ICAgIHZhciB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKGJsb2NrKTtcclxuXHJcblx0ICAgIGlmICh0eXBlID09PSAnaGVscGVyJykge1xyXG5cdCAgICAgIHRoaXMuaGVscGVyU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaW1wbGUnKSB7XHJcblx0ICAgICAgdGhpcy5zaW1wbGVTZXhwcihibG9jayk7XHJcblxyXG5cdCAgICAgIC8vIG5vdyB0aGF0IHRoZSBzaW1wbGUgbXVzdGFjaGUgaXMgcmVzb2x2ZWQsIHdlIG5lZWQgdG9cclxuXHQgICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcclxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2Jsb2NrVmFsdWUnLCBibG9jay5wYXRoLm9yaWdpbmFsKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLmFtYmlndW91c1NleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcclxuXHJcblx0ICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xyXG5cdCAgICAgIC8vIGV2YWx1YXRlIGl0IGJ5IGV4ZWN1dGluZyBgYmxvY2tIZWxwZXJNaXNzaW5nYFxyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdlbXB0eUhhc2gnKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnYW1iaWd1b3VzQmxvY2tWYWx1ZScpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XHJcblx0ICB9LFxyXG5cclxuXHQgIERlY29yYXRvckJsb2NrOiBmdW5jdGlvbiBEZWNvcmF0b3JCbG9jayhkZWNvcmF0b3IpIHtcclxuXHQgICAgdmFyIHByb2dyYW0gPSBkZWNvcmF0b3IucHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKGRlY29yYXRvci5wcm9ncmFtKTtcclxuXHQgICAgdmFyIHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLFxyXG5cdCAgICAgICAgcGF0aCA9IGRlY29yYXRvci5wYXRoO1xyXG5cclxuXHQgICAgdGhpcy51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ3JlZ2lzdGVyRGVjb3JhdG9yJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCk7XHJcblx0ICB9LFxyXG5cclxuXHQgIFBhcnRpYWxTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxTdGF0ZW1lbnQocGFydGlhbCkge1xyXG5cdCAgICB0aGlzLnVzZVBhcnRpYWwgPSB0cnVlO1xyXG5cclxuXHQgICAgdmFyIHByb2dyYW0gPSBwYXJ0aWFsLnByb2dyYW07XHJcblx0ICAgIGlmIChwcm9ncmFtKSB7XHJcblx0ICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIHBhcmFtcyA9IHBhcnRpYWwucGFyYW1zO1xyXG5cdCAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcclxuXHQgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIHBhcnRpYWwgYXJndW1lbnRzOiAnICsgcGFyYW1zLmxlbmd0aCwgcGFydGlhbCk7XHJcblx0ICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcclxuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLmV4cGxpY2l0UGFydGlhbENvbnRleHQpIHtcclxuXHQgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgcGFyYW1zLnB1c2goeyB0eXBlOiAnUGF0aEV4cHJlc3Npb24nLCBwYXJ0czogW10sIGRlcHRoOiAwIH0pO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIHBhcnRpYWxOYW1lID0gcGFydGlhbC5uYW1lLm9yaWdpbmFsLFxyXG5cdCAgICAgICAgaXNEeW5hbWljID0gcGFydGlhbC5uYW1lLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJztcclxuXHQgICAgaWYgKGlzRHluYW1pYykge1xyXG5cdCAgICAgIHRoaXMuYWNjZXB0KHBhcnRpYWwubmFtZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMocGFydGlhbCwgcHJvZ3JhbSwgdW5kZWZpbmVkLCB0cnVlKTtcclxuXHJcblx0ICAgIHZhciBpbmRlbnQgPSBwYXJ0aWFsLmluZGVudCB8fCAnJztcclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50SW5kZW50ICYmIGluZGVudCkge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgaW5kZW50KTtcclxuXHQgICAgICBpbmRlbnQgPSAnJztcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5vcGNvZGUoJ2ludm9rZVBhcnRpYWwnLCBpc0R5bmFtaWMsIHBhcnRpYWxOYW1lLCBpbmRlbnQpO1xyXG5cdCAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XHJcblx0ICB9LFxyXG5cdCAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQocGFydGlhbEJsb2NrKSB7XHJcblx0ICAgIHRoaXMuUGFydGlhbFN0YXRlbWVudChwYXJ0aWFsQmxvY2spO1xyXG5cdCAgfSxcclxuXHJcblx0ICBNdXN0YWNoZVN0YXRlbWVudDogZnVuY3Rpb24gTXVzdGFjaGVTdGF0ZW1lbnQobXVzdGFjaGUpIHtcclxuXHQgICAgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKTtcclxuXHJcblx0ICAgIGlmIChtdXN0YWNoZS5lc2NhcGVkICYmICF0aGlzLm9wdGlvbnMubm9Fc2NhcGUpIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnYXBwZW5kRXNjYXBlZCcpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHQgIERlY29yYXRvcjogZnVuY3Rpb24gRGVjb3JhdG9yKGRlY29yYXRvcikge1xyXG5cdCAgICB0aGlzLkRlY29yYXRvckJsb2NrKGRlY29yYXRvcik7XHJcblx0ICB9LFxyXG5cclxuXHQgIENvbnRlbnRTdGF0ZW1lbnQ6IGZ1bmN0aW9uIENvbnRlbnRTdGF0ZW1lbnQoY29udGVudCkge1xyXG5cdCAgICBpZiAoY29udGVudC52YWx1ZSkge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRDb250ZW50JywgY29udGVudC52YWx1ZSk7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIHt9LFxyXG5cclxuXHQgIFN1YkV4cHJlc3Npb246IGZ1bmN0aW9uIFN1YkV4cHJlc3Npb24oc2V4cHIpIHtcclxuXHQgICAgdHJhbnNmb3JtTGl0ZXJhbFRvUGF0aChzZXhwcik7XHJcblx0ICAgIHZhciB0eXBlID0gdGhpcy5jbGFzc2lmeVNleHByKHNleHByKTtcclxuXHJcblx0ICAgIGlmICh0eXBlID09PSAnc2ltcGxlJykge1xyXG5cdCAgICAgIHRoaXMuc2ltcGxlU2V4cHIoc2V4cHIpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdoZWxwZXInKSB7XHJcblx0ICAgICAgdGhpcy5oZWxwZXJTZXhwcihzZXhwcik7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhpcy5hbWJpZ3VvdXNTZXhwcihzZXhwcik7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblx0ICBhbWJpZ3VvdXNTZXhwcjogZnVuY3Rpb24gYW1iaWd1b3VzU2V4cHIoc2V4cHIsIHByb2dyYW0sIGludmVyc2UpIHtcclxuXHQgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoLFxyXG5cdCAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF0sXHJcblx0ICAgICAgICBpc0Jsb2NrID0gcHJvZ3JhbSAhPSBudWxsIHx8IGludmVyc2UgIT0gbnVsbDtcclxuXHJcblx0ICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XHJcblxyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XHJcblxyXG5cdCAgICBwYXRoLnN0cmljdCA9IHRydWU7XHJcblx0ICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xyXG5cclxuXHQgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUFtYmlndW91cycsIG5hbWUsIGlzQmxvY2spO1xyXG5cdCAgfSxcclxuXHJcblx0ICBzaW1wbGVTZXhwcjogZnVuY3Rpb24gc2ltcGxlU2V4cHIoc2V4cHIpIHtcclxuXHQgICAgdmFyIHBhdGggPSBzZXhwci5wYXRoO1xyXG5cdCAgICBwYXRoLnN0cmljdCA9IHRydWU7XHJcblx0ICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xyXG5cdCAgICB0aGlzLm9wY29kZSgncmVzb2x2ZVBvc3NpYmxlTGFtYmRhJyk7XHJcblx0ICB9LFxyXG5cclxuXHQgIGhlbHBlclNleHByOiBmdW5jdGlvbiBoZWxwZXJTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xyXG5cdCAgICB2YXIgcGFyYW1zID0gdGhpcy5zZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSksXHJcblx0ICAgICAgICBwYXRoID0gc2V4cHIucGF0aCxcclxuXHQgICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdO1xyXG5cclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnaW52b2tlS25vd25IZWxwZXInLCBwYXJhbXMubGVuZ3RoLCBuYW1lKTtcclxuXHQgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xyXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHBhdGguc3RyaWN0ID0gdHJ1ZTtcclxuXHQgICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcclxuXHJcblx0ICAgICAgdGhpcy5hY2NlcHQocGF0aCk7XHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2ludm9rZUhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwsIF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zaW1wbGVJZChwYXRoKSk7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uIFBhdGhFeHByZXNzaW9uKHBhdGgpIHtcclxuXHQgICAgdGhpcy5hZGREZXB0aChwYXRoLmRlcHRoKTtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcclxuXHJcblx0ICAgIHZhciBuYW1lID0gcGF0aC5wYXJ0c1swXSxcclxuXHQgICAgICAgIHNjb3BlZCA9IF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZChwYXRoKSxcclxuXHQgICAgICAgIGJsb2NrUGFyYW1JZCA9ICFwYXRoLmRlcHRoICYmICFzY29wZWQgJiYgdGhpcy5ibG9ja1BhcmFtSW5kZXgobmFtZSk7XHJcblxyXG5cdCAgICBpZiAoYmxvY2tQYXJhbUlkKSB7XHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cEJsb2NrUGFyYW0nLCBibG9ja1BhcmFtSWQsIHBhdGgucGFydHMpO1xyXG5cdCAgICB9IGVsc2UgaWYgKCFuYW1lKSB7XHJcblx0ICAgICAgLy8gQ29udGV4dCByZWZlcmVuY2UsIGkuZS4gYHt7Zm9vIC59fWAgb3IgYHt7Zm9vIC4ufX1gXHJcblx0ICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hDb250ZXh0Jyk7XHJcblx0ICAgIH0gZWxzZSBpZiAocGF0aC5kYXRhKSB7XHJcblx0ICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSB0cnVlO1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBEYXRhJywgcGF0aC5kZXB0aCwgcGF0aC5wYXJ0cywgcGF0aC5zdHJpY3QpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBPbkNvbnRleHQnLCBwYXRoLnBhcnRzLCBwYXRoLmZhbHN5LCBwYXRoLnN0cmljdCwgc2NvcGVkKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKHN0cmluZykge1xyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZycsIHN0cmluZy52YWx1ZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIE51bWJlckxpdGVyYWw6IGZ1bmN0aW9uIE51bWJlckxpdGVyYWwobnVtYmVyKSB7XHJcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIEJvb2xlYW5MaXRlcmFsOiBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbChib29sKSB7XHJcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIGJvb2wudmFsdWUpO1xyXG5cdCAgfSxcclxuXHJcblx0ICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkge1xyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCAndW5kZWZpbmVkJyk7XHJcblx0ICB9LFxyXG5cclxuXHQgIE51bGxMaXRlcmFsOiBmdW5jdGlvbiBOdWxsTGl0ZXJhbCgpIHtcclxuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgSGFzaDogZnVuY3Rpb24gSGFzaChoYXNoKSB7XHJcblx0ICAgIHZhciBwYWlycyA9IGhhc2gucGFpcnMsXHJcblx0ICAgICAgICBpID0gMCxcclxuXHQgICAgICAgIGwgPSBwYWlycy5sZW5ndGg7XHJcblxyXG5cdCAgICB0aGlzLm9wY29kZSgncHVzaEhhc2gnKTtcclxuXHJcblx0ICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgdGhpcy5wdXNoUGFyYW0ocGFpcnNbaV0udmFsdWUpO1xyXG5cdCAgICB9XHJcblx0ICAgIHdoaWxlIChpLS0pIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnYXNzaWduVG9IYXNoJywgcGFpcnNbaV0ua2V5KTtcclxuXHQgICAgfVxyXG5cdCAgICB0aGlzLm9wY29kZSgncG9wSGFzaCcpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBIRUxQRVJTXHJcblx0ICBvcGNvZGU6IGZ1bmN0aW9uIG9wY29kZShuYW1lKSB7XHJcblx0ICAgIHRoaXMub3Bjb2Rlcy5wdXNoKHsgb3Bjb2RlOiBuYW1lLCBhcmdzOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGxvYzogdGhpcy5zb3VyY2VOb2RlWzBdLmxvYyB9KTtcclxuXHQgIH0sXHJcblxyXG5cdCAgYWRkRGVwdGg6IGZ1bmN0aW9uIGFkZERlcHRoKGRlcHRoKSB7XHJcblx0ICAgIGlmICghZGVwdGgpIHtcclxuXHQgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMudXNlRGVwdGhzID0gdHJ1ZTtcclxuXHQgIH0sXHJcblxyXG5cdCAgY2xhc3NpZnlTZXhwcjogZnVuY3Rpb24gY2xhc3NpZnlTZXhwcihzZXhwcikge1xyXG5cdCAgICB2YXIgaXNTaW1wbGUgPSBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2ltcGxlSWQoc2V4cHIucGF0aCk7XHJcblxyXG5cdCAgICB2YXIgaXNCbG9ja1BhcmFtID0gaXNTaW1wbGUgJiYgISF0aGlzLmJsb2NrUGFyYW1JbmRleChzZXhwci5wYXRoLnBhcnRzWzBdKTtcclxuXHJcblx0ICAgIC8vIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGlmOlxyXG5cdCAgICAvLyAqIGl0cyBpZCBpcyBzaW1wbGUgKGEgc2luZ2xlIHBhcnQsIG5vdCBgdGhpc2Agb3IgYC4uYClcclxuXHQgICAgdmFyIGlzSGVscGVyID0gIWlzQmxvY2tQYXJhbSAmJiBfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuaGVscGVyRXhwcmVzc2lvbihzZXhwcik7XHJcblxyXG5cdCAgICAvLyBpZiBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBidXQgbm90IGEgZGVmaW5pdGVcclxuXHQgICAgLy8gaGVscGVyLCBpdCBpcyBhbWJpZ3VvdXMsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGluIGEgbGF0ZXJcclxuXHQgICAgLy8gcGFzcyBvciBhdCBydW50aW1lLlxyXG5cdCAgICB2YXIgaXNFbGlnaWJsZSA9ICFpc0Jsb2NrUGFyYW0gJiYgKGlzSGVscGVyIHx8IGlzU2ltcGxlKTtcclxuXHJcblx0ICAgIC8vIGlmIGFtYmlndW91cywgd2UgY2FuIHBvc3NpYmx5IHJlc29sdmUgdGhlIGFtYmlndWl0eSBub3dcclxuXHQgICAgLy8gQW4gZWxpZ2libGUgaGVscGVyIGlzIG9uZSB0aGF0IGRvZXMgbm90IGhhdmUgYSBjb21wbGV4IHBhdGgsIGkuZS4gYHRoaXMuZm9vYCwgYC4uL2Zvb2AgZXRjLlxyXG5cdCAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHtcclxuXHQgICAgICB2YXIgX25hbWUyID0gc2V4cHIucGF0aC5wYXJ0c1swXSxcclxuXHQgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcclxuXHJcblx0ICAgICAgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzW19uYW1lMl0pIHtcclxuXHQgICAgICAgIGlzSGVscGVyID0gdHJ1ZTtcclxuXHQgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua25vd25IZWxwZXJzT25seSkge1xyXG5cdCAgICAgICAgaXNFbGlnaWJsZSA9IGZhbHNlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKGlzSGVscGVyKSB7XHJcblx0ICAgICAgcmV0dXJuICdoZWxwZXInO1xyXG5cdCAgICB9IGVsc2UgaWYgKGlzRWxpZ2libGUpIHtcclxuXHQgICAgICByZXR1cm4gJ2FtYmlndW91cyc7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuICdzaW1wbGUnO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2hQYXJhbXM6IGZ1bmN0aW9uIHB1c2hQYXJhbXMocGFyYW1zKSB7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICAgIHRoaXMucHVzaFBhcmFtKHBhcmFtc1tpXSk7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgcHVzaFBhcmFtOiBmdW5jdGlvbiBwdXNoUGFyYW0odmFsKSB7XHJcblx0ICAgIHZhciB2YWx1ZSA9IHZhbC52YWx1ZSAhPSBudWxsID8gdmFsLnZhbHVlIDogdmFsLm9yaWdpbmFsIHx8ICcnO1xyXG5cclxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcclxuXHQgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXihcXC4/XFwuXFwvKSovZywgJycpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgaWYgKHZhbC5kZXB0aCkge1xyXG5cdCAgICAgICAgdGhpcy5hZGREZXB0aCh2YWwuZGVwdGgpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICB0aGlzLm9wY29kZSgnZ2V0Q29udGV4dCcsIHZhbC5kZXB0aCB8fCAwKTtcclxuXHQgICAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZ1BhcmFtJywgdmFsdWUsIHZhbC50eXBlKTtcclxuXHJcblx0ICAgICAgaWYgKHZhbC50eXBlID09PSAnU3ViRXhwcmVzc2lvbicpIHtcclxuXHQgICAgICAgIC8vIFN1YkV4cHJlc3Npb25zIGdldCBldmFsdWF0ZWQgYW5kIHBhc3NlZCBpblxyXG5cdCAgICAgICAgLy8gaW4gc3RyaW5nIHBhcmFtcyBtb2RlLlxyXG5cdCAgICAgICAgdGhpcy5hY2NlcHQodmFsKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICAgIHZhciBibG9ja1BhcmFtSW5kZXggPSB1bmRlZmluZWQ7XHJcblx0ICAgICAgICBpZiAodmFsLnBhcnRzICYmICFfYXN0MlsnZGVmYXVsdCddLmhlbHBlcnMuc2NvcGVkSWQodmFsKSAmJiAhdmFsLmRlcHRoKSB7XHJcblx0ICAgICAgICAgIGJsb2NrUGFyYW1JbmRleCA9IHRoaXMuYmxvY2tQYXJhbUluZGV4KHZhbC5wYXJ0c1swXSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoYmxvY2tQYXJhbUluZGV4KSB7XHJcblx0ICAgICAgICAgIHZhciBibG9ja1BhcmFtQ2hpbGQgPSB2YWwucGFydHMuc2xpY2UoMSkuam9pbignLicpO1xyXG5cdCAgICAgICAgICB0aGlzLm9wY29kZSgncHVzaElkJywgJ0Jsb2NrUGFyYW0nLCBibG9ja1BhcmFtSW5kZXgsIGJsb2NrUGFyYW1DaGlsZCk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICB2YWx1ZSA9IHZhbC5vcmlnaW5hbCB8fCB2YWx1ZTtcclxuXHQgICAgICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcclxuXHQgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL150aGlzKD86XFwufCQpLywgJycpLnJlcGxhY2UoL15cXC5cXC8vLCAnJykucmVwbGFjZSgvXlxcLiQvLCAnJyk7XHJcblx0ICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCB2YWwudHlwZSwgdmFsdWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgICB0aGlzLmFjY2VwdCh2YWwpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHNldHVwRnVsbE11c3RhY2hlUGFyYW1zOiBmdW5jdGlvbiBzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtcyhzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSwgb21pdEVtcHR5KSB7XHJcblx0ICAgIHZhciBwYXJhbXMgPSBzZXhwci5wYXJhbXM7XHJcblx0ICAgIHRoaXMucHVzaFBhcmFtcyhwYXJhbXMpO1xyXG5cclxuXHQgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgcHJvZ3JhbSk7XHJcblx0ICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xyXG5cclxuXHQgICAgaWYgKHNleHByLmhhc2gpIHtcclxuXHQgICAgICB0aGlzLmFjY2VwdChzZXhwci5oYXNoKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJywgb21pdEVtcHR5KTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHBhcmFtcztcclxuXHQgIH0sXHJcblxyXG5cdCAgYmxvY2tQYXJhbUluZGV4OiBmdW5jdGlvbiBibG9ja1BhcmFtSW5kZXgobmFtZSkge1xyXG5cdCAgICBmb3IgKHZhciBkZXB0aCA9IDAsIGxlbiA9IHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5sZW5ndGg7IGRlcHRoIDwgbGVuOyBkZXB0aCsrKSB7XHJcblx0ICAgICAgdmFyIGJsb2NrUGFyYW1zID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zW2RlcHRoXSxcclxuXHQgICAgICAgICAgcGFyYW0gPSBibG9ja1BhcmFtcyAmJiBfdXRpbHMuaW5kZXhPZihibG9ja1BhcmFtcywgbmFtZSk7XHJcblx0ICAgICAgaWYgKGJsb2NrUGFyYW1zICYmIHBhcmFtID49IDApIHtcclxuXHQgICAgICAgIHJldHVybiBbZGVwdGgsIHBhcmFtXTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBwcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBlbnYpIHtcclxuXHQgIGlmIChpbnB1dCA9PSBudWxsIHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSB7XHJcblx0ICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMucHJlY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpO1xyXG5cdCAgfVxyXG5cclxuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdCAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XHJcblx0ICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XHJcblx0ICB9XHJcblx0ICBpZiAob3B0aW9ucy5jb21wYXQpIHtcclxuXHQgICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxyXG5cdCAgICAgIGVudmlyb25tZW50ID0gbmV3IGVudi5Db21waWxlcigpLmNvbXBpbGUoYXN0LCBvcHRpb25zKTtcclxuXHQgIHJldHVybiBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY29tcGlsZShpbnB1dCwgb3B0aW9ucywgZW52KSB7XHJcblx0ICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XHJcblxyXG5cdCAgaWYgKGlucHV0ID09IG51bGwgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJyAmJiBpbnB1dC50eXBlICE9PSAnUHJvZ3JhbScpIHtcclxuXHQgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5jb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XHJcblx0ICB9XHJcblxyXG5cdCAgb3B0aW9ucyA9IF91dGlscy5leHRlbmQoe30sIG9wdGlvbnMpO1xyXG5cdCAgaWYgKCEoJ2RhdGEnIGluIG9wdGlvbnMpKSB7XHJcblx0ICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XHJcblx0ICB9XHJcblx0ICBpZiAob3B0aW9ucy5jb21wYXQpIHtcclxuXHQgICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xyXG5cdCAgfVxyXG5cclxuXHQgIHZhciBjb21waWxlZCA9IHVuZGVmaW5lZDtcclxuXHJcblx0ICBmdW5jdGlvbiBjb21waWxlSW5wdXQoKSB7XHJcblx0ICAgIHZhciBhc3QgPSBlbnYucGFyc2UoaW5wdXQsIG9wdGlvbnMpLFxyXG5cdCAgICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpLFxyXG5cdCAgICAgICAgdGVtcGxhdGVTcGVjID0gbmV3IGVudi5KYXZhU2NyaXB0Q29tcGlsZXIoKS5jb21waWxlKGVudmlyb25tZW50LCBvcHRpb25zLCB1bmRlZmluZWQsIHRydWUpO1xyXG5cdCAgICByZXR1cm4gZW52LnRlbXBsYXRlKHRlbXBsYXRlU3BlYyk7XHJcblx0ICB9XHJcblxyXG5cdCAgLy8gVGVtcGxhdGUgaXMgb25seSBjb21waWxlZCBvbiBmaXJzdCB1c2UgYW5kIGNhY2hlZCBhZnRlciB0aGF0IHBvaW50LlxyXG5cdCAgZnVuY3Rpb24gcmV0KGNvbnRleHQsIGV4ZWNPcHRpb25zKSB7XHJcblx0ICAgIGlmICghY29tcGlsZWQpIHtcclxuXHQgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBjb21waWxlZC5jYWxsKHRoaXMsIGNvbnRleHQsIGV4ZWNPcHRpb25zKTtcclxuXHQgIH1cclxuXHQgIHJldC5fc2V0dXAgPSBmdW5jdGlvbiAoc2V0dXBPcHRpb25zKSB7XHJcblx0ICAgIGlmICghY29tcGlsZWQpIHtcclxuXHQgICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBjb21waWxlZC5fc2V0dXAoc2V0dXBPcHRpb25zKTtcclxuXHQgIH07XHJcblx0ICByZXQuX2NoaWxkID0gZnVuY3Rpb24gKGksIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcclxuXHQgICAgaWYgKCFjb21waWxlZCkge1xyXG5cdCAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGNvbXBpbGVkLl9jaGlsZChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcclxuXHQgIH07XHJcblx0ICByZXR1cm4gcmV0O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYXJnRXF1YWxzKGEsIGIpIHtcclxuXHQgIGlmIChhID09PSBiKSB7XHJcblx0ICAgIHJldHVybiB0cnVlO1xyXG5cdCAgfVxyXG5cclxuXHQgIGlmIChfdXRpbHMuaXNBcnJheShhKSAmJiBfdXRpbHMuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGgpIHtcclxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgaWYgKCFhcmdFcXVhbHMoYVtpXSwgYltpXSkpIHtcclxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKSB7XHJcblx0ICBpZiAoIXNleHByLnBhdGgucGFydHMpIHtcclxuXHQgICAgdmFyIGxpdGVyYWwgPSBzZXhwci5wYXRoO1xyXG5cdCAgICAvLyBDYXN0aW5nIHRvIHN0cmluZyBoZXJlIHRvIG1ha2UgZmFsc2UgYW5kIDAgbGl0ZXJhbCB2YWx1ZXMgcGxheSBuaWNlbHkgd2l0aCB0aGUgcmVzdFxyXG5cdCAgICAvLyBvZiB0aGUgc3lzdGVtLlxyXG5cdCAgICBzZXhwci5wYXRoID0ge1xyXG5cdCAgICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXHJcblx0ICAgICAgZGF0YTogZmFsc2UsXHJcblx0ICAgICAgZGVwdGg6IDAsXHJcblx0ICAgICAgcGFydHM6IFtsaXRlcmFsLm9yaWdpbmFsICsgJyddLFxyXG5cdCAgICAgIG9yaWdpbmFsOiBsaXRlcmFsLm9yaWdpbmFsICsgJycsXHJcblx0ICAgICAgbG9jOiBsaXRlcmFsLmxvY1xyXG5cdCAgICB9O1xyXG5cdCAgfVxyXG5cdH1cclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0MiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpWydkZWZhdWx0J107XHJcblxyXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XHJcblxyXG5cdHZhciBfYmFzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcblxyXG5cdHZhciBfZXhjZXB0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcclxuXHJcblx0dmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcclxuXHJcblx0dmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XHJcblxyXG5cdHZhciBfY29kZUdlbiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xyXG5cclxuXHR2YXIgX2NvZGVHZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29kZUdlbik7XHJcblxyXG5cdGZ1bmN0aW9uIExpdGVyYWwodmFsdWUpIHtcclxuXHQgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIEphdmFTY3JpcHRDb21waWxlcigpIHt9XHJcblxyXG5cdEphdmFTY3JpcHRDb21waWxlci5wcm90b3R5cGUgPSB7XHJcblx0ICAvLyBQVUJMSUMgQVBJOiBZb3UgY2FuIG92ZXJyaWRlIHRoZXNlIG1ldGhvZHMgaW4gYSBzdWJjbGFzcyB0byBwcm92aWRlXHJcblx0ICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3NcclxuXHQgIG5hbWVMb29rdXA6IGZ1bmN0aW9uIG5hbWVMb29rdXAocGFyZW50LCBuYW1lIC8qICwgdHlwZSovKSB7XHJcblx0ICAgIGlmIChKYXZhU2NyaXB0Q29tcGlsZXIuaXNWYWxpZEphdmFTY3JpcHRWYXJpYWJsZU5hbWUobmFtZSkpIHtcclxuXHQgICAgICByZXR1cm4gW3BhcmVudCwgJy4nLCBuYW1lXTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICByZXR1cm4gW3BhcmVudCwgJ1snLCBKU09OLnN0cmluZ2lmeShuYW1lKSwgJ10nXTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHQgIGRlcHRoZWRMb29rdXA6IGZ1bmN0aW9uIGRlcHRoZWRMb29rdXAobmFtZSkge1xyXG5cdCAgICByZXR1cm4gW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubG9va3VwJyksICcoZGVwdGhzLCBcIicsIG5hbWUsICdcIiknXTtcclxuXHQgIH0sXHJcblxyXG5cdCAgY29tcGlsZXJJbmZvOiBmdW5jdGlvbiBjb21waWxlckluZm8oKSB7XHJcblx0ICAgIHZhciByZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OLFxyXG5cdCAgICAgICAgdmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW3JldmlzaW9uXTtcclxuXHQgICAgcmV0dXJuIFtyZXZpc2lvbiwgdmVyc2lvbnNdO1xyXG5cdCAgfSxcclxuXHJcblx0ICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24gYXBwZW5kVG9CdWZmZXIoc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcclxuXHQgICAgLy8gRm9yY2UgYSBzb3VyY2UgYXMgdGhpcyBzaW1wbGlmaWVzIHRoZSBtZXJnZSBsb2dpYy5cclxuXHQgICAgaWYgKCFfdXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XHJcblx0ICAgICAgc291cmNlID0gW3NvdXJjZV07XHJcblx0ICAgIH1cclxuXHQgICAgc291cmNlID0gdGhpcy5zb3VyY2Uud3JhcChzb3VyY2UsIGxvY2F0aW9uKTtcclxuXHJcblx0ICAgIGlmICh0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlKSB7XHJcblx0ICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTtcclxuXHQgICAgfSBlbHNlIGlmIChleHBsaWNpdCkge1xyXG5cdCAgICAgIC8vIFRoaXMgaXMgYSBjYXNlIHdoZXJlIHRoZSBidWZmZXIgb3BlcmF0aW9uIG9jY3VycyBhcyBhIGNoaWxkIG9mIGFub3RoZXJcclxuXHQgICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyXHJcblx0ICAgICAgLy8gb3BlcmF0aW9ucyB0byBlbnN1cmUgdGhhdCB0aGUgZW1pdHRlZCBjb2RlIGdvZXMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXHJcblx0ICAgICAgcmV0dXJuIFsnYnVmZmVyICs9ICcsIHNvdXJjZSwgJzsnXTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBzb3VyY2UuYXBwZW5kVG9CdWZmZXIgPSB0cnVlO1xyXG5cdCAgICAgIHJldHVybiBzb3VyY2U7XHJcblx0ICAgIH1cclxuXHQgIH0sXHJcblxyXG5cdCAgaW5pdGlhbGl6ZUJ1ZmZlcjogZnVuY3Rpb24gaW5pdGlhbGl6ZUJ1ZmZlcigpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCcnKTtcclxuXHQgIH0sXHJcblx0ICAvLyBFTkQgUFVCTElDIEFQSVxyXG5cclxuXHQgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7XHJcblx0ICAgIHRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcclxuXHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuXHQgICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zO1xyXG5cdCAgICB0aGlzLnRyYWNrSWRzID0gdGhpcy5vcHRpb25zLnRyYWNrSWRzO1xyXG5cdCAgICB0aGlzLnByZWNvbXBpbGUgPSAhYXNPYmplY3Q7XHJcblxyXG5cdCAgICB0aGlzLm5hbWUgPSB0aGlzLmVudmlyb25tZW50Lm5hbWU7XHJcblx0ICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcclxuXHQgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dCB8fCB7XHJcblx0ICAgICAgZGVjb3JhdG9yczogW10sXHJcblx0ICAgICAgcHJvZ3JhbXM6IFtdLFxyXG5cdCAgICAgIGVudmlyb25tZW50czogW11cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHRoaXMucHJlYW1ibGUoKTtcclxuXHJcblx0ICAgIHRoaXMuc3RhY2tTbG90ID0gMDtcclxuXHQgICAgdGhpcy5zdGFja1ZhcnMgPSBbXTtcclxuXHQgICAgdGhpcy5hbGlhc2VzID0ge307XHJcblx0ICAgIHRoaXMucmVnaXN0ZXJzID0geyBsaXN0OiBbXSB9O1xyXG5cdCAgICB0aGlzLmhhc2hlcyA9IFtdO1xyXG5cdCAgICB0aGlzLmNvbXBpbGVTdGFjayA9IFtdO1xyXG5cdCAgICB0aGlzLmlubGluZVN0YWNrID0gW107XHJcblx0ICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTtcclxuXHJcblx0ICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcclxuXHJcblx0ICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHwgdGhpcy5vcHRpb25zLmNvbXBhdDtcclxuXHQgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZW52aXJvbm1lbnQudXNlQmxvY2tQYXJhbXM7XHJcblxyXG5cdCAgICB2YXIgb3Bjb2RlcyA9IGVudmlyb25tZW50Lm9wY29kZXMsXHJcblx0ICAgICAgICBvcGNvZGUgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBmaXJzdExvYyA9IHVuZGVmaW5lZCxcclxuXHQgICAgICAgIGkgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBsID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgZm9yIChpID0gMCwgbCA9IG9wY29kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcclxuXHJcblx0ICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYztcclxuXHQgICAgICBmaXJzdExvYyA9IGZpcnN0TG9jIHx8IG9wY29kZS5sb2M7XHJcblx0ICAgICAgdGhpc1tvcGNvZGUub3Bjb2RlXS5hcHBseSh0aGlzLCBvcGNvZGUuYXJncyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy5cclxuXHQgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gZmlyc3RMb2M7XHJcblx0ICAgIHRoaXMucHVzaFNvdXJjZSgnJyk7XHJcblxyXG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XHJcblx0ICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0NvbXBpbGUgY29tcGxldGVkIHdpdGggY29udGVudCBsZWZ0IG9uIHN0YWNrJyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICghdGhpcy5kZWNvcmF0b3JzLmlzRW1wdHkoKSkge1xyXG5cdCAgICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XHJcblxyXG5cdCAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCd2YXIgZGVjb3JhdG9ycyA9IGNvbnRhaW5lci5kZWNvcmF0b3JzO1xcbicpO1xyXG5cdCAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCdyZXR1cm4gZm47Jyk7XHJcblxyXG5cdCAgICAgIGlmIChhc09iamVjdCkge1xyXG5cdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gRnVuY3Rpb24uYXBwbHkodGhpcywgWydmbicsICdwcm9wcycsICdjb250YWluZXInLCAnZGVwdGgwJywgJ2RhdGEnLCAnYmxvY2tQYXJhbXMnLCAnZGVwdGhzJywgdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCldKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgdGhpcy5kZWNvcmF0b3JzLnByZXBlbmQoJ2Z1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aDAsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcXG4nKTtcclxuXHQgICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCd9XFxuJyk7XHJcblx0ICAgICAgICB0aGlzLmRlY29yYXRvcnMgPSB0aGlzLmRlY29yYXRvcnMubWVyZ2UoKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhpcy5kZWNvcmF0b3JzID0gdW5kZWZpbmVkO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgZm4gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uQ29udGV4dChhc09iamVjdCk7XHJcblx0ICAgIGlmICghdGhpcy5pc0NoaWxkKSB7XHJcblx0ICAgICAgdmFyIHJldCA9IHtcclxuXHQgICAgICAgIGNvbXBpbGVyOiB0aGlzLmNvbXBpbGVySW5mbygpLFxyXG5cdCAgICAgICAgbWFpbjogZm5cclxuXHQgICAgICB9O1xyXG5cclxuXHQgICAgICBpZiAodGhpcy5kZWNvcmF0b3JzKSB7XHJcblx0ICAgICAgICByZXQubWFpbl9kID0gdGhpcy5kZWNvcmF0b3JzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxyXG5cdCAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgdmFyIF9jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cdCAgICAgIHZhciBwcm9ncmFtcyA9IF9jb250ZXh0LnByb2dyYW1zO1xyXG5cdCAgICAgIHZhciBkZWNvcmF0b3JzID0gX2NvbnRleHQuZGVjb3JhdG9ycztcclxuXHJcblx0ICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICAgICAgaWYgKHByb2dyYW1zW2ldKSB7XHJcblx0ICAgICAgICAgIHJldFtpXSA9IHByb2dyYW1zW2ldO1xyXG5cdCAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xyXG5cdCAgICAgICAgICAgIHJldFtpICsgJ19kJ10gPSBkZWNvcmF0b3JzW2ldO1xyXG5cdCAgICAgICAgICAgIHJldC51c2VEZWNvcmF0b3JzID0gdHJ1ZTtcclxuXHQgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHJcblx0ICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQudXNlUGFydGlhbCkge1xyXG5cdCAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLmRhdGEpIHtcclxuXHQgICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XHJcblx0ICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMpIHtcclxuXHQgICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XHJcblx0ICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIGlmICghYXNPYmplY3QpIHtcclxuXHQgICAgICAgIHJldC5jb21waWxlciA9IEpTT04uc3RyaW5naWZ5KHJldC5jb21waWxlcik7XHJcblxyXG5cdCAgICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0geyBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSB9O1xyXG5cdCAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7XHJcblxyXG5cdCAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xyXG5cdCAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmdXaXRoU291cmNlTWFwKHsgZmlsZTogb3B0aW9ucy5kZXN0TmFtZSB9KTtcclxuXHQgICAgICAgICAgcmV0Lm1hcCA9IHJldC5tYXAgJiYgcmV0Lm1hcC50b1N0cmluZygpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgcmV0ID0gcmV0LnRvU3RyaW5nKCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHJldC5jb21waWxlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcblx0ICAgICAgfVxyXG5cclxuXHQgICAgICByZXR1cm4gcmV0O1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHJldHVybiBmbjtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBwcmVhbWJsZTogZnVuY3Rpb24gcHJlYW1ibGUoKSB7XHJcblx0ICAgIC8vIHRyYWNrIHRoZSBsYXN0IGNvbnRleHQgcHVzaGVkIGludG8gcGxhY2UgdG8gYWxsb3cgc2tpcHBpbmcgdGhlXHJcblx0ICAgIC8vIGdldENvbnRleHQgb3Bjb2RlIHdoZW4gaXQgd291bGQgYmUgYSBub29wXHJcblx0ICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xyXG5cdCAgICB0aGlzLnNvdXJjZSA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XHJcblx0ICAgIHRoaXMuZGVjb3JhdG9ycyA9IG5ldyBfY29kZUdlbjJbJ2RlZmF1bHQnXSh0aGlzLm9wdGlvbnMuc3JjTmFtZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KSB7XHJcblx0ICAgIHZhciB2YXJEZWNsYXJhdGlvbnMgPSAnJztcclxuXHJcblx0ICAgIHZhciBsb2NhbHMgPSB0aGlzLnN0YWNrVmFycy5jb25jYXQodGhpcy5yZWdpc3RlcnMubGlzdCk7XHJcblx0ICAgIGlmIChsb2NhbHMubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCAnICsgbG9jYWxzLmpvaW4oJywgJyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEdlbmVyYXRlIG1pbmltaXplciBhbGlhcyBtYXBwaW5nc1xyXG5cdCAgICAvL1xyXG5cdCAgICAvLyBXaGVuIHVzaW5nIHRydWUgU291cmNlTm9kZXMsIHRoaXMgd2lsbCB1cGRhdGUgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIGdpdmVuIGFsaWFzXHJcblx0ICAgIC8vIGFzIHRoZSBzb3VyY2Ugbm9kZXMgYXJlIHJldXNlZCBpbiBzaXR1LiBGb3IgdGhlIG5vbi1zb3VyY2Ugbm9kZSBjb21waWxhdGlvbiBtb2RlLFxyXG5cdCAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmRcclxuXHQgICAgLy8gd2UgYXJlbid0IGNvbmNlcm4gYWJvdXQgbWluaW1pemluZyB0aGUgdGVtcGxhdGUgc2l6ZS5cclxuXHQgICAgdmFyIGFsaWFzQ291bnQgPSAwO1xyXG5cdCAgICBmb3IgKHZhciBhbGlhcyBpbiB0aGlzLmFsaWFzZXMpIHtcclxuXHQgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGd1YXJkLWZvci1pblxyXG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5hbGlhc2VzW2FsaWFzXTtcclxuXHJcblx0ICAgICAgaWYgKHRoaXMuYWxpYXNlcy5oYXNPd25Qcm9wZXJ0eShhbGlhcykgJiYgbm9kZS5jaGlsZHJlbiAmJiBub2RlLnJlZmVyZW5jZUNvdW50ID4gMSkge1xyXG5cdCAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICsrYWxpYXNDb3VudCArICc9JyArIGFsaWFzO1xyXG5cdCAgICAgICAgbm9kZS5jaGlsZHJlblswXSA9ICdhbGlhcycgKyBhbGlhc0NvdW50O1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTtcclxuXHJcblx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XHJcblx0ICAgICAgcGFyYW1zLnB1c2goJ2Jsb2NrUGFyYW1zJyk7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XHJcblx0ICAgICAgcGFyYW1zLnB1c2goJ2RlcHRocycpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBQZXJmb3JtIGEgc2Vjb25kIHBhc3Mgb3ZlciB0aGUgb3V0cHV0IHRvIG1lcmdlIGNvbnRlbnQgd2hlbiBwb3NzaWJsZVxyXG5cdCAgICB2YXIgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpO1xyXG5cclxuXHQgICAgaWYgKGFzT2JqZWN0KSB7XHJcblx0ICAgICAgcGFyYW1zLnB1c2goc291cmNlKTtcclxuXHJcblx0ICAgICAgcmV0dXJuIEZ1bmN0aW9uLmFwcGx5KHRoaXMsIHBhcmFtcyk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XFxuICAnLCBzb3VyY2UsICd9J10pO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uIG1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucykge1xyXG5cdCAgICB2YXIgaXNTaW1wbGUgPSB0aGlzLmVudmlyb25tZW50LmlzU2ltcGxlLFxyXG5cdCAgICAgICAgYXBwZW5kT25seSA9ICF0aGlzLmZvcmNlQnVmZmVyLFxyXG5cdCAgICAgICAgYXBwZW5kRmlyc3QgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBzb3VyY2VTZWVuID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgYnVmZmVyU3RhcnQgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XHJcblx0ICAgIHRoaXMuc291cmNlLmVhY2goZnVuY3Rpb24gKGxpbmUpIHtcclxuXHQgICAgICBpZiAobGluZS5hcHBlbmRUb0J1ZmZlcikge1xyXG5cdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XHJcblx0ICAgICAgICAgIGxpbmUucHJlcGVuZCgnICArICcpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgYnVmZmVyU3RhcnQgPSBsaW5lO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgYnVmZmVyRW5kID0gbGluZTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XHJcblx0ICAgICAgICAgIGlmICghc291cmNlU2Vlbikge1xyXG5cdCAgICAgICAgICAgIGFwcGVuZEZpcnN0ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdidWZmZXIgKz0gJyk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xyXG5cdCAgICAgICAgICBidWZmZXJTdGFydCA9IGJ1ZmZlckVuZCA9IHVuZGVmaW5lZDtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBzb3VyY2VTZWVuID0gdHJ1ZTtcclxuXHQgICAgICAgIGlmICghaXNTaW1wbGUpIHtcclxuXHQgICAgICAgICAgYXBwZW5kT25seSA9IGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH1cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBpZiAoYXBwZW5kT25seSkge1xyXG5cdCAgICAgIGlmIChidWZmZXJTdGFydCkge1xyXG5cdCAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgncmV0dXJuICcpO1xyXG5cdCAgICAgICAgYnVmZmVyRW5kLmFkZCgnOycpO1xyXG5cdCAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcclxuXHQgICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBcIlwiOycpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgYnVmZmVyID0gJyArIChhcHBlbmRGaXJzdCA/ICcnIDogdGhpcy5pbml0aWFsaXplQnVmZmVyKCkpO1xyXG5cclxuXHQgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcclxuXHQgICAgICAgIGJ1ZmZlclN0YXJ0LnByZXBlbmQoJ3JldHVybiBidWZmZXIgKyAnKTtcclxuXHQgICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIGJ1ZmZlcjsnKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh2YXJEZWNsYXJhdGlvbnMpIHtcclxuXHQgICAgICB0aGlzLnNvdXJjZS5wcmVwZW5kKCd2YXIgJyArIHZhckRlY2xhcmF0aW9ucy5zdWJzdHJpbmcoMikgKyAoYXBwZW5kRmlyc3QgPyAnJyA6ICc7XFxuJykpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2Jsb2NrVmFsdWVdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgdmFsdWVcclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmV0dXJuIHZhbHVlIG9mIGJsb2NrSGVscGVyTWlzc2luZ1xyXG5cdCAgLy9cclxuXHQgIC8vIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3Bjb2RlIGlzIHRvIHRha2UgYSBibG9jayBvZiB0aGUgZm9ybVxyXG5cdCAgLy8gYHt7I3RoaXMuZm9vfX0uLi57ey90aGlzLmZvb319YCwgcmVzb2x2ZSB0aGUgdmFsdWUgb2YgYGZvb2AsIGFuZFxyXG5cdCAgLy8gcmVwbGFjZSBpdCBvbiB0aGUgc3RhY2sgd2l0aCB0aGUgcmVzdWx0IG9mIHByb3Blcmx5XHJcblx0ICAvLyBpbnZva2luZyBibG9ja0hlbHBlck1pc3NpbmcuXHJcblx0ICBibG9ja1ZhbHVlOiBmdW5jdGlvbiBibG9ja1ZhbHVlKG5hbWUpIHtcclxuXHQgICAgdmFyIGJsb2NrSGVscGVyTWlzc2luZyA9IHRoaXMuYWxpYXNhYmxlKCdoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZycpLFxyXG5cdCAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xyXG5cdCAgICB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCAwLCBwYXJhbXMpO1xyXG5cclxuXHQgICAgdmFyIGJsb2NrTmFtZSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBibG9ja05hbWUpO1xyXG5cclxuXHQgICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbChibG9ja0hlbHBlck1pc3NpbmcsICdjYWxsJywgcGFyYW1zKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFthbWJpZ3VvdXNCbG9ja1ZhbHVlXVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHZhbHVlXHJcblx0ICAvLyBDb21waWxlciB2YWx1ZSwgYmVmb3JlOiBsYXN0SGVscGVyPXZhbHVlIG9mIGxhc3QgZm91bmQgaGVscGVyLCBpZiBhbnlcclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbm8gbGFzdEhlbHBlcjogc2FtZSBhcyBbYmxvY2tWYWx1ZV1cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlciwgaWYgbGFzdEhlbHBlcjogdmFsdWVcclxuXHQgIGFtYmlndW91c0Jsb2NrVmFsdWU6IGZ1bmN0aW9uIGFtYmlndW91c0Jsb2NrVmFsdWUoKSB7XHJcblx0ICAgIC8vIFdlJ3JlIGJlaW5nIGEgYml0IGNoZWVreSBhbmQgcmV1c2luZyB0aGUgb3B0aW9ucyB2YWx1ZSBmcm9tIHRoZSBwcmlvciBleGVjXHJcblx0ICAgIHZhciBibG9ja0hlbHBlck1pc3NpbmcgPSB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcclxuXHQgICAgICAgIHBhcmFtcyA9IFt0aGlzLmNvbnRleHROYW1lKDApXTtcclxuXHQgICAgdGhpcy5zZXR1cEhlbHBlckFyZ3MoJycsIDAsIHBhcmFtcywgdHJ1ZSk7XHJcblxyXG5cdCAgICB0aGlzLmZsdXNoSW5saW5lKCk7XHJcblxyXG5cdCAgICB2YXIgY3VycmVudCA9IHRoaXMudG9wU3RhY2soKTtcclxuXHQgICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcclxuXHJcblx0ICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICghJywgdGhpcy5sYXN0SGVscGVyLCAnKSB7ICcsIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksICd9J10pO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbYXBwZW5kQ29udGVudF1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcclxuXHQgIGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uIGFwcGVuZENvbnRlbnQoY29udGVudCkge1xyXG5cdCAgICBpZiAodGhpcy5wZW5kaW5nQ29udGVudCkge1xyXG5cdCAgICAgIGNvbnRlbnQgPSB0aGlzLnBlbmRpbmdDb250ZW50ICsgY29udGVudDtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLnBlbmRpbmdMb2NhdGlvbiA9IHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IGNvbnRlbnQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFthcHBlbmRdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cclxuXHQgIC8vXHJcblx0ICAvLyBDb2VyY2VzIGB2YWx1ZWAgdG8gYSBTdHJpbmcgYW5kIGFwcGVuZHMgaXQgdG8gdGhlIGN1cnJlbnQgYnVmZmVyLlxyXG5cdCAgLy9cclxuXHQgIC8vIElmIGB2YWx1ZWAgaXMgdHJ1dGh5LCBvciAwLCBpdCBpcyBjb2VyY2VkIGludG8gYSBzdHJpbmcgYW5kIGFwcGVuZGVkXHJcblx0ICAvLyBPdGhlcndpc2UsIHRoZSBlbXB0eSBzdHJpbmcgaXMgYXBwZW5kZWRcclxuXHQgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xyXG5cdCAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XHJcblx0ICAgICAgdGhpcy5yZXBsYWNlU3RhY2soZnVuY3Rpb24gKGN1cnJlbnQpIHtcclxuXHQgICAgICAgIHJldHVybiBbJyAhPSBudWxsID8gJywgY3VycmVudCwgJyA6IFwiXCInXTtcclxuXHQgICAgICB9KTtcclxuXHJcblx0ICAgICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5wb3BTdGFjaygpKSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdmFyIGxvY2FsID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cdCAgICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICgnLCBsb2NhbCwgJyAhPSBudWxsKSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIobG9jYWwsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcclxuXHQgICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xyXG5cdCAgICAgICAgdGhpcy5wdXNoU291cmNlKFsnZWxzZSB7ICcsIHRoaXMuYXBwZW5kVG9CdWZmZXIoXCInJ1wiLCB1bmRlZmluZWQsIHRydWUpLCAnIH0nXSk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFthcHBlbmRFc2NhcGVkXVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXHJcblx0ICBhcHBlbmRFc2NhcGVkOiBmdW5jdGlvbiBhcHBlbmRFc2NhcGVkKCkge1xyXG5cdCAgICB0aGlzLnB1c2hTb3VyY2UodGhpcy5hcHBlbmRUb0J1ZmZlcihbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnKSddKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtnZXRDb250ZXh0XVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cclxuXHQgIC8vIENvbXBpbGVyIHZhbHVlLCBhZnRlcjogbGFzdENvbnRleHQ9ZGVwdGhcclxuXHQgIC8vXHJcblx0ICAvLyBTZXQgdGhlIHZhbHVlIG9mIHRoZSBgbGFzdENvbnRleHRgIGNvbXBpbGVyIHZhbHVlIHRvIHRoZSBkZXB0aFxyXG5cdCAgZ2V0Q29udGV4dDogZnVuY3Rpb24gZ2V0Q29udGV4dChkZXB0aCkge1xyXG5cdCAgICB0aGlzLmxhc3RDb250ZXh0ID0gZGVwdGg7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtwdXNoQ29udGV4dF1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHQsIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFB1c2hlcyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29udGV4dCBvbnRvIHRoZSBzdGFjay5cclxuXHQgIHB1c2hDb250ZXh0OiBmdW5jdGlvbiBwdXNoQ29udGV4dCgpIHtcclxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMuY29udGV4dE5hbWUodGhpcy5sYXN0Q29udGV4dCkpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbbG9va3VwT25Db250ZXh0XVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiBjdXJyZW50Q29udGV4dFtuYW1lXSwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gTG9va3MgdXAgdGhlIHZhbHVlIG9mIGBuYW1lYCBvbiB0aGUgY3VycmVudCBjb250ZXh0IGFuZCBwdXNoZXNcclxuXHQgIC8vIGl0IG9udG8gdGhlIHN0YWNrLlxyXG5cdCAgbG9va3VwT25Db250ZXh0OiBmdW5jdGlvbiBsb29rdXBPbkNvbnRleHQocGFydHMsIGZhbHN5LCBzdHJpY3QsIHNjb3BlZCkge1xyXG5cdCAgICB2YXIgaSA9IDA7XHJcblxyXG5cdCAgICBpZiAoIXNjb3BlZCAmJiB0aGlzLm9wdGlvbnMuY29tcGF0ICYmICF0aGlzLmxhc3RDb250ZXh0KSB7XHJcblx0ICAgICAgLy8gVGhlIGRlcHRoZWQgcXVlcnkgaXMgZXhwZWN0ZWQgdG8gaGFuZGxlIHRoZSB1bmRlZmluZWQgbG9naWMgZm9yIHRoZSByb290IGxldmVsIHRoYXRcclxuXHQgICAgICAvLyBpcyBpbXBsZW1lbnRlZCBiZWxvdywgc28gd2UgZXZhbHVhdGUgdGhhdCBkaXJlY3RseSBpbiBjb21wYXQgbW9kZVxyXG5cdCAgICAgIHRoaXMucHVzaCh0aGlzLmRlcHRoZWRMb29rdXAocGFydHNbaSsrXSkpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMucHVzaENvbnRleHQoKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2xvb2t1cEJsb2NrUGFyYW1dXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXHJcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGJsb2NrUGFyYW1bbmFtZV0sIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIExvb2tzIHVwIHRoZSB2YWx1ZSBvZiBgcGFydHNgIG9uIHRoZSBnaXZlbiBibG9jayBwYXJhbSBhbmQgcHVzaGVzXHJcblx0ICAvLyBpdCBvbnRvIHRoZSBzdGFjay5cclxuXHQgIGxvb2t1cEJsb2NrUGFyYW06IGZ1bmN0aW9uIGxvb2t1cEJsb2NrUGFyYW0oYmxvY2tQYXJhbUlkLCBwYXJ0cykge1xyXG5cdCAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdHJ1ZTtcclxuXHJcblx0ICAgIHRoaXMucHVzaChbJ2Jsb2NrUGFyYW1zWycsIGJsb2NrUGFyYW1JZFswXSwgJ11bJywgYmxvY2tQYXJhbUlkWzFdLCAnXSddKTtcclxuXHQgICAgdGhpcy5yZXNvbHZlUGF0aCgnY29udGV4dCcsIHBhcnRzLCAxKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2xvb2t1cERhdGFdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXHJcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGRhdGEsIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFB1c2ggdGhlIGRhdGEgbG9va3VwIG9wZXJhdG9yXHJcblx0ICBsb29rdXBEYXRhOiBmdW5jdGlvbiBsb29rdXBEYXRhKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XHJcblx0ICAgIGlmICghZGVwdGgpIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2RhdGEnKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2NvbnRhaW5lci5kYXRhKGRhdGEsICcgKyBkZXB0aCArICcpJyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2RhdGEnLCBwYXJ0cywgMCwgdHJ1ZSwgc3RyaWN0KTtcclxuXHQgIH0sXHJcblxyXG5cdCAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uIHJlc29sdmVQYXRoKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XHJcblx0ICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XHJcblxyXG5cdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcclxuXHQgICAgICB0aGlzLnB1c2goc3RyaWN0TG9va3VwKHRoaXMub3B0aW9ucy5zdHJpY3QgJiYgc3RyaWN0LCB0aGlzLCBwYXJ0cywgdHlwZSkpO1xyXG5cdCAgICAgIHJldHVybjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIGxlbiA9IHBhcnRzLmxlbmd0aDtcclxuXHQgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG5cdCAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGZ1bmN0aW9uIChjdXJyZW50KSB7XHJcblx0ICAgICAgICB2YXIgbG9va3VwID0gX3RoaXMubmFtZUxvb2t1cChjdXJyZW50LCBwYXJ0c1tpXSwgdHlwZSk7XHJcblx0ICAgICAgICAvLyBXZSB3YW50IHRvIGVuc3VyZSB0aGF0IHplcm8gYW5kIGZhbHNlIGFyZSBoYW5kbGVkIHByb3Blcmx5IGlmIHRoZSBjb250ZXh0IChmYWxzeSBmbGFnKVxyXG5cdCAgICAgICAgLy8gbmVlZHMgdG8gaGF2ZSB0aGUgc3BlY2lhbCBoYW5kbGluZyBmb3IgdGhlc2UgdmFsdWVzLlxyXG5cdCAgICAgICAgaWYgKCFmYWxzeSkge1xyXG5cdCAgICAgICAgICByZXR1cm4gWycgIT0gbnVsbCA/ICcsIGxvb2t1cCwgJyA6ICcsIGN1cnJlbnRdO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbiB1c2UgZ2VuZXJpYyBmYWxzeSBoYW5kbGluZ1xyXG5cdCAgICAgICAgICByZXR1cm4gWycgJiYgJywgbG9va3VwXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9KTtcclxuXHQgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtyZXNvbHZlUG9zc2libGVMYW1iZGFdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXNvbHZlZCB2YWx1ZSwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gSWYgdGhlIGB2YWx1ZWAgaXMgYSBsYW1iZGEsIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGJ5XHJcblx0ICAvLyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBsYW1iZGFcclxuXHQgIHJlc29sdmVQb3NzaWJsZUxhbWJkYTogZnVuY3Rpb24gcmVzb2x2ZVBvc3NpYmxlTGFtYmRhKCkge1xyXG5cdCAgICB0aGlzLnB1c2goW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIubGFtYmRhJyksICcoJywgdGhpcy5wb3BTdGFjaygpLCAnLCAnLCB0aGlzLmNvbnRleHROYW1lKDApLCAnKSddKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGNvZGUgaXMgZGVzaWduZWQgZm9yIHVzZSBpbiBzdHJpbmcgbW9kZSwgd2hpY2hcclxuXHQgIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcclxuXHQgIC8vIGRlcHRoIHJhdGhlciB0aGFuIHJlc29sdmluZyBpdCBpbW1lZGlhdGVseS5cclxuXHQgIHB1c2hTdHJpbmdQYXJhbTogZnVuY3Rpb24gcHVzaFN0cmluZ1BhcmFtKHN0cmluZywgdHlwZSkge1xyXG5cdCAgICB0aGlzLnB1c2hDb250ZXh0KCk7XHJcblx0ICAgIHRoaXMucHVzaFN0cmluZyh0eXBlKTtcclxuXHJcblx0ICAgIC8vIElmIGl0J3MgYSBzdWJleHByZXNzaW9uLCB0aGUgc3RyaW5nIHJlc3VsdFxyXG5cdCAgICAvLyB3aWxsIGJlIHB1c2hlZCBhZnRlciB0aGlzIG9wY29kZS5cclxuXHQgICAgaWYgKHR5cGUgIT09ICdTdWJFeHByZXNzaW9uJykge1xyXG5cdCAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJykge1xyXG5cdCAgICAgICAgdGhpcy5wdXNoU3RyaW5nKHN0cmluZyk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChzdHJpbmcpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBlbXB0eUhhc2g6IGZ1bmN0aW9uIGVtcHR5SGFzaChvbWl0RW1wdHkpIHtcclxuXHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hJZHNcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcclxuXHQgICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hDb250ZXh0c1xyXG5cdCAgICAgIHRoaXMucHVzaCgne30nKTsgLy8gaGFzaFR5cGVzXHJcblx0ICAgIH1cclxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG9taXRFbXB0eSA/ICd1bmRlZmluZWQnIDogJ3t9Jyk7XHJcblx0ICB9LFxyXG5cdCAgcHVzaEhhc2g6IGZ1bmN0aW9uIHB1c2hIYXNoKCkge1xyXG5cdCAgICBpZiAodGhpcy5oYXNoKSB7XHJcblx0ICAgICAgdGhpcy5oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xyXG5cdCAgICB9XHJcblx0ICAgIHRoaXMuaGFzaCA9IHsgdmFsdWVzOiBbXSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW10gfTtcclxuXHQgIH0sXHJcblx0ICBwb3BIYXNoOiBmdW5jdGlvbiBwb3BIYXNoKCkge1xyXG5cdCAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcclxuXHQgICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoZXMucG9wKCk7XHJcblxyXG5cdCAgICBpZiAodGhpcy50cmFja0lkcykge1xyXG5cdCAgICAgIHRoaXMucHVzaCh0aGlzLm9iamVjdExpdGVyYWwoaGFzaC5pZHMpKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcclxuXHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guY29udGV4dHMpKTtcclxuXHQgICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLnZhbHVlcykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbcHVzaFN0cmluZ11cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcXVvdGVkU3RyaW5nKHN0cmluZyksIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFB1c2ggYSBxdW90ZWQgdmVyc2lvbiBvZiBgc3RyaW5nYCBvbnRvIHRoZSBzdGFja1xyXG5cdCAgcHVzaFN0cmluZzogZnVuY3Rpb24gcHVzaFN0cmluZyhzdHJpbmcpIHtcclxuXHQgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucXVvdGVkU3RyaW5nKHN0cmluZykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbcHVzaExpdGVyYWxdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXHJcblx0ICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHZhbHVlLCAuLi5cclxuXHQgIC8vXHJcblx0ICAvLyBQdXNoZXMgYSB2YWx1ZSBvbnRvIHRoZSBzdGFjay4gVGhpcyBvcGVyYXRpb24gcHJldmVudHNcclxuXHQgIC8vIHRoZSBjb21waWxlciBmcm9tIGNyZWF0aW5nIGEgdGVtcG9yYXJ5IHZhcmlhYmxlIHRvIGhvbGRcclxuXHQgIC8vIGl0LlxyXG5cdCAgcHVzaExpdGVyYWw6IGZ1bmN0aW9uIHB1c2hMaXRlcmFsKHZhbHVlKSB7XHJcblx0ICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCh2YWx1ZSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtwdXNoUHJvZ3JhbV1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcHJvZ3JhbShndWlkKSwgLi4uXHJcblx0ICAvL1xyXG5cdCAgLy8gUHVzaCBhIHByb2dyYW0gZXhwcmVzc2lvbiBvbnRvIHRoZSBzdGFjay4gVGhpcyB0YWtlc1xyXG5cdCAgLy8gYSBjb21waWxlLXRpbWUgZ3VpZCBhbmQgY29udmVydHMgaXQgaW50byBhIHJ1bnRpbWUtYWNjZXNzaWJsZVxyXG5cdCAgLy8gZXhwcmVzc2lvbi5cclxuXHQgIHB1c2hQcm9ncmFtOiBmdW5jdGlvbiBwdXNoUHJvZ3JhbShndWlkKSB7XHJcblx0ICAgIGlmIChndWlkICE9IG51bGwpIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5wcm9ncmFtRXhwcmVzc2lvbihndWlkKSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG51bGwpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtyZWdpc3RlckRlY29yYXRvcl1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cclxuXHQgIC8vXHJcblx0ICAvLyBQb3BzIG9mZiB0aGUgZGVjb3JhdG9yJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgZGVjb3JhdG9yLFxyXG5cdCAgLy8gYW5kIGluc2VydHMgdGhlIGRlY29yYXRvciBpbnRvIHRoZSBkZWNvcmF0b3JzIGxpc3QuXHJcblx0ICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IocGFyYW1TaXplLCBuYW1lKSB7XHJcblx0ICAgIHZhciBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcclxuXHQgICAgICAgIG9wdGlvbnMgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUpO1xyXG5cclxuXHQgICAgdGhpcy5kZWNvcmF0b3JzLnB1c2goWydmbiA9ICcsIHRoaXMuZGVjb3JhdG9ycy5mdW5jdGlvbkNhbGwoZm91bmREZWNvcmF0b3IsICcnLCBbJ2ZuJywgJ3Byb3BzJywgJ2NvbnRhaW5lcicsIG9wdGlvbnNdKSwgJyB8fCBmbjsnXSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIFtpbnZva2VIZWxwZXJdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXHJcblx0ICAvL1xyXG5cdCAgLy8gUG9wcyBvZmYgdGhlIGhlbHBlcidzIHBhcmFtZXRlcnMsIGludm9rZXMgdGhlIGhlbHBlcixcclxuXHQgIC8vIGFuZCBwdXNoZXMgdGhlIGhlbHBlcidzIHJldHVybiB2YWx1ZSBvbnRvIHRoZSBzdGFjay5cclxuXHQgIC8vXHJcblx0ICAvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCBmb3VuZCwgYGhlbHBlck1pc3NpbmdgIGlzIGNhbGxlZC5cclxuXHQgIGludm9rZUhlbHBlcjogZnVuY3Rpb24gaW52b2tlSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSwgaXNTaW1wbGUpIHtcclxuXHQgICAgdmFyIG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcclxuXHQgICAgICAgIGhlbHBlciA9IHRoaXMuc2V0dXBIZWxwZXIocGFyYW1TaXplLCBuYW1lKSxcclxuXHQgICAgICAgIHNpbXBsZSA9IGlzU2ltcGxlID8gW2hlbHBlci5uYW1lLCAnIHx8ICddIDogJyc7XHJcblxyXG5cdCAgICB2YXIgbG9va3VwID0gWycoJ10uY29uY2F0KHNpbXBsZSwgbm9uSGVscGVyKTtcclxuXHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XHJcblx0ICAgICAgbG9va3VwLnB1c2goJyB8fCAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xyXG5cdCAgICB9XHJcblx0ICAgIGxvb2t1cC5wdXNoKCcpJyk7XHJcblxyXG5cdCAgICB0aGlzLnB1c2godGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKGxvb2t1cCwgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbaW52b2tlS25vd25IZWxwZXJdXHJcblx0ICAvL1xyXG5cdCAgLy8gT24gc3RhY2ssIGJlZm9yZTogaGFzaCwgaW52ZXJzZSwgcHJvZ3JhbSwgcGFyYW1zLi4uLCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gaXMgdXNlZCB3aGVuIHRoZSBoZWxwZXIgaXMga25vd24gdG8gZXhpc3QsXHJcblx0ICAvLyBzbyBhIGBoZWxwZXJNaXNzaW5nYCBmYWxsYmFjayBpcyBub3QgcmVxdWlyZWQuXHJcblx0ICBpbnZva2VLbm93bkhlbHBlcjogZnVuY3Rpb24gaW52b2tlS25vd25IZWxwZXIocGFyYW1TaXplLCBuYW1lKSB7XHJcblx0ICAgIHZhciBoZWxwZXIgPSB0aGlzLnNldHVwSGVscGVyKHBhcmFtU2l6ZSwgbmFtZSk7XHJcblx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoaGVscGVyLm5hbWUsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgLy8gW2ludm9rZUFtYmlndW91c11cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXN1bHQgb2YgZGlzYW1iaWd1YXRpb25cclxuXHQgIC8vXHJcblx0ICAvLyBUaGlzIG9wZXJhdGlvbiBpcyB1c2VkIHdoZW4gYW4gZXhwcmVzc2lvbiBsaWtlIGB7e2Zvb319YFxyXG5cdCAgLy8gaXMgcHJvdmlkZWQsIGJ1dCB3ZSBkb24ndCBrbm93IGF0IGNvbXBpbGUtdGltZSB3aGV0aGVyIGl0XHJcblx0ICAvLyBpcyBhIGhlbHBlciBvciBhIHBhdGguXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gZW1pdHMgbW9yZSBjb2RlIHRoYW4gdGhlIG90aGVyIG9wdGlvbnMsXHJcblx0ICAvLyBhbmQgY2FuIGJlIGF2b2lkZWQgYnkgcGFzc2luZyB0aGUgYGtub3duSGVscGVyc2AgYW5kXHJcblx0ICAvLyBga25vd25IZWxwZXJzT25seWAgZmxhZ3MgYXQgY29tcGlsZS10aW1lLlxyXG5cdCAgaW52b2tlQW1iaWd1b3VzOiBmdW5jdGlvbiBpbnZva2VBbWJpZ3VvdXMobmFtZSwgaGVscGVyQ2FsbCkge1xyXG5cdCAgICB0aGlzLnVzZVJlZ2lzdGVyKCdoZWxwZXInKTtcclxuXHJcblx0ICAgIHZhciBub25IZWxwZXIgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblxyXG5cdCAgICB0aGlzLmVtcHR5SGFzaCgpO1xyXG5cdCAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcigwLCBuYW1lLCBoZWxwZXJDYWxsKTtcclxuXHJcblx0ICAgIHZhciBoZWxwZXJOYW1lID0gdGhpcy5sYXN0SGVscGVyID0gdGhpcy5uYW1lTG9va3VwKCdoZWxwZXJzJywgbmFtZSwgJ2hlbHBlcicpO1xyXG5cclxuXHQgICAgdmFyIGxvb2t1cCA9IFsnKCcsICcoaGVscGVyID0gJywgaGVscGVyTmFtZSwgJyB8fCAnLCBub25IZWxwZXIsICcpJ107XHJcblx0ICAgIGlmICghdGhpcy5vcHRpb25zLnN0cmljdCkge1xyXG5cdCAgICAgIGxvb2t1cFswXSA9ICcoaGVscGVyID0gJztcclxuXHQgICAgICBsb29rdXAucHVzaCgnICE9IG51bGwgPyBoZWxwZXIgOiAnLCB0aGlzLmFsaWFzYWJsZSgnaGVscGVycy5oZWxwZXJNaXNzaW5nJykpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB0aGlzLnB1c2goWycoJywgbG9va3VwLCBoZWxwZXIucGFyYW1zSW5pdCA/IFsnKSwoJywgaGVscGVyLnBhcmFtc0luaXRdIDogW10sICcpLCcsICcodHlwZW9mIGhlbHBlciA9PT0gJywgdGhpcy5hbGlhc2FibGUoJ1wiZnVuY3Rpb25cIicpLCAnID8gJywgdGhpcy5zb3VyY2UuZnVuY3Rpb25DYWxsKCdoZWxwZXInLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKSwgJyA6IGhlbHBlcikpJ10pO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbaW52b2tlUGFydGlhbF1cclxuXHQgIC8vXHJcblx0ICAvLyBPbiBzdGFjaywgYmVmb3JlOiBjb250ZXh0LCAuLi5cclxuXHQgIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXHJcblx0ICAvL1xyXG5cdCAgLy8gVGhpcyBvcGVyYXRpb24gcG9wcyBvZmYgYSBjb250ZXh0LCBpbnZva2VzIGEgcGFydGlhbCB3aXRoIHRoYXQgY29udGV4dCxcclxuXHQgIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxyXG5cdCAgaW52b2tlUGFydGlhbDogZnVuY3Rpb24gaW52b2tlUGFydGlhbChpc0R5bmFtaWMsIG5hbWUsIGluZGVudCkge1xyXG5cdCAgICB2YXIgcGFyYW1zID0gW10sXHJcblx0ICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xyXG5cclxuXHQgICAgaWYgKGlzRHluYW1pYykge1xyXG5cdCAgICAgIG5hbWUgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKGluZGVudCkge1xyXG5cdCAgICAgIG9wdGlvbnMuaW5kZW50ID0gSlNPTi5zdHJpbmdpZnkoaW5kZW50KTtcclxuXHQgICAgfVxyXG5cdCAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XHJcblx0ICAgIG9wdGlvbnMucGFydGlhbHMgPSAncGFydGlhbHMnO1xyXG5cdCAgICBvcHRpb25zLmRlY29yYXRvcnMgPSAnY29udGFpbmVyLmRlY29yYXRvcnMnO1xyXG5cclxuXHQgICAgaWYgKCFpc0R5bmFtaWMpIHtcclxuXHQgICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcGFyYW1zLnVuc2hpZnQobmFtZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XHJcblx0ICAgICAgb3B0aW9ucy5kZXB0aHMgPSAnZGVwdGhzJztcclxuXHQgICAgfVxyXG5cdCAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xyXG5cdCAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcclxuXHJcblx0ICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoJ2NvbnRhaW5lci5pbnZva2VQYXJ0aWFsJywgJycsIHBhcmFtcykpO1xyXG5cdCAgfSxcclxuXHJcblx0ICAvLyBbYXNzaWduVG9IYXNoXVxyXG5cdCAgLy9cclxuXHQgIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi4sIGhhc2gsIC4uLlxyXG5cdCAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi4sIGhhc2gsIC4uLlxyXG5cdCAgLy9cclxuXHQgIC8vIFBvcHMgYSB2YWx1ZSBvZmYgdGhlIHN0YWNrIGFuZCBhc3NpZ25zIGl0IHRvIHRoZSBjdXJyZW50IGhhc2hcclxuXHQgIGFzc2lnblRvSGFzaDogZnVuY3Rpb24gYXNzaWduVG9IYXNoKGtleSkge1xyXG5cdCAgICB2YXIgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXHJcblx0ICAgICAgICBjb250ZXh0ID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgdHlwZSA9IHVuZGVmaW5lZCxcclxuXHQgICAgICAgIGlkID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICBpZCA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcclxuXHQgICAgICB0eXBlID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cdCAgICAgIGNvbnRleHQgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xyXG5cdCAgICBpZiAoY29udGV4dCkge1xyXG5cdCAgICAgIGhhc2guY29udGV4dHNba2V5XSA9IGNvbnRleHQ7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHR5cGUpIHtcclxuXHQgICAgICBoYXNoLnR5cGVzW2tleV0gPSB0eXBlO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmIChpZCkge1xyXG5cdCAgICAgIGhhc2guaWRzW2tleV0gPSBpZDtcclxuXHQgICAgfVxyXG5cdCAgICBoYXNoLnZhbHVlc1trZXldID0gdmFsdWU7XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2hJZDogZnVuY3Rpb24gcHVzaElkKHR5cGUsIG5hbWUsIGNoaWxkKSB7XHJcblx0ICAgIGlmICh0eXBlID09PSAnQmxvY2tQYXJhbScpIHtcclxuXHQgICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ2Jsb2NrUGFyYW1zWycgKyBuYW1lWzBdICsgJ10ucGF0aFsnICsgbmFtZVsxXSArICddJyArIChjaGlsZCA/ICcgKyAnICsgSlNPTi5zdHJpbmdpZnkoJy4nICsgY2hpbGQpIDogJycpKTtcclxuXHQgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XHJcblx0ICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdTdWJFeHByZXNzaW9uJykge1xyXG5cdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgndHJ1ZScpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnbnVsbCcpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIC8vIEhFTFBFUlNcclxuXHJcblx0ICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxyXG5cclxuXHQgIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24gY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKSB7XHJcblx0ICAgIHZhciBjaGlsZHJlbiA9IGVudmlyb25tZW50LmNoaWxkcmVuLFxyXG5cdCAgICAgICAgY2hpbGQgPSB1bmRlZmluZWQsXHJcblx0ICAgICAgICBjb21waWxlciA9IHVuZGVmaW5lZDtcclxuXHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuXHQgICAgICBjb21waWxlciA9IG5ldyB0aGlzLmNvbXBpbGVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxyXG5cclxuXHQgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLm1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKTtcclxuXHJcblx0ICAgICAgaWYgKGV4aXN0aW5nID09IG51bGwpIHtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtcy5wdXNoKCcnKTsgLy8gUGxhY2Vob2xkZXIgdG8gcHJldmVudCBuYW1lIGNvbmZsaWN0cyBmb3IgbmVzdGVkIGNoaWxkcmVuXHJcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRleHQucHJvZ3JhbXMubGVuZ3RoO1xyXG5cdCAgICAgICAgY2hpbGQuaW5kZXggPSBpbmRleDtcclxuXHQgICAgICAgIGNoaWxkLm5hbWUgPSAncHJvZ3JhbScgKyBpbmRleDtcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtc1tpbmRleF0gPSBjb21waWxlci5jb21waWxlKGNoaWxkLCBvcHRpb25zLCB0aGlzLmNvbnRleHQsICF0aGlzLnByZWNvbXBpbGUpO1xyXG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmRlY29yYXRvcnNbaW5kZXhdID0gY29tcGlsZXIuZGVjb3JhdG9ycztcclxuXHQgICAgICAgIHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaW5kZXhdID0gY2hpbGQ7XHJcblxyXG5cdCAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBjb21waWxlci51c2VEZXB0aHM7XHJcblx0ICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBjb21waWxlci51c2VCbG9ja1BhcmFtcztcclxuXHQgICAgICAgIGNoaWxkLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzO1xyXG5cdCAgICAgICAgY2hpbGQudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zO1xyXG5cdCAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICBjaGlsZC5pbmRleCA9IGV4aXN0aW5nLmluZGV4O1xyXG5cdCAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGV4aXN0aW5nLmluZGV4O1xyXG5cclxuXHQgICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZXhpc3RpbmcudXNlRGVwdGhzO1xyXG5cdCAgICAgICAgdGhpcy51c2VCbG9ja1BhcmFtcyA9IHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgZXhpc3RpbmcudXNlQmxvY2tQYXJhbXM7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgbWF0Y2hFeGlzdGluZ1Byb2dyYW06IGZ1bmN0aW9uIG1hdGNoRXhpc3RpbmdQcm9ncmFtKGNoaWxkKSB7XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5jb250ZXh0LmVudmlyb25tZW50c1tpXTtcclxuXHQgICAgICBpZiAoZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnQuZXF1YWxzKGNoaWxkKSkge1xyXG5cdCAgICAgICAgcmV0dXJuIGVudmlyb25tZW50O1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBwcm9ncmFtRXhwcmVzc2lvbjogZnVuY3Rpb24gcHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkge1xyXG5cdCAgICB2YXIgY2hpbGQgPSB0aGlzLmVudmlyb25tZW50LmNoaWxkcmVuW2d1aWRdLFxyXG5cdCAgICAgICAgcHJvZ3JhbVBhcmFtcyA9IFtjaGlsZC5pbmRleCwgJ2RhdGEnLCBjaGlsZC5ibG9ja1BhcmFtc107XHJcblxyXG5cdCAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcyB8fCB0aGlzLnVzZURlcHRocykge1xyXG5cdCAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAodGhpcy51c2VEZXB0aHMpIHtcclxuXHQgICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2RlcHRocycpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4gJ2NvbnRhaW5lci5wcm9ncmFtKCcgKyBwcm9ncmFtUGFyYW1zLmpvaW4oJywgJykgKyAnKSc7XHJcblx0ICB9LFxyXG5cclxuXHQgIHVzZVJlZ2lzdGVyOiBmdW5jdGlvbiB1c2VSZWdpc3RlcihuYW1lKSB7XHJcblx0ICAgIGlmICghdGhpcy5yZWdpc3RlcnNbbmFtZV0pIHtcclxuXHQgICAgICB0aGlzLnJlZ2lzdGVyc1tuYW1lXSA9IHRydWU7XHJcblx0ICAgICAgdGhpcy5yZWdpc3RlcnMubGlzdC5wdXNoKG5hbWUpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2g6IGZ1bmN0aW9uIHB1c2goZXhwcikge1xyXG5cdCAgICBpZiAoIShleHByIGluc3RhbmNlb2YgTGl0ZXJhbCkpIHtcclxuXHQgICAgICBleHByID0gdGhpcy5zb3VyY2Uud3JhcChleHByKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdGhpcy5pbmxpbmVTdGFjay5wdXNoKGV4cHIpO1xyXG5cdCAgICByZXR1cm4gZXhwcjtcclxuXHQgIH0sXHJcblxyXG5cdCAgcHVzaFN0YWNrTGl0ZXJhbDogZnVuY3Rpb24gcHVzaFN0YWNrTGl0ZXJhbChpdGVtKSB7XHJcblx0ICAgIHRoaXMucHVzaChuZXcgTGl0ZXJhbChpdGVtKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIHB1c2hTb3VyY2U6IGZ1bmN0aW9uIHB1c2hTb3VyY2Uoc291cmNlKSB7XHJcblx0ICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XHJcblx0ICAgICAgdGhpcy5zb3VyY2UucHVzaCh0aGlzLmFwcGVuZFRvQnVmZmVyKHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyh0aGlzLnBlbmRpbmdDb250ZW50KSwgdGhpcy5wZW5kaW5nTG9jYXRpb24pKTtcclxuXHQgICAgICB0aGlzLnBlbmRpbmdDb250ZW50ID0gdW5kZWZpbmVkO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBpZiAoc291cmNlKSB7XHJcblx0ICAgICAgdGhpcy5zb3VyY2UucHVzaChzb3VyY2UpO1xyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cclxuXHQgIHJlcGxhY2VTdGFjazogZnVuY3Rpb24gcmVwbGFjZVN0YWNrKGNhbGxiYWNrKSB7XHJcblx0ICAgIHZhciBwcmVmaXggPSBbJygnXSxcclxuXHQgICAgICAgIHN0YWNrID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgY3JlYXRlZFN0YWNrID0gdW5kZWZpbmVkLFxyXG5cdCAgICAgICAgdXNlZExpdGVyYWwgPSB1bmRlZmluZWQ7XHJcblxyXG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgICBpZiAoIXRoaXMuaXNJbmxpbmUoKSkge1xyXG5cdCAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdyZXBsYWNlU3RhY2sgb24gbm9uLWlubGluZScpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvLyBXZSB3YW50IHRvIG1lcmdlIHRoZSBpbmxpbmUgc3RhdGVtZW50IGludG8gdGhlIHJlcGxhY2VtZW50IHN0YXRlbWVudCB2aWEgJywnXHJcblx0ICAgIHZhciB0b3AgPSB0aGlzLnBvcFN0YWNrKHRydWUpO1xyXG5cclxuXHQgICAgaWYgKHRvcCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcclxuXHQgICAgICAvLyBMaXRlcmFscyBkbyBub3QgbmVlZCB0byBiZSBpbmxpbmVkXHJcblx0ICAgICAgc3RhY2sgPSBbdG9wLnZhbHVlXTtcclxuXHQgICAgICBwcmVmaXggPSBbJygnLCBzdGFja107XHJcblx0ICAgICAgdXNlZExpdGVyYWwgPSB0cnVlO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIC8vIEdldCBvciBjcmVhdGUgdGhlIGN1cnJlbnQgc3RhY2sgbmFtZSBmb3IgdXNlIGJ5IHRoZSBpbmxpbmVcclxuXHQgICAgICBjcmVhdGVkU3RhY2sgPSB0cnVlO1xyXG5cdCAgICAgIHZhciBfbmFtZSA9IHRoaXMuaW5jclN0YWNrKCk7XHJcblxyXG5cdCAgICAgIHByZWZpeCA9IFsnKCgnLCB0aGlzLnB1c2goX25hbWUpLCAnID0gJywgdG9wLCAnKSddO1xyXG5cdCAgICAgIHN0YWNrID0gdGhpcy50b3BTdGFjaygpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgaXRlbSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RhY2spO1xyXG5cclxuXHQgICAgaWYgKCF1c2VkTGl0ZXJhbCkge1xyXG5cdCAgICAgIHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgfVxyXG5cdCAgICBpZiAoY3JlYXRlZFN0YWNrKSB7XHJcblx0ICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcclxuXHQgICAgfVxyXG5cdCAgICB0aGlzLnB1c2gocHJlZml4LmNvbmNhdChpdGVtLCAnKScpKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgaW5jclN0YWNrOiBmdW5jdGlvbiBpbmNyU3RhY2soKSB7XHJcblx0ICAgIHRoaXMuc3RhY2tTbG90Kys7XHJcblx0ICAgIGlmICh0aGlzLnN0YWNrU2xvdCA+IHRoaXMuc3RhY2tWYXJzLmxlbmd0aCkge1xyXG5cdCAgICAgIHRoaXMuc3RhY2tWYXJzLnB1c2goJ3N0YWNrJyArIHRoaXMuc3RhY2tTbG90KTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gdGhpcy50b3BTdGFja05hbWUoKTtcclxuXHQgIH0sXHJcblx0ICB0b3BTdGFja05hbWU6IGZ1bmN0aW9uIHRvcFN0YWNrTmFtZSgpIHtcclxuXHQgICAgcmV0dXJuICdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdDtcclxuXHQgIH0sXHJcblx0ICBmbHVzaElubGluZTogZnVuY3Rpb24gZmx1c2hJbmxpbmUoKSB7XHJcblx0ICAgIHZhciBpbmxpbmVTdGFjayA9IHRoaXMuaW5saW5lU3RhY2s7XHJcblx0ICAgIHRoaXMuaW5saW5lU3RhY2sgPSBbXTtcclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGlubGluZVN0YWNrLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgdmFyIGVudHJ5ID0gaW5saW5lU3RhY2tbaV07XHJcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcblx0ICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xyXG5cdCAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChlbnRyeSk7XHJcblx0ICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgIHZhciBzdGFjayA9IHRoaXMuaW5jclN0YWNrKCk7XHJcblx0ICAgICAgICB0aGlzLnB1c2hTb3VyY2UoW3N0YWNrLCAnID0gJywgZW50cnksICc7J10pO1xyXG5cdCAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChzdGFjayk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9LFxyXG5cdCAgaXNJbmxpbmU6IGZ1bmN0aW9uIGlzSW5saW5lKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5pbmxpbmVTdGFjay5sZW5ndGg7XHJcblx0ICB9LFxyXG5cclxuXHQgIHBvcFN0YWNrOiBmdW5jdGlvbiBwb3BTdGFjayh3cmFwcGVkKSB7XHJcblx0ICAgIHZhciBpbmxpbmUgPSB0aGlzLmlzSW5saW5lKCksXHJcblx0ICAgICAgICBpdGVtID0gKGlubGluZSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjaykucG9wKCk7XHJcblxyXG5cdCAgICBpZiAoIXdyYXBwZWQgJiYgaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcclxuXHQgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBpZiAoIWlubGluZSkge1xyXG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuXHQgICAgICAgIGlmICghdGhpcy5zdGFja1Nsb3QpIHtcclxuXHQgICAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLnN0YWNrU2xvdC0tO1xyXG5cdCAgICAgIH1cclxuXHQgICAgICByZXR1cm4gaXRlbTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICB0b3BTdGFjazogZnVuY3Rpb24gdG9wU3RhY2soKSB7XHJcblx0ICAgIHZhciBzdGFjayA9IHRoaXMuaXNJbmxpbmUoKSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjayxcclxuXHQgICAgICAgIGl0ZW0gPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuXHJcblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG5cdCAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcclxuXHQgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICByZXR1cm4gaXRlbTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBjb250ZXh0TmFtZTogZnVuY3Rpb24gY29udGV4dE5hbWUoY29udGV4dCkge1xyXG5cdCAgICBpZiAodGhpcy51c2VEZXB0aHMgJiYgY29udGV4dCkge1xyXG5cdCAgICAgIHJldHVybiAnZGVwdGhzWycgKyBjb250ZXh0ICsgJ10nO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHJldHVybiAnZGVwdGgnICsgY29udGV4dDtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uIHF1b3RlZFN0cmluZyhzdHIpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyhzdHIpO1xyXG5cdCAgfSxcclxuXHJcblx0ICBvYmplY3RMaXRlcmFsOiBmdW5jdGlvbiBvYmplY3RMaXRlcmFsKG9iaikge1xyXG5cdCAgICByZXR1cm4gdGhpcy5zb3VyY2Uub2JqZWN0TGl0ZXJhbChvYmopO1xyXG5cdCAgfSxcclxuXHJcblx0ICBhbGlhc2FibGU6IGZ1bmN0aW9uIGFsaWFzYWJsZShuYW1lKSB7XHJcblx0ICAgIHZhciByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV07XHJcblx0ICAgIGlmIChyZXQpIHtcclxuXHQgICAgICByZXQucmVmZXJlbmNlQ291bnQrKztcclxuXHQgICAgICByZXR1cm4gcmV0O1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXQgPSB0aGlzLmFsaWFzZXNbbmFtZV0gPSB0aGlzLnNvdXJjZS53cmFwKG5hbWUpO1xyXG5cdCAgICByZXQuYWxpYXNhYmxlID0gdHJ1ZTtcclxuXHQgICAgcmV0LnJlZmVyZW5jZUNvdW50ID0gMTtcclxuXHJcblx0ICAgIHJldHVybiByZXQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIHNldHVwSGVscGVyOiBmdW5jdGlvbiBzZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUsIGJsb2NrSGVscGVyKSB7XHJcblx0ICAgIHZhciBwYXJhbXMgPSBbXSxcclxuXHQgICAgICAgIHBhcmFtc0luaXQgPSB0aGlzLnNldHVwSGVscGVyQXJncyhuYW1lLCBwYXJhbVNpemUsIHBhcmFtcywgYmxvY2tIZWxwZXIpO1xyXG5cdCAgICB2YXIgZm91bmRIZWxwZXIgPSB0aGlzLm5hbWVMb29rdXAoJ2hlbHBlcnMnLCBuYW1lLCAnaGVscGVyJyksXHJcblx0ICAgICAgICBjYWxsQ29udGV4dCA9IHRoaXMuYWxpYXNhYmxlKHRoaXMuY29udGV4dE5hbWUoMCkgKyAnICE9IG51bGwgPyAnICsgdGhpcy5jb250ZXh0TmFtZSgwKSArICcgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KScpO1xyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICBwYXJhbXM6IHBhcmFtcyxcclxuXHQgICAgICBwYXJhbXNJbml0OiBwYXJhbXNJbml0LFxyXG5cdCAgICAgIG5hbWU6IGZvdW5kSGVscGVyLFxyXG5cdCAgICAgIGNhbGxQYXJhbXM6IFtjYWxsQ29udGV4dF0uY29uY2F0KHBhcmFtcylcclxuXHQgICAgfTtcclxuXHQgIH0sXHJcblxyXG5cdCAgc2V0dXBQYXJhbXM6IGZ1bmN0aW9uIHNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpIHtcclxuXHQgICAgdmFyIG9wdGlvbnMgPSB7fSxcclxuXHQgICAgICAgIGNvbnRleHRzID0gW10sXHJcblx0ICAgICAgICB0eXBlcyA9IFtdLFxyXG5cdCAgICAgICAgaWRzID0gW10sXHJcblx0ICAgICAgICBvYmplY3RBcmdzID0gIXBhcmFtcyxcclxuXHQgICAgICAgIHBhcmFtID0gdW5kZWZpbmVkO1xyXG5cclxuXHQgICAgaWYgKG9iamVjdEFyZ3MpIHtcclxuXHQgICAgICBwYXJhbXMgPSBbXTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgb3B0aW9ucy5uYW1lID0gdGhpcy5xdW90ZWRTdHJpbmcoaGVscGVyKTtcclxuXHQgICAgb3B0aW9ucy5oYXNoID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cclxuXHQgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICBvcHRpb25zLmhhc2hJZHMgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgb3B0aW9ucy5oYXNoVHlwZXMgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgICAgb3B0aW9ucy5oYXNoQ29udGV4dHMgPSB0aGlzLnBvcFN0YWNrKCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBpbnZlcnNlID0gdGhpcy5wb3BTdGFjaygpLFxyXG5cdCAgICAgICAgcHJvZ3JhbSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHJcblx0ICAgIC8vIEF2b2lkIHNldHRpbmcgZm4gYW5kIGludmVyc2UgaWYgbmVpdGhlciBhcmUgc2V0LiBUaGlzIGFsbG93c1xyXG5cdCAgICAvLyBoZWxwZXJzIHRvIGRvIGEgY2hlY2sgZm9yIGBpZiAob3B0aW9ucy5mbilgXHJcblx0ICAgIGlmIChwcm9ncmFtIHx8IGludmVyc2UpIHtcclxuXHQgICAgICBvcHRpb25zLmZuID0gcHJvZ3JhbSB8fCAnY29udGFpbmVyLm5vb3AnO1xyXG5cdCAgICAgIG9wdGlvbnMuaW52ZXJzZSA9IGludmVyc2UgfHwgJ2NvbnRhaW5lci5ub29wJztcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLy8gVGhlIHBhcmFtZXRlcnMgZ28gb24gdG8gdGhlIHN0YWNrIGluIG9yZGVyIChtYWtpbmcgc3VyZSB0aGF0IHRoZXkgYXJlIGV2YWx1YXRlZCBpbiBvcmRlcilcclxuXHQgICAgLy8gc28gd2UgbmVlZCB0byBwb3AgdGhlbSBvZmYgdGhlIHN0YWNrIGluIHJldmVyc2Ugb3JkZXJcclxuXHQgICAgdmFyIGkgPSBwYXJhbVNpemU7XHJcblx0ICAgIHdoaWxlIChpLS0pIHtcclxuXHQgICAgICBwYXJhbSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcclxuXHJcblx0ICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcclxuXHQgICAgICAgIGlkc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgICB0eXBlc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcclxuXHQgICAgICAgIGNvbnRleHRzW2ldID0gdGhpcy5wb3BTdGFjaygpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKG9iamVjdEFyZ3MpIHtcclxuXHQgICAgICBvcHRpb25zLmFyZ3MgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KHBhcmFtcyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XHJcblx0ICAgICAgb3B0aW9ucy5pZHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGlkcyk7XHJcblx0ICAgIH1cclxuXHQgICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XHJcblx0ICAgICAgb3B0aW9ucy50eXBlcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkodHlwZXMpO1xyXG5cdCAgICAgIG9wdGlvbnMuY29udGV4dHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGNvbnRleHRzKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XHJcblx0ICAgICAgb3B0aW9ucy5kYXRhID0gJ2RhdGEnO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XHJcblx0ICAgICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9ICdibG9ja1BhcmFtcyc7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIG9wdGlvbnM7XHJcblx0ICB9LFxyXG5cclxuXHQgIHNldHVwSGVscGVyQXJnczogZnVuY3Rpb24gc2V0dXBIZWxwZXJBcmdzKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMsIHVzZVJlZ2lzdGVyKSB7XHJcblx0ICAgIHZhciBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhoZWxwZXIsIHBhcmFtU2l6ZSwgcGFyYW1zKTtcclxuXHQgICAgb3B0aW9ucyA9IHRoaXMub2JqZWN0TGl0ZXJhbChvcHRpb25zKTtcclxuXHQgICAgaWYgKHVzZVJlZ2lzdGVyKSB7XHJcblx0ICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xyXG5cdCAgICAgIHBhcmFtcy5wdXNoKCdvcHRpb25zJyk7XHJcblx0ICAgICAgcmV0dXJuIFsnb3B0aW9ucz0nLCBvcHRpb25zXTtcclxuXHQgICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcclxuXHQgICAgICBwYXJhbXMucHVzaChvcHRpb25zKTtcclxuXHQgICAgICByZXR1cm4gJyc7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHR9O1xyXG5cclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgdmFyIHJlc2VydmVkV29yZHMgPSAoJ2JyZWFrIGVsc2UgbmV3IHZhcicgKyAnIGNhc2UgZmluYWxseSByZXR1cm4gdm9pZCcgKyAnIGNhdGNoIGZvciBzd2l0Y2ggd2hpbGUnICsgJyBjb250aW51ZSBmdW5jdGlvbiB0aGlzIHdpdGgnICsgJyBkZWZhdWx0IGlmIHRocm93JyArICcgZGVsZXRlIGluIHRyeScgKyAnIGRvIGluc3RhbmNlb2YgdHlwZW9mJyArICcgYWJzdHJhY3QgZW51bSBpbnQgc2hvcnQnICsgJyBib29sZWFuIGV4cG9ydCBpbnRlcmZhY2Ugc3RhdGljJyArICcgYnl0ZSBleHRlbmRzIGxvbmcgc3VwZXInICsgJyBjaGFyIGZpbmFsIG5hdGl2ZSBzeW5jaHJvbml6ZWQnICsgJyBjbGFzcyBmbG9hdCBwYWNrYWdlIHRocm93cycgKyAnIGNvbnN0IGdvdG8gcHJpdmF0ZSB0cmFuc2llbnQnICsgJyBkZWJ1Z2dlciBpbXBsZW1lbnRzIHByb3RlY3RlZCB2b2xhdGlsZScgKyAnIGRvdWJsZSBpbXBvcnQgcHVibGljIGxldCB5aWVsZCBhd2FpdCcgKyAnIG51bGwgdHJ1ZSBmYWxzZScpLnNwbGl0KCcgJyk7XHJcblxyXG5cdCAgdmFyIGNvbXBpbGVyV29yZHMgPSBKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFMgPSB7fTtcclxuXHJcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHJlc2VydmVkV29yZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xyXG5cdCAgfVxyXG5cdH0pKCk7XHJcblxyXG5cdEphdmFTY3JpcHRDb21waWxlci5pc1ZhbGlkSmF2YVNjcmlwdFZhcmlhYmxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcblx0ICByZXR1cm4gIUphdmFTY3JpcHRDb21waWxlci5SRVNFUlZFRF9XT1JEU1tuYW1lXSAmJiAvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvLnRlc3QobmFtZSk7XHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gc3RyaWN0TG9va3VwKHJlcXVpcmVUZXJtaW5hbCwgY29tcGlsZXIsIHBhcnRzLCB0eXBlKSB7XHJcblx0ICB2YXIgc3RhY2sgPSBjb21waWxlci5wb3BTdGFjaygpLFxyXG5cdCAgICAgIGkgPSAwLFxyXG5cdCAgICAgIGxlbiA9IHBhcnRzLmxlbmd0aDtcclxuXHQgIGlmIChyZXF1aXJlVGVybWluYWwpIHtcclxuXHQgICAgbGVuLS07XHJcblx0ICB9XHJcblxyXG5cdCAgZm9yICg7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICBzdGFjayA9IGNvbXBpbGVyLm5hbWVMb29rdXAoc3RhY2ssIHBhcnRzW2ldLCB0eXBlKTtcclxuXHQgIH1cclxuXHJcblx0ICBpZiAocmVxdWlyZVRlcm1pbmFsKSB7XHJcblx0ICAgIHJldHVybiBbY29tcGlsZXIuYWxpYXNhYmxlKCdjb250YWluZXIuc3RyaWN0JyksICcoJywgc3RhY2ssICcsICcsIGNvbXBpbGVyLnF1b3RlZFN0cmluZyhwYXJ0c1tpXSksICcpJ107XHJcblx0ICB9IGVsc2Uge1xyXG5cdCAgICByZXR1cm4gc3RhY2s7XHJcblx0ICB9XHJcblx0fVxyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBKYXZhU2NyaXB0Q29tcGlsZXI7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XHJcblxyXG4vKioqLyB9KSxcclxuLyogNDMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXHQvKiBnbG9iYWwgZGVmaW5lICovXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5cclxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcclxuXHJcblx0dmFyIFNvdXJjZU5vZGUgPSB1bmRlZmluZWQ7XHJcblxyXG5cdHRyeSB7XHJcblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5cdCAgaWYgKGZhbHNlKSB7XHJcblx0ICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgdGhpcyBpbiBBTUQgZW52aXJvbm1lbnRzLiBGb3IgdGhlc2UgZW52aXJvbm1lbnRzLCB3ZSBhc3VzbWUgdGhhdFxyXG5cdCAgICAvLyB0aGV5IGFyZSBydW5uaW5nIG9uIHRoZSBicm93c2VyIGFuZCB0aHVzIGhhdmUgbm8gbmVlZCBmb3IgdGhlIHNvdXJjZS1tYXAgbGlicmFyeS5cclxuXHQgICAgdmFyIFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcclxuXHQgICAgU291cmNlTm9kZSA9IFNvdXJjZU1hcC5Tb3VyY2VOb2RlO1xyXG5cdCAgfVxyXG5cdH0gY2F0Y2ggKGVycikge31cclxuXHQvKiBOT1AgKi9cclxuXHJcblx0LyogaXN0YW5idWwgaWdub3JlIGlmOiB0ZXN0ZWQgYnV0IG5vdCBjb3ZlcmVkIGluIGlzdGFuYnVsIGR1ZSB0byBkaXN0IGJ1aWxkICAqL1xyXG5cdGlmICghU291cmNlTm9kZSkge1xyXG5cdCAgU291cmNlTm9kZSA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xyXG5cdCAgICB0aGlzLnNyYyA9ICcnO1xyXG5cdCAgICBpZiAoY2h1bmtzKSB7XHJcblx0ICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcblx0ICBTb3VyY2VOb2RlLnByb3RvdHlwZSA9IHtcclxuXHQgICAgYWRkOiBmdW5jdGlvbiBhZGQoY2h1bmtzKSB7XHJcblx0ICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rcykpIHtcclxuXHQgICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzO1xyXG5cdCAgICB9LFxyXG5cdCAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKGNodW5rcykge1xyXG5cdCAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjaHVua3MpKSB7XHJcblx0ICAgICAgICBjaHVua3MgPSBjaHVua3Muam9pbignJyk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7XHJcblx0ICAgIH0sXHJcblx0ICAgIHRvU3RyaW5nV2l0aFNvdXJjZU1hcDogZnVuY3Rpb24gdG9TdHJpbmdXaXRoU291cmNlTWFwKCkge1xyXG5cdCAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9O1xyXG5cdCAgICB9LFxyXG5cdCAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0ICAgICAgcmV0dXJuIHRoaXMuc3JjO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHtcclxuXHQgIGlmIChfdXRpbHMuaXNBcnJheShjaHVuaykpIHtcclxuXHQgICAgdmFyIHJldCA9IFtdO1xyXG5cclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4gcmV0O1xyXG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XHJcblx0ICAgIC8vIEhhbmRsZSBwcmltaXRpdmVzIHRoYXQgdGhlIFNvdXJjZU5vZGUgd2lsbCB0aHJvdyB1cCBvblxyXG5cdCAgICByZXR1cm4gY2h1bmsgKyAnJztcclxuXHQgIH1cclxuXHQgIHJldHVybiBjaHVuaztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIENvZGVHZW4oc3JjRmlsZSkge1xyXG5cdCAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcclxuXHQgIHRoaXMuc291cmNlID0gW107XHJcblx0fVxyXG5cclxuXHRDb2RlR2VuLnByb3RvdHlwZSA9IHtcclxuXHQgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XHJcblx0ICAgIHJldHVybiAhdGhpcy5zb3VyY2UubGVuZ3RoO1xyXG5cdCAgfSxcclxuXHQgIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoc291cmNlLCBsb2MpIHtcclxuXHQgICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcclxuXHQgIH0sXHJcblx0ICBwdXNoOiBmdW5jdGlvbiBwdXNoKHNvdXJjZSwgbG9jKSB7XHJcblx0ICAgIHRoaXMuc291cmNlLnB1c2godGhpcy53cmFwKHNvdXJjZSwgbG9jKSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHtcclxuXHQgICAgdmFyIHNvdXJjZSA9IHRoaXMuZW1wdHkoKTtcclxuXHQgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChsaW5lKSB7XHJcblx0ICAgICAgc291cmNlLmFkZChbJyAgJywgbGluZSwgJ1xcbiddKTtcclxuXHQgICAgfSk7XHJcblx0ICAgIHJldHVybiBzb3VyY2U7XHJcblx0ICB9LFxyXG5cclxuXHQgIGVhY2g6IGZ1bmN0aW9uIGVhY2goaXRlcikge1xyXG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICBpdGVyKHRoaXMuc291cmNlW2ldKTtcclxuXHQgICAgfVxyXG5cdCAgfSxcclxuXHJcblx0ICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XHJcblx0ICAgIHZhciBsb2MgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbiB8fCB7IHN0YXJ0OiB7fSB9O1xyXG5cdCAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSk7XHJcblx0ICB9LFxyXG5cdCAgd3JhcDogZnVuY3Rpb24gd3JhcChjaHVuaykge1xyXG5cdCAgICB2YXIgbG9jID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gdGhpcy5jdXJyZW50TG9jYXRpb24gfHwgeyBzdGFydDoge30gfSA6IGFyZ3VtZW50c1sxXTtcclxuXHJcblx0ICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcclxuXHQgICAgICByZXR1cm4gY2h1bms7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGNodW5rID0gY2FzdENodW5rKGNodW5rLCB0aGlzLCBsb2MpO1xyXG5cclxuXHQgICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUsIGNodW5rKTtcclxuXHQgIH0sXHJcblxyXG5cdCAgZnVuY3Rpb25DYWxsOiBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoZm4sIHR5cGUsIHBhcmFtcykge1xyXG5cdCAgICBwYXJhbXMgPSB0aGlzLmdlbmVyYXRlTGlzdChwYXJhbXMpO1xyXG5cdCAgICByZXR1cm4gdGhpcy53cmFwKFtmbiwgdHlwZSA/ICcuJyArIHR5cGUgKyAnKCcgOiAnKCcsIHBhcmFtcywgJyknXSk7XHJcblx0ICB9LFxyXG5cclxuXHQgIHF1b3RlZFN0cmluZzogZnVuY3Rpb24gcXVvdGVkU3RyaW5nKHN0cikge1xyXG5cdCAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJykucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKS5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjRcclxuXHQgICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpICsgJ1wiJztcclxuXHQgIH0sXHJcblxyXG5cdCAgb2JqZWN0TGl0ZXJhbDogZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbChvYmopIHtcclxuXHQgICAgdmFyIHBhaXJzID0gW107XHJcblxyXG5cdCAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcblx0ICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0ICAgICAgICB2YXIgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIHRoaXMpO1xyXG5cdCAgICAgICAgaWYgKHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdCAgICAgICAgICBwYWlycy5wdXNoKFt0aGlzLnF1b3RlZFN0cmluZyhrZXkpLCAnOicsIHZhbHVlXSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgcmV0ID0gdGhpcy5nZW5lcmF0ZUxpc3QocGFpcnMpO1xyXG5cdCAgICByZXQucHJlcGVuZCgneycpO1xyXG5cdCAgICByZXQuYWRkKCd9Jyk7XHJcblx0ICAgIHJldHVybiByZXQ7XHJcblx0ICB9LFxyXG5cclxuXHQgIGdlbmVyYXRlTGlzdDogZnVuY3Rpb24gZ2VuZXJhdGVMaXN0KGVudHJpZXMpIHtcclxuXHQgICAgdmFyIHJldCA9IHRoaXMuZW1wdHkoKTtcclxuXHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgaWYgKGkpIHtcclxuXHQgICAgICAgIHJldC5hZGQoJywnKTtcclxuXHQgICAgICB9XHJcblxyXG5cdCAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH0sXHJcblxyXG5cdCAgZ2VuZXJhdGVBcnJheTogZnVuY3Rpb24gZ2VuZXJhdGVBcnJheShlbnRyaWVzKSB7XHJcblx0ICAgIHZhciByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcclxuXHQgICAgcmV0LnByZXBlbmQoJ1snKTtcclxuXHQgICAgcmV0LmFkZCgnXScpO1xyXG5cclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH1cclxuXHR9O1xyXG5cclxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBDb2RlR2VuO1xyXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xyXG5cclxuLyoqKi8gfSlcclxuLyoqKioqKi8gXSlcclxufSk7XHJcbjsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLmRyYWdkcm9wPWUoKTp0LmRyYWdkcm9wPWUoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgbz1uW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxlKSxvLmw9ITAsby5leHBvcnRzfXZhciBuPXt9O3JldHVybiBlLm09dCxlLmM9bixlLmQ9ZnVuY3Rpb24odCxuLHIpe2Uubyh0LG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxlLm49ZnVuY3Rpb24odCl7dmFyIG49dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChuLFwiYVwiLG4pLG59LGUubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sZS5wPVwiXCIsZShlLnM9MCl9KFtmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbi5kKGUsXCJzdGFydFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGl9KTt2YXIgcj1uKDEpLG89big0KSxpPShuLm4obyksci5hKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIG8odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIWV8fFwib2JqZWN0XCIhPXR5cGVvZiBlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBpKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9bi5kKGUsXCJhXCIsZnVuY3Rpb24oKXtyZXR1cm4gY30pO3ZhciBhPW4oMikscz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksYz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cih0aGlzLGUpO3ZhciB0PW8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzKSk7dC5lbGVtZW50cz10LmdldEVsZW1lbnRzKCk7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheShuKSxhPTA7YTxuO2ErKylpW2FdPWFyZ3VtZW50c1thXTtyZXR1cm4gdC50cmVhdFBhcmFtcyhpKSx0LnRhcmdldHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0LmVsZW1lbnRzLnRhcmdldHMpLHQuZWxlbWVudHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0LmVsZW1lbnRzLmVsZW1lbnQpLHQub3JkZXJzPVtdLHQub25Jbml0KCksdH1yZXR1cm4gaShlLHQpLHUoZSxbe2tleTpcImdldEVsZW1lbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57ZWxlbWVudDpcIi5kcmFnZHJvcFwiLHRhcmdldHM6XCIuZHJhZ2Ryb3AtdGFyZ2V0XCJ9fX0se2tleTpcIm1lcmdlRWxlbWVudHNcIix2YWx1ZTpmdW5jdGlvbih0KXtPYmplY3QuYXNzaWduKHRoaXMuZWxlbWVudHMsdCl9fSx7a2V5OlwidHJlYXRQYXJhbXNcIix2YWx1ZTpmdW5jdGlvbih0KXsxPT10Lmxlbmd0aD9cIm9iamVjdFwiPT09cyh0WzBdKT90aGlzLm1lcmdlRWxlbWVudHModFswXSk6XCJmdW5jdGlvblwiPT10eXBlb2YgdFswXSYmdFswXShkb2N1bWVudCx0aGlzKTp0Lmxlbmd0aD4xJiZcIm9iamVjdFwiPT1zKHRbMF0pJiYodGhpcy5tZXJnZUVsZW1lbnRzKHRbMF0pLHRbMV0oZG9jdW1lbnQsdGhpcykpfX0se2tleTpcImRpc3BhdGNoRXZlbnRzVGFyZ2V0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9MTtbXS5mb3JFYWNoLmNhbGwodGhpcy50YXJnZXRzLGZ1bmN0aW9uKG4pe24uc2V0QXR0cmlidXRlKFwiZHJhZ2Ryb3BcIixcInRhcmdldFwiKSxuLnNldEF0dHJpYnV0ZShcImRyYWdkcm9wLW9yZGVyXCIsZSksbi5pZD1cImRyYWdkcm9wLXRhcmdldC1cIitlLHQuZHJvcChuKSx0LmRyYWdvdmVyKG4pLHQuZHJhZ2xlYXZlKG4pLHQuZHJhZ2VuZChuKSxlKyt9KX19LHtrZXk6XCJkaXNwYXRjaEV2ZW50c0VsZW1lbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9MTtbXS5mb3JFYWNoLmNhbGwodGhpcy5lbGVtZW50cyxmdW5jdGlvbihuKXtuLnNldEF0dHJpYnV0ZShcImRyYWdkcm9wXCIsXCJlbGVtZW50XCIpLG4uc2V0QXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIsXCJ0cnVlXCIpLG4uaWQ9XCJkcmFnZHJvcC1cIitlLHQuZHJhZ3N0YXJ0KG4pLGUrK30pfX0se2tleTpcIm9uSW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50c1RhcmdldCgpLHRoaXMuZGlzcGF0Y2hFdmVudHNFbGVtZW50cygpLHRoaXMuZ2V0T3JkZXJzKCl9fV0pLGV9KGEuYSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiFlfHxcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfW4uZChlLFwiYVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHV9KTt2YXIgYT1uKDMpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSx1PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gcih0aGlzLGUpLG8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzKSl9cmV0dXJuIGkoZSx0KSxzKGUsW3trZXk6XCJkcmFnc3RhcnRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3QuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdzdGFydFwiLGZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMucGFyZW50Tm9kZTtlLm9wYWNpdHlPbih0aGlzKSx0LmRhdGFUcmFuc2Zlci5zZXREYXRhKFwicGFyZW50XCIsbi5pZCksdC5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHQvcGxhaW5cIix0aGlzLmlkKX0pfX0se2tleTpcImRyb3BcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3QuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIixmdW5jdGlvbih0KXt2YXIgbj10LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwidGV4dFwiKSxyPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG4pO2Uub3BhY2l0eU9mZigpLGUuY2hhbmdlUG9zaXRpb24odCx0aGlzLmNoaWxkTm9kZXMpLHRoaXMuYXBwZW5kQ2hpbGQociksdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJvdmVyXCIpfHx0aGlzLmNsYXNzTGlzdC5hZGQoXCJvdmVyXCIpLGUuZ2V0T3JkZXJzKCl9KX19LHtrZXk6XCJkcmFnb3ZlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3ZlclwiKXx8dGhpcy5jbGFzc0xpc3QuYWRkKFwib3ZlclwiKX0pfX0se2tleTpcImRyYWdsZWF2ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLGZ1bmN0aW9uKHQpe3RoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3ZlclwiKSYmdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwib3ZlclwiKX0pfX0se2tleTpcImRyYWdlbmRcIix2YWx1ZTpmdW5jdGlvbih0KXt0LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW5kXCIsZnVuY3Rpb24odCl7dGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJvdmVyXCIpJiZ0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJvdmVyXCIpfSl9fV0pLGV9KGEuYSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1uLmQoZSxcImFcIixmdW5jdGlvbigpe3JldHVybiBpfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3IodGhpcyx0KX1yZXR1cm4gbyh0LFt7a2V5OlwiZ2V0T3JkZXJzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMub3JkZXJzPVtdLFtdLmZvckVhY2guY2FsbCh0aGlzLnRhcmdldHMsZnVuY3Rpb24oZSl7ZS5jaGlsZE5vZGVzLmxlbmd0aCYmZS5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24obil7aWYobi50YWdOYW1lKXt2YXIgcj1uLmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIil8fDAsbz1wYXJzZUludChlLmdldEF0dHJpYnV0ZShcImRyYWdkcm9wLW9yZGVyXCIpKTt0Lm9yZGVycy5wdXNoKHtlbGVtZW50SWQ6cixvcmRlcjpvfSl9fSl9KX19LHtrZXk6XCJjaGFuZ2VQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoZS5sZW5ndGgpe3ZhciBuPXQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJwYXJlbnRcIikscj1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChuKTtlLmZvckVhY2goZnVuY3Rpb24odCl7dC50YWdOYW1lJiZyLmFwcGVuZENoaWxkKHQpfSl9fX0se2tleTpcIm9wYWNpdHlPblwiLHZhbHVlOmZ1bmN0aW9uKHQpe1tdLmZvckVhY2guY2FsbCh0aGlzLmVsZW1lbnRzLGZ1bmN0aW9uKGUpe2U9PXR8fGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3V0XCIpfHxlLmNsYXNzTGlzdC5hZGQoXCJvdXRcIil9KX19LHtrZXk6XCJvcGFjaXR5T2ZmXCIsdmFsdWU6ZnVuY3Rpb24oKXtbXS5mb3JFYWNoLmNhbGwodGhpcy5lbGVtZW50cyxmdW5jdGlvbih0KXt0LmNsYXNzTGlzdC5jb250YWlucyhcIm91dFwiKSYmdC5jbGFzc0xpc3QucmVtb3ZlKFwib3V0XCIpfSl9fSx7a2V5OlwicmVPcmRlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKFwicGFyZW50XCIpLG49dGhpcy5nZXRUYXJnZXRQb3NpdGlvbih0LmlkKSxyPXRoaXMuZ2V0VGFyZ2V0UG9zaXRpb24oZSk7aWYobj5yKWZvcih2YXIgbz1yO288bjtvKyspY29uc29sZS5sb2codGhpcy50YXJnZXRzW29dKTtlbHNlIGZvcih2YXIgaT1yO2k+bjtpLS0pY29uc29sZS5sb2codGhpcy50YXJnZXRzW2ktMV0pfX0se2tleTpcImdldFRhcmdldFBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BsaXQoXCItXCIpWzJdfX1dKSx0fSgpfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9big1KTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1t0LmkscixcIlwiXV0pO3ZhciBvPXtobXI6ITB9O28udHJhbnNmb3JtPXZvaWQgMDtuKDcpKHIsbyk7ci5sb2NhbHMmJih0LmV4cG9ydHM9ci5sb2NhbHMpfSxmdW5jdGlvbih0LGUsbil7ZT10LmV4cG9ydHM9big2KSh2b2lkIDApLGUucHVzaChbdC5pLFwiW2RyYWdkcm9wXSB7XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2Utb3V0O1xcbiAgICAtbW96LXRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2Utb3V0O1xcbiAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2Utb3V0O1xcbiAgICBjdXJzb3I6IG1vdmU7XFxufVxcblxcbltkcmFnZHJvcF0ub3V0IHtcXG4gICAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG5bZHJhZ2Ryb3BdLm92ZXIge1xcbiAgICBib3JkZXI6IDNweCBkYXNoZWQgIzMzMztcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAzKTtcXG4gICAgLW1vei10cmFuc2Zvcm06IHNjYWxlKDEuMDMpO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4wMyk7XFxufVwiLFwiXCJdKX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7dmFyIG49dFsxXXx8XCJcIixvPXRbM107aWYoIW8pcmV0dXJuIG47aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIGk9cihvKTtyZXR1cm5bbl0uY29uY2F0KG8uc291cmNlcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiK28uc291cmNlUm9vdCt0K1wiICovXCJ9KSkuY29uY2F0KFtpXSkuam9pbihcIlxcblwiKX1yZXR1cm5bbl0uam9pbihcIlxcblwiKX1mdW5jdGlvbiByKHQpe3JldHVyblwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHQpKSkpK1wiICovXCJ9dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGUpe3ZhciByPW4oZSx0KTtyZXR1cm4gZVsyXT9cIkBtZWRpYSBcIitlWzJdK1wie1wiK3IrXCJ9XCI6cn0pLmpvaW4oXCJcIil9LGUuaT1mdW5jdGlvbih0LG4pe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1bW251bGwsdCxcIlwiXV0pO2Zvcih2YXIgcj17fSxvPTA7bzx0aGlzLmxlbmd0aDtvKyspe3ZhciBpPXRoaXNbb11bMF07XCJudW1iZXJcIj09dHlwZW9mIGkmJihyW2ldPSEwKX1mb3Iobz0wO288dC5sZW5ndGg7bysrKXt2YXIgYT10W29dO1wibnVtYmVyXCI9PXR5cGVvZiBhWzBdJiZyW2FbMF1dfHwobiYmIWFbMl0/YVsyXT1uOm4mJihhWzJdPVwiKFwiK2FbMl0rXCIpIGFuZCAoXCIrbitcIilcIiksZS5wdXNoKGEpKX19LGV9fSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dLG89aFtyLmlkXTtpZihvKXtvLnJlZnMrKztmb3IodmFyIGk9MDtpPG8ucGFydHMubGVuZ3RoO2krKylvLnBhcnRzW2ldKHIucGFydHNbaV0pO2Zvcig7aTxyLnBhcnRzLmxlbmd0aDtpKyspby5wYXJ0cy5wdXNoKGYoci5wYXJ0c1tpXSxlKSl9ZWxzZXtmb3IodmFyIGE9W10saT0wO2k8ci5wYXJ0cy5sZW5ndGg7aSsrKWEucHVzaChmKHIucGFydHNbaV0sZSkpO2hbci5pZF09e2lkOnIuaWQscmVmczoxLHBhcnRzOmF9fX19ZnVuY3Rpb24gbyh0LGUpe2Zvcih2YXIgbj1bXSxyPXt9LG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGk9dFtvXSxhPWUuYmFzZT9pWzBdK2UuYmFzZTppWzBdLHM9aVsxXSx1PWlbMl0sYz1pWzNdLGY9e2NzczpzLG1lZGlhOnUsc291cmNlTWFwOmN9O3JbYV0/clthXS5wYXJ0cy5wdXNoKGYpOm4ucHVzaChyW2FdPXtpZDphLHBhcnRzOltmXX0pfXJldHVybiBufWZ1bmN0aW9uIGkodCxlKXt2YXIgbj15KHQuaW5zZXJ0SW50byk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7dmFyIHI9bVttLmxlbmd0aC0xXTtpZihcInRvcFwiPT09dC5pbnNlcnRBdClyP3IubmV4dFNpYmxpbmc/bi5pbnNlcnRCZWZvcmUoZSxyLm5leHRTaWJsaW5nKTpuLmFwcGVuZENoaWxkKGUpOm4uaW5zZXJ0QmVmb3JlKGUsbi5maXJzdENoaWxkKSxtLnB1c2goZSk7ZWxzZSBpZihcImJvdHRvbVwiPT09dC5pbnNlcnRBdCluLmFwcGVuZENoaWxkKGUpO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHQuaW5zZXJ0QXR8fCF0Lmluc2VydEF0LmJlZm9yZSl0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTt2YXIgbz15KHQuaW5zZXJ0SW50bytcIiBcIit0Lmluc2VydEF0LmJlZm9yZSk7bi5pbnNlcnRCZWZvcmUoZSxvKX19ZnVuY3Rpb24gYSh0KXtpZihudWxsPT09dC5wYXJlbnROb2RlKXJldHVybiExO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KTt2YXIgZT1tLmluZGV4T2YodCk7ZT49MCYmbS5zcGxpY2UoZSwxKX1mdW5jdGlvbiBzKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdC5hdHRycy50eXBlPVwidGV4dC9jc3NcIixjKGUsdC5hdHRycyksaSh0LGUpLGV9ZnVuY3Rpb24gdSh0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdC5hdHRycy50eXBlPVwidGV4dC9jc3NcIix0LmF0dHJzLnJlbD1cInN0eWxlc2hlZXRcIixjKGUsdC5hdHRycyksaSh0LGUpLGV9ZnVuY3Rpb24gYyh0LGUpe09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24obil7dC5zZXRBdHRyaWJ1dGUobixlW25dKX0pfWZ1bmN0aW9uIGYodCxlKXt2YXIgbixyLG8saTtpZihlLnRyYW5zZm9ybSYmdC5jc3Mpe2lmKCEoaT1lLnRyYW5zZm9ybSh0LmNzcykpKXJldHVybiBmdW5jdGlvbigpe307dC5jc3M9aX1pZihlLnNpbmdsZXRvbil7dmFyIGM9YisrO249Z3x8KGc9cyhlKSkscj1sLmJpbmQobnVsbCxuLGMsITEpLG89bC5iaW5kKG51bGwsbixjLCEwKX1lbHNlIHQuc291cmNlTWFwJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEJsb2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2E/KG49dShlKSxyPXAuYmluZChudWxsLG4sZSksbz1mdW5jdGlvbigpe2Eobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1zKGUpLHI9ZC5iaW5kKG51bGwsbiksbz1mdW5jdGlvbigpe2Eobil9KTtyZXR1cm4gcih0KSxmdW5jdGlvbihlKXtpZihlKXtpZihlLmNzcz09PXQuY3NzJiZlLm1lZGlhPT09dC5tZWRpYSYmZS5zb3VyY2VNYXA9PT10LnNvdXJjZU1hcClyZXR1cm47cih0PWUpfWVsc2UgbygpfX1mdW5jdGlvbiBsKHQsZSxuLHIpe3ZhciBvPW4/XCJcIjpyLmNzcztpZih0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9TyhlLG8pO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobyksYT10LmNoaWxkTm9kZXM7YVtlXSYmdC5yZW1vdmVDaGlsZChhW2VdKSxhLmxlbmd0aD90Lmluc2VydEJlZm9yZShpLGFbZV0pOnQuYXBwZW5kQ2hpbGQoaSl9fWZ1bmN0aW9uIGQodCxlKXt2YXIgbj1lLmNzcyxyPWUubWVkaWE7aWYociYmdC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLHIpLHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19ZnVuY3Rpb24gcCh0LGUsbil7dmFyIHI9bi5jc3Msbz1uLnNvdXJjZU1hcCxpPXZvaWQgMD09PWUuY29udmVydFRvQWJzb2x1dGVVcmxzJiZvOyhlLmNvbnZlcnRUb0Fic29sdXRlVXJsc3x8aSkmJihyPXcocikpLG8mJihyKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkobykpKSkrXCIgKi9cIik7dmFyIGE9bmV3IEJsb2IoW3JdLHt0eXBlOlwidGV4dC9jc3NcIn0pLHM9dC5ocmVmO3QuaHJlZj1VUkwuY3JlYXRlT2JqZWN0VVJMKGEpLHMmJlVSTC5yZXZva2VPYmplY3RVUkwocyl9dmFyIGg9e30sdj1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9dC5hcHBseSh0aGlzLGFyZ3VtZW50cykpLGV9fShmdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0pLHk9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIGZ1bmN0aW9uKG4pe2lmKHZvaWQgMD09PWVbbl0pe3ZhciByPXQuY2FsbCh0aGlzLG4pO2lmKHIgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e3I9ci5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaCh0KXtyPW51bGx9ZVtuXT1yfXJldHVybiBlW25dfX0oZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCl9KSxnPW51bGwsYj0wLG09W10sdz1uKDgpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7ZT1lfHx7fSxlLmF0dHJzPVwib2JqZWN0XCI9PXR5cGVvZiBlLmF0dHJzP2UuYXR0cnM6e30sZS5zaW5nbGV0b258fChlLnNpbmdsZXRvbj12KCkpLGUuaW5zZXJ0SW50b3x8KGUuaW5zZXJ0SW50bz1cImhlYWRcIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG49byh0LGUpO3JldHVybiByKG4sZSksZnVuY3Rpb24odCl7Zm9yKHZhciBpPVtdLGE9MDthPG4ubGVuZ3RoO2ErKyl7dmFyIHM9blthXSx1PWhbcy5pZF07dS5yZWZzLS0saS5wdXNoKHUpfWlmKHQpe3Iobyh0LGUpLGUpfWZvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXt2YXIgdT1pW2FdO2lmKDA9PT11LnJlZnMpe2Zvcih2YXIgYz0wO2M8dS5wYXJ0cy5sZW5ndGg7YysrKXUucGFydHNbY10oKTtkZWxldGUgaFt1LmlkXX19fX07dmFyIE89ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtyZXR1cm4gdFtlXT1uLHQuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9fSgpfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb247aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiB0O3ZhciBuPWUucHJvdG9jb2wrXCIvL1wiK2UuaG9zdCxyPW4rZS5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sXCIvXCIpO3JldHVybiB0LnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLGZ1bmN0aW9uKHQsZSl7dmFyIG89ZS50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pLnJlcGxhY2UoL14nKC4qKSckLyxmdW5jdGlvbih0LGUpe3JldHVybiBlfSk7aWYoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC8pL2kudGVzdChvKSlyZXR1cm4gdDt2YXIgaTtyZXR1cm4gaT0wPT09by5pbmRleE9mKFwiLy9cIik/bzowPT09by5pbmRleE9mKFwiL1wiKT9uK286citvLnJlcGxhY2UoL15cXC5cXC8vLFwiXCIpLFwidXJsKFwiK0pTT04uc3RyaW5naWZ5KGkpK1wiKVwifSl9fV0pfSk7IiwiLypcbiAgICBKYXZhU2NyaXB0IGF1dG9Db21wbGV0ZSB2MS4wLjRcbiAgICBDb3B5cmlnaHQgKGMpIDIwMTQgU2ltb24gU3RlaW5iZXJnZXIgLyBQaXhhYmF5XG4gICAgR2l0SHViOiBodHRwczovL2dpdGh1Yi5jb20vUGl4YWJheS9KYXZhU2NyaXB0LWF1dG9Db21wbGV0ZVxuICAgIExpY2Vuc2U6IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4qL1xuXG52YXIgYXV0b0NvbXBsZXRlID0gKGZ1bmN0aW9uKCl7XG4gICAgLy8gXCJ1c2Ugc3RyaWN0XCI7XG4gICAgZnVuY3Rpb24gYXV0b0NvbXBsZXRlKG9wdGlvbnMpe1xuICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpIHJldHVybjtcblxuICAgICAgICAvLyBoZWxwZXJzXG4gICAgICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpeyByZXR1cm4gZWwuY2xhc3NMaXN0ID8gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgOiBuZXcgUmVnRXhwKCdcXFxcYicrIGNsYXNzTmFtZSsnXFxcXGInKS50ZXN0KGVsLmNsYXNzTmFtZSk7IH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRFdmVudChlbCwgdHlwZSwgaGFuZGxlcil7XG4gICAgICAgICAgICBpZiAoZWwuYXR0YWNoRXZlbnQpIGVsLmF0dGFjaEV2ZW50KCdvbicrdHlwZSwgaGFuZGxlcik7IGVsc2UgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW1vdmVFdmVudChlbCwgdHlwZSwgaGFuZGxlcil7XG4gICAgICAgICAgICAvLyBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikgbm90IHdvcmtpbmcgaW4gSUUxMVxuICAgICAgICAgICAgaWYgKGVsLmRldGFjaEV2ZW50KSBlbC5kZXRhY2hFdmVudCgnb24nK3R5cGUsIGhhbmRsZXIpOyBlbHNlIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGl2ZShlbENsYXNzLCBldmVudCwgY2IsIGNvbnRleHQpe1xuICAgICAgICAgICAgYWRkRXZlbnQoY29udGV4dCB8fCBkb2N1bWVudCwgZXZlbnQsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIHZhciBmb3VuZCwgZWwgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGVsICYmICEoZm91bmQgPSBoYXNDbGFzcyhlbCwgZWxDbGFzcykpKSBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKSBjYi5jYWxsKGVsLCBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG8gPSB7XG4gICAgICAgICAgICBzZWxlY3RvcjogMCxcbiAgICAgICAgICAgIHNvdXJjZTogMCxcbiAgICAgICAgICAgIG1pbkNoYXJzOiAzLFxuICAgICAgICAgICAgZGVsYXk6IDE1MCxcbiAgICAgICAgICAgIG9mZnNldExlZnQ6IDAsXG4gICAgICAgICAgICBvZmZzZXRUb3A6IDEsXG4gICAgICAgICAgICBjYWNoZTogMSxcbiAgICAgICAgICAgIG1lbnVDbGFzczogJycsXG4gICAgICAgICAgICByZW5kZXJJdGVtOiBmdW5jdGlvbiAoaXRlbSwgc2VhcmNoKXtcbiAgICAgICAgICAgICAgICAvLyBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCIoXCIgKyBzZWFyY2guc3BsaXQoJyAnKS5qb2luKCd8JykgKyBcIilcIiwgXCJnaVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJhdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiIGRhdGEtdmFsPVwiJyArIGl0ZW0gKyAnXCI+JyArIGl0ZW0ucmVwbGFjZShyZSwgXCI8Yj4kMTwvYj5cIikgKyAnPC9kaXY+JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblNlbGVjdDogZnVuY3Rpb24oZSwgdGVybSwgaXRlbSl7fVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBrIGluIG9wdGlvbnMpIHsgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoaykpIG9ba10gPSBvcHRpb25zW2tdOyB9XG5cbiAgICAgICAgLy8gaW5pdFxuICAgICAgICB2YXIgZWxlbXMgPSB0eXBlb2Ygby5zZWxlY3RvciA9PSAnb2JqZWN0JyA/IFtvLnNlbGVjdG9yXSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoby5zZWxlY3Rvcik7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxlbGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSBlbGVtc1tpXTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIHN1Z2dlc3Rpb25zIGNvbnRhaW5lciBcInNjXCJcbiAgICAgICAgICAgIHRoYXQuc2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRoYXQuc2MuY2xhc3NOYW1lID0gJ2F1dG9jb21wbGV0ZS1zdWdnZXN0aW9ucyAnK28ubWVudUNsYXNzO1xuXG4gICAgICAgICAgICB0aGF0LmF1dG9jb21wbGV0ZUF0dHIgPSB0aGF0LmdldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJyk7XG4gICAgICAgICAgICB0aGF0LnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICAgICAgdGhhdC5jYWNoZSA9IHt9O1xuICAgICAgICAgICAgdGhhdC5sYXN0X3ZhbCA9ICcnO1xuXG4gICAgICAgICAgICB0aGF0LnVwZGF0ZVNDID0gZnVuY3Rpb24ocmVzaXplLCBuZXh0KXtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IHRoYXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhhdC5zYy5zdHlsZS5sZWZ0ID0gTWF0aC5yb3VuZChyZWN0LmxlZnQgKyAod2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KSArIG8ub2Zmc2V0TGVmdCkgKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoYXQuc2Muc3R5bGUudG9wID0gTWF0aC5yb3VuZChyZWN0LmJvdHRvbSArICh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgKyBvLm9mZnNldFRvcCkgKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoYXQuc2Muc3R5bGUud2lkdGggPSBNYXRoLnJvdW5kKHJlY3QucmlnaHQgLSByZWN0LmxlZnQpICsgJ3B4JzsgLy8gb3V0ZXJXaWR0aFxuICAgICAgICAgICAgICAgIGlmICghcmVzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2Muc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhhdC5zYy5tYXhIZWlnaHQpIHsgdGhhdC5zYy5tYXhIZWlnaHQgPSBwYXJzZUludCgod2luZG93LmdldENvbXB1dGVkU3R5bGUgPyBnZXRDb21wdXRlZFN0eWxlKHRoYXQuc2MsIG51bGwpIDogdGhhdC5zYy5jdXJyZW50U3R5bGUpLm1heEhlaWdodCk7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGF0LnNjLnN1Z2dlc3Rpb25IZWlnaHQpIHRoYXQuc2Muc3VnZ2VzdGlvbkhlaWdodCA9IHRoYXQuc2MucXVlcnlTZWxlY3RvcignLmF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uJykub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5zYy5zdWdnZXN0aW9uSGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0KSB0aGF0LnNjLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NyVG9wID0gdGhhdC5zYy5zY3JvbGxUb3AsIHNlbFRvcCA9IG5leHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gdGhhdC5zYy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbFRvcCArIHRoYXQuc2Muc3VnZ2VzdGlvbkhlaWdodCAtIHRoYXQuc2MubWF4SGVpZ2h0ID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zYy5zY3JvbGxUb3AgPSBzZWxUb3AgKyB0aGF0LnNjLnN1Z2dlc3Rpb25IZWlnaHQgKyBzY3JUb3AgLSB0aGF0LnNjLm1heEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxUb3AgPCAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNjLnNjcm9sbFRvcCA9IHNlbFRvcCArIHNjclRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRFdmVudCh3aW5kb3csICdyZXNpemUnLCB0aGF0LnVwZGF0ZVNDKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhhdC5zYyk7XG5cbiAgICAgICAgICAgIGxpdmUoJ2F1dG9jb21wbGV0ZS1zdWdnZXN0aW9uJywgJ21vdXNlbGVhdmUnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICB2YXIgc2VsID0gdGhhdC5zYy5xdWVyeVNlbGVjdG9yKCcuYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb24uc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsKSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHNlbC5jbGFzc05hbWUgPSBzZWwuY2xhc3NOYW1lLnJlcGxhY2UoJ3NlbGVjdGVkJywgJycpOyB9LCAyMCk7XG4gICAgICAgICAgICB9LCB0aGF0LnNjKTtcblxuICAgICAgICAgICAgbGl2ZSgnYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb24nLCAnbW91c2VvdmVyJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgdmFyIHNlbCA9IHRoYXQuc2MucXVlcnlTZWxlY3RvcignLmF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uLnNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbCkgc2VsLmNsYXNzTmFtZSA9IHNlbC5jbGFzc05hbWUucmVwbGFjZSgnc2VsZWN0ZWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc05hbWUgKz0gJyBzZWxlY3RlZCc7XG4gICAgICAgICAgICB9LCB0aGF0LnNjKTtcblxuICAgICAgICAgICAgbGl2ZSgnYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb24nLCAnbW91c2Vkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHRoaXMsICdhdXRvY29tcGxldGUtc3VnZ2VzdGlvbicpKSB7IC8vIGVsc2Ugb3V0c2lkZSBjbGlja1xuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnZhbHVlID0gdjtcbiAgICAgICAgICAgICAgICAgICAgby5vblNlbGVjdChlLCB2LCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoYXQuc2MpO1xuXG4gICAgICAgICAgICB0aGF0LmJsdXJIYW5kbGVyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0cnkgeyB2YXIgb3Zlcl9zYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRvY29tcGxldGUtc3VnZ2VzdGlvbnM6aG92ZXInKTsgfSBjYXRjaChlKXsgdmFyIG92ZXJfc2IgPSAwOyB9XG4gICAgICAgICAgICAgICAgaWYgKCFvdmVyX3NiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQubGFzdF92YWwgPSB0aGF0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnNjLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgdGhhdC5zYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyB9LCAzNTApOyAvLyBoaWRlIHN1Z2dlc3Rpb25zIG9uIGZhc3QgaW5wdXRcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoYXQgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgdGhhdC5mb2N1cygpOyB9LCAyMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWRkRXZlbnQodGhhdCwgJ2JsdXInLCB0aGF0LmJsdXJIYW5kbGVyKTtcblxuICAgICAgICAgICAgdmFyIHN1Z2dlc3QgPSBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gdGhhdC52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGF0LmNhY2hlW3ZhbF0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCAmJiB2YWwubGVuZ3RoID49IG8ubWluQ2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wO2k8ZGF0YS5sZW5ndGg7aSsrKSBzICs9IG8ucmVuZGVySXRlbShkYXRhW2ldLCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnNjLmlubmVySFRNTCA9IHM7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlU0MoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0LmtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHdpbmRvdy5ldmVudCA/IGUua2V5Q29kZSA6IGUud2hpY2g7XG4gICAgICAgICAgICAgICAgLy8gZG93biAoNDApLCB1cCAoMzgpXG4gICAgICAgICAgICAgICAgaWYgKChrZXkgPT0gNDAgfHwga2V5ID09IDM4KSAmJiB0aGF0LnNjLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCwgc2VsID0gdGhhdC5zYy5xdWVyeVNlbGVjdG9yKCcuYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb24uc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSAoa2V5ID09IDQwKSA/IHRoYXQuc2MucXVlcnlTZWxlY3RvcignLmF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uJykgOiB0aGF0LnNjLmNoaWxkTm9kZXNbdGhhdC5zYy5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdOyAvLyBmaXJzdCA6IGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQuY2xhc3NOYW1lICs9ICcgc2VsZWN0ZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC52YWx1ZSA9IG5leHQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IChrZXkgPT0gNDApID8gc2VsLm5leHRTaWJsaW5nIDogc2VsLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmNsYXNzTmFtZSA9IHNlbC5jbGFzc05hbWUucmVwbGFjZSgnc2VsZWN0ZWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5jbGFzc05hbWUgKz0gJyBzZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC52YWx1ZSA9IG5leHQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7IHNlbC5jbGFzc05hbWUgPSBzZWwuY2xhc3NOYW1lLnJlcGxhY2UoJ3NlbGVjdGVkJywgJycpOyB0aGF0LnZhbHVlID0gdGhhdC5sYXN0X3ZhbDsgbmV4dCA9IDA7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVwZGF0ZVNDKDAsIG5leHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVzY1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PSAyNykgeyB0aGF0LnZhbHVlID0gdGhhdC5sYXN0X3ZhbDsgdGhhdC5zYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyB9XG4gICAgICAgICAgICAgICAgLy8gZW50ZXJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgPT0gMTMgfHwga2V5ID09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCA9IHRoYXQuc2MucXVlcnlTZWxlY3RvcignLmF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uLnNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWwgJiYgdGhhdC5zYy5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykgeyBvLm9uU2VsZWN0KGUsIHNlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsJyksIHNlbCk7IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgdGhhdC5zYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyB9LCAyMCk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWRkRXZlbnQodGhhdCwgJ2tleWRvd24nLCB0aGF0LmtleWRvd25IYW5kbGVyKTtcblxuICAgICAgICAgICAgdGhhdC5rZXl1cEhhbmRsZXIgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gd2luZG93LmV2ZW50ID8gZS5rZXlDb2RlIDogZS53aGljaDtcbiAgICAgICAgICAgICAgICBpZiAoIWtleSB8fCAoa2V5IDwgMzUgfHwga2V5ID4gNDApICYmIGtleSAhPSAxMyAmJiBrZXkgIT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoYXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwubGVuZ3RoID49IG8ubWluQ2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT0gdGhhdC5sYXN0X3ZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQubGFzdF92YWwgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoYXQudGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgaW4gdGhhdC5jYWNoZSkgeyBzdWdnZXN0KHRoYXQuY2FjaGVbdmFsXSk7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyByZXF1ZXN0cyBpZiBwcmV2aW91cyBzdWdnZXN0aW9ucyB3ZXJlIGVtcHR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MTsgaTx2YWwubGVuZ3RoLW8ubWluQ2hhcnM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSB2YWwuc2xpY2UoMCwgdmFsLmxlbmd0aC1pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0IGluIHRoYXQuY2FjaGUgJiYgIXRoYXQuY2FjaGVbcGFydF0ubGVuZ3RoKSB7IHN1Z2dlc3QoW10pOyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpeyBvLnNvdXJjZSh2YWwsIHN1Z2dlc3QpIH0sIG8uZGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5sYXN0X3ZhbCA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2Muc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhZGRFdmVudCh0aGF0LCAna2V5dXAnLCB0aGF0LmtleXVwSGFuZGxlcik7XG5cbiAgICAgICAgICAgIHRoYXQuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgdGhhdC5sYXN0X3ZhbCA9ICdcXG4nO1xuICAgICAgICAgICAgICAgIHRoYXQua2V5dXBIYW5kbGVyKGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFvLm1pbkNoYXJzKSBhZGRFdmVudCh0aGF0LCAnZm9jdXMnLCB0aGF0LmZvY3VzSGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwdWJsaWMgZGVzdHJveSBtZXRob2RcbiAgICAgICAgdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxlbGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gZWxlbXNbaV07XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQod2luZG93LCAncmVzaXplJywgdGhhdC51cGRhdGVTQyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQodGhhdCwgJ2JsdXInLCB0aGF0LmJsdXJIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudCh0aGF0LCAnZm9jdXMnLCB0aGF0LmZvY3VzSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQodGhhdCwgJ2tleWRvd24nLCB0aGF0LmtleWRvd25IYW5kbGVyKTtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudCh0aGF0LCAna2V5dXAnLCB0aGF0LmtleXVwSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuYXV0b2NvbXBsZXRlQXR0cilcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsIHRoYXQuYXV0b2NvbXBsZXRlQXR0cik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJlbW92ZUF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGF0LnNjKTtcbiAgICAgICAgICAgICAgICB0aGF0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGF1dG9Db21wbGV0ZTtcbn0pKCk7XG5cbihmdW5jdGlvbigpe1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgICAgIGRlZmluZSgnYXV0b0NvbXBsZXRlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gYXV0b0NvbXBsZXRlOyB9KTtcbiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cylcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBhdXRvQ29tcGxldGU7XG4gICAgZWxzZVxuICAgICAgICB3aW5kb3cuYXV0b0NvbXBsZXRlID0gYXV0b0NvbXBsZXRlO1xufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbiFmdW5jdGlvbiAodCkge1xuICB2YXIgZSA9IHt9O2Z1bmN0aW9uIGkobikge1xuICAgIGlmIChlW25dKSByZXR1cm4gZVtuXS5leHBvcnRzO3ZhciBzID0gZVtuXSA9IHsgaTogbiwgbDogITEsIGV4cG9ydHM6IHt9IH07cmV0dXJuIHRbbl0uY2FsbChzLmV4cG9ydHMsIHMsIHMuZXhwb3J0cywgaSksIHMubCA9ICEwLCBzLmV4cG9ydHM7XG4gIH1pLm0gPSB0LCBpLmMgPSBlLCBpLmQgPSBmdW5jdGlvbiAodCwgZSwgbikge1xuICAgIGkubyh0LCBlKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgZSwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBuIH0pO1xuICB9LCBpLnIgPSBmdW5jdGlvbiAodCkge1xuICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcbiAgfSwgaS50ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICBpZiAoMSAmIGUgJiYgKHQgPSBpKHQpKSwgOCAmIGUpIHJldHVybiB0O2lmICg0ICYgZSAmJiBcIm9iamVjdFwiID09ICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHQpKSAmJiB0ICYmIHQuX19lc01vZHVsZSkgcmV0dXJuIHQ7dmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO2lmIChpLnIobiksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgdmFsdWU6IHQgfSksIDIgJiBlICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIHQpIGZvciAodmFyIHMgaW4gdCkge1xuICAgICAgaS5kKG4sIHMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0W2VdO1xuICAgICAgfS5iaW5kKG51bGwsIHMpKTtcbiAgICB9cmV0dXJuIG47XG4gIH0sIGkubiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGUgPSB0ICYmIHQuX19lc01vZHVsZSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0LmRlZmF1bHQ7XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH07cmV0dXJuIGkuZChlLCBcImFcIiwgZSksIGU7XG4gIH0sIGkubyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBlKTtcbiAgfSwgaS5wID0gXCJcIiwgaShpLnMgPSAxMik7XG59KFtmdW5jdGlvbiAodCwgZSwgaSkge1xuICB2YXIgbjtcbiAgLyohXG4gICAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMy4xXG4gICAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAgICpcbiAgICogSW5jbHVkZXMgU2l6emxlLmpzXG4gICAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICAgKlxuICAgKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICAgKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgKlxuICAgKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICAgKi9cbiAgLyohXG4gICAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMy4xXG4gICAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAgICpcbiAgICogSW5jbHVkZXMgU2l6emxlLmpzXG4gICAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICAgKlxuICAgKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICAgKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgKlxuICAgKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICAgKi9cbiAgIWZ1bmN0aW9uIChlLCBpKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXCJvYmplY3RcIiA9PSBfdHlwZW9mKHQuZXhwb3J0cykgPyB0LmV4cG9ydHMgPSBlLmRvY3VtZW50ID8gaShlLCAhMCkgOiBmdW5jdGlvbiAodCkge1xuICAgICAgaWYgKCF0LmRvY3VtZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiBpKHQpO1xuICAgIH0gOiBpKGUpO1xuICB9KFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIChpLCBzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIHIgPSBbXSxcbiAgICAgICAgbyA9IGkuZG9jdW1lbnQsXG4gICAgICAgIGEgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgICAgIGwgPSByLnNsaWNlLFxuICAgICAgICB1ID0gci5jb25jYXQsXG4gICAgICAgIGMgPSByLnB1c2gsXG4gICAgICAgIGggPSByLmluZGV4T2YsXG4gICAgICAgIGQgPSB7fSxcbiAgICAgICAgcCA9IGQudG9TdHJpbmcsXG4gICAgICAgIGYgPSBkLmhhc093blByb3BlcnR5LFxuICAgICAgICBnID0gZi50b1N0cmluZyxcbiAgICAgICAgbSA9IGcuY2FsbChPYmplY3QpLFxuICAgICAgICB2ID0ge30sXG4gICAgICAgIF8gPSBmdW5jdGlvbiBfKHQpIHtcbiAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgXCJudW1iZXJcIiAhPSB0eXBlb2YgdC5ub2RlVHlwZTtcbiAgICB9LFxuICAgICAgICBiID0gZnVuY3Rpb24gYih0KSB7XG4gICAgICByZXR1cm4gbnVsbCAhPSB0ICYmIHQgPT09IHQud2luZG93O1xuICAgIH0sXG4gICAgICAgIHkgPSB7IHR5cGU6ICEwLCBzcmM6ICEwLCBub01vZHVsZTogITAgfTtmdW5jdGlvbiBrKHQsIGUsIGkpIHtcbiAgICAgIHZhciBuLFxuICAgICAgICAgIHMgPSAoZSA9IGUgfHwgbykuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtpZiAocy50ZXh0ID0gdCwgaSkgZm9yIChuIGluIHkpIHtcbiAgICAgICAgaVtuXSAmJiAoc1tuXSA9IGlbbl0pO1xuICAgICAgfWUuaGVhZC5hcHBlbmRDaGlsZChzKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHMpO1xuICAgIH1mdW5jdGlvbiB3KHQpIHtcbiAgICAgIHJldHVybiBudWxsID09IHQgPyB0ICsgXCJcIiA6IFwib2JqZWN0XCIgPT0gKHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodCkpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCA/IGRbcC5jYWxsKHQpXSB8fCBcIm9iamVjdFwiIDogdHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KTtcbiAgICB9dmFyIHggPSBmdW5jdGlvbiB4KHQsIGUpIHtcbiAgICAgIHJldHVybiBuZXcgeC5mbi5pbml0KHQsIGUpO1xuICAgIH0sXG4gICAgICAgIEMgPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7ZnVuY3Rpb24gRCh0KSB7XG4gICAgICB2YXIgZSA9ICEhdCAmJiBcImxlbmd0aFwiIGluIHQgJiYgdC5sZW5ndGgsXG4gICAgICAgICAgaSA9IHcodCk7cmV0dXJuICFfKHQpICYmICFiKHQpICYmIChcImFycmF5XCIgPT09IGkgfHwgMCA9PT0gZSB8fCBcIm51bWJlclwiID09IHR5cGVvZiBlICYmIGUgPiAwICYmIGUgLSAxIGluIHQpO1xuICAgIH14LmZuID0geC5wcm90b3R5cGUgPSB7IGpxdWVyeTogXCIzLjMuMVwiLCBjb25zdHJ1Y3RvcjogeCwgbGVuZ3RoOiAwLCB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICByZXR1cm4gbC5jYWxsKHRoaXMpO1xuICAgICAgfSwgZ2V0OiBmdW5jdGlvbiBnZXQodCkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gbC5jYWxsKHRoaXMpIDogdCA8IDAgPyB0aGlzW3QgKyB0aGlzLmxlbmd0aF0gOiB0aGlzW3RdO1xuICAgICAgfSwgcHVzaFN0YWNrOiBmdW5jdGlvbiBwdXNoU3RhY2sodCkge1xuICAgICAgICB2YXIgZSA9IHgubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLCB0KTtyZXR1cm4gZS5wcmV2T2JqZWN0ID0gdGhpcywgZTtcbiAgICAgIH0sIGVhY2g6IGZ1bmN0aW9uIGVhY2godCkge1xuICAgICAgICByZXR1cm4geC5lYWNoKHRoaXMsIHQpO1xuICAgICAgfSwgbWFwOiBmdW5jdGlvbiBtYXAodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soeC5tYXAodGhpcywgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gdC5jYWxsKGUsIGksIGUpO1xuICAgICAgICB9KSk7XG4gICAgICB9LCBzbGljZTogZnVuY3Rpb24gc2xpY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfSwgZmlyc3Q6IGZ1bmN0aW9uIGZpcnN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcSgwKTtcbiAgICAgIH0sIGxhc3Q6IGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVxKC0xKTtcbiAgICAgIH0sIGVxOiBmdW5jdGlvbiBlcSh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICBpID0gK3QgKyAodCA8IDAgPyBlIDogMCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGkgPj0gMCAmJiBpIDwgZSA/IFt0aGlzW2ldXSA6IFtdKTtcbiAgICAgIH0sIGVuZDogZnVuY3Rpb24gZW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcbiAgICAgIH0sIHB1c2g6IGMsIHNvcnQ6IHIuc29ydCwgc3BsaWNlOiByLnNwbGljZSB9LCB4LmV4dGVuZCA9IHguZm4uZXh0ZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHQsXG4gICAgICAgICAgZSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgcyxcbiAgICAgICAgICByLFxuICAgICAgICAgIG8gPSBhcmd1bWVudHNbMF0gfHwge30sXG4gICAgICAgICAgYSA9IDEsXG4gICAgICAgICAgbCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgdSA9ICExO2ZvciAoXCJib29sZWFuXCIgPT0gdHlwZW9mIG8gJiYgKHUgPSBvLCBvID0gYXJndW1lbnRzW2FdIHx8IHt9LCBhKyspLCBcIm9iamVjdFwiID09ICh0eXBlb2YgbyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG8pKSB8fCBfKG8pIHx8IChvID0ge30pLCBhID09PSBsICYmIChvID0gdGhpcywgYS0tKTsgYSA8IGw7IGErKykge1xuICAgICAgICBpZiAobnVsbCAhPSAodCA9IGFyZ3VtZW50c1thXSkpIGZvciAoZSBpbiB0KSB7XG4gICAgICAgICAgaSA9IG9bZV0sIG8gIT09IChuID0gdFtlXSkgJiYgKHUgJiYgbiAmJiAoeC5pc1BsYWluT2JqZWN0KG4pIHx8IChzID0gQXJyYXkuaXNBcnJheShuKSkpID8gKHMgPyAocyA9ICExLCByID0gaSAmJiBBcnJheS5pc0FycmF5KGkpID8gaSA6IFtdKSA6IHIgPSBpICYmIHguaXNQbGFpbk9iamVjdChpKSA/IGkgOiB7fSwgb1tlXSA9IHguZXh0ZW5kKHUsIHIsIG4pKSA6IHZvaWQgMCAhPT0gbiAmJiAob1tlXSA9IG4pKTtcbiAgICAgICAgfVxuICAgICAgfXJldHVybiBvO1xuICAgIH0sIHguZXh0ZW5kKHsgZXhwYW5kbzogXCJqUXVlcnlcIiArIChcIjMuMy4xXCIgKyBNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZywgXCJcIiksIGlzUmVhZHk6ICEwLCBlcnJvcjogZnVuY3Rpb24gZXJyb3IodCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodCk7XG4gICAgICB9LCBub29wOiBmdW5jdGlvbiBub29wKCkge30sIGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodCkge1xuICAgICAgICB2YXIgZSwgaTtyZXR1cm4gISghdCB8fCBcIltvYmplY3QgT2JqZWN0XVwiICE9PSBwLmNhbGwodCkpICYmICghKGUgPSBhKHQpKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChpID0gZi5jYWxsKGUsIFwiY29uc3RydWN0b3JcIikgJiYgZS5jb25zdHJ1Y3RvcikgJiYgZy5jYWxsKGkpID09PSBtKTtcbiAgICAgIH0sIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uIGlzRW1wdHlPYmplY3QodCkge1xuICAgICAgICB2YXIgZTtmb3IgKGUgaW4gdCkge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfXJldHVybiAhMDtcbiAgICAgIH0sIGdsb2JhbEV2YWw6IGZ1bmN0aW9uIGdsb2JhbEV2YWwodCkge1xuICAgICAgICBrKHQpO1xuICAgICAgfSwgZWFjaDogZnVuY3Rpb24gZWFjaCh0LCBlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbiA9IDA7aWYgKEQodCkpIGZvciAoaSA9IHQubGVuZ3RoOyBuIDwgaSAmJiAhMSAhPT0gZS5jYWxsKHRbbl0sIG4sIHRbbl0pOyBuKyspIHt9IGVsc2UgZm9yIChuIGluIHQpIHtcbiAgICAgICAgICBpZiAoITEgPT09IGUuY2FsbCh0W25dLCBuLCB0W25dKSkgYnJlYWs7XG4gICAgICAgIH1yZXR1cm4gdDtcbiAgICAgIH0sIHRyaW06IGZ1bmN0aW9uIHRyaW0odCkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gXCJcIiA6ICh0ICsgXCJcIikucmVwbGFjZShDLCBcIlwiKTtcbiAgICAgIH0sIG1ha2VBcnJheTogZnVuY3Rpb24gbWFrZUFycmF5KHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSBlIHx8IFtdO3JldHVybiBudWxsICE9IHQgJiYgKEQoT2JqZWN0KHQpKSA/IHgubWVyZ2UoaSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IFt0XSA6IHQpIDogYy5jYWxsKGksIHQpKSwgaTtcbiAgICAgIH0sIGluQXJyYXk6IGZ1bmN0aW9uIGluQXJyYXkodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSBlID8gLTEgOiBoLmNhbGwoZSwgdCwgaSk7XG4gICAgICB9LCBtZXJnZTogZnVuY3Rpb24gbWVyZ2UodCwgZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gK2UubGVuZ3RoLCBuID0gMCwgcyA9IHQubGVuZ3RoOyBuIDwgaTsgbisrKSB7XG4gICAgICAgICAgdFtzKytdID0gZVtuXTtcbiAgICAgICAgfXJldHVybiB0Lmxlbmd0aCA9IHMsIHQ7XG4gICAgICB9LCBncmVwOiBmdW5jdGlvbiBncmVwKHQsIGUsIGkpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IFtdLCBzID0gMCwgciA9IHQubGVuZ3RoLCBvID0gIWk7IHMgPCByOyBzKyspIHtcbiAgICAgICAgICAhZSh0W3NdLCBzKSAhPT0gbyAmJiBuLnB1c2godFtzXSk7XG4gICAgICAgIH1yZXR1cm4gbjtcbiAgICAgIH0sIG1hcDogZnVuY3Rpb24gbWFwKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgciA9IDAsXG4gICAgICAgICAgICBvID0gW107aWYgKEQodCkpIGZvciAobiA9IHQubGVuZ3RoOyByIDwgbjsgcisrKSB7XG4gICAgICAgICAgbnVsbCAhPSAocyA9IGUodFtyXSwgciwgaSkpICYmIG8ucHVzaChzKTtcbiAgICAgICAgfSBlbHNlIGZvciAociBpbiB0KSB7XG4gICAgICAgICAgbnVsbCAhPSAocyA9IGUodFtyXSwgciwgaSkpICYmIG8ucHVzaChzKTtcbiAgICAgICAgfXJldHVybiB1LmFwcGx5KFtdLCBvKTtcbiAgICAgIH0sIGd1aWQ6IDEsIHN1cHBvcnQ6IHYgfSksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmICh4LmZuW1N5bWJvbC5pdGVyYXRvcl0gPSByW1N5bWJvbC5pdGVyYXRvcl0pLCB4LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIGRbXCJbb2JqZWN0IFwiICsgZSArIFwiXVwiXSA9IGUudG9Mb3dlckNhc2UoKTtcbiAgICB9KTt2YXIgUyA9XG4gICAgLyohXG4gICAgICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gICAgICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKlxuICAgICAqIERhdGU6IDIwMTYtMDgtMDhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGUsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIHMsXG4gICAgICAgICAgcixcbiAgICAgICAgICBvLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgbCxcbiAgICAgICAgICB1LFxuICAgICAgICAgIGMsXG4gICAgICAgICAgaCxcbiAgICAgICAgICBkLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgZixcbiAgICAgICAgICBnLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgdixcbiAgICAgICAgICBfLFxuICAgICAgICAgIGIsXG4gICAgICAgICAgeSA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcbiAgICAgICAgICBrID0gdC5kb2N1bWVudCxcbiAgICAgICAgICB3ID0gMCxcbiAgICAgICAgICB4ID0gMCxcbiAgICAgICAgICBDID0gb3QoKSxcbiAgICAgICAgICBEID0gb3QoKSxcbiAgICAgICAgICBTID0gb3QoKSxcbiAgICAgICAgICBUID0gZnVuY3Rpb24gVCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0ID09PSBlICYmIChoID0gITApLCAwO1xuICAgICAgfSxcbiAgICAgICAgICBJID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgICAgICAgQSA9IFtdLFxuICAgICAgICAgIGogPSBBLnBvcCxcbiAgICAgICAgICBNID0gQS5wdXNoLFxuICAgICAgICAgIFAgPSBBLnB1c2gsXG4gICAgICAgICAgRSA9IEEuc2xpY2UsXG4gICAgICAgICAgTyA9IGZ1bmN0aW9uIE8odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRbaV0gPT09IGUpIHJldHVybiBpO1xuICAgICAgICB9cmV0dXJuIC0xO1xuICAgICAgfSxcbiAgICAgICAgICBIID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuICAgICAgICAgIE4gPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG4gICAgICAgICAgQiA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcbiAgICAgICAgICBGID0gXCJcXFxcW1wiICsgTiArIFwiKihcIiArIEIgKyBcIikoPzpcIiArIE4gKyBcIiooWypeJHwhfl0/PSlcIiArIE4gKyBcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgQiArIFwiKSl8KVwiICsgTiArIFwiKlxcXFxdXCIsXG4gICAgICAgICAgTCA9IFwiOihcIiArIEIgKyBcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBGICsgXCIpKil8LiopXFxcXCl8KVwiLFxuICAgICAgICAgIHogPSBuZXcgUmVnRXhwKE4gKyBcIitcIiwgXCJnXCIpLFxuICAgICAgICAgIFcgPSBuZXcgUmVnRXhwKFwiXlwiICsgTiArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIE4gKyBcIiskXCIsIFwiZ1wiKSxcbiAgICAgICAgICBSID0gbmV3IFJlZ0V4cChcIl5cIiArIE4gKyBcIiosXCIgKyBOICsgXCIqXCIpLFxuICAgICAgICAgICQgPSBuZXcgUmVnRXhwKFwiXlwiICsgTiArIFwiKihbPit+XXxcIiArIE4gKyBcIilcIiArIE4gKyBcIipcIiksXG4gICAgICAgICAgcSA9IG5ldyBSZWdFeHAoXCI9XCIgKyBOICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIE4gKyBcIipcXFxcXVwiLCBcImdcIiksXG4gICAgICAgICAgVSA9IG5ldyBSZWdFeHAoTCksXG4gICAgICAgICAgSyA9IG5ldyBSZWdFeHAoXCJeXCIgKyBCICsgXCIkXCIpLFxuICAgICAgICAgIFkgPSB7IElEOiBuZXcgUmVnRXhwKFwiXiMoXCIgKyBCICsgXCIpXCIpLCBDTEFTUzogbmV3IFJlZ0V4cChcIl5cXFxcLihcIiArIEIgKyBcIilcIiksIFRBRzogbmV3IFJlZ0V4cChcIl4oXCIgKyBCICsgXCJ8WypdKVwiKSwgQVRUUjogbmV3IFJlZ0V4cChcIl5cIiArIEYpLCBQU0VVRE86IG5ldyBSZWdFeHAoXCJeXCIgKyBMKSwgQ0hJTEQ6IG5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgTiArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyBOICsgXCIqKD86KFsrLV18KVwiICsgTiArIFwiKihcXFxcZCspfCkpXCIgKyBOICsgXCIqXFxcXCl8KVwiLCBcImlcIiksIGJvb2w6IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBIICsgXCIpJFwiLCBcImlcIiksIG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cChcIl5cIiArIE4gKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyBOICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgTiArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiKSB9LFxuICAgICAgICAgIFYgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuICAgICAgICAgIEcgPSAvXmhcXGQkL2ksXG4gICAgICAgICAgWCA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG4gICAgICAgICAgSiA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuICAgICAgICAgIFogPSAvWyt+XS8sXG4gICAgICAgICAgUSA9IG5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIE4gKyBcIj98KFwiICsgTiArIFwiKXwuKVwiLCBcImlnXCIpLFxuICAgICAgICAgIHR0ID0gZnVuY3Rpb24gdHQodCwgZSwgaSkge1xuICAgICAgICB2YXIgbiA9IFwiMHhcIiArIGUgLSA2NTUzNjtyZXR1cm4gbiAhPSBuIHx8IGkgPyBlIDogbiA8IDAgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKG4gKyA2NTUzNikgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKG4gPj4gMTAgfCA1NTI5NiwgMTAyMyAmIG4gfCA1NjMyMCk7XG4gICAgICB9LFxuICAgICAgICAgIGV0ID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG4gICAgICAgICAgaXQgPSBmdW5jdGlvbiBpdCh0LCBlKSB7XG4gICAgICAgIHJldHVybiBlID8gXCJcXDBcIiA9PT0gdCA/IFwi77+9XCIgOiB0LnNsaWNlKDAsIC0xKSArIFwiXFxcXFwiICsgdC5jaGFyQ29kZUF0KHQubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCIgOiBcIlxcXFxcIiArIHQ7XG4gICAgICB9LFxuICAgICAgICAgIG50ID0gZnVuY3Rpb24gbnQoKSB7XG4gICAgICAgIGQoKTtcbiAgICAgIH0sXG4gICAgICAgICAgc3QgPSBfdChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gITAgPT09IHQuZGlzYWJsZWQgJiYgKFwiZm9ybVwiIGluIHQgfHwgXCJsYWJlbFwiIGluIHQpO1xuICAgICAgfSwgeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH0pO3RyeSB7XG4gICAgICAgIFAuYXBwbHkoQSA9IEUuY2FsbChrLmNoaWxkTm9kZXMpLCBrLmNoaWxkTm9kZXMpLCBBW2suY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlO1xuICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICBQID0geyBhcHBseTogQS5sZW5ndGggPyBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgTS5hcHBseSh0LCBFLmNhbGwoZSkpO1xuICAgICAgICAgIH0gOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHQubGVuZ3RoLCBuID0gMDsgdFtpKytdID0gZVtuKytdOykge310Lmxlbmd0aCA9IGkgLSAxO1xuICAgICAgICAgIH0gfTtcbiAgICAgIH1mdW5jdGlvbiBydCh0LCBlLCBuLCBzKSB7XG4gICAgICAgIHZhciByLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGYsXG4gICAgICAgICAgICB2LFxuICAgICAgICAgICAgXyA9IGUgJiYgZS5vd25lckRvY3VtZW50LFxuICAgICAgICAgICAgdyA9IGUgPyBlLm5vZGVUeXBlIDogOTtpZiAobiA9IG4gfHwgW10sIFwic3RyaW5nXCIgIT0gdHlwZW9mIHQgfHwgIXQgfHwgMSAhPT0gdyAmJiA5ICE9PSB3ICYmIDExICE9PSB3KSByZXR1cm4gbjtpZiAoIXMgJiYgKChlID8gZS5vd25lckRvY3VtZW50IHx8IGUgOiBrKSAhPT0gcCAmJiBkKGUpLCBlID0gZSB8fCBwLCBnKSkge1xuICAgICAgICAgIGlmICgxMSAhPT0gdyAmJiAoaCA9IEouZXhlYyh0KSkpIGlmIChyID0gaFsxXSkge1xuICAgICAgICAgICAgaWYgKDkgPT09IHcpIHtcbiAgICAgICAgICAgICAgaWYgKCEodSA9IGUuZ2V0RWxlbWVudEJ5SWQocikpKSByZXR1cm4gbjtpZiAodS5pZCA9PT0gcikgcmV0dXJuIG4ucHVzaCh1KSwgbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXyAmJiAodSA9IF8uZ2V0RWxlbWVudEJ5SWQocikpICYmIGIoZSwgdSkgJiYgdS5pZCA9PT0gcikgcmV0dXJuIG4ucHVzaCh1KSwgbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGhbMl0pIHJldHVybiBQLmFwcGx5KG4sIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCkpLCBuO2lmICgociA9IGhbM10pICYmIGkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHJldHVybiBQLmFwcGx5KG4sIGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShyKSksIG47XG4gICAgICAgICAgfWlmIChpLnFzYSAmJiAhU1t0ICsgXCIgXCJdICYmICghbSB8fCAhbS50ZXN0KHQpKSkge1xuICAgICAgICAgICAgaWYgKDEgIT09IHcpIF8gPSBlLCB2ID0gdDtlbHNlIGlmIChcIm9iamVjdFwiICE9PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgZm9yICgoYyA9IGUuZ2V0QXR0cmlidXRlKFwiaWRcIikpID8gYyA9IGMucmVwbGFjZShldCwgaXQpIDogZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjID0geSksIGEgPSAoZiA9IG8odCkpLmxlbmd0aDsgYS0tOykge1xuICAgICAgICAgICAgICAgIGZbYV0gPSBcIiNcIiArIGMgKyBcIiBcIiArIHZ0KGZbYV0pO1xuICAgICAgICAgICAgICB9diA9IGYuam9pbihcIixcIiksIF8gPSBaLnRlc3QodCkgJiYgZ3QoZS5wYXJlbnROb2RlKSB8fCBlO1xuICAgICAgICAgICAgfWlmICh2KSB0cnkge1xuICAgICAgICAgICAgICByZXR1cm4gUC5hcHBseShuLCBfLnF1ZXJ5U2VsZWN0b3JBbGwodikpLCBuO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge30gZmluYWxseSB7XG4gICAgICAgICAgICAgIGMgPT09IHkgJiYgZS5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gbCh0LnJlcGxhY2UoVywgXCIkMVwiKSwgZSwgbiwgcyk7XG4gICAgICB9ZnVuY3Rpb24gb3QoKSB7XG4gICAgICAgIHZhciB0ID0gW107cmV0dXJuIGZ1bmN0aW9uIGUoaSwgcykge1xuICAgICAgICAgIHJldHVybiB0LnB1c2goaSArIFwiIFwiKSA+IG4uY2FjaGVMZW5ndGggJiYgZGVsZXRlIGVbdC5zaGlmdCgpXSwgZVtpICsgXCIgXCJdID0gcztcbiAgICAgICAgfTtcbiAgICAgIH1mdW5jdGlvbiBhdCh0KSB7XG4gICAgICAgIHJldHVybiB0W3ldID0gITAsIHQ7XG4gICAgICB9ZnVuY3Rpb24gbHQodCkge1xuICAgICAgICB2YXIgZSA9IHAuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeSB7XG4gICAgICAgICAgcmV0dXJuICEhdChlKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBlLnBhcmVudE5vZGUgJiYgZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpLCBlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfWZ1bmN0aW9uIHV0KHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHQuc3BsaXQoXCJ8XCIpLCBzID0gaS5sZW5ndGg7IHMtLTspIHtcbiAgICAgICAgICBuLmF0dHJIYW5kbGVbaVtzXV0gPSBlO1xuICAgICAgICB9XG4gICAgICB9ZnVuY3Rpb24gY3QodCwgZSkge1xuICAgICAgICB2YXIgaSA9IGUgJiYgdCxcbiAgICAgICAgICAgIG4gPSBpICYmIDEgPT09IHQubm9kZVR5cGUgJiYgMSA9PT0gZS5ub2RlVHlwZSAmJiB0LnNvdXJjZUluZGV4IC0gZS5zb3VyY2VJbmRleDtpZiAobikgcmV0dXJuIG47aWYgKGkpIGZvciAoOyBpID0gaS5uZXh0U2libGluZzspIHtcbiAgICAgICAgICBpZiAoaSA9PT0gZSkgcmV0dXJuIC0xO1xuICAgICAgICB9cmV0dXJuIHQgPyAxIDogLTE7XG4gICAgICB9ZnVuY3Rpb24gaHQodCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gXCJpbnB1dFwiID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgJiYgZS50eXBlID09PSB0O1xuICAgICAgICB9O1xuICAgICAgfWZ1bmN0aW9uIGR0KHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIGkgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIChcImlucHV0XCIgPT09IGkgfHwgXCJidXR0b25cIiA9PT0gaSkgJiYgZS50eXBlID09PSB0O1xuICAgICAgICB9O1xuICAgICAgfWZ1bmN0aW9uIHB0KHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZm9ybVwiIGluIGUgPyBlLnBhcmVudE5vZGUgJiYgITEgPT09IGUuZGlzYWJsZWQgPyBcImxhYmVsXCIgaW4gZSA/IFwibGFiZWxcIiBpbiBlLnBhcmVudE5vZGUgPyBlLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IHQgOiBlLmRpc2FibGVkID09PSB0IDogZS5pc0Rpc2FibGVkID09PSB0IHx8IGUuaXNEaXNhYmxlZCAhPT0gIXQgJiYgc3QoZSkgPT09IHQgOiBlLmRpc2FibGVkID09PSB0IDogXCJsYWJlbFwiIGluIGUgJiYgZS5kaXNhYmxlZCA9PT0gdDtcbiAgICAgICAgfTtcbiAgICAgIH1mdW5jdGlvbiBmdCh0KSB7XG4gICAgICAgIHJldHVybiBhdChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBlID0gK2UsIGF0KGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzLCByID0gdChbXSwgaS5sZW5ndGgsIGUpLCBvID0gci5sZW5ndGg7IG8tLTspIHtcbiAgICAgICAgICAgICAgaVtzID0gcltvXV0gJiYgKGlbc10gPSAhKG5bc10gPSBpW3NdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfWZ1bmN0aW9uIGd0KHQpIHtcbiAgICAgICAgcmV0dXJuIHQgJiYgdm9pZCAwICE9PSB0LmdldEVsZW1lbnRzQnlUYWdOYW1lICYmIHQ7XG4gICAgICB9Zm9yIChlIGluIGkgPSBydC5zdXBwb3J0ID0ge30sIHIgPSBydC5pc1hNTCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlID0gdCAmJiAodC5vd25lckRvY3VtZW50IHx8IHQpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4gISFlICYmIFwiSFRNTFwiICE9PSBlLm5vZGVOYW1lO1xuICAgICAgfSwgZCA9IHJ0LnNldERvY3VtZW50ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgbyA9IHQgPyB0Lm93bmVyRG9jdW1lbnQgfHwgdCA6IGs7cmV0dXJuIG8gIT09IHAgJiYgOSA9PT0gby5ub2RlVHlwZSAmJiBvLmRvY3VtZW50RWxlbWVudCA/IChmID0gKHAgPSBvKS5kb2N1bWVudEVsZW1lbnQsIGcgPSAhcihwKSwgayAhPT0gcCAmJiAocyA9IHAuZGVmYXVsdFZpZXcpICYmIHMudG9wICE9PSBzICYmIChzLmFkZEV2ZW50TGlzdGVuZXIgPyBzLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgbnQsICExKSA6IHMuYXR0YWNoRXZlbnQgJiYgcy5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsIG50KSksIGkuYXR0cmlidXRlcyA9IGx0KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuY2xhc3NOYW1lID0gXCJpXCIsICF0LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcbiAgICAgICAgfSksIGkuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBsdChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LmFwcGVuZENoaWxkKHAuY3JlYXRlQ29tbWVudChcIlwiKSksICF0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG4gICAgICAgIH0pLCBpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBYLnRlc3QocC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSwgaS5nZXRCeUlkID0gbHQoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gZi5hcHBlbmRDaGlsZCh0KS5pZCA9IHksICFwLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFwLmdldEVsZW1lbnRzQnlOYW1lKHkpLmxlbmd0aDtcbiAgICAgICAgfSksIGkuZ2V0QnlJZCA/IChuLmZpbHRlci5JRCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSB0LnJlcGxhY2UoUSwgdHQpO3JldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGU7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgbi5maW5kLklEID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBlLmdldEVsZW1lbnRCeUlkICYmIGcpIHtcbiAgICAgICAgICAgIHZhciBpID0gZS5nZXRFbGVtZW50QnlJZCh0KTtyZXR1cm4gaSA/IFtpXSA6IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkgOiAobi5maWx0ZXIuSUQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdC5yZXBsYWNlKFEsIHR0KTtyZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gdm9pZCAwICE9PSB0LmdldEF0dHJpYnV0ZU5vZGUgJiYgdC5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIGkgJiYgaS52YWx1ZSA9PT0gZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBuLmZpbmQuSUQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmICh2b2lkIDAgIT09IGUuZ2V0RWxlbWVudEJ5SWQgJiYgZykge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHIgPSBlLmdldEVsZW1lbnRCeUlkKHQpO2lmIChyKSB7XG4gICAgICAgICAgICAgIGlmICgoaSA9IHIuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSAmJiBpLnZhbHVlID09PSB0KSByZXR1cm4gW3JdO2ZvciAocyA9IGUuZ2V0RWxlbWVudHNCeU5hbWUodCksIG4gPSAwOyByID0gc1tuKytdOykge1xuICAgICAgICAgICAgICAgIGlmICgoaSA9IHIuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSAmJiBpLnZhbHVlID09PSB0KSByZXR1cm4gW3JdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIG4uZmluZC5UQUcgPSBpLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KSA6IGkucXNhID8gZS5xdWVyeVNlbGVjdG9yQWxsKHQpIDogdm9pZCAwO1xuICAgICAgICB9IDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgbiA9IFtdLFxuICAgICAgICAgICAgICBzID0gMCxcbiAgICAgICAgICAgICAgciA9IGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCk7aWYgKFwiKlwiID09PSB0KSB7XG4gICAgICAgICAgICBmb3IgKDsgaSA9IHJbcysrXTspIHtcbiAgICAgICAgICAgICAgMSA9PT0gaS5ub2RlVHlwZSAmJiBuLnB1c2goaSk7XG4gICAgICAgICAgICB9cmV0dXJuIG47XG4gICAgICAgICAgfXJldHVybiByO1xuICAgICAgICB9LCBuLmZpbmQuQ0xBU1MgPSBpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZykgcmV0dXJuIGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSh0KTtcbiAgICAgICAgfSwgdiA9IFtdLCBtID0gW10sIChpLnFzYSA9IFgudGVzdChwLnF1ZXJ5U2VsZWN0b3JBbGwpKSAmJiAobHQoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBmLmFwcGVuZENoaWxkKHQpLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgeSArIFwiJz48L2E+PHNlbGVjdCBpZD0nXCIgKyB5ICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIiwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICYmIG0ucHVzaChcIlsqXiRdPVwiICsgTiArIFwiKig/OicnfFxcXCJcXFwiKVwiKSwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggfHwgbS5wdXNoKFwiXFxcXFtcIiArIE4gKyBcIiooPzp2YWx1ZXxcIiArIEggKyBcIilcIiksIHQucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIgKyB5ICsgXCItXVwiKS5sZW5ndGggfHwgbS5wdXNoKFwifj1cIiksIHQucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCB8fCBtLnB1c2goXCI6Y2hlY2tlZFwiKSwgdC5xdWVyeVNlbGVjdG9yQWxsKFwiYSNcIiArIHkgKyBcIisqXCIpLmxlbmd0aCB8fCBtLnB1c2goXCIuIy4rWyt+XVwiKTtcbiAgICAgICAgfSksIGx0KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciBlID0gcC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7ZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpLCB0LmFwcGVuZENoaWxkKGUpLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJEXCIpLCB0LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggJiYgbS5wdXNoKFwibmFtZVwiICsgTiArIFwiKlsqXiR8IX5dPz1cIiksIDIgIT09IHQucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAmJiBtLnB1c2goXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiKSwgZi5hcHBlbmRDaGlsZCh0KS5kaXNhYmxlZCA9ICEwLCAyICE9PSB0LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICYmIG0ucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpLCB0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLCBtLnB1c2goXCIsLio6XCIpO1xuICAgICAgICB9KSksIChpLm1hdGNoZXNTZWxlY3RvciA9IFgudGVzdChfID0gZi5tYXRjaGVzIHx8IGYud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGYubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGYub01hdGNoZXNTZWxlY3RvciB8fCBmLm1zTWF0Y2hlc1NlbGVjdG9yKSkgJiYgbHQoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpLmRpc2Nvbm5lY3RlZE1hdGNoID0gXy5jYWxsKHQsIFwiKlwiKSwgXy5jYWxsKHQsIFwiW3MhPScnXTp4XCIpLCB2LnB1c2goXCIhPVwiLCBMKTtcbiAgICAgICAgfSksIG0gPSBtLmxlbmd0aCAmJiBuZXcgUmVnRXhwKG0uam9pbihcInxcIikpLCB2ID0gdi5sZW5ndGggJiYgbmV3IFJlZ0V4cCh2LmpvaW4oXCJ8XCIpKSwgZSA9IFgudGVzdChmLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSwgYiA9IGUgfHwgWC50ZXN0KGYuY29udGFpbnMpID8gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IDkgPT09IHQubm9kZVR5cGUgPyB0LmRvY3VtZW50RWxlbWVudCA6IHQsXG4gICAgICAgICAgICAgIG4gPSBlICYmIGUucGFyZW50Tm9kZTtyZXR1cm4gdCA9PT0gbiB8fCAhKCFuIHx8IDEgIT09IG4ubm9kZVR5cGUgfHwgIShpLmNvbnRhaW5zID8gaS5jb250YWlucyhuKSA6IHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgMTYgJiB0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG4pKSk7XG4gICAgICAgIH0gOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmIChlKSBmb3IgKDsgZSA9IGUucGFyZW50Tm9kZTspIHtcbiAgICAgICAgICAgIGlmIChlID09PSB0KSByZXR1cm4gITA7XG4gICAgICAgICAgfXJldHVybiAhMTtcbiAgICAgICAgfSwgVCA9IGUgPyBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmICh0ID09PSBlKSByZXR1cm4gaCA9ICEwLCAwO3ZhciBuID0gIXQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gbiB8fCAoMSAmIChuID0gKHQub3duZXJEb2N1bWVudCB8fCB0KSA9PT0gKGUub3duZXJEb2N1bWVudCB8fCBlKSA/IHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSkgOiAxKSB8fCAhaS5zb3J0RGV0YWNoZWQgJiYgZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KSA9PT0gbiA/IHQgPT09IHAgfHwgdC5vd25lckRvY3VtZW50ID09PSBrICYmIGIoaywgdCkgPyAtMSA6IGUgPT09IHAgfHwgZS5vd25lckRvY3VtZW50ID09PSBrICYmIGIoaywgZSkgPyAxIDogYyA/IE8oYywgdCkgLSBPKGMsIGUpIDogMCA6IDQgJiBuID8gLTEgOiAxKTtcbiAgICAgICAgfSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgaWYgKHQgPT09IGUpIHJldHVybiBoID0gITAsIDA7dmFyIGksXG4gICAgICAgICAgICAgIG4gPSAwLFxuICAgICAgICAgICAgICBzID0gdC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICByID0gZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICBvID0gW3RdLFxuICAgICAgICAgICAgICBhID0gW2VdO2lmICghcyB8fCAhcikgcmV0dXJuIHQgPT09IHAgPyAtMSA6IGUgPT09IHAgPyAxIDogcyA/IC0xIDogciA/IDEgOiBjID8gTyhjLCB0KSAtIE8oYywgZSkgOiAwO2lmIChzID09PSByKSByZXR1cm4gY3QodCwgZSk7Zm9yIChpID0gdDsgaSA9IGkucGFyZW50Tm9kZTspIHtcbiAgICAgICAgICAgIG8udW5zaGlmdChpKTtcbiAgICAgICAgICB9Zm9yIChpID0gZTsgaSA9IGkucGFyZW50Tm9kZTspIHtcbiAgICAgICAgICAgIGEudW5zaGlmdChpKTtcbiAgICAgICAgICB9Zm9yICg7IG9bbl0gPT09IGFbbl07KSB7XG4gICAgICAgICAgICBuKys7XG4gICAgICAgICAgfXJldHVybiBuID8gY3Qob1tuXSwgYVtuXSkgOiBvW25dID09PSBrID8gLTEgOiBhW25dID09PSBrID8gMSA6IDA7XG4gICAgICAgIH0sIHApIDogcDtcbiAgICAgIH0sIHJ0Lm1hdGNoZXMgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICByZXR1cm4gcnQodCwgbnVsbCwgbnVsbCwgZSk7XG4gICAgICB9LCBydC5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICBpZiAoKHQub3duZXJEb2N1bWVudCB8fCB0KSAhPT0gcCAmJiBkKHQpLCBlID0gZS5yZXBsYWNlKHEsIFwiPSckMSddXCIpLCBpLm1hdGNoZXNTZWxlY3RvciAmJiBnICYmICFTW2UgKyBcIiBcIl0gJiYgKCF2IHx8ICF2LnRlc3QoZSkpICYmICghbSB8fCAhbS50ZXN0KGUpKSkgdHJ5IHtcbiAgICAgICAgICB2YXIgbiA9IF8uY2FsbCh0LCBlKTtpZiAobiB8fCBpLmRpc2Nvbm5lY3RlZE1hdGNoIHx8IHQuZG9jdW1lbnQgJiYgMTEgIT09IHQuZG9jdW1lbnQubm9kZVR5cGUpIHJldHVybiBuO1xuICAgICAgICB9IGNhdGNoICh0KSB7fXJldHVybiBydChlLCBwLCBudWxsLCBbdF0pLmxlbmd0aCA+IDA7XG4gICAgICB9LCBydC5jb250YWlucyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgIHJldHVybiAodC5vd25lckRvY3VtZW50IHx8IHQpICE9PSBwICYmIGQodCksIGIodCwgZSk7XG4gICAgICB9LCBydC5hdHRyID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgKHQub3duZXJEb2N1bWVudCB8fCB0KSAhPT0gcCAmJiBkKHQpO3ZhciBzID0gbi5hdHRySGFuZGxlW2UudG9Mb3dlckNhc2UoKV0sXG4gICAgICAgICAgICByID0gcyAmJiBJLmNhbGwobi5hdHRySGFuZGxlLCBlLnRvTG93ZXJDYXNlKCkpID8gcyh0LCBlLCAhZykgOiB2b2lkIDA7cmV0dXJuIHZvaWQgMCAhPT0gciA/IHIgOiBpLmF0dHJpYnV0ZXMgfHwgIWcgPyB0LmdldEF0dHJpYnV0ZShlKSA6IChyID0gdC5nZXRBdHRyaWJ1dGVOb2RlKGUpKSAmJiByLnNwZWNpZmllZCA/IHIudmFsdWUgOiBudWxsO1xuICAgICAgfSwgcnQuZXNjYXBlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuICh0ICsgXCJcIikucmVwbGFjZShldCwgaXQpO1xuICAgICAgfSwgcnQuZXJyb3IgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIHQpO1xuICAgICAgfSwgcnQudW5pcXVlU29ydCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgbiA9IFtdLFxuICAgICAgICAgICAgcyA9IDAsXG4gICAgICAgICAgICByID0gMDtpZiAoaCA9ICFpLmRldGVjdER1cGxpY2F0ZXMsIGMgPSAhaS5zb3J0U3RhYmxlICYmIHQuc2xpY2UoMCksIHQuc29ydChUKSwgaCkge1xuICAgICAgICAgIGZvciAoOyBlID0gdFtyKytdOykge1xuICAgICAgICAgICAgZSA9PT0gdFtyXSAmJiAocyA9IG4ucHVzaChyKSk7XG4gICAgICAgICAgfWZvciAoOyBzLS07KSB7XG4gICAgICAgICAgICB0LnNwbGljZShuW3NdLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gYyA9IG51bGwsIHQ7XG4gICAgICB9LCBzID0gcnQuZ2V0VGV4dCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSA9IFwiXCIsXG4gICAgICAgICAgICBuID0gMCxcbiAgICAgICAgICAgIHIgPSB0Lm5vZGVUeXBlO2lmIChyKSB7XG4gICAgICAgICAgaWYgKDEgPT09IHIgfHwgOSA9PT0gciB8fCAxMSA9PT0gcikge1xuICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQudGV4dENvbnRlbnQpIHJldHVybiB0LnRleHRDb250ZW50O2ZvciAodCA9IHQuZmlyc3RDaGlsZDsgdDsgdCA9IHQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgaSArPSBzKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoMyA9PT0gciB8fCA0ID09PSByKSByZXR1cm4gdC5ub2RlVmFsdWU7XG4gICAgICAgIH0gZWxzZSBmb3IgKDsgZSA9IHRbbisrXTspIHtcbiAgICAgICAgICBpICs9IHMoZSk7XG4gICAgICAgIH1yZXR1cm4gaTtcbiAgICAgIH0sIChuID0gcnQuc2VsZWN0b3JzID0geyBjYWNoZUxlbmd0aDogNTAsIGNyZWF0ZVBzZXVkbzogYXQsIG1hdGNoOiBZLCBhdHRySGFuZGxlOiB7fSwgZmluZDoge30sIHJlbGF0aXZlOiB7IFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiAhMCB9LCBcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sIFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6ICEwIH0sIFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9IH0sIHByZUZpbHRlcjogeyBBVFRSOiBmdW5jdGlvbiBBVFRSKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0WzFdID0gdFsxXS5yZXBsYWNlKFEsIHR0KSwgdFszXSA9ICh0WzNdIHx8IHRbNF0gfHwgdFs1XSB8fCBcIlwiKS5yZXBsYWNlKFEsIHR0KSwgXCJ+PVwiID09PSB0WzJdICYmICh0WzNdID0gXCIgXCIgKyB0WzNdICsgXCIgXCIpLCB0LnNsaWNlKDAsIDQpO1xuICAgICAgICAgIH0sIENISUxEOiBmdW5jdGlvbiBDSElMRCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdFsxXSA9IHRbMV0udG9Mb3dlckNhc2UoKSwgXCJudGhcIiA9PT0gdFsxXS5zbGljZSgwLCAzKSA/ICh0WzNdIHx8IHJ0LmVycm9yKHRbMF0pLCB0WzRdID0gKyh0WzRdID8gdFs1XSArICh0WzZdIHx8IDEpIDogMiAqIChcImV2ZW5cIiA9PT0gdFszXSB8fCBcIm9kZFwiID09PSB0WzNdKSksIHRbNV0gPSArKHRbN10gKyB0WzhdIHx8IFwib2RkXCIgPT09IHRbM10pKSA6IHRbM10gJiYgcnQuZXJyb3IodFswXSksIHQ7XG4gICAgICAgICAgfSwgUFNFVURPOiBmdW5jdGlvbiBQU0VVRE8odCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgaSA9ICF0WzZdICYmIHRbMl07cmV0dXJuIFkuQ0hJTEQudGVzdCh0WzBdKSA/IG51bGwgOiAodFszXSA/IHRbMl0gPSB0WzRdIHx8IHRbNV0gfHwgXCJcIiA6IGkgJiYgVS50ZXN0KGkpICYmIChlID0gbyhpLCAhMCkpICYmIChlID0gaS5pbmRleE9mKFwiKVwiLCBpLmxlbmd0aCAtIGUpIC0gaS5sZW5ndGgpICYmICh0WzBdID0gdFswXS5zbGljZSgwLCBlKSwgdFsyXSA9IGkuc2xpY2UoMCwgZSkpLCB0LnNsaWNlKDAsIDMpKTtcbiAgICAgICAgICB9IH0sIGZpbHRlcjogeyBUQUc6IGZ1bmN0aW9uIFRBRyh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQucmVwbGFjZShRLCB0dCkudG9Mb3dlckNhc2UoKTtyZXR1cm4gXCIqXCIgPT09IHQgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gdC5ub2RlTmFtZSAmJiB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sIENMQVNTOiBmdW5jdGlvbiBDTEFTUyh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IENbdCArIFwiIFwiXTtyZXR1cm4gZSB8fCAoZSA9IG5ldyBSZWdFeHAoXCIoXnxcIiArIE4gKyBcIilcIiArIHQgKyBcIihcIiArIE4gKyBcInwkKVwiKSkgJiYgQyh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KFwic3RyaW5nXCIgPT0gdHlwZW9mIHQuY2xhc3NOYW1lICYmIHQuY2xhc3NOYW1lIHx8IHZvaWQgMCAhPT0gdC5nZXRBdHRyaWJ1dGUgJiYgdC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIEFUVFI6IGZ1bmN0aW9uIEFUVFIodCwgZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgIHZhciBzID0gcnQuYXR0cihuLCB0KTtyZXR1cm4gbnVsbCA9PSBzID8gXCIhPVwiID09PSBlIDogIWUgfHwgKHMgKz0gXCJcIiwgXCI9XCIgPT09IGUgPyBzID09PSBpIDogXCIhPVwiID09PSBlID8gcyAhPT0gaSA6IFwiXj1cIiA9PT0gZSA/IGkgJiYgMCA9PT0gcy5pbmRleE9mKGkpIDogXCIqPVwiID09PSBlID8gaSAmJiBzLmluZGV4T2YoaSkgPiAtMSA6IFwiJD1cIiA9PT0gZSA/IGkgJiYgcy5zbGljZSgtaS5sZW5ndGgpID09PSBpIDogXCJ+PVwiID09PSBlID8gKFwiIFwiICsgcy5yZXBsYWNlKHosIFwiIFwiKSArIFwiIFwiKS5pbmRleE9mKGkpID4gLTEgOiBcInw9XCIgPT09IGUgJiYgKHMgPT09IGkgfHwgcy5zbGljZSgwLCBpLmxlbmd0aCArIDEpID09PSBpICsgXCItXCIpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSwgQ0hJTEQ6IGZ1bmN0aW9uIENISUxEKHQsIGUsIGksIG4sIHMpIHtcbiAgICAgICAgICAgIHZhciByID0gXCJudGhcIiAhPT0gdC5zbGljZSgwLCAzKSxcbiAgICAgICAgICAgICAgICBvID0gXCJsYXN0XCIgIT09IHQuc2xpY2UoLTQpLFxuICAgICAgICAgICAgICAgIGEgPSBcIm9mLXR5cGVcIiA9PT0gZTtyZXR1cm4gMSA9PT0gbiAmJiAwID09PSBzID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICEhdC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIChlLCBpLCBsKSB7XG4gICAgICAgICAgICAgIHZhciB1LFxuICAgICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICBnID0gciAhPT0gbyA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG4gICAgICAgICAgICAgICAgICBtID0gZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgdiA9IGEgJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgXyA9ICFsICYmICFhLFxuICAgICAgICAgICAgICAgICAgYiA9ICExO2lmIChtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBnOykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGQgPSBlOyBkID0gZFtnXTspIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA/IGQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdiA6IDEgPT09IGQubm9kZVR5cGUpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgfWYgPSBnID0gXCJvbmx5XCIgPT09IHQgJiYgIWYgJiYgXCJuZXh0U2libGluZ1wiO1xuICAgICAgICAgICAgICAgICAgfXJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9aWYgKGYgPSBbbyA/IG0uZmlyc3RDaGlsZCA6IG0ubGFzdENoaWxkXSwgbyAmJiBfKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGIgPSAocCA9ICh1ID0gKGMgPSAoaCA9IChkID0gbSlbeV0gfHwgKGRbeV0gPSB7fSkpW2QudW5pcXVlSURdIHx8IChoW2QudW5pcXVlSURdID0ge30pKVt0XSB8fCBbXSlbMF0gPT09IHcgJiYgdVsxXSkgJiYgdVsyXSwgZCA9IHAgJiYgbS5jaGlsZE5vZGVzW3BdOyBkID0gKytwICYmIGQgJiYgZFtnXSB8fCAoYiA9IHAgPSAwKSB8fCBmLnBvcCgpOykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gZC5ub2RlVHlwZSAmJiArK2IgJiYgZCA9PT0gZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNbdF0gPSBbdywgcCwgYl07YnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8gJiYgKGIgPSBwID0gKHUgPSAoYyA9IChoID0gKGQgPSBlKVt5XSB8fCAoZFt5XSA9IHt9KSlbZC51bmlxdWVJRF0gfHwgKGhbZC51bmlxdWVJRF0gPSB7fSkpW3RdIHx8IFtdKVswXSA9PT0gdyAmJiB1WzFdKSwgITEgPT09IGIpIGZvciAoOyAoZCA9ICsrcCAmJiBkICYmIGRbZ10gfHwgKGIgPSBwID0gMCkgfHwgZi5wb3AoKSkgJiYgKChhID8gZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB2IDogMSAhPT0gZC5ub2RlVHlwZSkgfHwgISsrYiB8fCAoXyAmJiAoKGMgPSAoaCA9IGRbeV0gfHwgKGRbeV0gPSB7fSkpW2QudW5pcXVlSURdIHx8IChoW2QudW5pcXVlSURdID0ge30pKVt0XSA9IFt3LCBiXSksIGQgIT09IGUpKTspIHt9cmV0dXJuIChiIC09IHMpID09PSBuIHx8IGIgJSBuID09IDAgJiYgYiAvIG4gPj0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBQU0VVRE86IGZ1bmN0aW9uIFBTRVVETyh0LCBlKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBzID0gbi5wc2V1ZG9zW3RdIHx8IG4uc2V0RmlsdGVyc1t0LnRvTG93ZXJDYXNlKCldIHx8IHJ0LmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHQpO3JldHVybiBzW3ldID8gcyhlKSA6IHMubGVuZ3RoID4gMSA/IChpID0gW3QsIHQsIFwiXCIsIGVdLCBuLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkodC50b0xvd2VyQ2FzZSgpKSA/IGF0KGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIG4sIHIgPSBzKHQsIGUpLCBvID0gci5sZW5ndGg7IG8tLTspIHtcbiAgICAgICAgICAgICAgICB0W24gPSBPKHQsIHJbb10pXSA9ICEoaVtuXSA9IHJbb10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBzKHQsIDAsIGkpO1xuICAgICAgICAgICAgfSkgOiBzO1xuICAgICAgICAgIH0gfSwgcHNldWRvczogeyBub3Q6IGF0KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IFtdLFxuICAgICAgICAgICAgICAgIGkgPSBbXSxcbiAgICAgICAgICAgICAgICBuID0gYSh0LnJlcGxhY2UoVywgXCIkMVwiKSk7cmV0dXJuIG5beV0gPyBhdChmdW5jdGlvbiAodCwgZSwgaSwgcykge1xuICAgICAgICAgICAgICBmb3IgKHZhciByLCBvID0gbih0LCBudWxsLCBzLCBbXSksIGEgPSB0Lmxlbmd0aDsgYS0tOykge1xuICAgICAgICAgICAgICAgIChyID0gb1thXSkgJiYgKHRbYV0gPSAhKGVbYV0gPSByKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pIDogZnVuY3Rpb24gKHQsIHMsIHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVbMF0gPSB0LCBuKGUsIG51bGwsIHIsIGkpLCBlWzBdID0gbnVsbCwgIWkucG9wKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLCBoYXM6IGF0KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJ0KHQsIGUpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLCBjb250YWluczogYXQoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ID0gdC5yZXBsYWNlKFEsIHR0KSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIChlLnRleHRDb250ZW50IHx8IGUuaW5uZXJUZXh0IHx8IHMoZSkpLmluZGV4T2YodCkgPiAtMTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksIGxhbmc6IGF0KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gSy50ZXN0KHQgfHwgXCJcIikgfHwgcnQuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIHQpLCB0ID0gdC5yZXBsYWNlKFEsIHR0KS50b0xvd2VyQ2FzZSgpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICB2YXIgaTtkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPSBnID8gZS5sYW5nIDogZS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlLmdldEF0dHJpYnV0ZShcImxhbmdcIikpIHJldHVybiAoaSA9IGkudG9Mb3dlckNhc2UoKSkgPT09IHQgfHwgMCA9PT0gaS5pbmRleE9mKHQgKyBcIi1cIik7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKChlID0gZS5wYXJlbnROb2RlKSAmJiAxID09PSBlLm5vZGVUeXBlKTtyZXR1cm4gITE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLCB0YXJnZXQ6IGZ1bmN0aW9uIHRhcmdldChlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHQubG9jYXRpb24gJiYgdC5sb2NhdGlvbi5oYXNoO3JldHVybiBpICYmIGkuc2xpY2UoMSkgPT09IGUuaWQ7XG4gICAgICAgICAgfSwgcm9vdDogZnVuY3Rpb24gcm9vdCh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA9PT0gZjtcbiAgICAgICAgICB9LCBmb2N1czogZnVuY3Rpb24gZm9jdXModCkge1xuICAgICAgICAgICAgcmV0dXJuIHQgPT09IHAuYWN0aXZlRWxlbWVudCAmJiAoIXAuaGFzRm9jdXMgfHwgcC5oYXNGb2N1cygpKSAmJiAhISh0LnR5cGUgfHwgdC5ocmVmIHx8IH50LnRhYkluZGV4KTtcbiAgICAgICAgICB9LCBlbmFibGVkOiBwdCghMSksIGRpc2FibGVkOiBwdCghMCksIGNoZWNrZWQ6IGZ1bmN0aW9uIGNoZWNrZWQodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIFwiaW5wdXRcIiA9PT0gZSAmJiAhIXQuY2hlY2tlZCB8fCBcIm9wdGlvblwiID09PSBlICYmICEhdC5zZWxlY3RlZDtcbiAgICAgICAgICB9LCBzZWxlY3RlZDogZnVuY3Rpb24gc2VsZWN0ZWQodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQucGFyZW50Tm9kZSAmJiB0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgITAgPT09IHQuc2VsZWN0ZWQ7XG4gICAgICAgICAgfSwgZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KHQpIHtcbiAgICAgICAgICAgIGZvciAodCA9IHQuZmlyc3RDaGlsZDsgdDsgdCA9IHQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgaWYgKHQubm9kZVR5cGUgPCA2KSByZXR1cm4gITE7XG4gICAgICAgICAgICB9cmV0dXJuICEwO1xuICAgICAgICAgIH0sIHBhcmVudDogZnVuY3Rpb24gcGFyZW50KHQpIHtcbiAgICAgICAgICAgIHJldHVybiAhbi5wc2V1ZG9zLmVtcHR5KHQpO1xuICAgICAgICAgIH0sIGhlYWRlcjogZnVuY3Rpb24gaGVhZGVyKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBHLnRlc3QodC5ub2RlTmFtZSk7XG4gICAgICAgICAgfSwgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KHQpIHtcbiAgICAgICAgICAgIHJldHVybiBWLnRlc3QodC5ub2RlTmFtZSk7XG4gICAgICAgICAgfSwgYnV0dG9uOiBmdW5jdGlvbiBidXR0b24odCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIFwiaW5wdXRcIiA9PT0gZSAmJiBcImJ1dHRvblwiID09PSB0LnR5cGUgfHwgXCJidXR0b25cIiA9PT0gZTtcbiAgICAgICAgICB9LCB0ZXh0OiBmdW5jdGlvbiB0ZXh0KHQpIHtcbiAgICAgICAgICAgIHZhciBlO3JldHVybiBcImlucHV0XCIgPT09IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiBcInRleHRcIiA9PT0gdC50eXBlICYmIChudWxsID09IChlID0gdC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSB8fCBcInRleHRcIiA9PT0gZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICB9LCBmaXJzdDogZnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFswXTtcbiAgICAgICAgICB9KSwgbGFzdDogZnQoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbZSAtIDFdO1xuICAgICAgICAgIH0pLCBlcTogZnQoZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBbaSA8IDAgPyBpICsgZSA6IGldO1xuICAgICAgICAgIH0pLCBldmVuOiBmdChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgdC5wdXNoKGkpO1xuICAgICAgICAgICAgfXJldHVybiB0O1xuICAgICAgICAgIH0pLCBvZGQ6IGZ0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGU7IGkgKz0gMikge1xuICAgICAgICAgICAgICB0LnB1c2goaSk7XG4gICAgICAgICAgICB9cmV0dXJuIHQ7XG4gICAgICAgICAgfSksIGx0OiBmdChmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IGkgPCAwID8gaSArIGUgOiBpOyAtLW4gPj0gMDspIHtcbiAgICAgICAgICAgICAgdC5wdXNoKG4pO1xuICAgICAgICAgICAgfXJldHVybiB0O1xuICAgICAgICAgIH0pLCBndDogZnQoZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSBpIDwgMCA/IGkgKyBlIDogaTsgKytuIDwgZTspIHtcbiAgICAgICAgICAgICAgdC5wdXNoKG4pO1xuICAgICAgICAgICAgfXJldHVybiB0O1xuICAgICAgICAgIH0pIH0gfSkucHNldWRvcy5udGggPSBuLnBzZXVkb3MuZXEsIHsgcmFkaW86ICEwLCBjaGVja2JveDogITAsIGZpbGU6ICEwLCBwYXNzd29yZDogITAsIGltYWdlOiAhMCB9KSB7XG4gICAgICAgIG4ucHNldWRvc1tlXSA9IGh0KGUpO1xuICAgICAgfWZvciAoZSBpbiB7IHN1Ym1pdDogITAsIHJlc2V0OiAhMCB9KSB7XG4gICAgICAgIG4ucHNldWRvc1tlXSA9IGR0KGUpO1xuICAgICAgfWZ1bmN0aW9uIG10KCkge31mdW5jdGlvbiB2dCh0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSAwLCBpID0gdC5sZW5ndGgsIG4gPSBcIlwiOyBlIDwgaTsgZSsrKSB7XG4gICAgICAgICAgbiArPSB0W2VdLnZhbHVlO1xuICAgICAgICB9cmV0dXJuIG47XG4gICAgICB9ZnVuY3Rpb24gX3QodCwgZSwgaSkge1xuICAgICAgICB2YXIgbiA9IGUuZGlyLFxuICAgICAgICAgICAgcyA9IGUubmV4dCxcbiAgICAgICAgICAgIHIgPSBzIHx8IG4sXG4gICAgICAgICAgICBvID0gaSAmJiBcInBhcmVudE5vZGVcIiA9PT0gcixcbiAgICAgICAgICAgIGEgPSB4Kys7cmV0dXJuIGUuZmlyc3QgPyBmdW5jdGlvbiAoZSwgaSwgcykge1xuICAgICAgICAgIGZvciAoOyBlID0gZVtuXTspIHtcbiAgICAgICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IG8pIHJldHVybiB0KGUsIGksIHMpO1xuICAgICAgICAgIH1yZXR1cm4gITE7XG4gICAgICAgIH0gOiBmdW5jdGlvbiAoZSwgaSwgbCkge1xuICAgICAgICAgIHZhciB1LFxuICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICBkID0gW3csIGFdO2lmIChsKSB7XG4gICAgICAgICAgICBmb3IgKDsgZSA9IGVbbl07KSB7XG4gICAgICAgICAgICAgIGlmICgoMSA9PT0gZS5ub2RlVHlwZSB8fCBvKSAmJiB0KGUsIGksIGwpKSByZXR1cm4gITA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGZvciAoOyBlID0gZVtuXTspIHtcbiAgICAgICAgICAgIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IG8pIGlmIChjID0gKGggPSBlW3ldIHx8IChlW3ldID0ge30pKVtlLnVuaXF1ZUlEXSB8fCAoaFtlLnVuaXF1ZUlEXSA9IHt9KSwgcyAmJiBzID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIGUgPSBlW25dIHx8IGU7ZWxzZSB7XG4gICAgICAgICAgICAgIGlmICgodSA9IGNbcl0pICYmIHVbMF0gPT09IHcgJiYgdVsxXSA9PT0gYSkgcmV0dXJuIGRbMl0gPSB1WzJdO2lmIChjW3JdID0gZCwgZFsyXSA9IHQoZSwgaSwgbCkpIHJldHVybiAhMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuICExO1xuICAgICAgICB9O1xuICAgICAgfWZ1bmN0aW9uIGJ0KHQpIHtcbiAgICAgICAgcmV0dXJuIHQubGVuZ3RoID4gMSA/IGZ1bmN0aW9uIChlLCBpLCBuKSB7XG4gICAgICAgICAgZm9yICh2YXIgcyA9IHQubGVuZ3RoOyBzLS07KSB7XG4gICAgICAgICAgICBpZiAoIXRbc10oZSwgaSwgbikpIHJldHVybiAhMTtcbiAgICAgICAgICB9cmV0dXJuICEwO1xuICAgICAgICB9IDogdFswXTtcbiAgICAgIH1mdW5jdGlvbiB5dCh0LCBlLCBpLCBuLCBzKSB7XG4gICAgICAgIGZvciAodmFyIHIsIG8gPSBbXSwgYSA9IDAsIGwgPSB0Lmxlbmd0aCwgdSA9IG51bGwgIT0gZTsgYSA8IGw7IGErKykge1xuICAgICAgICAgIChyID0gdFthXSkgJiYgKGkgJiYgIWkociwgbiwgcykgfHwgKG8ucHVzaChyKSwgdSAmJiBlLnB1c2goYSkpKTtcbiAgICAgICAgfXJldHVybiBvO1xuICAgICAgfWZ1bmN0aW9uIGt0KHQsIGUsIGksIG4sIHMsIHIpIHtcbiAgICAgICAgcmV0dXJuIG4gJiYgIW5beV0gJiYgKG4gPSBrdChuKSksIHMgJiYgIXNbeV0gJiYgKHMgPSBrdChzLCByKSksIGF0KGZ1bmN0aW9uIChyLCBvLCBhLCBsKSB7XG4gICAgICAgICAgdmFyIHUsXG4gICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgIGQgPSBbXSxcbiAgICAgICAgICAgICAgcCA9IFtdLFxuICAgICAgICAgICAgICBmID0gby5sZW5ndGgsXG4gICAgICAgICAgICAgIGcgPSByIHx8IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gMCwgcyA9IGUubGVuZ3RoOyBuIDwgczsgbisrKSB7XG4gICAgICAgICAgICAgIHJ0KHQsIGVbbl0sIGkpO1xuICAgICAgICAgICAgfXJldHVybiBpO1xuICAgICAgICAgIH0oZSB8fCBcIipcIiwgYS5ub2RlVHlwZSA/IFthXSA6IGEsIFtdKSxcbiAgICAgICAgICAgICAgbSA9ICF0IHx8ICFyICYmIGUgPyBnIDogeXQoZywgZCwgdCwgYSwgbCksXG4gICAgICAgICAgICAgIHYgPSBpID8gcyB8fCAociA/IHQgOiBmIHx8IG4pID8gW10gOiBvIDogbTtpZiAoaSAmJiBpKG0sIHYsIGEsIGwpLCBuKSBmb3IgKHUgPSB5dCh2LCBwKSwgbih1LCBbXSwgYSwgbCksIGMgPSB1Lmxlbmd0aDsgYy0tOykge1xuICAgICAgICAgICAgKGggPSB1W2NdKSAmJiAodltwW2NdXSA9ICEobVtwW2NdXSA9IGgpKTtcbiAgICAgICAgICB9aWYgKHIpIHtcbiAgICAgICAgICAgIGlmIChzIHx8IHQpIHtcbiAgICAgICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHUgPSBbXSwgYyA9IHYubGVuZ3RoOyBjLS07KSB7XG4gICAgICAgICAgICAgICAgICAoaCA9IHZbY10pICYmIHUucHVzaChtW2NdID0gaCk7XG4gICAgICAgICAgICAgICAgfXMobnVsbCwgdiA9IFtdLCB1LCBsKTtcbiAgICAgICAgICAgICAgfWZvciAoYyA9IHYubGVuZ3RoOyBjLS07KSB7XG4gICAgICAgICAgICAgICAgKGggPSB2W2NdKSAmJiAodSA9IHMgPyBPKHIsIGgpIDogZFtjXSkgPiAtMSAmJiAoclt1XSA9ICEob1t1XSA9IGgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB2ID0geXQodiA9PT0gbyA/IHYuc3BsaWNlKGYsIHYubGVuZ3RoKSA6IHYpLCBzID8gcyhudWxsLCBvLCB2LCBsKSA6IFAuYXBwbHkobywgdik7XG4gICAgICAgIH0pO1xuICAgICAgfWZ1bmN0aW9uIHd0KHQpIHtcbiAgICAgICAgZm9yICh2YXIgZSwgaSwgcywgciA9IHQubGVuZ3RoLCBvID0gbi5yZWxhdGl2ZVt0WzBdLnR5cGVdLCBhID0gbyB8fCBuLnJlbGF0aXZlW1wiIFwiXSwgbCA9IG8gPyAxIDogMCwgYyA9IF90KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgPT09IGU7XG4gICAgICAgIH0sIGEsICEwKSwgaCA9IF90KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIE8oZSwgdCkgPiAtMTtcbiAgICAgICAgfSwgYSwgITApLCBkID0gW2Z1bmN0aW9uICh0LCBpLCBuKSB7XG4gICAgICAgICAgdmFyIHMgPSAhbyAmJiAobiB8fCBpICE9PSB1KSB8fCAoKGUgPSBpKS5ub2RlVHlwZSA/IGModCwgaSwgbikgOiBoKHQsIGksIG4pKTtyZXR1cm4gZSA9IG51bGwsIHM7XG4gICAgICAgIH1dOyBsIDwgcjsgbCsrKSB7XG4gICAgICAgICAgaWYgKGkgPSBuLnJlbGF0aXZlW3RbbF0udHlwZV0pIGQgPSBbX3QoYnQoZCksIGkpXTtlbHNlIHtcbiAgICAgICAgICAgIGlmICgoaSA9IG4uZmlsdGVyW3RbbF0udHlwZV0uYXBwbHkobnVsbCwgdFtsXS5tYXRjaGVzKSlbeV0pIHtcbiAgICAgICAgICAgICAgZm9yIChzID0gKytsOyBzIDwgciAmJiAhbi5yZWxhdGl2ZVt0W3NdLnR5cGVdOyBzKyspIHt9cmV0dXJuIGt0KGwgPiAxICYmIGJ0KGQpLCBsID4gMSAmJiB2dCh0LnNsaWNlKDAsIGwgLSAxKS5jb25jYXQoeyB2YWx1ZTogXCIgXCIgPT09IHRbbCAtIDJdLnR5cGUgPyBcIipcIiA6IFwiXCIgfSkpLnJlcGxhY2UoVywgXCIkMVwiKSwgaSwgbCA8IHMgJiYgd3QodC5zbGljZShsLCBzKSksIHMgPCByICYmIHd0KHQgPSB0LnNsaWNlKHMpKSwgcyA8IHIgJiYgdnQodCkpO1xuICAgICAgICAgICAgfWQucHVzaChpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gYnQoZCk7XG4gICAgICB9cmV0dXJuIG10LnByb3RvdHlwZSA9IG4uZmlsdGVycyA9IG4ucHNldWRvcywgbi5zZXRGaWx0ZXJzID0gbmV3IG10KCksIG8gPSBydC50b2tlbml6ZSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB1LFxuICAgICAgICAgICAgYyA9IERbdCArIFwiIFwiXTtpZiAoYykgcmV0dXJuIGUgPyAwIDogYy5zbGljZSgwKTtmb3IgKGEgPSB0LCBsID0gW10sIHUgPSBuLnByZUZpbHRlcjsgYTspIHtcbiAgICAgICAgICBmb3IgKG8gaW4gaSAmJiAhKHMgPSBSLmV4ZWMoYSkpIHx8IChzICYmIChhID0gYS5zbGljZShzWzBdLmxlbmd0aCkgfHwgYSksIGwucHVzaChyID0gW10pKSwgaSA9ICExLCAocyA9ICQuZXhlYyhhKSkgJiYgKGkgPSBzLnNoaWZ0KCksIHIucHVzaCh7IHZhbHVlOiBpLCB0eXBlOiBzWzBdLnJlcGxhY2UoVywgXCIgXCIpIH0pLCBhID0gYS5zbGljZShpLmxlbmd0aCkpLCBuLmZpbHRlcikge1xuICAgICAgICAgICAgIShzID0gWVtvXS5leGVjKGEpKSB8fCB1W29dICYmICEocyA9IHVbb10ocykpIHx8IChpID0gcy5zaGlmdCgpLCByLnB1c2goeyB2YWx1ZTogaSwgdHlwZTogbywgbWF0Y2hlczogcyB9KSwgYSA9IGEuc2xpY2UoaS5sZW5ndGgpKTtcbiAgICAgICAgICB9aWYgKCFpKSBicmVhaztcbiAgICAgICAgfXJldHVybiBlID8gYS5sZW5ndGggOiBhID8gcnQuZXJyb3IodCkgOiBEKHQsIGwpLnNsaWNlKDApO1xuICAgICAgfSwgYSA9IHJ0LmNvbXBpbGUgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHMgPSBbXSxcbiAgICAgICAgICAgIHIgPSBbXSxcbiAgICAgICAgICAgIGEgPSBTW3QgKyBcIiBcIl07aWYgKCFhKSB7XG4gICAgICAgICAgZm9yIChlIHx8IChlID0gbyh0KSksIGkgPSBlLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgKGEgPSB3dChlW2ldKSlbeV0gPyBzLnB1c2goYSkgOiByLnB1c2goYSk7XG4gICAgICAgICAgfShhID0gUyh0LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgdmFyIGkgPSBlLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICAgICAgcyA9IHQubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgICByID0gZnVuY3Rpb24gcihfcjIsIG8sIGEsIGwsIGMpIHtcbiAgICAgICAgICAgICAgdmFyIGgsXG4gICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICAgIHYgPSAwLFxuICAgICAgICAgICAgICAgICAgXyA9IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgYiA9IF9yMiAmJiBbXSxcbiAgICAgICAgICAgICAgICAgIHkgPSBbXSxcbiAgICAgICAgICAgICAgICAgIGsgPSB1LFxuICAgICAgICAgICAgICAgICAgeCA9IF9yMiB8fCBzICYmIG4uZmluZC5UQUcoXCIqXCIsIGMpLFxuICAgICAgICAgICAgICAgICAgQyA9IHcgKz0gbnVsbCA9PSBrID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgLjEsXG4gICAgICAgICAgICAgICAgICBEID0geC5sZW5ndGg7Zm9yIChjICYmICh1ID0gbyA9PT0gcCB8fCBvIHx8IGMpOyBfICE9PSBEICYmIG51bGwgIT0gKGggPSB4W19dKTsgXysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMgJiYgaCkge1xuICAgICAgICAgICAgICAgICAgZm9yIChmID0gMCwgbyB8fCBoLm93bmVyRG9jdW1lbnQgPT09IHAgfHwgKGQoaCksIGEgPSAhZyk7IG0gPSB0W2YrK107KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtKGgsIG8gfHwgcCwgYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsLnB1c2goaCk7YnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1jICYmICh3ID0gQyk7XG4gICAgICAgICAgICAgICAgfWkgJiYgKChoID0gIW0gJiYgaCkgJiYgdi0tLCBfcjIgJiYgYi5wdXNoKGgpKTtcbiAgICAgICAgICAgICAgfWlmICh2ICs9IF8sIGkgJiYgXyAhPT0gdikge1xuICAgICAgICAgICAgICAgIGZvciAoZiA9IDA7IG0gPSBlW2YrK107KSB7XG4gICAgICAgICAgICAgICAgICBtKGIsIHksIG8sIGEpO1xuICAgICAgICAgICAgICAgIH1pZiAoX3IyKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodiA+IDApIGZvciAoOyBfLS07KSB7XG4gICAgICAgICAgICAgICAgICAgIGJbX10gfHwgeVtfXSB8fCAoeVtfXSA9IGouY2FsbChsKSk7XG4gICAgICAgICAgICAgICAgICB9eSA9IHl0KHkpO1xuICAgICAgICAgICAgICAgIH1QLmFwcGx5KGwsIHkpLCBjICYmICFfcjIgJiYgeS5sZW5ndGggPiAwICYmIHYgKyBlLmxlbmd0aCA+IDEgJiYgcnQudW5pcXVlU29ydChsKTtcbiAgICAgICAgICAgICAgfXJldHVybiBjICYmICh3ID0gQywgdSA9IGspLCBiO1xuICAgICAgICAgICAgfTtyZXR1cm4gaSA/IGF0KHIpIDogcjtcbiAgICAgICAgICB9KHIsIHMpKSkuc2VsZWN0b3IgPSB0O1xuICAgICAgICB9cmV0dXJuIGE7XG4gICAgICB9LCBsID0gcnQuc2VsZWN0ID0gZnVuY3Rpb24gKHQsIGUsIGksIHMpIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBoLFxuICAgICAgICAgICAgZCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCAmJiB0LFxuICAgICAgICAgICAgcCA9ICFzICYmIG8odCA9IGQuc2VsZWN0b3IgfHwgdCk7aWYgKGkgPSBpIHx8IFtdLCAxID09PSBwLmxlbmd0aCkge1xuICAgICAgICAgIGlmICgobCA9IHBbMF0gPSBwWzBdLnNsaWNlKDApKS5sZW5ndGggPiAyICYmIFwiSURcIiA9PT0gKHUgPSBsWzBdKS50eXBlICYmIDkgPT09IGUubm9kZVR5cGUgJiYgZyAmJiBuLnJlbGF0aXZlW2xbMV0udHlwZV0pIHtcbiAgICAgICAgICAgIGlmICghKGUgPSAobi5maW5kLklEKHUubWF0Y2hlc1swXS5yZXBsYWNlKFEsIHR0KSwgZSkgfHwgW10pWzBdKSkgcmV0dXJuIGk7ZCAmJiAoZSA9IGUucGFyZW50Tm9kZSksIHQgPSB0LnNsaWNlKGwuc2hpZnQoKS52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIH1mb3IgKHIgPSBZLm5lZWRzQ29udGV4dC50ZXN0KHQpID8gMCA6IGwubGVuZ3RoOyByLS0gJiYgKHUgPSBsW3JdLCAhbi5yZWxhdGl2ZVtjID0gdS50eXBlXSk7KSB7XG4gICAgICAgICAgICBpZiAoKGggPSBuLmZpbmRbY10pICYmIChzID0gaCh1Lm1hdGNoZXNbMF0ucmVwbGFjZShRLCB0dCksIFoudGVzdChsWzBdLnR5cGUpICYmIGd0KGUucGFyZW50Tm9kZSkgfHwgZSkpKSB7XG4gICAgICAgICAgICAgIGlmIChsLnNwbGljZShyLCAxKSwgISh0ID0gcy5sZW5ndGggJiYgdnQobCkpKSByZXR1cm4gUC5hcHBseShpLCBzKSwgaTticmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gKGQgfHwgYSh0LCBwKSkocywgZSwgIWcsIGksICFlIHx8IFoudGVzdCh0KSAmJiBndChlLnBhcmVudE5vZGUpIHx8IGUpLCBpO1xuICAgICAgfSwgaS5zb3J0U3RhYmxlID0geS5zcGxpdChcIlwiKS5zb3J0KFQpLmpvaW4oXCJcIikgPT09IHksIGkuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaCwgZCgpLCBpLnNvcnREZXRhY2hlZCA9IGx0KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiAxICYgdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihwLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSk7XG4gICAgICB9KSwgbHQoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCIsIFwiI1wiID09PSB0LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgIH0pIHx8IHV0KFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICBpZiAoIWkpIHJldHVybiB0LmdldEF0dHJpYnV0ZShlLCBcInR5cGVcIiA9PT0gZS50b0xvd2VyQ2FzZSgpID8gMSA6IDIpO1xuICAgICAgfSksIGkuYXR0cmlidXRlcyAmJiBsdChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCIsIHQuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlwiKSwgXCJcIiA9PT0gdC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICAgICAgfSkgfHwgdXQoXCJ2YWx1ZVwiLCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICBpZiAoIWkgJiYgXCJpbnB1dFwiID09PSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiB0LmRlZmF1bHRWYWx1ZTtcbiAgICAgIH0pLCBsdChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSB0LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgfSkgfHwgdXQoSCwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG47aWYgKCFpKSByZXR1cm4gITAgPT09IHRbZV0gPyBlLnRvTG93ZXJDYXNlKCkgOiAobiA9IHQuZ2V0QXR0cmlidXRlTm9kZShlKSkgJiYgbi5zcGVjaWZpZWQgPyBuLnZhbHVlIDogbnVsbDtcbiAgICAgIH0pLCBydDtcbiAgICB9KGkpO3guZmluZCA9IFMsIHguZXhwciA9IFMuc2VsZWN0b3JzLCB4LmV4cHJbXCI6XCJdID0geC5leHByLnBzZXVkb3MsIHgudW5pcXVlU29ydCA9IHgudW5pcXVlID0gUy51bmlxdWVTb3J0LCB4LnRleHQgPSBTLmdldFRleHQsIHguaXNYTUxEb2MgPSBTLmlzWE1MLCB4LmNvbnRhaW5zID0gUy5jb250YWlucywgeC5lc2NhcGVTZWxlY3RvciA9IFMuZXNjYXBlO3ZhciBUID0gZnVuY3Rpb24gVCh0LCBlLCBpKSB7XG4gICAgICBmb3IgKHZhciBuID0gW10sIHMgPSB2b2lkIDAgIT09IGk7ICh0ID0gdFtlXSkgJiYgOSAhPT0gdC5ub2RlVHlwZTspIHtcbiAgICAgICAgaWYgKDEgPT09IHQubm9kZVR5cGUpIHtcbiAgICAgICAgICBpZiAocyAmJiB4KHQpLmlzKGkpKSBicmVhaztuLnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gbjtcbiAgICB9LFxuICAgICAgICBJID0gZnVuY3Rpb24gSSh0LCBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gW107IHQ7IHQgPSB0Lm5leHRTaWJsaW5nKSB7XG4gICAgICAgIDEgPT09IHQubm9kZVR5cGUgJiYgdCAhPT0gZSAmJiBpLnB1c2godCk7XG4gICAgICB9cmV0dXJuIGk7XG4gICAgfSxcbiAgICAgICAgQSA9IHguZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7ZnVuY3Rpb24gaih0LCBlKSB7XG4gICAgICByZXR1cm4gdC5ub2RlTmFtZSAmJiB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGUudG9Mb3dlckNhc2UoKTtcbiAgICB9dmFyIE0gPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtmdW5jdGlvbiBQKHQsIGUsIGkpIHtcbiAgICAgIHJldHVybiBfKGUpID8geC5ncmVwKHQsIGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgICAgIHJldHVybiAhIWUuY2FsbCh0LCBuLCB0KSAhPT0gaTtcbiAgICAgIH0pIDogZS5ub2RlVHlwZSA/IHguZ3JlcCh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdCA9PT0gZSAhPT0gaTtcbiAgICAgIH0pIDogXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSA/IHguZ3JlcCh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gaC5jYWxsKGUsIHQpID4gLTEgIT09IGk7XG4gICAgICB9KSA6IHguZmlsdGVyKGUsIHQsIGkpO1xuICAgIH14LmZpbHRlciA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICB2YXIgbiA9IGVbMF07cmV0dXJuIGkgJiYgKHQgPSBcIjpub3QoXCIgKyB0ICsgXCIpXCIpLCAxID09PSBlLmxlbmd0aCAmJiAxID09PSBuLm5vZGVUeXBlID8geC5maW5kLm1hdGNoZXNTZWxlY3RvcihuLCB0KSA/IFtuXSA6IFtdIDogeC5maW5kLm1hdGNoZXModCwgeC5ncmVwKGUsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiAxID09PSB0Lm5vZGVUeXBlO1xuICAgICAgfSkpO1xuICAgIH0sIHguZm4uZXh0ZW5kKHsgZmluZDogZnVuY3Rpb24gZmluZCh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4gPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICAgIHMgPSB0aGlzO2lmIChcInN0cmluZ1wiICE9IHR5cGVvZiB0KSByZXR1cm4gdGhpcy5wdXNoU3RhY2soeCh0KS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAoZSA9IDA7IGUgPCBuOyBlKyspIHtcbiAgICAgICAgICAgIGlmICh4LmNvbnRhaW5zKHNbZV0sIHRoaXMpKSByZXR1cm4gITA7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7Zm9yIChpID0gdGhpcy5wdXNoU3RhY2soW10pLCBlID0gMDsgZSA8IG47IGUrKykge1xuICAgICAgICAgIHguZmluZCh0LCBzW2VdLCBpKTtcbiAgICAgICAgfXJldHVybiBuID4gMSA/IHgudW5pcXVlU29ydChpKSA6IGk7XG4gICAgICB9LCBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhQKHRoaXMsIHQgfHwgW10sICExKSk7XG4gICAgICB9LCBub3Q6IGZ1bmN0aW9uIG5vdCh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhQKHRoaXMsIHQgfHwgW10sICEwKSk7XG4gICAgICB9LCBpczogZnVuY3Rpb24gaXModCkge1xuICAgICAgICByZXR1cm4gISFQKHRoaXMsIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgQS50ZXN0KHQpID8geCh0KSA6IHQgfHwgW10sICExKS5sZW5ndGg7XG4gICAgICB9IH0pO3ZhciBFLFxuICAgICAgICBPID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC87KHguZm4uaW5pdCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICB2YXIgbiwgcztpZiAoIXQpIHJldHVybiB0aGlzO2lmIChpID0gaSB8fCBFLCBcInN0cmluZ1wiID09IHR5cGVvZiB0KSB7XG4gICAgICAgIGlmICghKG4gPSBcIjxcIiA9PT0gdFswXSAmJiBcIj5cIiA9PT0gdFt0Lmxlbmd0aCAtIDFdICYmIHQubGVuZ3RoID49IDMgPyBbbnVsbCwgdCwgbnVsbF0gOiBPLmV4ZWModCkpIHx8ICFuWzFdICYmIGUpIHJldHVybiAhZSB8fCBlLmpxdWVyeSA/IChlIHx8IGkpLmZpbmQodCkgOiB0aGlzLmNvbnN0cnVjdG9yKGUpLmZpbmQodCk7aWYgKG5bMV0pIHtcbiAgICAgICAgICBpZiAoZSA9IGUgaW5zdGFuY2VvZiB4ID8gZVswXSA6IGUsIHgubWVyZ2UodGhpcywgeC5wYXJzZUhUTUwoblsxXSwgZSAmJiBlLm5vZGVUeXBlID8gZS5vd25lckRvY3VtZW50IHx8IGUgOiBvLCAhMCkpLCBNLnRlc3QoblsxXSkgJiYgeC5pc1BsYWluT2JqZWN0KGUpKSBmb3IgKG4gaW4gZSkge1xuICAgICAgICAgICAgXyh0aGlzW25dKSA/IHRoaXNbbl0oZVtuXSkgOiB0aGlzLmF0dHIobiwgZVtuXSk7XG4gICAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgICB9cmV0dXJuIChzID0gby5nZXRFbGVtZW50QnlJZChuWzJdKSkgJiYgKHRoaXNbMF0gPSBzLCB0aGlzLmxlbmd0aCA9IDEpLCB0aGlzO1xuICAgICAgfXJldHVybiB0Lm5vZGVUeXBlID8gKHRoaXNbMF0gPSB0LCB0aGlzLmxlbmd0aCA9IDEsIHRoaXMpIDogXyh0KSA/IHZvaWQgMCAhPT0gaS5yZWFkeSA/IGkucmVhZHkodCkgOiB0KHgpIDogeC5tYWtlQXJyYXkodCwgdGhpcyk7XG4gICAgfSkucHJvdG90eXBlID0geC5mbiwgRSA9IHgobyk7dmFyIEggPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcbiAgICAgICAgTiA9IHsgY2hpbGRyZW46ICEwLCBjb250ZW50czogITAsIG5leHQ6ICEwLCBwcmV2OiAhMCB9O2Z1bmN0aW9uIEIodCwgZSkge1xuICAgICAgZm9yICg7ICh0ID0gdFtlXSkgJiYgMSAhPT0gdC5ub2RlVHlwZTspIHt9cmV0dXJuIHQ7XG4gICAgfXguZm4uZXh0ZW5kKHsgaGFzOiBmdW5jdGlvbiBoYXModCkge1xuICAgICAgICB2YXIgZSA9IHgodCwgdGhpcyksXG4gICAgICAgICAgICBpID0gZS5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IGk7IHQrKykge1xuICAgICAgICAgICAgaWYgKHguY29udGFpbnModGhpcywgZVt0XSkpIHJldHVybiAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSwgY2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdCh0LCBlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbiA9IDAsXG4gICAgICAgICAgICBzID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICByID0gW10sXG4gICAgICAgICAgICBvID0gXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCAmJiB4KHQpO2lmICghQS50ZXN0KHQpKSBmb3IgKDsgbiA8IHM7IG4rKykge1xuICAgICAgICAgIGZvciAoaSA9IHRoaXNbbl07IGkgJiYgaSAhPT0gZTsgaSA9IGkucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKGkubm9kZVR5cGUgPCAxMSAmJiAobyA/IG8uaW5kZXgoaSkgPiAtMSA6IDEgPT09IGkubm9kZVR5cGUgJiYgeC5maW5kLm1hdGNoZXNTZWxlY3RvcihpLCB0KSkpIHtcbiAgICAgICAgICAgICAgci5wdXNoKGkpO2JyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfXJldHVybiB0aGlzLnB1c2hTdGFjayhyLmxlbmd0aCA+IDEgPyB4LnVuaXF1ZVNvcnQocikgOiByKTtcbiAgICAgIH0sIGluZGV4OiBmdW5jdGlvbiBpbmRleCh0KSB7XG4gICAgICAgIHJldHVybiB0ID8gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCA/IGguY2FsbCh4KHQpLCB0aGlzWzBdKSA6IGguY2FsbCh0aGlzLCB0LmpxdWVyeSA/IHRbMF0gOiB0KSA6IHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcbiAgICAgIH0sIGFkZDogZnVuY3Rpb24gYWRkKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHgudW5pcXVlU29ydCh4Lm1lcmdlKHRoaXMuZ2V0KCksIHgodCwgZSkpKSk7XG4gICAgICB9LCBhZGRCYWNrOiBmdW5jdGlvbiBhZGRCYWNrKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG51bGwgPT0gdCA/IHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIodCkpO1xuICAgICAgfSB9KSwgeC5lYWNoKHsgcGFyZW50OiBmdW5jdGlvbiBwYXJlbnQodCkge1xuICAgICAgICB2YXIgZSA9IHQucGFyZW50Tm9kZTtyZXR1cm4gZSAmJiAxMSAhPT0gZS5ub2RlVHlwZSA/IGUgOiBudWxsO1xuICAgICAgfSwgcGFyZW50czogZnVuY3Rpb24gcGFyZW50cyh0KSB7XG4gICAgICAgIHJldHVybiBUKHQsIFwicGFyZW50Tm9kZVwiKTtcbiAgICAgIH0sIHBhcmVudHNVbnRpbDogZnVuY3Rpb24gcGFyZW50c1VudGlsKHQsIGUsIGkpIHtcbiAgICAgICAgcmV0dXJuIFQodCwgXCJwYXJlbnROb2RlXCIsIGkpO1xuICAgICAgfSwgbmV4dDogZnVuY3Rpb24gbmV4dCh0KSB7XG4gICAgICAgIHJldHVybiBCKHQsIFwibmV4dFNpYmxpbmdcIik7XG4gICAgICB9LCBwcmV2OiBmdW5jdGlvbiBwcmV2KHQpIHtcbiAgICAgICAgcmV0dXJuIEIodCwgXCJwcmV2aW91c1NpYmxpbmdcIik7XG4gICAgICB9LCBuZXh0QWxsOiBmdW5jdGlvbiBuZXh0QWxsKHQpIHtcbiAgICAgICAgcmV0dXJuIFQodCwgXCJuZXh0U2libGluZ1wiKTtcbiAgICAgIH0sIHByZXZBbGw6IGZ1bmN0aW9uIHByZXZBbGwodCkge1xuICAgICAgICByZXR1cm4gVCh0LCBcInByZXZpb3VzU2libGluZ1wiKTtcbiAgICAgIH0sIG5leHRVbnRpbDogZnVuY3Rpb24gbmV4dFVudGlsKHQsIGUsIGkpIHtcbiAgICAgICAgcmV0dXJuIFQodCwgXCJuZXh0U2libGluZ1wiLCBpKTtcbiAgICAgIH0sIHByZXZVbnRpbDogZnVuY3Rpb24gcHJldlVudGlsKHQsIGUsIGkpIHtcbiAgICAgICAgcmV0dXJuIFQodCwgXCJwcmV2aW91c1NpYmxpbmdcIiwgaSk7XG4gICAgICB9LCBzaWJsaW5nczogZnVuY3Rpb24gc2libGluZ3ModCkge1xuICAgICAgICByZXR1cm4gSSgodC5wYXJlbnROb2RlIHx8IHt9KS5maXJzdENoaWxkLCB0KTtcbiAgICAgIH0sIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbih0KSB7XG4gICAgICAgIHJldHVybiBJKHQuZmlyc3RDaGlsZCk7XG4gICAgICB9LCBjb250ZW50czogZnVuY3Rpb24gY29udGVudHModCkge1xuICAgICAgICByZXR1cm4gaih0LCBcImlmcmFtZVwiKSA/IHQuY29udGVudERvY3VtZW50IDogKGoodCwgXCJ0ZW1wbGF0ZVwiKSAmJiAodCA9IHQuY29udGVudCB8fCB0KSwgeC5tZXJnZShbXSwgdC5jaGlsZE5vZGVzKSk7XG4gICAgICB9IH0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICB4LmZuW3RdID0gZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSB4Lm1hcCh0aGlzLCBlLCBpKTtyZXR1cm4gXCJVbnRpbFwiICE9PSB0LnNsaWNlKC01KSAmJiAobiA9IGkpLCBuICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIG4gJiYgKHMgPSB4LmZpbHRlcihuLCBzKSksIHRoaXMubGVuZ3RoID4gMSAmJiAoTlt0XSB8fCB4LnVuaXF1ZVNvcnQocyksIEgudGVzdCh0KSAmJiBzLnJldmVyc2UoKSksIHRoaXMucHVzaFN0YWNrKHMpO1xuICAgICAgfTtcbiAgICB9KTt2YXIgRiA9IC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBMKHQpIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH1mdW5jdGlvbiB6KHQpIHtcbiAgICAgIHRocm93IHQ7XG4gICAgfWZ1bmN0aW9uIFcodCwgZSwgaSwgbikge1xuICAgICAgdmFyIHM7dHJ5IHtcbiAgICAgICAgdCAmJiBfKHMgPSB0LnByb21pc2UpID8gcy5jYWxsKHQpLmRvbmUoZSkuZmFpbChpKSA6IHQgJiYgXyhzID0gdC50aGVuKSA/IHMuY2FsbCh0LCBlLCBpKSA6IGUuYXBwbHkodm9pZCAwLCBbdF0uc2xpY2UobikpO1xuICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICBpLmFwcGx5KHZvaWQgMCwgW3RdKTtcbiAgICAgIH1cbiAgICB9eC5DYWxsYmFja3MgPSBmdW5jdGlvbiAodCkge1xuICAgICAgdCA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgZSA9IHt9O3JldHVybiB4LmVhY2godC5tYXRjaChGKSB8fCBbXSwgZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICBlW2ldID0gITA7XG4gICAgICAgIH0pLCBlO1xuICAgICAgfSh0KSA6IHguZXh0ZW5kKHt9LCB0KTt2YXIgZSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgcyxcbiAgICAgICAgICByID0gW10sXG4gICAgICAgICAgbyA9IFtdLFxuICAgICAgICAgIGEgPSAtMSxcbiAgICAgICAgICBsID0gZnVuY3Rpb24gbCgpIHtcbiAgICAgICAgZm9yIChzID0gcyB8fCB0Lm9uY2UsIG4gPSBlID0gITA7IG8ubGVuZ3RoOyBhID0gLTEpIHtcbiAgICAgICAgICBmb3IgKGkgPSBvLnNoaWZ0KCk7ICsrYSA8IHIubGVuZ3RoOykge1xuICAgICAgICAgICAgITEgPT09IHJbYV0uYXBwbHkoaVswXSwgaVsxXSkgJiYgdC5zdG9wT25GYWxzZSAmJiAoYSA9IHIubGVuZ3RoLCBpID0gITEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfXQubWVtb3J5IHx8IChpID0gITEpLCBlID0gITEsIHMgJiYgKHIgPSBpID8gW10gOiBcIlwiKTtcbiAgICAgIH0sXG4gICAgICAgICAgdSA9IHsgYWRkOiBmdW5jdGlvbiBhZGQoKSB7XG4gICAgICAgICAgcmV0dXJuIHIgJiYgKGkgJiYgIWUgJiYgKGEgPSByLmxlbmd0aCAtIDEsIG8ucHVzaChpKSksIGZ1bmN0aW9uIGUoaSkge1xuICAgICAgICAgICAgeC5lYWNoKGksIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICAgIF8obikgPyB0LnVuaXF1ZSAmJiB1LmhhcyhuKSB8fCByLnB1c2gobikgOiBuICYmIG4ubGVuZ3RoICYmIFwic3RyaW5nXCIgIT09IHcobikgJiYgZShuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0oYXJndW1lbnRzKSwgaSAmJiAhZSAmJiBsKCkpLCB0aGlzO1xuICAgICAgICB9LCByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICByZXR1cm4geC5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGk7IChpID0geC5pbkFycmF5KGUsIHIsIGkpKSA+IC0xOykge1xuICAgICAgICAgICAgICByLnNwbGljZShpLCAxKSwgaSA8PSBhICYmIGEtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgdGhpcztcbiAgICAgICAgfSwgaGFzOiBmdW5jdGlvbiBoYXModCkge1xuICAgICAgICAgIHJldHVybiB0ID8geC5pbkFycmF5KHQsIHIpID4gLTEgOiByLmxlbmd0aCA+IDA7XG4gICAgICAgIH0sIGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAgICAgICByZXR1cm4gciAmJiAociA9IFtdKSwgdGhpcztcbiAgICAgICAgfSwgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgICByZXR1cm4gcyA9IG8gPSBbXSwgciA9IGkgPSBcIlwiLCB0aGlzO1xuICAgICAgICB9LCBkaXNhYmxlZDogZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG4gICAgICAgICAgcmV0dXJuICFyO1xuICAgICAgICB9LCBsb2NrOiBmdW5jdGlvbiBsb2NrKCkge1xuICAgICAgICAgIHJldHVybiBzID0gbyA9IFtdLCBpIHx8IGUgfHwgKHIgPSBpID0gXCJcIiksIHRoaXM7XG4gICAgICAgIH0sIGxvY2tlZDogZnVuY3Rpb24gbG9ja2VkKCkge1xuICAgICAgICAgIHJldHVybiAhIXM7XG4gICAgICAgIH0sIGZpcmVXaXRoOiBmdW5jdGlvbiBmaXJlV2l0aCh0LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHMgfHwgKGkgPSBbdCwgKGkgPSBpIHx8IFtdKS5zbGljZSA/IGkuc2xpY2UoKSA6IGldLCBvLnB1c2goaSksIGUgfHwgbCgpKSwgdGhpcztcbiAgICAgICAgfSwgZmlyZTogZnVuY3Rpb24gZmlyZSgpIHtcbiAgICAgICAgICByZXR1cm4gdS5maXJlV2l0aCh0aGlzLCBhcmd1bWVudHMpLCB0aGlzO1xuICAgICAgICB9LCBmaXJlZDogZnVuY3Rpb24gZmlyZWQoKSB7XG4gICAgICAgICAgcmV0dXJuICEhbjtcbiAgICAgICAgfSB9O3JldHVybiB1O1xuICAgIH0sIHguZXh0ZW5kKHsgRGVmZXJyZWQ6IGZ1bmN0aW9uIERlZmVycmVkKHQpIHtcbiAgICAgICAgdmFyIGUgPSBbW1wibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgeC5DYWxsYmFja3MoXCJtZW1vcnlcIiksIHguQ2FsbGJhY2tzKFwibWVtb3J5XCIpLCAyXSwgW1wicmVzb2x2ZVwiLCBcImRvbmVcIiwgeC5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgeC5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgMCwgXCJyZXNvbHZlZFwiXSwgW1wicmVqZWN0XCIsIFwiZmFpbFwiLCB4LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCB4LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAxLCBcInJlamVjdGVkXCJdXSxcbiAgICAgICAgICAgIG4gPSBcInBlbmRpbmdcIixcbiAgICAgICAgICAgIHMgPSB7IHN0YXRlOiBmdW5jdGlvbiBzdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH0sIGFsd2F5czogZnVuY3Rpb24gYWx3YXlzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHIuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSwgdGhpcztcbiAgICAgICAgICB9LCBjYXRjaDogZnVuY3Rpb24gX2NhdGNoKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnRoZW4obnVsbCwgdCk7XG4gICAgICAgICAgfSwgcGlwZTogZnVuY3Rpb24gcGlwZSgpIHtcbiAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzO3JldHVybiB4LkRlZmVycmVkKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgIHguZWFjaChlLCBmdW5jdGlvbiAoZSwgbikge1xuICAgICAgICAgICAgICAgIHZhciBzID0gXyh0W25bNF1dKSAmJiB0W25bNF1dO3JbblsxXV0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHQgPSBzICYmIHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTt0ICYmIF8odC5wcm9taXNlKSA/IHQucHJvbWlzZSgpLnByb2dyZXNzKGkubm90aWZ5KS5kb25lKGkucmVzb2x2ZSkuZmFpbChpLnJlamVjdCkgOiBpW25bMF0gKyBcIldpdGhcIl0odGhpcywgcyA/IFt0XSA6IGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pLCB0ID0gbnVsbDtcbiAgICAgICAgICAgIH0pLnByb21pc2UoKTtcbiAgICAgICAgICB9LCB0aGVuOiBmdW5jdGlvbiB0aGVuKHQsIG4sIHMpIHtcbiAgICAgICAgICAgIHZhciByID0gMDtmdW5jdGlvbiBvKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGwgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIHUgPSBmdW5jdGlvbiB1KCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksIHU7aWYgKCEodCA8IHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaSA9IG4uYXBwbHkoYSwgbCkpID09PSBlLnByb21pc2UoKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTt1ID0gaSAmJiAoXCJvYmplY3RcIiA9PSAodHlwZW9mIGkgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihpKSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBpKSAmJiBpLnRoZW4sIF8odSkgPyBzID8gdS5jYWxsKGksIG8ociwgZSwgTCwgcyksIG8ociwgZSwgeiwgcykpIDogKHIrKywgdS5jYWxsKGksIG8ociwgZSwgTCwgcyksIG8ociwgZSwgeiwgcyksIG8ociwgZSwgTCwgZS5ub3RpZnlXaXRoKSkpIDogKG4gIT09IEwgJiYgKGEgPSB2b2lkIDAsIGwgPSBbaV0pLCAocyB8fCBlLnJlc29sdmVXaXRoKShhLCBsKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYyA9IHMgPyB1IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdSgpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoaSkge1xuICAgICAgICAgICAgICAgICAgICB4LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgJiYgeC5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGksIGMuc3RhY2tUcmFjZSksIHQgKyAxID49IHIgJiYgKG4gIT09IHogJiYgKGEgPSB2b2lkIDAsIGwgPSBbaV0pLCBlLnJlamVjdFdpdGgoYSwgbCkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07dCA/IGMoKSA6ICh4LkRlZmVycmVkLmdldFN0YWNrSG9vayAmJiAoYy5zdGFja1RyYWNlID0geC5EZWZlcnJlZC5nZXRTdGFja0hvb2soKSksIGkuc2V0VGltZW91dChjKSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9cmV0dXJuIHguRGVmZXJyZWQoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgZVswXVszXS5hZGQobygwLCBpLCBfKHMpID8gcyA6IEwsIGkubm90aWZ5V2l0aCkpLCBlWzFdWzNdLmFkZChvKDAsIGksIF8odCkgPyB0IDogTCkpLCBlWzJdWzNdLmFkZChvKDAsIGksIF8obikgPyBuIDogeikpO1xuICAgICAgICAgICAgfSkucHJvbWlzZSgpO1xuICAgICAgICAgIH0sIHByb21pc2U6IGZ1bmN0aW9uIHByb21pc2UodCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCA/IHguZXh0ZW5kKHQsIHMpIDogcztcbiAgICAgICAgICB9IH0sXG4gICAgICAgICAgICByID0ge307cmV0dXJuIHguZWFjaChlLCBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgIHZhciBvID0gaVsyXSxcbiAgICAgICAgICAgICAgYSA9IGlbNV07c1tpWzFdXSA9IG8uYWRkLCBhICYmIG8uYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG4gPSBhO1xuICAgICAgICAgIH0sIGVbMyAtIHRdWzJdLmRpc2FibGUsIGVbMyAtIHRdWzNdLmRpc2FibGUsIGVbMF1bMl0ubG9jaywgZVswXVszXS5sb2NrKSwgby5hZGQoaVszXS5maXJlKSwgcltpWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByW2lbMF0gKyBcIldpdGhcIl0odGhpcyA9PT0gciA/IHZvaWQgMCA6IHRoaXMsIGFyZ3VtZW50cyksIHRoaXM7XG4gICAgICAgICAgfSwgcltpWzBdICsgXCJXaXRoXCJdID0gby5maXJlV2l0aDtcbiAgICAgICAgfSksIHMucHJvbWlzZShyKSwgdCAmJiB0LmNhbGwociwgciksIHI7XG4gICAgICB9LCB3aGVuOiBmdW5jdGlvbiB3aGVuKHQpIHtcbiAgICAgICAgdmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgaSA9IGUsXG4gICAgICAgICAgICBuID0gQXJyYXkoaSksXG4gICAgICAgICAgICBzID0gbC5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICByID0geC5EZWZlcnJlZCgpLFxuICAgICAgICAgICAgbyA9IGZ1bmN0aW9uIG8odCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgblt0XSA9IHRoaXMsIHNbdF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGwuY2FsbChhcmd1bWVudHMpIDogaSwgLS1lIHx8IHIucmVzb2x2ZVdpdGgobiwgcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtpZiAoZSA8PSAxICYmIChXKHQsIHIuZG9uZShvKGkpKS5yZXNvbHZlLCByLnJlamVjdCwgIWUpLCBcInBlbmRpbmdcIiA9PT0gci5zdGF0ZSgpIHx8IF8oc1tpXSAmJiBzW2ldLnRoZW4pKSkgcmV0dXJuIHIudGhlbigpO2ZvciAoOyBpLS07KSB7XG4gICAgICAgICAgVyhzW2ldLCBvKGkpLCByLnJlamVjdCk7XG4gICAgICAgIH1yZXR1cm4gci5wcm9taXNlKCk7XG4gICAgICB9IH0pO3ZhciBSID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87eC5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIGkuY29uc29sZSAmJiBpLmNvbnNvbGUud2FybiAmJiB0ICYmIFIudGVzdCh0Lm5hbWUpICYmIGkuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyB0Lm1lc3NhZ2UsIHQuc3RhY2ssIGUpO1xuICAgIH0sIHgucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgaS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgdDtcbiAgICAgIH0pO1xuICAgIH07dmFyICQgPSB4LkRlZmVycmVkKCk7ZnVuY3Rpb24gcSgpIHtcbiAgICAgIG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgcSksIGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcSksIHgucmVhZHkoKTtcbiAgICB9eC5mbi5yZWFkeSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gJC50aGVuKHQpLmNhdGNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHgucmVhZHlFeGNlcHRpb24odCk7XG4gICAgICB9KSwgdGhpcztcbiAgICB9LCB4LmV4dGVuZCh7IGlzUmVhZHk6ICExLCByZWFkeVdhaXQ6IDEsIHJlYWR5OiBmdW5jdGlvbiByZWFkeSh0KSB7XG4gICAgICAgICghMCA9PT0gdCA/IC0teC5yZWFkeVdhaXQgOiB4LmlzUmVhZHkpIHx8ICh4LmlzUmVhZHkgPSAhMCwgITAgIT09IHQgJiYgLS14LnJlYWR5V2FpdCA+IDAgfHwgJC5yZXNvbHZlV2l0aChvLCBbeF0pKTtcbiAgICAgIH0gfSksIHgucmVhZHkudGhlbiA9ICQudGhlbiwgXCJjb21wbGV0ZVwiID09PSBvLnJlYWR5U3RhdGUgfHwgXCJsb2FkaW5nXCIgIT09IG8ucmVhZHlTdGF0ZSAmJiAhby5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgPyBpLnNldFRpbWVvdXQoeC5yZWFkeSkgOiAoby5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBxKSwgaS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBxKSk7dmFyIFUgPSBmdW5jdGlvbiBVKHQsIGUsIGksIG4sIHMsIHIsIG8pIHtcbiAgICAgIHZhciBhID0gMCxcbiAgICAgICAgICBsID0gdC5sZW5ndGgsXG4gICAgICAgICAgdSA9IG51bGwgPT0gaTtpZiAoXCJvYmplY3RcIiA9PT0gdyhpKSkgZm9yIChhIGluIHMgPSAhMCwgaSkge1xuICAgICAgICBVKHQsIGUsIGEsIGlbYV0sICEwLCByLCBvKTtcbiAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSBuICYmIChzID0gITAsIF8obikgfHwgKG8gPSAhMCksIHUgJiYgKG8gPyAoZS5jYWxsKHQsIG4pLCBlID0gbnVsbCkgOiAodSA9IGUsIGUgPSBmdW5jdGlvbiBlKHQsIF9lMiwgaSkge1xuICAgICAgICByZXR1cm4gdS5jYWxsKHgodCksIGkpO1xuICAgICAgfSkpLCBlKSkgZm9yICg7IGEgPCBsOyBhKyspIHtcbiAgICAgICAgZSh0W2FdLCBpLCBvID8gbiA6IG4uY2FsbCh0W2FdLCBhLCBlKHRbYV0sIGkpKSk7XG4gICAgICB9cmV0dXJuIHMgPyB0IDogdSA/IGUuY2FsbCh0KSA6IGwgPyBlKHRbMF0sIGkpIDogcjtcbiAgICB9LFxuICAgICAgICBLID0gL14tbXMtLyxcbiAgICAgICAgWSA9IC8tKFthLXpdKS9nO2Z1bmN0aW9uIFYodCwgZSkge1xuICAgICAgcmV0dXJuIGUudG9VcHBlckNhc2UoKTtcbiAgICB9ZnVuY3Rpb24gRyh0KSB7XG4gICAgICByZXR1cm4gdC5yZXBsYWNlKEssIFwibXMtXCIpLnJlcGxhY2UoWSwgVik7XG4gICAgfXZhciBYID0gZnVuY3Rpb24gWCh0KSB7XG4gICAgICByZXR1cm4gMSA9PT0gdC5ub2RlVHlwZSB8fCA5ID09PSB0Lm5vZGVUeXBlIHx8ICErdC5ub2RlVHlwZTtcbiAgICB9O2Z1bmN0aW9uIEooKSB7XG4gICAgICB0aGlzLmV4cGFuZG8gPSB4LmV4cGFuZG8gKyBKLnVpZCsrO1xuICAgIH1KLnVpZCA9IDEsIEoucHJvdG90eXBlID0geyBjYWNoZTogZnVuY3Rpb24gY2FjaGUodCkge1xuICAgICAgICB2YXIgZSA9IHRbdGhpcy5leHBhbmRvXTtyZXR1cm4gZSB8fCAoZSA9IHt9LCBYKHQpICYmICh0Lm5vZGVUeXBlID8gdFt0aGlzLmV4cGFuZG9dID0gZSA6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCB0aGlzLmV4cGFuZG8sIHsgdmFsdWU6IGUsIGNvbmZpZ3VyYWJsZTogITAgfSkpKSwgZTtcbiAgICAgIH0sIHNldDogZnVuY3Rpb24gc2V0KHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICBzID0gdGhpcy5jYWNoZSh0KTtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSkgc1tHKGUpXSA9IGk7ZWxzZSBmb3IgKG4gaW4gZSkge1xuICAgICAgICAgIHNbRyhuKV0gPSBlW25dO1xuICAgICAgICB9cmV0dXJuIHM7XG4gICAgICB9LCBnZXQ6IGZ1bmN0aW9uIGdldCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgPT09IGUgPyB0aGlzLmNhY2hlKHQpIDogdFt0aGlzLmV4cGFuZG9dICYmIHRbdGhpcy5leHBhbmRvXVtHKGUpXTtcbiAgICAgIH0sIGFjY2VzczogZnVuY3Rpb24gYWNjZXNzKHQsIGUsIGkpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSB8fCBlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgJiYgdm9pZCAwID09PSBpID8gdGhpcy5nZXQodCwgZSkgOiAodGhpcy5zZXQodCwgZSwgaSksIHZvaWQgMCAhPT0gaSA/IGkgOiBlKTtcbiAgICAgIH0sIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gdFt0aGlzLmV4cGFuZG9dO2lmICh2b2lkIDAgIT09IG4pIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgICAgICAgICBpID0gKGUgPSBBcnJheS5pc0FycmF5KGUpID8gZS5tYXAoRykgOiAoZSA9IEcoZSkpIGluIG4gPyBbZV0gOiBlLm1hdGNoKEYpIHx8IFtdKS5sZW5ndGg7Zm9yICg7IGktLTspIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG5bZVtpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSh2b2lkIDAgPT09IGUgfHwgeC5pc0VtcHR5T2JqZWN0KG4pKSAmJiAodC5ub2RlVHlwZSA/IHRbdGhpcy5leHBhbmRvXSA9IHZvaWQgMCA6IGRlbGV0ZSB0W3RoaXMuZXhwYW5kb10pO1xuICAgICAgICB9XG4gICAgICB9LCBoYXNEYXRhOiBmdW5jdGlvbiBoYXNEYXRhKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0W3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCAhPT0gZSAmJiAheC5pc0VtcHR5T2JqZWN0KGUpO1xuICAgICAgfSB9O3ZhciBaID0gbmV3IEooKSxcbiAgICAgICAgUSA9IG5ldyBKKCksXG4gICAgICAgIHR0ID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuICAgICAgICBldCA9IC9bQS1aXS9nO2Z1bmN0aW9uIGl0KHQsIGUsIGkpIHtcbiAgICAgIHZhciBuO2lmICh2b2lkIDAgPT09IGkgJiYgMSA9PT0gdC5ub2RlVHlwZSkgaWYgKG4gPSBcImRhdGEtXCIgKyBlLnJlcGxhY2UoZXQsIFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIChpID0gdC5nZXRBdHRyaWJ1dGUobikpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cnVlXCIgPT09IHQgfHwgXCJmYWxzZVwiICE9PSB0ICYmIChcIm51bGxcIiA9PT0gdCA/IG51bGwgOiB0ID09PSArdCArIFwiXCIgPyArdCA6IHR0LnRlc3QodCkgPyBKU09OLnBhcnNlKHQpIDogdCk7XG4gICAgICAgICAgfShpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge31RLnNldCh0LCBlLCBpKTtcbiAgICAgIH0gZWxzZSBpID0gdm9pZCAwO3JldHVybiBpO1xuICAgIH14LmV4dGVuZCh7IGhhc0RhdGE6IGZ1bmN0aW9uIGhhc0RhdGEodCkge1xuICAgICAgICByZXR1cm4gUS5oYXNEYXRhKHQpIHx8IFouaGFzRGF0YSh0KTtcbiAgICAgIH0sIGRhdGE6IGZ1bmN0aW9uIGRhdGEodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gUS5hY2Nlc3ModCwgZSwgaSk7XG4gICAgICB9LCByZW1vdmVEYXRhOiBmdW5jdGlvbiByZW1vdmVEYXRhKHQsIGUpIHtcbiAgICAgICAgUS5yZW1vdmUodCwgZSk7XG4gICAgICB9LCBfZGF0YTogZnVuY3Rpb24gX2RhdGEodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gWi5hY2Nlc3ModCwgZSwgaSk7XG4gICAgICB9LCBfcmVtb3ZlRGF0YTogZnVuY3Rpb24gX3JlbW92ZURhdGEodCwgZSkge1xuICAgICAgICBaLnJlbW92ZSh0LCBlKTtcbiAgICAgIH0gfSksIHguZm4uZXh0ZW5kKHsgZGF0YTogZnVuY3Rpb24gZGF0YSh0LCBlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByID0gdGhpc1swXSxcbiAgICAgICAgICAgIG8gPSByICYmIHIuYXR0cmlidXRlcztpZiAodm9pZCAwID09PSB0KSB7XG4gICAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIChzID0gUS5nZXQociksIDEgPT09IHIubm9kZVR5cGUgJiYgIVouZ2V0KHIsIFwiaGFzRGF0YUF0dHJzXCIpKSkge1xuICAgICAgICAgICAgZm9yIChpID0gby5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgb1tpXSAmJiAwID09PSAobiA9IG9baV0ubmFtZSkuaW5kZXhPZihcImRhdGEtXCIpICYmIChuID0gRyhuLnNsaWNlKDUpKSwgaXQociwgbiwgc1tuXSkpO1xuICAgICAgICAgICAgfVouc2V0KHIsIFwiaGFzRGF0YUF0dHJzXCIsICEwKTtcbiAgICAgICAgICB9cmV0dXJuIHM7XG4gICAgICAgIH1yZXR1cm4gXCJvYmplY3RcIiA9PSAodHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KSkgPyB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIFEuc2V0KHRoaXMsIHQpO1xuICAgICAgICB9KSA6IFUodGhpcywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgaTtpZiAociAmJiB2b2lkIDAgPT09IGUpIHJldHVybiB2b2lkIDAgIT09IChpID0gUS5nZXQociwgdCkpID8gaSA6IHZvaWQgMCAhPT0gKGkgPSBpdChyLCB0KSkgPyBpIDogdm9pZCAwO3RoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBRLnNldCh0aGlzLCB0LCBlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgbnVsbCwgZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsICEwKTtcbiAgICAgIH0sIHJlbW92ZURhdGE6IGZ1bmN0aW9uIHJlbW92ZURhdGEodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBRLnJlbW92ZSh0aGlzLCB0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IH0pLCB4LmV4dGVuZCh7IHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZSh0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuO2lmICh0KSByZXR1cm4gZSA9IChlIHx8IFwiZnhcIikgKyBcInF1ZXVlXCIsIG4gPSBaLmdldCh0LCBlKSwgaSAmJiAoIW4gfHwgQXJyYXkuaXNBcnJheShpKSA/IG4gPSBaLmFjY2Vzcyh0LCBlLCB4Lm1ha2VBcnJheShpKSkgOiBuLnB1c2goaSkpLCBuIHx8IFtdO1xuICAgICAgfSwgZGVxdWV1ZTogZnVuY3Rpb24gZGVxdWV1ZSh0LCBlKSB7XG4gICAgICAgIGUgPSBlIHx8IFwiZnhcIjt2YXIgaSA9IHgucXVldWUodCwgZSksXG4gICAgICAgICAgICBuID0gaS5sZW5ndGgsXG4gICAgICAgICAgICBzID0gaS5zaGlmdCgpLFxuICAgICAgICAgICAgciA9IHguX3F1ZXVlSG9va3ModCwgZSk7XCJpbnByb2dyZXNzXCIgPT09IHMgJiYgKHMgPSBpLnNoaWZ0KCksIG4tLSksIHMgJiYgKFwiZnhcIiA9PT0gZSAmJiBpLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLCBkZWxldGUgci5zdG9wLCBzLmNhbGwodCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHguZGVxdWV1ZSh0LCBlKTtcbiAgICAgICAgfSwgcikpLCAhbiAmJiByICYmIHIuZW1wdHkuZmlyZSgpO1xuICAgICAgfSwgX3F1ZXVlSG9va3M6IGZ1bmN0aW9uIF9xdWV1ZUhvb2tzKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSBlICsgXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIFouZ2V0KHQsIGkpIHx8IFouYWNjZXNzKHQsIGksIHsgZW1wdHk6IHguQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFoucmVtb3ZlKHQsIFtlICsgXCJxdWV1ZVwiLCBpXSk7XG4gICAgICAgICAgfSkgfSk7XG4gICAgICB9IH0pLCB4LmZuLmV4dGVuZCh7IHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZSh0LCBlKSB7XG4gICAgICAgIHZhciBpID0gMjtyZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCAmJiAoZSA9IHQsIHQgPSBcImZ4XCIsIGktLSksIGFyZ3VtZW50cy5sZW5ndGggPCBpID8geC5xdWV1ZSh0aGlzWzBdLCB0KSA6IHZvaWQgMCA9PT0gZSA/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpID0geC5xdWV1ZSh0aGlzLCB0LCBlKTt4Ll9xdWV1ZUhvb2tzKHRoaXMsIHQpLCBcImZ4XCIgPT09IHQgJiYgXCJpbnByb2dyZXNzXCIgIT09IGlbMF0gJiYgeC5kZXF1ZXVlKHRoaXMsIHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGRlcXVldWU6IGZ1bmN0aW9uIGRlcXVldWUodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB4LmRlcXVldWUodGhpcywgdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgY2xlYXJRdWV1ZTogZnVuY3Rpb24gY2xlYXJRdWV1ZSh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlKHQgfHwgXCJmeFwiLCBbXSk7XG4gICAgICB9LCBwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gMSxcbiAgICAgICAgICAgIHMgPSB4LkRlZmVycmVkKCksXG4gICAgICAgICAgICByID0gdGhpcyxcbiAgICAgICAgICAgIG8gPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICAgIGEgPSBmdW5jdGlvbiBhKCkge1xuICAgICAgICAgIC0tbiB8fCBzLnJlc29sdmVXaXRoKHIsIFtyXSk7XG4gICAgICAgIH07Zm9yIChcInN0cmluZ1wiICE9IHR5cGVvZiB0ICYmIChlID0gdCwgdCA9IHZvaWQgMCksIHQgPSB0IHx8IFwiZnhcIjsgby0tOykge1xuICAgICAgICAgIChpID0gWi5nZXQocltvXSwgdCArIFwicXVldWVIb29rc1wiKSkgJiYgaS5lbXB0eSAmJiAobisrLCBpLmVtcHR5LmFkZChhKSk7XG4gICAgICAgIH1yZXR1cm4gYSgpLCBzLnByb21pc2UoZSk7XG4gICAgICB9IH0pO3ZhciBudCA9IC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvLnNvdXJjZSxcbiAgICAgICAgc3QgPSBuZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIiArIG50ICsgXCIpKFthLXolXSopJFwiLCBcImlcIiksXG4gICAgICAgIHJ0ID0gW1wiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCJdLFxuICAgICAgICBvdCA9IGZ1bmN0aW9uIG90KHQsIGUpIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIiA9PT0gKHQgPSBlIHx8IHQpLnN0eWxlLmRpc3BsYXkgfHwgXCJcIiA9PT0gdC5zdHlsZS5kaXNwbGF5ICYmIHguY29udGFpbnModC5vd25lckRvY3VtZW50LCB0KSAmJiBcIm5vbmVcIiA9PT0geC5jc3ModCwgXCJkaXNwbGF5XCIpO1xuICAgIH0sXG4gICAgICAgIGF0ID0gZnVuY3Rpb24gYXQodCwgZSwgaSwgbikge1xuICAgICAgdmFyIHMsXG4gICAgICAgICAgcixcbiAgICAgICAgICBvID0ge307Zm9yIChyIGluIGUpIHtcbiAgICAgICAgb1tyXSA9IHQuc3R5bGVbcl0sIHQuc3R5bGVbcl0gPSBlW3JdO1xuICAgICAgfWZvciAociBpbiBzID0gaS5hcHBseSh0LCBuIHx8IFtdKSwgZSkge1xuICAgICAgICB0LnN0eWxlW3JdID0gb1tyXTtcbiAgICAgIH1yZXR1cm4gcztcbiAgICB9O2Z1bmN0aW9uIGx0KHQsIGUsIGksIG4pIHtcbiAgICAgIHZhciBzLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgbyA9IDIwLFxuICAgICAgICAgIGEgPSBuID8gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbi5jdXIoKTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB4LmNzcyh0LCBlLCBcIlwiKTtcbiAgICAgIH0sXG4gICAgICAgICAgbCA9IGEoKSxcbiAgICAgICAgICB1ID0gaSAmJiBpWzNdIHx8ICh4LmNzc051bWJlcltlXSA/IFwiXCIgOiBcInB4XCIpLFxuICAgICAgICAgIGMgPSAoeC5jc3NOdW1iZXJbZV0gfHwgXCJweFwiICE9PSB1ICYmICtsKSAmJiBzdC5leGVjKHguY3NzKHQsIGUpKTtpZiAoYyAmJiBjWzNdICE9PSB1KSB7XG4gICAgICAgIGZvciAobCAvPSAyLCB1ID0gdSB8fCBjWzNdLCBjID0gK2wgfHwgMTsgby0tOykge1xuICAgICAgICAgIHguc3R5bGUodCwgZSwgYyArIHUpLCAoMSAtIHIpICogKDEgLSAociA9IGEoKSAvIGwgfHwgLjUpKSA8PSAwICYmIChvID0gMCksIGMgLz0gcjtcbiAgICAgICAgfWMgKj0gMiwgeC5zdHlsZSh0LCBlLCBjICsgdSksIGkgPSBpIHx8IFtdO1xuICAgICAgfXJldHVybiBpICYmIChjID0gK2MgfHwgK2wgfHwgMCwgcyA9IGlbMV0gPyBjICsgKGlbMV0gKyAxKSAqIGlbMl0gOiAraVsyXSwgbiAmJiAobi51bml0ID0gdSwgbi5zdGFydCA9IGMsIG4uZW5kID0gcykpLCBzO1xuICAgIH12YXIgdXQgPSB7fTtmdW5jdGlvbiBjdCh0KSB7XG4gICAgICB2YXIgZSxcbiAgICAgICAgICBpID0gdC5vd25lckRvY3VtZW50LFxuICAgICAgICAgIG4gPSB0Lm5vZGVOYW1lLFxuICAgICAgICAgIHMgPSB1dFtuXTtyZXR1cm4gcyB8fCAoZSA9IGkuYm9keS5hcHBlbmRDaGlsZChpLmNyZWF0ZUVsZW1lbnQobikpLCBzID0geC5jc3MoZSwgXCJkaXNwbGF5XCIpLCBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSksIFwibm9uZVwiID09PSBzICYmIChzID0gXCJibG9ja1wiKSwgdXRbbl0gPSBzLCBzKTtcbiAgICB9ZnVuY3Rpb24gaHQodCwgZSkge1xuICAgICAgZm9yICh2YXIgaSwgbiwgcyA9IFtdLCByID0gMCwgbyA9IHQubGVuZ3RoOyByIDwgbzsgcisrKSB7XG4gICAgICAgIChuID0gdFtyXSkuc3R5bGUgJiYgKGkgPSBuLnN0eWxlLmRpc3BsYXksIGUgPyAoXCJub25lXCIgPT09IGkgJiYgKHNbcl0gPSBaLmdldChuLCBcImRpc3BsYXlcIikgfHwgbnVsbCwgc1tyXSB8fCAobi5zdHlsZS5kaXNwbGF5ID0gXCJcIikpLCBcIlwiID09PSBuLnN0eWxlLmRpc3BsYXkgJiYgb3QobikgJiYgKHNbcl0gPSBjdChuKSkpIDogXCJub25lXCIgIT09IGkgJiYgKHNbcl0gPSBcIm5vbmVcIiwgWi5zZXQobiwgXCJkaXNwbGF5XCIsIGkpKSk7XG4gICAgICB9Zm9yIChyID0gMDsgciA8IG87IHIrKykge1xuICAgICAgICBudWxsICE9IHNbcl0gJiYgKHRbcl0uc3R5bGUuZGlzcGxheSA9IHNbcl0pO1xuICAgICAgfXJldHVybiB0O1xuICAgIH14LmZuLmV4dGVuZCh7IHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgIHJldHVybiBodCh0aGlzLCAhMCk7XG4gICAgICB9LCBoaWRlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICByZXR1cm4gaHQodGhpcyk7XG4gICAgICB9LCB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZSh0KSB7XG4gICAgICAgIHJldHVybiBcImJvb2xlYW5cIiA9PSB0eXBlb2YgdCA/IHQgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvdCh0aGlzKSA/IHgodGhpcykuc2hvdygpIDogeCh0aGlzKS5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSB9KTt2YXIgZHQgPSAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSxcbiAgICAgICAgcHQgPSAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2ksXG4gICAgICAgIGZ0ID0gL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxcbiAgICAgICAgZ3QgPSB7IG9wdGlvbjogWzEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiXSwgdGhlYWQ6IFsxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiXSwgY29sOiBbMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sIHRyOiBbMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIl0sIHRkOiBbMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sIF9kZWZhdWx0OiBbMCwgXCJcIiwgXCJcIl0gfTtmdW5jdGlvbiBtdCh0LCBlKSB7XG4gICAgICB2YXIgaTtyZXR1cm4gaSA9IHZvaWQgMCAhPT0gdC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSB8fCBcIipcIikgOiB2b2lkIDAgIT09IHQucXVlcnlTZWxlY3RvckFsbCA/IHQucXVlcnlTZWxlY3RvckFsbChlIHx8IFwiKlwiKSA6IFtdLCB2b2lkIDAgPT09IGUgfHwgZSAmJiBqKHQsIGUpID8geC5tZXJnZShbdF0sIGkpIDogaTtcbiAgICB9ZnVuY3Rpb24gdnQodCwgZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBaLnNldCh0W2ldLCBcImdsb2JhbEV2YWxcIiwgIWUgfHwgWi5nZXQoZVtpXSwgXCJnbG9iYWxFdmFsXCIpKTtcbiAgICAgIH1cbiAgICB9Z3Qub3B0Z3JvdXAgPSBndC5vcHRpb24sIGd0LnRib2R5ID0gZ3QudGZvb3QgPSBndC5jb2xncm91cCA9IGd0LmNhcHRpb24gPSBndC50aGVhZCwgZ3QudGggPSBndC50ZDt2YXIgX3QsXG4gICAgICAgIGJ0LFxuICAgICAgICB5dCA9IC88fCYjP1xcdys7LztmdW5jdGlvbiBrdCh0LCBlLCBpLCBuLCBzKSB7XG4gICAgICBmb3IgKHZhciByLCBvLCBhLCBsLCB1LCBjLCBoID0gZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGQgPSBbXSwgcCA9IDAsIGYgPSB0Lmxlbmd0aDsgcCA8IGY7IHArKykge1xuICAgICAgICBpZiAoKHIgPSB0W3BdKSB8fCAwID09PSByKSBpZiAoXCJvYmplY3RcIiA9PT0gdyhyKSkgeC5tZXJnZShkLCByLm5vZGVUeXBlID8gW3JdIDogcik7ZWxzZSBpZiAoeXQudGVzdChyKSkge1xuICAgICAgICAgIGZvciAobyA9IG8gfHwgaC5hcHBlbmRDaGlsZChlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLCBhID0gKHB0LmV4ZWMocikgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpLCBsID0gZ3RbYV0gfHwgZ3QuX2RlZmF1bHQsIG8uaW5uZXJIVE1MID0gbFsxXSArIHguaHRtbFByZWZpbHRlcihyKSArIGxbMl0sIGMgPSBsWzBdOyBjLS07KSB7XG4gICAgICAgICAgICBvID0gby5sYXN0Q2hpbGQ7XG4gICAgICAgICAgfXgubWVyZ2UoZCwgby5jaGlsZE5vZGVzKSwgKG8gPSBoLmZpcnN0Q2hpbGQpLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIGQucHVzaChlLmNyZWF0ZVRleHROb2RlKHIpKTtcbiAgICAgIH1mb3IgKGgudGV4dENvbnRlbnQgPSBcIlwiLCBwID0gMDsgciA9IGRbcCsrXTspIHtcbiAgICAgICAgaWYgKG4gJiYgeC5pbkFycmF5KHIsIG4pID4gLTEpIHMgJiYgcy5wdXNoKHIpO2Vsc2UgaWYgKHUgPSB4LmNvbnRhaW5zKHIub3duZXJEb2N1bWVudCwgciksIG8gPSBtdChoLmFwcGVuZENoaWxkKHIpLCBcInNjcmlwdFwiKSwgdSAmJiB2dChvKSwgaSkgZm9yIChjID0gMDsgciA9IG9bYysrXTspIHtcbiAgICAgICAgICBmdC50ZXN0KHIudHlwZSB8fCBcIlwiKSAmJiBpLnB1c2gocik7XG4gICAgICAgIH1cbiAgICAgIH1yZXR1cm4gaDtcbiAgICB9X3QgPSBvLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5hcHBlbmRDaGlsZChvLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLCAoYnQgPSBvLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhZGlvXCIpLCBidC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKSwgYnQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInRcIiksIF90LmFwcGVuZENoaWxkKGJ0KSwgdi5jaGVja0Nsb25lID0gX3QuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLCBfdC5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIiwgdi5ub0Nsb25lQ2hlY2tlZCA9ICEhX3QuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO3ZhciB3dCA9IG8uZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICB4dCA9IC9ea2V5LyxcbiAgICAgICAgQ3QgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG4gICAgICAgIER0ID0gL14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiBTdCgpIHtcbiAgICAgIHJldHVybiAhMDtcbiAgICB9ZnVuY3Rpb24gVHQoKSB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfWZ1bmN0aW9uIEl0KCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG8uYWN0aXZlRWxlbWVudDtcbiAgICAgIH0gY2F0Y2ggKHQpIHt9XG4gICAgfWZ1bmN0aW9uIEF0KHQsIGUsIGksIG4sIHMsIHIpIHtcbiAgICAgIHZhciBvLCBhO2lmIChcIm9iamVjdFwiID09ICh0eXBlb2YgZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGUpKSkge1xuICAgICAgICBmb3IgKGEgaW4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgaSAmJiAobiA9IG4gfHwgaSwgaSA9IHZvaWQgMCksIGUpIHtcbiAgICAgICAgICBBdCh0LCBhLCBpLCBuLCBlW2FdLCByKTtcbiAgICAgICAgfXJldHVybiB0O1xuICAgICAgfWlmIChudWxsID09IG4gJiYgbnVsbCA9PSBzID8gKHMgPSBpLCBuID0gaSA9IHZvaWQgMCkgOiBudWxsID09IHMgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGkgPyAocyA9IG4sIG4gPSB2b2lkIDApIDogKHMgPSBuLCBuID0gaSwgaSA9IHZvaWQgMCkpLCAhMSA9PT0gcykgcyA9IFR0O2Vsc2UgaWYgKCFzKSByZXR1cm4gdDtyZXR1cm4gMSA9PT0gciAmJiAobyA9IHMsIChzID0gZnVuY3Rpb24gcyh0KSB7XG4gICAgICAgIHJldHVybiB4KCkub2ZmKHQpLCBvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KS5ndWlkID0gby5ndWlkIHx8IChvLmd1aWQgPSB4Lmd1aWQrKykpLCB0LmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB4LmV2ZW50LmFkZCh0aGlzLCBlLCBzLCBuLCBpKTtcbiAgICAgIH0pO1xuICAgIH14LmV2ZW50ID0geyBnbG9iYWw6IHt9LCBhZGQ6IGZ1bmN0aW9uIGFkZCh0LCBlLCBpLCBuLCBzKSB7XG4gICAgICAgIHZhciByLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBoLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIHAsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIG0gPSBaLmdldCh0KTtpZiAobSkgZm9yIChpLmhhbmRsZXIgJiYgKGkgPSAociA9IGkpLmhhbmRsZXIsIHMgPSByLnNlbGVjdG9yKSwgcyAmJiB4LmZpbmQubWF0Y2hlc1NlbGVjdG9yKHd0LCBzKSwgaS5ndWlkIHx8IChpLmd1aWQgPSB4Lmd1aWQrKyksIChsID0gbS5ldmVudHMpIHx8IChsID0gbS5ldmVudHMgPSB7fSksIChvID0gbS5oYW5kbGUpIHx8IChvID0gbS5oYW5kbGUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHggJiYgeC5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/IHguZXZlbnQuZGlzcGF0Y2guYXBwbHkodCwgYXJndW1lbnRzKSA6IHZvaWQgMDtcbiAgICAgICAgfSksIHUgPSAoZSA9IChlIHx8IFwiXCIpLm1hdGNoKEYpIHx8IFtcIlwiXSkubGVuZ3RoOyB1LS07KSB7XG4gICAgICAgICAgcCA9IGcgPSAoYSA9IER0LmV4ZWMoZVt1XSkgfHwgW10pWzFdLCBmID0gKGFbMl0gfHwgXCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSwgcCAmJiAoaCA9IHguZXZlbnQuc3BlY2lhbFtwXSB8fCB7fSwgcCA9IChzID8gaC5kZWxlZ2F0ZVR5cGUgOiBoLmJpbmRUeXBlKSB8fCBwLCBoID0geC5ldmVudC5zcGVjaWFsW3BdIHx8IHt9LCBjID0geC5leHRlbmQoeyB0eXBlOiBwLCBvcmlnVHlwZTogZywgZGF0YTogbiwgaGFuZGxlcjogaSwgZ3VpZDogaS5ndWlkLCBzZWxlY3RvcjogcywgbmVlZHNDb250ZXh0OiBzICYmIHguZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChzKSwgbmFtZXNwYWNlOiBmLmpvaW4oXCIuXCIpIH0sIHIpLCAoZCA9IGxbcF0pIHx8ICgoZCA9IGxbcF0gPSBbXSkuZGVsZWdhdGVDb3VudCA9IDAsIGguc2V0dXAgJiYgITEgIT09IGguc2V0dXAuY2FsbCh0LCBuLCBmLCBvKSB8fCB0LmFkZEV2ZW50TGlzdGVuZXIgJiYgdC5hZGRFdmVudExpc3RlbmVyKHAsIG8pKSwgaC5hZGQgJiYgKGguYWRkLmNhbGwodCwgYyksIGMuaGFuZGxlci5ndWlkIHx8IChjLmhhbmRsZXIuZ3VpZCA9IGkuZ3VpZCkpLCBzID8gZC5zcGxpY2UoZC5kZWxlZ2F0ZUNvdW50KyssIDAsIGMpIDogZC5wdXNoKGMpLCB4LmV2ZW50Lmdsb2JhbFtwXSA9ICEwKTtcbiAgICAgICAgfVxuICAgICAgfSwgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUodCwgZSwgaSwgbiwgcykge1xuICAgICAgICB2YXIgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBwLFxuICAgICAgICAgICAgZixcbiAgICAgICAgICAgIGcsXG4gICAgICAgICAgICBtID0gWi5oYXNEYXRhKHQpICYmIFouZ2V0KHQpO2lmIChtICYmIChsID0gbS5ldmVudHMpKSB7XG4gICAgICAgICAgZm9yICh1ID0gKGUgPSAoZSB8fCBcIlwiKS5tYXRjaChGKSB8fCBbXCJcIl0pLmxlbmd0aDsgdS0tOykge1xuICAgICAgICAgICAgaWYgKHAgPSBnID0gKGEgPSBEdC5leGVjKGVbdV0pIHx8IFtdKVsxXSwgZiA9IChhWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksIHApIHtcbiAgICAgICAgICAgICAgZm9yIChoID0geC5ldmVudC5zcGVjaWFsW3BdIHx8IHt9LCBkID0gbFtwID0gKG4gPyBoLmRlbGVnYXRlVHlwZSA6IGguYmluZFR5cGUpIHx8IHBdIHx8IFtdLCBhID0gYVsyXSAmJiBuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIgKyBmLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIpLCBvID0gciA9IGQubGVuZ3RoOyByLS07KSB7XG4gICAgICAgICAgICAgICAgYyA9IGRbcl0sICFzICYmIGcgIT09IGMub3JpZ1R5cGUgfHwgaSAmJiBpLmd1aWQgIT09IGMuZ3VpZCB8fCBhICYmICFhLnRlc3QoYy5uYW1lc3BhY2UpIHx8IG4gJiYgbiAhPT0gYy5zZWxlY3RvciAmJiAoXCIqKlwiICE9PSBuIHx8ICFjLnNlbGVjdG9yKSB8fCAoZC5zcGxpY2UociwgMSksIGMuc2VsZWN0b3IgJiYgZC5kZWxlZ2F0ZUNvdW50LS0sIGgucmVtb3ZlICYmIGgucmVtb3ZlLmNhbGwodCwgYykpO1xuICAgICAgICAgICAgICB9byAmJiAhZC5sZW5ndGggJiYgKGgudGVhcmRvd24gJiYgITEgIT09IGgudGVhcmRvd24uY2FsbCh0LCBmLCBtLmhhbmRsZSkgfHwgeC5yZW1vdmVFdmVudCh0LCBwLCBtLmhhbmRsZSksIGRlbGV0ZSBsW3BdKTtcbiAgICAgICAgICAgIH0gZWxzZSBmb3IgKHAgaW4gbCkge1xuICAgICAgICAgICAgICB4LmV2ZW50LnJlbW92ZSh0LCBwICsgZVt1XSwgaSwgbiwgITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH14LmlzRW1wdHlPYmplY3QobCkgJiYgWi5yZW1vdmUodCwgXCJoYW5kbGUgZXZlbnRzXCIpO1xuICAgICAgICB9XG4gICAgICB9LCBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2godCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgYSA9IHguZXZlbnQuZml4KHQpLFxuICAgICAgICAgICAgbCA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxcbiAgICAgICAgICAgIHUgPSAoWi5nZXQodGhpcywgXCJldmVudHNcIikgfHwge30pW2EudHlwZV0gfHwgW10sXG4gICAgICAgICAgICBjID0geC5ldmVudC5zcGVjaWFsW2EudHlwZV0gfHwge307Zm9yIChsWzBdID0gYSwgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICBsW2VdID0gYXJndW1lbnRzW2VdO1xuICAgICAgICB9aWYgKGEuZGVsZWdhdGVUYXJnZXQgPSB0aGlzLCAhYy5wcmVEaXNwYXRjaCB8fCAhMSAhPT0gYy5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsIGEpKSB7XG4gICAgICAgICAgZm9yIChvID0geC5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsIGEsIHUpLCBlID0gMDsgKHMgPSBvW2UrK10pICYmICFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7KSB7XG4gICAgICAgICAgICBmb3IgKGEuY3VycmVudFRhcmdldCA9IHMuZWxlbSwgaSA9IDA7IChyID0gcy5oYW5kbGVyc1tpKytdKSAmJiAhYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpOykge1xuICAgICAgICAgICAgICBhLnJuYW1lc3BhY2UgJiYgIWEucm5hbWVzcGFjZS50ZXN0KHIubmFtZXNwYWNlKSB8fCAoYS5oYW5kbGVPYmogPSByLCBhLmRhdGEgPSByLmRhdGEsIHZvaWQgMCAhPT0gKG4gPSAoKHguZXZlbnQuc3BlY2lhbFtyLm9yaWdUeXBlXSB8fCB7fSkuaGFuZGxlIHx8IHIuaGFuZGxlcikuYXBwbHkocy5lbGVtLCBsKSkgJiYgITEgPT09IChhLnJlc3VsdCA9IG4pICYmIChhLnByZXZlbnREZWZhdWx0KCksIGEuc3RvcFByb3BhZ2F0aW9uKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuIGMucG9zdERpc3BhdGNoICYmIGMucG9zdERpc3BhdGNoLmNhbGwodGhpcywgYSksIGEucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9LCBoYW5kbGVyczogZnVuY3Rpb24gaGFuZGxlcnModCwgZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhID0gW10sXG4gICAgICAgICAgICBsID0gZS5kZWxlZ2F0ZUNvdW50LFxuICAgICAgICAgICAgdSA9IHQudGFyZ2V0O2lmIChsICYmIHUubm9kZVR5cGUgJiYgIShcImNsaWNrXCIgPT09IHQudHlwZSAmJiB0LmJ1dHRvbiA+PSAxKSkgZm9yICg7IHUgIT09IHRoaXM7IHUgPSB1LnBhcmVudE5vZGUgfHwgdGhpcykge1xuICAgICAgICAgIGlmICgxID09PSB1Lm5vZGVUeXBlICYmIChcImNsaWNrXCIgIT09IHQudHlwZSB8fCAhMCAhPT0gdS5kaXNhYmxlZCkpIHtcbiAgICAgICAgICAgIGZvciAociA9IFtdLCBvID0ge30sIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgIHZvaWQgMCA9PT0gb1tzID0gKG4gPSBlW2ldKS5zZWxlY3RvciArIFwiIFwiXSAmJiAob1tzXSA9IG4ubmVlZHNDb250ZXh0ID8geChzLCB0aGlzKS5pbmRleCh1KSA+IC0xIDogeC5maW5kKHMsIHRoaXMsIG51bGwsIFt1XSkubGVuZ3RoKSwgb1tzXSAmJiByLnB1c2gobik7XG4gICAgICAgICAgICB9ci5sZW5ndGggJiYgYS5wdXNoKHsgZWxlbTogdSwgaGFuZGxlcnM6IHIgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIHUgPSB0aGlzLCBsIDwgZS5sZW5ndGggJiYgYS5wdXNoKHsgZWxlbTogdSwgaGFuZGxlcnM6IGUuc2xpY2UobCkgfSksIGE7XG4gICAgICB9LCBhZGRQcm9wOiBmdW5jdGlvbiBhZGRQcm9wKHQsIGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHguRXZlbnQucHJvdG90eXBlLCB0LCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCBnZXQ6IF8oZSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcmlnaW5hbEV2ZW50KSByZXR1cm4gZSh0aGlzLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcmlnaW5hbEV2ZW50KSByZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W3RdO1xuICAgICAgICAgIH0sIHNldDogZnVuY3Rpb24gc2V0KGUpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB0LCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAsIHZhbHVlOiBlIH0pO1xuICAgICAgICAgIH0gfSk7XG4gICAgICB9LCBmaXg6IGZ1bmN0aW9uIGZpeCh0KSB7XG4gICAgICAgIHJldHVybiB0W3guZXhwYW5kb10gPyB0IDogbmV3IHguRXZlbnQodCk7XG4gICAgICB9LCBzcGVjaWFsOiB7IGxvYWQ6IHsgbm9CdWJibGU6ICEwIH0sIGZvY3VzOiB7IHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcyAhPT0gSXQoKSAmJiB0aGlzLmZvY3VzKSByZXR1cm4gdGhpcy5mb2N1cygpLCAhMTtcbiAgICAgICAgICB9LCBkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiIH0sIGJsdXI6IHsgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzID09PSBJdCgpICYmIHRoaXMuYmx1cikgcmV0dXJuIHRoaXMuYmx1cigpLCAhMTtcbiAgICAgICAgICB9LCBkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIiB9LCBjbGljazogeyB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgICAgICAgaWYgKFwiY2hlY2tib3hcIiA9PT0gdGhpcy50eXBlICYmIHRoaXMuY2xpY2sgJiYgaih0aGlzLCBcImlucHV0XCIpKSByZXR1cm4gdGhpcy5jbGljaygpLCAhMTtcbiAgICAgICAgICB9LCBfZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQodCkge1xuICAgICAgICAgICAgcmV0dXJuIGoodC50YXJnZXQsIFwiYVwiKTtcbiAgICAgICAgICB9IH0sIGJlZm9yZXVubG9hZDogeyBwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uIHBvc3REaXNwYXRjaCh0KSB7XG4gICAgICAgICAgICB2b2lkIDAgIT09IHQucmVzdWx0ICYmIHQub3JpZ2luYWxFdmVudCAmJiAodC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gdC5yZXN1bHQpO1xuICAgICAgICAgIH0gfSB9IH0sIHgucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgdC5yZW1vdmVFdmVudExpc3RlbmVyICYmIHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBpKTtcbiAgICB9LCB4LkV2ZW50ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiB4LkV2ZW50KSkgcmV0dXJuIG5ldyB4LkV2ZW50KHQsIGUpO3QgJiYgdC50eXBlID8gKHRoaXMub3JpZ2luYWxFdmVudCA9IHQsIHRoaXMudHlwZSA9IHQudHlwZSwgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSB0LmRlZmF1bHRQcmV2ZW50ZWQgfHwgdm9pZCAwID09PSB0LmRlZmF1bHRQcmV2ZW50ZWQgJiYgITEgPT09IHQucmV0dXJuVmFsdWUgPyBTdCA6IFR0LCB0aGlzLnRhcmdldCA9IHQudGFyZ2V0ICYmIDMgPT09IHQudGFyZ2V0Lm5vZGVUeXBlID8gdC50YXJnZXQucGFyZW50Tm9kZSA6IHQudGFyZ2V0LCB0aGlzLmN1cnJlbnRUYXJnZXQgPSB0LmN1cnJlbnRUYXJnZXQsIHRoaXMucmVsYXRlZFRhcmdldCA9IHQucmVsYXRlZFRhcmdldCkgOiB0aGlzLnR5cGUgPSB0LCBlICYmIHguZXh0ZW5kKHRoaXMsIGUpLCB0aGlzLnRpbWVTdGFtcCA9IHQgJiYgdC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKSwgdGhpc1t4LmV4cGFuZG9dID0gITA7XG4gICAgfSwgeC5FdmVudC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiB4LkV2ZW50LCBpc0RlZmF1bHRQcmV2ZW50ZWQ6IFR0LCBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogVHQsIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBUdCwgaXNTaW11bGF0ZWQ6ICExLCBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gU3QsIHQgJiYgIXRoaXMuaXNTaW11bGF0ZWQgJiYgdC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBTdCwgdCAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiB0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSwgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBTdCwgdCAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiB0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSB9LCB4LmVhY2goeyBhbHRLZXk6ICEwLCBidWJibGVzOiAhMCwgY2FuY2VsYWJsZTogITAsIGNoYW5nZWRUb3VjaGVzOiAhMCwgY3RybEtleTogITAsIGRldGFpbDogITAsIGV2ZW50UGhhc2U6ICEwLCBtZXRhS2V5OiAhMCwgcGFnZVg6ICEwLCBwYWdlWTogITAsIHNoaWZ0S2V5OiAhMCwgdmlldzogITAsIGNoYXI6ICEwLCBjaGFyQ29kZTogITAsIGtleTogITAsIGtleUNvZGU6ICEwLCBidXR0b246ICEwLCBidXR0b25zOiAhMCwgY2xpZW50WDogITAsIGNsaWVudFk6ICEwLCBvZmZzZXRYOiAhMCwgb2Zmc2V0WTogITAsIHBvaW50ZXJJZDogITAsIHBvaW50ZXJUeXBlOiAhMCwgc2NyZWVuWDogITAsIHNjcmVlblk6ICEwLCB0YXJnZXRUb3VjaGVzOiAhMCwgdG9FbGVtZW50OiAhMCwgdG91Y2hlczogITAsIHdoaWNoOiBmdW5jdGlvbiB3aGljaCh0KSB7XG4gICAgICAgIHZhciBlID0gdC5idXR0b247cmV0dXJuIG51bGwgPT0gdC53aGljaCAmJiB4dC50ZXN0KHQudHlwZSkgPyBudWxsICE9IHQuY2hhckNvZGUgPyB0LmNoYXJDb2RlIDogdC5rZXlDb2RlIDogIXQud2hpY2ggJiYgdm9pZCAwICE9PSBlICYmIEN0LnRlc3QodC50eXBlKSA/IDEgJiBlID8gMSA6IDIgJiBlID8gMyA6IDQgJiBlID8gMiA6IDAgOiB0LndoaWNoO1xuICAgICAgfSB9LCB4LmV2ZW50LmFkZFByb3ApLCB4LmVhY2goeyBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsIHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLCBwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiIH0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICB4LmV2ZW50LnNwZWNpYWxbdF0gPSB7IGRlbGVnYXRlVHlwZTogZSwgYmluZFR5cGU6IGUsIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKHQpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgbiA9IHQucmVsYXRlZFRhcmdldCxcbiAgICAgICAgICAgICAgcyA9IHQuaGFuZGxlT2JqO3JldHVybiBuICYmIChuID09PSB0aGlzIHx8IHguY29udGFpbnModGhpcywgbikpIHx8ICh0LnR5cGUgPSBzLm9yaWdUeXBlLCBpID0gcy5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHQudHlwZSA9IGUpLCBpO1xuICAgICAgICB9IH07XG4gICAgfSksIHguZm4uZXh0ZW5kKHsgb246IGZ1bmN0aW9uIG9uKHQsIGUsIGksIG4pIHtcbiAgICAgICAgcmV0dXJuIEF0KHRoaXMsIHQsIGUsIGksIG4pO1xuICAgICAgfSwgb25lOiBmdW5jdGlvbiBvbmUodCwgZSwgaSwgbikge1xuICAgICAgICByZXR1cm4gQXQodGhpcywgdCwgZSwgaSwgbiwgMSk7XG4gICAgICB9LCBvZmY6IGZ1bmN0aW9uIG9mZih0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuLCBzO2lmICh0ICYmIHQucHJldmVudERlZmF1bHQgJiYgdC5oYW5kbGVPYmopIHJldHVybiBuID0gdC5oYW5kbGVPYmosIHgodC5kZWxlZ2F0ZVRhcmdldCkub2ZmKG4ubmFtZXNwYWNlID8gbi5vcmlnVHlwZSArIFwiLlwiICsgbi5uYW1lc3BhY2UgOiBuLm9yaWdUeXBlLCBuLnNlbGVjdG9yLCBuLmhhbmRsZXIpLCB0aGlzO2lmIChcIm9iamVjdFwiID09ICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHQpKSkge1xuICAgICAgICAgIGZvciAocyBpbiB0KSB7XG4gICAgICAgICAgICB0aGlzLm9mZihzLCBlLCB0W3NdKTtcbiAgICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICAgIH1yZXR1cm4gITEgIT09IGUgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlIHx8IChpID0gZSwgZSA9IHZvaWQgMCksICExID09PSBpICYmIChpID0gVHQpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHguZXZlbnQucmVtb3ZlKHRoaXMsIHQsIGksIGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gfSk7dmFyIGp0ID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG4gICAgICAgIE10ID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG4gICAgICAgIFB0ID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcbiAgICAgICAgRXQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7ZnVuY3Rpb24gT3QodCwgZSkge1xuICAgICAgcmV0dXJuIGoodCwgXCJ0YWJsZVwiKSAmJiBqKDExICE9PSBlLm5vZGVUeXBlID8gZSA6IGUuZmlyc3RDaGlsZCwgXCJ0clwiKSAmJiB4KHQpLmNoaWxkcmVuKFwidGJvZHlcIilbMF0gfHwgdDtcbiAgICB9ZnVuY3Rpb24gSHQodCkge1xuICAgICAgcmV0dXJuIHQudHlwZSA9IChudWxsICE9PSB0LmdldEF0dHJpYnV0ZShcInR5cGVcIikpICsgXCIvXCIgKyB0LnR5cGUsIHQ7XG4gICAgfWZ1bmN0aW9uIE50KHQpIHtcbiAgICAgIHJldHVybiBcInRydWUvXCIgPT09ICh0LnR5cGUgfHwgXCJcIikuc2xpY2UoMCwgNSkgPyB0LnR5cGUgPSB0LnR5cGUuc2xpY2UoNSkgOiB0LnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksIHQ7XG4gICAgfWZ1bmN0aW9uIEJ0KHQsIGUpIHtcbiAgICAgIHZhciBpLCBuLCBzLCByLCBvLCBhLCBsLCB1O2lmICgxID09PSBlLm5vZGVUeXBlKSB7XG4gICAgICAgIGlmIChaLmhhc0RhdGEodCkgJiYgKHIgPSBaLmFjY2Vzcyh0KSwgbyA9IFouc2V0KGUsIHIpLCB1ID0gci5ldmVudHMpKSBmb3IgKHMgaW4gZGVsZXRlIG8uaGFuZGxlLCBvLmV2ZW50cyA9IHt9LCB1KSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbiA9IHVbc10ubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICB4LmV2ZW50LmFkZChlLCBzLCB1W3NdW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1RLmhhc0RhdGEodCkgJiYgKGEgPSBRLmFjY2Vzcyh0KSwgbCA9IHguZXh0ZW5kKHt9LCBhKSwgUS5zZXQoZSwgbCkpO1xuICAgICAgfVxuICAgIH1mdW5jdGlvbiBGdCh0LCBlLCBpLCBuKSB7XG4gICAgICBlID0gdS5hcHBseShbXSwgZSk7dmFyIHMsXG4gICAgICAgICAgcixcbiAgICAgICAgICBvLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgbCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIGggPSAwLFxuICAgICAgICAgIGQgPSB0Lmxlbmd0aCxcbiAgICAgICAgICBwID0gZCAtIDEsXG4gICAgICAgICAgZiA9IGVbMF0sXG4gICAgICAgICAgZyA9IF8oZik7aWYgKGcgfHwgZCA+IDEgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZiAmJiAhdi5jaGVja0Nsb25lICYmIFB0LnRlc3QoZikpIHJldHVybiB0LmVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgdmFyIHIgPSB0LmVxKHMpO2cgJiYgKGVbMF0gPSBmLmNhbGwodGhpcywgcywgci5odG1sKCkpKSwgRnQociwgZSwgaSwgbik7XG4gICAgICB9KTtpZiAoZCAmJiAociA9IChzID0ga3QoZSwgdFswXS5vd25lckRvY3VtZW50LCAhMSwgdCwgbikpLmZpcnN0Q2hpbGQsIDEgPT09IHMuY2hpbGROb2Rlcy5sZW5ndGggJiYgKHMgPSByKSwgciB8fCBuKSkge1xuICAgICAgICBmb3IgKGEgPSAobyA9IHgubWFwKG10KHMsIFwic2NyaXB0XCIpLCBIdCkpLmxlbmd0aDsgaCA8IGQ7IGgrKykge1xuICAgICAgICAgIGwgPSBzLCBoICE9PSBwICYmIChsID0geC5jbG9uZShsLCAhMCwgITApLCBhICYmIHgubWVyZ2UobywgbXQobCwgXCJzY3JpcHRcIikpKSwgaS5jYWxsKHRbaF0sIGwsIGgpO1xuICAgICAgICB9aWYgKGEpIGZvciAoYyA9IG9bby5sZW5ndGggLSAxXS5vd25lckRvY3VtZW50LCB4Lm1hcChvLCBOdCksIGggPSAwOyBoIDwgYTsgaCsrKSB7XG4gICAgICAgICAgbCA9IG9baF0sIGZ0LnRlc3QobC50eXBlIHx8IFwiXCIpICYmICFaLmFjY2VzcyhsLCBcImdsb2JhbEV2YWxcIikgJiYgeC5jb250YWlucyhjLCBsKSAmJiAobC5zcmMgJiYgXCJtb2R1bGVcIiAhPT0gKGwudHlwZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpID8geC5fZXZhbFVybCAmJiB4Ll9ldmFsVXJsKGwuc3JjKSA6IGsobC50ZXh0Q29udGVudC5yZXBsYWNlKEV0LCBcIlwiKSwgYywgbCkpO1xuICAgICAgICB9XG4gICAgICB9cmV0dXJuIHQ7XG4gICAgfWZ1bmN0aW9uIEx0KHQsIGUsIGkpIHtcbiAgICAgIGZvciAodmFyIG4sIHMgPSBlID8geC5maWx0ZXIoZSwgdCkgOiB0LCByID0gMDsgbnVsbCAhPSAobiA9IHNbcl0pOyByKyspIHtcbiAgICAgICAgaSB8fCAxICE9PSBuLm5vZGVUeXBlIHx8IHguY2xlYW5EYXRhKG10KG4pKSwgbi5wYXJlbnROb2RlICYmIChpICYmIHguY29udGFpbnMobi5vd25lckRvY3VtZW50LCBuKSAmJiB2dChtdChuLCBcInNjcmlwdFwiKSksIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSk7XG4gICAgICB9cmV0dXJuIHQ7XG4gICAgfXguZXh0ZW5kKHsgaHRtbFByZWZpbHRlcjogZnVuY3Rpb24gaHRtbFByZWZpbHRlcih0KSB7XG4gICAgICAgIHJldHVybiB0LnJlcGxhY2UoanQsIFwiPCQxPjwvJDI+XCIpO1xuICAgICAgfSwgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjID0gdC5jbG9uZU5vZGUoITApLFxuICAgICAgICAgICAgaCA9IHguY29udGFpbnModC5vd25lckRvY3VtZW50LCB0KTtpZiAoISh2Lm5vQ2xvbmVDaGVja2VkIHx8IDEgIT09IHQubm9kZVR5cGUgJiYgMTEgIT09IHQubm9kZVR5cGUgfHwgeC5pc1hNTERvYyh0KSkpIGZvciAobyA9IG10KGMpLCBuID0gMCwgcyA9IChyID0gbXQodCkpLmxlbmd0aDsgbiA8IHM7IG4rKykge1xuICAgICAgICAgIGEgPSByW25dLCBsID0gb1tuXSwgdSA9IHZvaWQgMCwgXCJpbnB1dFwiID09PSAodSA9IGwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgJiYgZHQudGVzdChhLnR5cGUpID8gbC5jaGVja2VkID0gYS5jaGVja2VkIDogXCJpbnB1dFwiICE9PSB1ICYmIFwidGV4dGFyZWFcIiAhPT0gdSB8fCAobC5kZWZhdWx0VmFsdWUgPSBhLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1pZiAoZSkgaWYgKGkpIGZvciAociA9IHIgfHwgbXQodCksIG8gPSBvIHx8IG10KGMpLCBuID0gMCwgcyA9IHIubGVuZ3RoOyBuIDwgczsgbisrKSB7XG4gICAgICAgICAgQnQocltuXSwgb1tuXSk7XG4gICAgICAgIH0gZWxzZSBCdCh0LCBjKTtyZXR1cm4gKG8gPSBtdChjLCBcInNjcmlwdFwiKSkubGVuZ3RoID4gMCAmJiB2dChvLCAhaCAmJiBtdCh0LCBcInNjcmlwdFwiKSksIGM7XG4gICAgICB9LCBjbGVhbkRhdGE6IGZ1bmN0aW9uIGNsZWFuRGF0YSh0KSB7XG4gICAgICAgIGZvciAodmFyIGUsIGksIG4sIHMgPSB4LmV2ZW50LnNwZWNpYWwsIHIgPSAwOyB2b2lkIDAgIT09IChpID0gdFtyXSk7IHIrKykge1xuICAgICAgICAgIGlmIChYKGkpKSB7XG4gICAgICAgICAgICBpZiAoZSA9IGlbWi5leHBhbmRvXSkge1xuICAgICAgICAgICAgICBpZiAoZS5ldmVudHMpIGZvciAobiBpbiBlLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIHNbbl0gPyB4LmV2ZW50LnJlbW92ZShpLCBuKSA6IHgucmVtb3ZlRXZlbnQoaSwgbiwgZS5oYW5kbGUpO1xuICAgICAgICAgICAgICB9aVtaLmV4cGFuZG9dID0gdm9pZCAwO1xuICAgICAgICAgICAgfWlbUS5leHBhbmRvXSAmJiAoaVtRLmV4cGFuZG9dID0gdm9pZCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gfSksIHguZm4uZXh0ZW5kKHsgZGV0YWNoOiBmdW5jdGlvbiBkZXRhY2godCkge1xuICAgICAgICByZXR1cm4gTHQodGhpcywgdCwgITApO1xuICAgICAgfSwgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUodCkge1xuICAgICAgICByZXR1cm4gTHQodGhpcywgdCk7XG4gICAgICB9LCB0ZXh0OiBmdW5jdGlvbiB0ZXh0KHQpIHtcbiAgICAgICAgcmV0dXJuIFUodGhpcywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ID8geC50ZXh0KHRoaXMpIDogdGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgMSAhPT0gdGhpcy5ub2RlVHlwZSAmJiAxMSAhPT0gdGhpcy5ub2RlVHlwZSAmJiA5ICE9PSB0aGlzLm5vZGVUeXBlIHx8ICh0aGlzLnRleHRDb250ZW50ID0gdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIG51bGwsIHQsIGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgfSwgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgICAgIHJldHVybiBGdCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgMSAhPT0gdGhpcy5ub2RlVHlwZSAmJiAxMSAhPT0gdGhpcy5ub2RlVHlwZSAmJiA5ICE9PSB0aGlzLm5vZGVUeXBlIHx8IE90KHRoaXMsIHQpLmFwcGVuZENoaWxkKHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoKSB7XG4gICAgICAgIHJldHVybiBGdCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaWYgKDEgPT09IHRoaXMubm9kZVR5cGUgfHwgMTEgPT09IHRoaXMubm9kZVR5cGUgfHwgOSA9PT0gdGhpcy5ub2RlVHlwZSkge1xuICAgICAgICAgICAgdmFyIGUgPSBPdCh0aGlzLCB0KTtlLmluc2VydEJlZm9yZSh0LCBlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICAgICAgcmV0dXJuIEZ0KHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoKSB7XG4gICAgICAgIHJldHVybiBGdCh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgdGhpcy5uZXh0U2libGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkge1xuICAgICAgICBmb3IgKHZhciB0LCBlID0gMDsgbnVsbCAhPSAodCA9IHRoaXNbZV0pOyBlKyspIHtcbiAgICAgICAgICAxID09PSB0Lm5vZGVUeXBlICYmICh4LmNsZWFuRGF0YShtdCh0LCAhMSkpLCB0LnRleHRDb250ZW50ID0gXCJcIik7XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH0sIGNsb25lOiBmdW5jdGlvbiBjbG9uZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0ID0gbnVsbCAhPSB0ICYmIHQsIGUgPSBudWxsID09IGUgPyB0IDogZSwgdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB4LmNsb25lKHRoaXMsIHQsIGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGh0bWw6IGZ1bmN0aW9uIGh0bWwodCkge1xuICAgICAgICByZXR1cm4gVSh0aGlzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdGhpc1swXSB8fCB7fSxcbiAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgIG4gPSB0aGlzLmxlbmd0aDtpZiAodm9pZCAwID09PSB0ICYmIDEgPT09IGUubm9kZVR5cGUpIHJldHVybiBlLmlubmVySFRNTDtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiAhTXQudGVzdCh0KSAmJiAhZ3RbKHB0LmV4ZWModCkgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSkge1xuICAgICAgICAgICAgdCA9IHguaHRtbFByZWZpbHRlcih0KTt0cnkge1xuICAgICAgICAgICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIDEgPT09IChlID0gdGhpc1tpXSB8fCB7fSkubm9kZVR5cGUgJiYgKHguY2xlYW5EYXRhKG10KGUsICExKSksIGUuaW5uZXJIVE1MID0gdCk7XG4gICAgICAgICAgICAgIH1lID0gMDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHt9XG4gICAgICAgICAgfWUgJiYgdGhpcy5lbXB0eSgpLmFwcGVuZCh0KTtcbiAgICAgICAgfSwgbnVsbCwgdCwgYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICB9LCByZXBsYWNlV2l0aDogZnVuY3Rpb24gcmVwbGFjZVdpdGgoKSB7XG4gICAgICAgIHZhciB0ID0gW107cmV0dXJuIEZ0KHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMucGFyZW50Tm9kZTt4LmluQXJyYXkodGhpcywgdCkgPCAwICYmICh4LmNsZWFuRGF0YShtdCh0aGlzKSksIGkgJiYgaS5yZXBsYWNlQ2hpbGQoZSwgdGhpcykpO1xuICAgICAgICB9LCB0KTtcbiAgICAgIH0gfSksIHguZWFjaCh7IGFwcGVuZFRvOiBcImFwcGVuZFwiLCBwcmVwZW5kVG86IFwicHJlcGVuZFwiLCBpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsIGluc2VydEFmdGVyOiBcImFmdGVyXCIsIHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIiB9LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgeC5mblt0XSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGZvciAodmFyIGksIG4gPSBbXSwgcyA9IHgodCksIHIgPSBzLmxlbmd0aCAtIDEsIG8gPSAwOyBvIDw9IHI7IG8rKykge1xuICAgICAgICAgIGkgPSBvID09PSByID8gdGhpcyA6IHRoaXMuY2xvbmUoITApLCB4KHNbb10pW2VdKGkpLCBjLmFwcGx5KG4sIGkuZ2V0KCkpO1xuICAgICAgICB9cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4pO1xuICAgICAgfTtcbiAgICB9KTt2YXIgenQgPSBuZXcgUmVnRXhwKFwiXihcIiArIG50ICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIpLFxuICAgICAgICBXdCA9IGZ1bmN0aW9uIFd0KHQpIHtcbiAgICAgIHZhciBlID0gdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiBlICYmIGUub3BlbmVyIHx8IChlID0gaSksIGUuZ2V0Q29tcHV0ZWRTdHlsZSh0KTtcbiAgICB9LFxuICAgICAgICBSdCA9IG5ldyBSZWdFeHAocnQuam9pbihcInxcIiksIFwiaVwiKTtmdW5jdGlvbiAkdCh0LCBlLCBpKSB7XG4gICAgICB2YXIgbixcbiAgICAgICAgICBzLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgbyxcbiAgICAgICAgICBhID0gdC5zdHlsZTtyZXR1cm4gKGkgPSBpIHx8IFd0KHQpKSAmJiAoXCJcIiAhPT0gKG8gPSBpLmdldFByb3BlcnR5VmFsdWUoZSkgfHwgaVtlXSkgfHwgeC5jb250YWlucyh0Lm93bmVyRG9jdW1lbnQsIHQpIHx8IChvID0geC5zdHlsZSh0LCBlKSksICF2LnBpeGVsQm94U3R5bGVzKCkgJiYgenQudGVzdChvKSAmJiBSdC50ZXN0KGUpICYmIChuID0gYS53aWR0aCwgcyA9IGEubWluV2lkdGgsIHIgPSBhLm1heFdpZHRoLCBhLm1pbldpZHRoID0gYS5tYXhXaWR0aCA9IGEud2lkdGggPSBvLCBvID0gaS53aWR0aCwgYS53aWR0aCA9IG4sIGEubWluV2lkdGggPSBzLCBhLm1heFdpZHRoID0gcikpLCB2b2lkIDAgIT09IG8gPyBvICsgXCJcIiA6IG87XG4gICAgfWZ1bmN0aW9uIHF0KHQsIGUpIHtcbiAgICAgIHJldHVybiB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICghdCgpKSByZXR1cm4gKHRoaXMuZ2V0ID0gZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtkZWxldGUgdGhpcy5nZXQ7XG4gICAgICAgIH0gfTtcbiAgICB9IWZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgdS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCIsIGMuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NjAlO3RvcDoxJVwiLCB3dC5hcHBlbmRDaGlsZCh1KS5hcHBlbmRDaGlsZChjKTt2YXIgdCA9IGkuZ2V0Q29tcHV0ZWRTdHlsZShjKTtuID0gXCIxJVwiICE9PSB0LnRvcCwgbCA9IDEyID09PSBlKHQubWFyZ2luTGVmdCksIGMuc3R5bGUucmlnaHQgPSBcIjYwJVwiLCBhID0gMzYgPT09IGUodC5yaWdodCksIHMgPSAzNiA9PT0gZSh0LndpZHRoKSwgYy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIiwgciA9IDM2ID09PSBjLm9mZnNldFdpZHRoIHx8IFwiYWJzb2x1dGVcIiwgd3QucmVtb3ZlQ2hpbGQodSksIGMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9ZnVuY3Rpb24gZSh0KSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQodCkpO1xuICAgICAgfXZhciBuLFxuICAgICAgICAgIHMsXG4gICAgICAgICAgcixcbiAgICAgICAgICBhLFxuICAgICAgICAgIGwsXG4gICAgICAgICAgdSA9IG8uY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgICBjID0gby5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Muc3R5bGUgJiYgKGMuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCIsIGMuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCIsIHYuY2xlYXJDbG9uZVN0eWxlID0gXCJjb250ZW50LWJveFwiID09PSBjLnN0eWxlLmJhY2tncm91bmRDbGlwLCB4LmV4dGVuZCh2LCB7IGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbiBib3hTaXppbmdSZWxpYWJsZSgpIHtcbiAgICAgICAgICByZXR1cm4gdCgpLCBzO1xuICAgICAgICB9LCBwaXhlbEJveFN0eWxlczogZnVuY3Rpb24gcGl4ZWxCb3hTdHlsZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIHQoKSwgYTtcbiAgICAgICAgfSwgcGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24gcGl4ZWxQb3NpdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdCgpLCBuO1xuICAgICAgICB9LCByZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uIHJlbGlhYmxlTWFyZ2luTGVmdCgpIHtcbiAgICAgICAgICByZXR1cm4gdCgpLCBsO1xuICAgICAgICB9LCBzY3JvbGxib3hTaXplOiBmdW5jdGlvbiBzY3JvbGxib3hTaXplKCkge1xuICAgICAgICAgIHJldHVybiB0KCksIHI7XG4gICAgICAgIH0gfSkpO1xuICAgIH0oKTt2YXIgVXQgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG4gICAgICAgIEt0ID0gL14tLS8sXG4gICAgICAgIFl0ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcbiAgICAgICAgVnQgPSB7IGxldHRlclNwYWNpbmc6IFwiMFwiLCBmb250V2VpZ2h0OiBcIjQwMFwiIH0sXG4gICAgICAgIEd0ID0gW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sXG4gICAgICAgIFh0ID0gby5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlO2Z1bmN0aW9uIEp0KHQpIHtcbiAgICAgIHZhciBlID0geC5jc3NQcm9wc1t0XTtyZXR1cm4gZSB8fCAoZSA9IHguY3NzUHJvcHNbdF0gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICBpZiAodCBpbiBYdCkgcmV0dXJuIHQ7Zm9yICh2YXIgZSA9IHRbMF0udG9VcHBlckNhc2UoKSArIHQuc2xpY2UoMSksIGkgPSBHdC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICBpZiAoKHQgPSBHdFtpXSArIGUpIGluIFh0KSByZXR1cm4gdDtcbiAgICAgICAgfVxuICAgICAgfSh0KSB8fCB0KSwgZTtcbiAgICB9ZnVuY3Rpb24gWnQodCwgZSwgaSkge1xuICAgICAgdmFyIG4gPSBzdC5leGVjKGUpO3JldHVybiBuID8gTWF0aC5tYXgoMCwgblsyXSAtIChpIHx8IDApKSArIChuWzNdIHx8IFwicHhcIikgOiBlO1xuICAgIH1mdW5jdGlvbiBRdCh0LCBlLCBpLCBuLCBzLCByKSB7XG4gICAgICB2YXIgbyA9IFwid2lkdGhcIiA9PT0gZSA/IDEgOiAwLFxuICAgICAgICAgIGEgPSAwLFxuICAgICAgICAgIGwgPSAwO2lmIChpID09PSAobiA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIikpIHJldHVybiAwO2ZvciAoOyBvIDwgNDsgbyArPSAyKSB7XG4gICAgICAgIFwibWFyZ2luXCIgPT09IGkgJiYgKGwgKz0geC5jc3ModCwgaSArIHJ0W29dLCAhMCwgcykpLCBuID8gKFwiY29udGVudFwiID09PSBpICYmIChsIC09IHguY3NzKHQsIFwicGFkZGluZ1wiICsgcnRbb10sICEwLCBzKSksIFwibWFyZ2luXCIgIT09IGkgJiYgKGwgLT0geC5jc3ModCwgXCJib3JkZXJcIiArIHJ0W29dICsgXCJXaWR0aFwiLCAhMCwgcykpKSA6IChsICs9IHguY3NzKHQsIFwicGFkZGluZ1wiICsgcnRbb10sICEwLCBzKSwgXCJwYWRkaW5nXCIgIT09IGkgPyBsICs9IHguY3NzKHQsIFwiYm9yZGVyXCIgKyBydFtvXSArIFwiV2lkdGhcIiwgITAsIHMpIDogYSArPSB4LmNzcyh0LCBcImJvcmRlclwiICsgcnRbb10gKyBcIldpZHRoXCIsICEwLCBzKSk7XG4gICAgICB9cmV0dXJuICFuICYmIHIgPj0gMCAmJiAobCArPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwodFtcIm9mZnNldFwiICsgZVswXS50b1VwcGVyQ2FzZSgpICsgZS5zbGljZSgxKV0gLSByIC0gbCAtIGEgLSAuNSkpKSwgbDtcbiAgICB9ZnVuY3Rpb24gdGUodCwgZSwgaSkge1xuICAgICAgdmFyIG4gPSBXdCh0KSxcbiAgICAgICAgICBzID0gJHQodCwgZSwgbiksXG4gICAgICAgICAgciA9IFwiYm9yZGVyLWJveFwiID09PSB4LmNzcyh0LCBcImJveFNpemluZ1wiLCAhMSwgbiksXG4gICAgICAgICAgbyA9IHI7aWYgKHp0LnRlc3QocykpIHtcbiAgICAgICAgaWYgKCFpKSByZXR1cm4gcztzID0gXCJhdXRvXCI7XG4gICAgICB9cmV0dXJuIG8gPSBvICYmICh2LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgcyA9PT0gdC5zdHlsZVtlXSksIChcImF1dG9cIiA9PT0gcyB8fCAhcGFyc2VGbG9hdChzKSAmJiBcImlubGluZVwiID09PSB4LmNzcyh0LCBcImRpc3BsYXlcIiwgITEsIG4pKSAmJiAocyA9IHRbXCJvZmZzZXRcIiArIGVbMF0udG9VcHBlckNhc2UoKSArIGUuc2xpY2UoMSldLCBvID0gITApLCAocyA9IHBhcnNlRmxvYXQocykgfHwgMCkgKyBRdCh0LCBlLCBpIHx8IChyID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiKSwgbywgbiwgcykgKyBcInB4XCI7XG4gICAgfWZ1bmN0aW9uIGVlKHQsIGUsIGksIG4sIHMpIHtcbiAgICAgIHJldHVybiBuZXcgZWUucHJvdG90eXBlLmluaXQodCwgZSwgaSwgbiwgcyk7XG4gICAgfXguZXh0ZW5kKHsgY3NzSG9va3M6IHsgb3BhY2l0eTogeyBnZXQ6IGZ1bmN0aW9uIGdldCh0LCBlKSB7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICB2YXIgaSA9ICR0KHQsIFwib3BhY2l0eVwiKTtyZXR1cm4gXCJcIiA9PT0gaSA/IFwiMVwiIDogaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IH0gfSwgY3NzTnVtYmVyOiB7IGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAhMCwgY29sdW1uQ291bnQ6ICEwLCBmaWxsT3BhY2l0eTogITAsIGZsZXhHcm93OiAhMCwgZmxleFNocmluazogITAsIGZvbnRXZWlnaHQ6ICEwLCBsaW5lSGVpZ2h0OiAhMCwgb3BhY2l0eTogITAsIG9yZGVyOiAhMCwgb3JwaGFuczogITAsIHdpZG93czogITAsIHpJbmRleDogITAsIHpvb206ICEwIH0sIGNzc1Byb3BzOiB7fSwgc3R5bGU6IGZ1bmN0aW9uIHN0eWxlKHQsIGUsIGksIG4pIHtcbiAgICAgICAgaWYgKHQgJiYgMyAhPT0gdC5ub2RlVHlwZSAmJiA4ICE9PSB0Lm5vZGVUeXBlICYmIHQuc3R5bGUpIHtcbiAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgYSA9IEcoZSksXG4gICAgICAgICAgICAgIGwgPSBLdC50ZXN0KGUpLFxuICAgICAgICAgICAgICB1ID0gdC5zdHlsZTtpZiAobCB8fCAoZSA9IEp0KGEpKSwgbyA9IHguY3NzSG9va3NbZV0gfHwgeC5jc3NIb29rc1thXSwgdm9pZCAwID09PSBpKSByZXR1cm4gbyAmJiBcImdldFwiIGluIG8gJiYgdm9pZCAwICE9PSAocyA9IG8uZ2V0KHQsICExLCBuKSkgPyBzIDogdVtlXTtcInN0cmluZ1wiID09PSAociA9IHR5cGVvZiBpID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoaSkpICYmIChzID0gc3QuZXhlYyhpKSkgJiYgc1sxXSAmJiAoaSA9IGx0KHQsIGUsIHMpLCByID0gXCJudW1iZXJcIiksIG51bGwgIT0gaSAmJiBpID09IGkgJiYgKFwibnVtYmVyXCIgPT09IHIgJiYgKGkgKz0gcyAmJiBzWzNdIHx8ICh4LmNzc051bWJlclthXSA/IFwiXCIgOiBcInB4XCIpKSwgdi5jbGVhckNsb25lU3R5bGUgfHwgXCJcIiAhPT0gaSB8fCAwICE9PSBlLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpIHx8ICh1W2VdID0gXCJpbmhlcml0XCIpLCBvICYmIFwic2V0XCIgaW4gbyAmJiB2b2lkIDAgPT09IChpID0gby5zZXQodCwgaSwgbikpIHx8IChsID8gdS5zZXRQcm9wZXJ0eShlLCBpKSA6IHVbZV0gPSBpKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGNzczogZnVuY3Rpb24gY3NzKHQsIGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEgPSBHKGUpO3JldHVybiBLdC50ZXN0KGUpIHx8IChlID0gSnQoYSkpLCAobyA9IHguY3NzSG9va3NbZV0gfHwgeC5jc3NIb29rc1thXSkgJiYgXCJnZXRcIiBpbiBvICYmIChzID0gby5nZXQodCwgITAsIGkpKSwgdm9pZCAwID09PSBzICYmIChzID0gJHQodCwgZSwgbikpLCBcIm5vcm1hbFwiID09PSBzICYmIGUgaW4gVnQgJiYgKHMgPSBWdFtlXSksIFwiXCIgPT09IGkgfHwgaSA/IChyID0gcGFyc2VGbG9hdChzKSwgITAgPT09IGkgfHwgaXNGaW5pdGUocikgPyByIHx8IDAgOiBzKSA6IHM7XG4gICAgICB9IH0pLCB4LmVhY2goW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICB4LmNzc0hvb2tzW2VdID0geyBnZXQ6IGZ1bmN0aW9uIGdldCh0LCBpLCBuKSB7XG4gICAgICAgICAgaWYgKGkpIHJldHVybiAhVXQudGVzdCh4LmNzcyh0LCBcImRpc3BsYXlcIikpIHx8IHQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiYgdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA/IHRlKHQsIGUsIG4pIDogYXQodCwgWXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZSh0LCBlLCBuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQodCwgaSwgbikge1xuICAgICAgICAgIHZhciBzLFxuICAgICAgICAgICAgICByID0gV3QodCksXG4gICAgICAgICAgICAgIG8gPSBcImJvcmRlci1ib3hcIiA9PT0geC5jc3ModCwgXCJib3hTaXppbmdcIiwgITEsIHIpLFxuICAgICAgICAgICAgICBhID0gbiAmJiBRdCh0LCBlLCBuLCBvLCByKTtyZXR1cm4gbyAmJiB2LnNjcm9sbGJveFNpemUoKSA9PT0gci5wb3NpdGlvbiAmJiAoYSAtPSBNYXRoLmNlaWwodFtcIm9mZnNldFwiICsgZVswXS50b1VwcGVyQ2FzZSgpICsgZS5zbGljZSgxKV0gLSBwYXJzZUZsb2F0KHJbZV0pIC0gUXQodCwgZSwgXCJib3JkZXJcIiwgITEsIHIpIC0gLjUpKSwgYSAmJiAocyA9IHN0LmV4ZWMoaSkpICYmIFwicHhcIiAhPT0gKHNbM10gfHwgXCJweFwiKSAmJiAodC5zdHlsZVtlXSA9IGksIGkgPSB4LmNzcyh0LCBlKSksIFp0KDAsIGksIGEpO1xuICAgICAgICB9IH07XG4gICAgfSksIHguY3NzSG9va3MubWFyZ2luTGVmdCA9IHF0KHYucmVsaWFibGVNYXJnaW5MZWZ0LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgaWYgKGUpIHJldHVybiAocGFyc2VGbG9hdCgkdCh0LCBcIm1hcmdpbkxlZnRcIikpIHx8IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIGF0KHQsIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICB9KSkgKyBcInB4XCI7XG4gICAgfSksIHguZWFjaCh7IG1hcmdpbjogXCJcIiwgcGFkZGluZzogXCJcIiwgYm9yZGVyOiBcIldpZHRoXCIgfSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHguY3NzSG9va3NbdCArIGVdID0geyBleHBhbmQ6IGZ1bmN0aW9uIGV4cGFuZChpKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHMgPSB7fSwgciA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGkgPyBpLnNwbGl0KFwiIFwiKSA6IFtpXTsgbiA8IDQ7IG4rKykge1xuICAgICAgICAgICAgc1t0ICsgcnRbbl0gKyBlXSA9IHJbbl0gfHwgcltuIC0gMl0gfHwgclswXTtcbiAgICAgICAgICB9cmV0dXJuIHM7XG4gICAgICAgIH0gfSwgXCJtYXJnaW5cIiAhPT0gdCAmJiAoeC5jc3NIb29rc1t0ICsgZV0uc2V0ID0gWnQpO1xuICAgIH0pLCB4LmZuLmV4dGVuZCh7IGNzczogZnVuY3Rpb24gY3NzKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFUodGhpcywgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgciA9IHt9LFxuICAgICAgICAgICAgICBvID0gMDtpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICAgICAgZm9yIChuID0gV3QodCksIHMgPSBlLmxlbmd0aDsgbyA8IHM7IG8rKykge1xuICAgICAgICAgICAgICByW2Vbb11dID0geC5jc3ModCwgZVtvXSwgITEsIG4pO1xuICAgICAgICAgICAgfXJldHVybiByO1xuICAgICAgICAgIH1yZXR1cm4gdm9pZCAwICE9PSBpID8geC5zdHlsZSh0LCBlLCBpKSA6IHguY3NzKHQsIGUpO1xuICAgICAgICB9LCB0LCBlLCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG4gICAgICB9IH0pLCB4LlR3ZWVuID0gZWUsIGVlLnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IGVlLCBpbml0OiBmdW5jdGlvbiBpbml0KHQsIGUsIGksIG4sIHMsIHIpIHtcbiAgICAgICAgdGhpcy5lbGVtID0gdCwgdGhpcy5wcm9wID0gaSwgdGhpcy5lYXNpbmcgPSBzIHx8IHguZWFzaW5nLl9kZWZhdWx0LCB0aGlzLm9wdGlvbnMgPSBlLCB0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpLCB0aGlzLmVuZCA9IG4sIHRoaXMudW5pdCA9IHIgfHwgKHguY3NzTnVtYmVyW2ldID8gXCJcIiA6IFwicHhcIik7XG4gICAgICB9LCBjdXI6IGZ1bmN0aW9uIGN1cigpIHtcbiAgICAgICAgdmFyIHQgPSBlZS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdCAmJiB0LmdldCA/IHQuZ2V0KHRoaXMpIDogZWUucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKTtcbiAgICAgIH0sIHJ1bjogZnVuY3Rpb24gcnVuKHQpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpID0gZWUucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbiA/IHRoaXMucG9zID0gZSA9IHguZWFzaW5nW3RoaXMuZWFzaW5nXSh0LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiB0LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24pIDogdGhpcy5wb3MgPSBlID0gdCwgdGhpcy5ub3cgPSAodGhpcy5lbmQgLSB0aGlzLnN0YXJ0KSAqIGUgKyB0aGlzLnN0YXJ0LCB0aGlzLm9wdGlvbnMuc3RlcCAmJiB0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMpLCBpICYmIGkuc2V0ID8gaS5zZXQodGhpcykgOiBlZS5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLCB0aGlzO1xuICAgICAgfSB9LCBlZS5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBlZS5wcm90b3R5cGUsIGVlLnByb3BIb29rcyA9IHsgX2RlZmF1bHQ6IHsgZ2V0OiBmdW5jdGlvbiBnZXQodCkge1xuICAgICAgICAgIHZhciBlO3JldHVybiAxICE9PSB0LmVsZW0ubm9kZVR5cGUgfHwgbnVsbCAhPSB0LmVsZW1bdC5wcm9wXSAmJiBudWxsID09IHQuZWxlbS5zdHlsZVt0LnByb3BdID8gdC5lbGVtW3QucHJvcF0gOiAoZSA9IHguY3NzKHQuZWxlbSwgdC5wcm9wLCBcIlwiKSkgJiYgXCJhdXRvXCIgIT09IGUgPyBlIDogMDtcbiAgICAgICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQodCkge1xuICAgICAgICAgIHguZnguc3RlcFt0LnByb3BdID8geC5meC5zdGVwW3QucHJvcF0odCkgOiAxICE9PSB0LmVsZW0ubm9kZVR5cGUgfHwgbnVsbCA9PSB0LmVsZW0uc3R5bGVbeC5jc3NQcm9wc1t0LnByb3BdXSAmJiAheC5jc3NIb29rc1t0LnByb3BdID8gdC5lbGVtW3QucHJvcF0gPSB0Lm5vdyA6IHguc3R5bGUodC5lbGVtLCB0LnByb3AsIHQubm93ICsgdC51bml0KTtcbiAgICAgICAgfSB9IH0sIGVlLnByb3BIb29rcy5zY3JvbGxUb3AgPSBlZS5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHsgc2V0OiBmdW5jdGlvbiBzZXQodCkge1xuICAgICAgICB0LmVsZW0ubm9kZVR5cGUgJiYgdC5lbGVtLnBhcmVudE5vZGUgJiYgKHQuZWxlbVt0LnByb3BdID0gdC5ub3cpO1xuICAgICAgfSB9LCB4LmVhc2luZyA9IHsgbGluZWFyOiBmdW5jdGlvbiBsaW5lYXIodCkge1xuICAgICAgICByZXR1cm4gdDtcbiAgICAgIH0sIHN3aW5nOiBmdW5jdGlvbiBzd2luZyh0KSB7XG4gICAgICAgIHJldHVybiAuNSAtIE1hdGguY29zKHQgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB9LCBfZGVmYXVsdDogXCJzd2luZ1wiIH0sIHguZnggPSBlZS5wcm90b3R5cGUuaW5pdCwgeC5meC5zdGVwID0ge307dmFyIGllLFxuICAgICAgICBuZSxcbiAgICAgICAgc2UgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG4gICAgICAgIHJlID0gL3F1ZXVlSG9va3MkLztmdW5jdGlvbiBvZSgpIHtcbiAgICAgIG5lICYmICghMSA9PT0gby5oaWRkZW4gJiYgaS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyBpLnJlcXVlc3RBbmltYXRpb25GcmFtZShvZSkgOiBpLnNldFRpbWVvdXQob2UsIHguZnguaW50ZXJ2YWwpLCB4LmZ4LnRpY2soKSk7XG4gICAgfWZ1bmN0aW9uIGFlKCkge1xuICAgICAgcmV0dXJuIGkuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGllID0gdm9pZCAwO1xuICAgICAgfSksIGllID0gRGF0ZS5ub3coKTtcbiAgICB9ZnVuY3Rpb24gbGUodCwgZSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IDAsXG4gICAgICAgICAgcyA9IHsgaGVpZ2h0OiB0IH07Zm9yIChlID0gZSA/IDEgOiAwOyBuIDwgNDsgbiArPSAyIC0gZSkge1xuICAgICAgICBzW1wibWFyZ2luXCIgKyAoaSA9IHJ0W25dKV0gPSBzW1wicGFkZGluZ1wiICsgaV0gPSB0O1xuICAgICAgfXJldHVybiBlICYmIChzLm9wYWNpdHkgPSBzLndpZHRoID0gdCksIHM7XG4gICAgfWZ1bmN0aW9uIHVlKHQsIGUsIGkpIHtcbiAgICAgIGZvciAodmFyIG4sIHMgPSAoY2UudHdlZW5lcnNbZV0gfHwgW10pLmNvbmNhdChjZS50d2VlbmVyc1tcIipcIl0pLCByID0gMCwgbyA9IHMubGVuZ3RoOyByIDwgbzsgcisrKSB7XG4gICAgICAgIGlmIChuID0gc1tyXS5jYWxsKGksIGUsIHQpKSByZXR1cm4gbjtcbiAgICAgIH1cbiAgICB9ZnVuY3Rpb24gY2UodCwgZSwgaSkge1xuICAgICAgdmFyIG4sXG4gICAgICAgICAgcyxcbiAgICAgICAgICByID0gMCxcbiAgICAgICAgICBvID0gY2UucHJlZmlsdGVycy5sZW5ndGgsXG4gICAgICAgICAgYSA9IHguRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgbC5lbGVtO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IGZ1bmN0aW9uIGwoKSB7XG4gICAgICAgIGlmIChzKSByZXR1cm4gITE7Zm9yICh2YXIgZSA9IGllIHx8IGFlKCksIGkgPSBNYXRoLm1heCgwLCB1LnN0YXJ0VGltZSArIHUuZHVyYXRpb24gLSBlKSwgbiA9IDEgLSAoaSAvIHUuZHVyYXRpb24gfHwgMCksIHIgPSAwLCBvID0gdS50d2VlbnMubGVuZ3RoOyByIDwgbzsgcisrKSB7XG4gICAgICAgICAgdS50d2VlbnNbcl0ucnVuKG4pO1xuICAgICAgICB9cmV0dXJuIGEubm90aWZ5V2l0aCh0LCBbdSwgbiwgaV0pLCBuIDwgMSAmJiBvID8gaSA6IChvIHx8IGEubm90aWZ5V2l0aCh0LCBbdSwgMSwgMF0pLCBhLnJlc29sdmVXaXRoKHQsIFt1XSksICExKTtcbiAgICAgIH0sXG4gICAgICAgICAgdSA9IGEucHJvbWlzZSh7IGVsZW06IHQsIHByb3BzOiB4LmV4dGVuZCh7fSwgZSksIG9wdHM6IHguZXh0ZW5kKCEwLCB7IHNwZWNpYWxFYXNpbmc6IHt9LCBlYXNpbmc6IHguZWFzaW5nLl9kZWZhdWx0IH0sIGkpLCBvcmlnaW5hbFByb3BlcnRpZXM6IGUsIG9yaWdpbmFsT3B0aW9uczogaSwgc3RhcnRUaW1lOiBpZSB8fCBhZSgpLCBkdXJhdGlvbjogaS5kdXJhdGlvbiwgdHdlZW5zOiBbXSwgY3JlYXRlVHdlZW46IGZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IHguVHdlZW4odCwgdS5vcHRzLCBlLCBpLCB1Lm9wdHMuc3BlY2lhbEVhc2luZ1tlXSB8fCB1Lm9wdHMuZWFzaW5nKTtyZXR1cm4gdS50d2VlbnMucHVzaChuKSwgbjtcbiAgICAgICAgfSwgc3RvcDogZnVuY3Rpb24gc3RvcChlKSB7XG4gICAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgICBuID0gZSA/IHUudHdlZW5zLmxlbmd0aCA6IDA7aWYgKHMpIHJldHVybiB0aGlzO2ZvciAocyA9ICEwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICB1LnR3ZWVuc1tpXS5ydW4oMSk7XG4gICAgICAgICAgfXJldHVybiBlID8gKGEubm90aWZ5V2l0aCh0LCBbdSwgMSwgMF0pLCBhLnJlc29sdmVXaXRoKHQsIFt1LCBlXSkpIDogYS5yZWplY3RXaXRoKHQsIFt1LCBlXSksIHRoaXM7XG4gICAgICAgIH0gfSksXG4gICAgICAgICAgYyA9IHUucHJvcHM7Zm9yICghZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgdmFyIGksIG4sIHMsIHIsIG87Zm9yIChpIGluIHQpIHtcbiAgICAgICAgICBpZiAocyA9IGVbbiA9IEcoaSldLCByID0gdFtpXSwgQXJyYXkuaXNBcnJheShyKSAmJiAocyA9IHJbMV0sIHIgPSB0W2ldID0gclswXSksIGkgIT09IG4gJiYgKHRbbl0gPSByLCBkZWxldGUgdFtpXSksIChvID0geC5jc3NIb29rc1tuXSkgJiYgKFwiZXhwYW5kXCIgaW4gbykpIGZvciAoaSBpbiByID0gby5leHBhbmQociksIGRlbGV0ZSB0W25dLCByKSB7XG4gICAgICAgICAgICAoaSBpbiB0KSB8fCAodFtpXSA9IHJbaV0sIGVbaV0gPSBzKTtcbiAgICAgICAgICB9IGVsc2UgZVtuXSA9IHM7XG4gICAgICAgIH1cbiAgICAgIH0oYywgdS5vcHRzLnNwZWNpYWxFYXNpbmcpOyByIDwgbzsgcisrKSB7XG4gICAgICAgIGlmIChuID0gY2UucHJlZmlsdGVyc1tyXS5jYWxsKHUsIHQsIGMsIHUub3B0cykpIHJldHVybiBfKG4uc3RvcCkgJiYgKHguX3F1ZXVlSG9va3ModS5lbGVtLCB1Lm9wdHMucXVldWUpLnN0b3AgPSBuLnN0b3AuYmluZChuKSksIG47XG4gICAgICB9cmV0dXJuIHgubWFwKGMsIHVlLCB1KSwgXyh1Lm9wdHMuc3RhcnQpICYmIHUub3B0cy5zdGFydC5jYWxsKHQsIHUpLCB1LnByb2dyZXNzKHUub3B0cy5wcm9ncmVzcykuZG9uZSh1Lm9wdHMuZG9uZSwgdS5vcHRzLmNvbXBsZXRlKS5mYWlsKHUub3B0cy5mYWlsKS5hbHdheXModS5vcHRzLmFsd2F5cyksIHguZngudGltZXIoeC5leHRlbmQobCwgeyBlbGVtOiB0LCBhbmltOiB1LCBxdWV1ZTogdS5vcHRzLnF1ZXVlIH0pKSwgdTtcbiAgICB9eC5BbmltYXRpb24gPSB4LmV4dGVuZChjZSwgeyB0d2VlbmVyczogeyBcIipcIjogW2Z1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSB0aGlzLmNyZWF0ZVR3ZWVuKHQsIGUpO3JldHVybiBsdChpLmVsZW0sIHQsIHN0LmV4ZWMoZSksIGkpLCBpO1xuICAgICAgICB9XSB9LCB0d2VlbmVyOiBmdW5jdGlvbiB0d2VlbmVyKHQsIGUpIHtcbiAgICAgICAgXyh0KSA/IChlID0gdCwgdCA9IFtcIipcIl0pIDogdCA9IHQubWF0Y2goRik7Zm9yICh2YXIgaSwgbiA9IDAsIHMgPSB0Lmxlbmd0aDsgbiA8IHM7IG4rKykge1xuICAgICAgICAgIGkgPSB0W25dLCBjZS50d2VlbmVyc1tpXSA9IGNlLnR3ZWVuZXJzW2ldIHx8IFtdLCBjZS50d2VlbmVyc1tpXS51bnNoaWZ0KGUpO1xuICAgICAgICB9XG4gICAgICB9LCBwcmVmaWx0ZXJzOiBbZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgaCA9IFwid2lkdGhcIiBpbiBlIHx8IFwiaGVpZ2h0XCIgaW4gZSxcbiAgICAgICAgICAgIGQgPSB0aGlzLFxuICAgICAgICAgICAgcCA9IHt9LFxuICAgICAgICAgICAgZiA9IHQuc3R5bGUsXG4gICAgICAgICAgICBnID0gdC5ub2RlVHlwZSAmJiBvdCh0KSxcbiAgICAgICAgICAgIG0gPSBaLmdldCh0LCBcImZ4c2hvd1wiKTtmb3IgKG4gaW4gaS5xdWV1ZSB8fCAobnVsbCA9PSAobyA9IHguX3F1ZXVlSG9va3ModCwgXCJmeFwiKSkudW5xdWV1ZWQgJiYgKG8udW5xdWV1ZWQgPSAwLCBhID0gby5lbXB0eS5maXJlLCBvLmVtcHR5LmZpcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgby51bnF1ZXVlZCB8fCBhKCk7XG4gICAgICAgIH0pLCBvLnVucXVldWVkKyssIGQuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvLnVucXVldWVkLS0sIHgucXVldWUodCwgXCJmeFwiKS5sZW5ndGggfHwgby5lbXB0eS5maXJlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pKSwgZSkge1xuICAgICAgICAgIGlmIChzID0gZVtuXSwgc2UudGVzdChzKSkge1xuICAgICAgICAgICAgaWYgKGRlbGV0ZSBlW25dLCByID0gciB8fCBcInRvZ2dsZVwiID09PSBzLCBzID09PSAoZyA/IFwiaGlkZVwiIDogXCJzaG93XCIpKSB7XG4gICAgICAgICAgICAgIGlmIChcInNob3dcIiAhPT0gcyB8fCAhbSB8fCB2b2lkIDAgPT09IG1bbl0pIGNvbnRpbnVlO2cgPSAhMDtcbiAgICAgICAgICAgIH1wW25dID0gbSAmJiBtW25dIHx8IHguc3R5bGUodCwgbik7XG4gICAgICAgICAgfVxuICAgICAgICB9aWYgKChsID0gIXguaXNFbXB0eU9iamVjdChlKSkgfHwgIXguaXNFbXB0eU9iamVjdChwKSkgZm9yIChuIGluIGggJiYgMSA9PT0gdC5ub2RlVHlwZSAmJiAoaS5vdmVyZmxvdyA9IFtmLm92ZXJmbG93LCBmLm92ZXJmbG93WCwgZi5vdmVyZmxvd1ldLCBudWxsID09ICh1ID0gbSAmJiBtLmRpc3BsYXkpICYmICh1ID0gWi5nZXQodCwgXCJkaXNwbGF5XCIpKSwgXCJub25lXCIgPT09IChjID0geC5jc3ModCwgXCJkaXNwbGF5XCIpKSAmJiAodSA/IGMgPSB1IDogKGh0KFt0XSwgITApLCB1ID0gdC5zdHlsZS5kaXNwbGF5IHx8IHUsIGMgPSB4LmNzcyh0LCBcImRpc3BsYXlcIiksIGh0KFt0XSkpKSwgKFwiaW5saW5lXCIgPT09IGMgfHwgXCJpbmxpbmUtYmxvY2tcIiA9PT0gYyAmJiBudWxsICE9IHUpICYmIFwibm9uZVwiID09PSB4LmNzcyh0LCBcImZsb2F0XCIpICYmIChsIHx8IChkLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGYuZGlzcGxheSA9IHU7XG4gICAgICAgIH0pLCBudWxsID09IHUgJiYgKGMgPSBmLmRpc3BsYXksIHUgPSBcIm5vbmVcIiA9PT0gYyA/IFwiXCIgOiBjKSksIGYuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCIpKSwgaS5vdmVyZmxvdyAmJiAoZi5vdmVyZmxvdyA9IFwiaGlkZGVuXCIsIGQuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmLm92ZXJmbG93ID0gaS5vdmVyZmxvd1swXSwgZi5vdmVyZmxvd1ggPSBpLm92ZXJmbG93WzFdLCBmLm92ZXJmbG93WSA9IGkub3ZlcmZsb3dbMl07XG4gICAgICAgIH0pKSwgbCA9ICExLCBwKSB7XG4gICAgICAgICAgbCB8fCAobSA/IFwiaGlkZGVuXCIgaW4gbSAmJiAoZyA9IG0uaGlkZGVuKSA6IG0gPSBaLmFjY2Vzcyh0LCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHUgfSksIHIgJiYgKG0uaGlkZGVuID0gIWcpLCBnICYmIGh0KFt0XSwgITApLCBkLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChuIGluIGcgfHwgaHQoW3RdKSwgWi5yZW1vdmUodCwgXCJmeHNob3dcIiksIHApIHtcbiAgICAgICAgICAgICAgeC5zdHlsZSh0LCBuLCBwW25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSksIGwgPSB1ZShnID8gbVtuXSA6IDAsIG4sIGQpLCBuIGluIG0gfHwgKG1bbl0gPSBsLnN0YXJ0LCBnICYmIChsLmVuZCA9IGwuc3RhcnQsIGwuc3RhcnQgPSAwKSk7XG4gICAgICAgIH1cbiAgICAgIH1dLCBwcmVmaWx0ZXI6IGZ1bmN0aW9uIHByZWZpbHRlcih0LCBlKSB7XG4gICAgICAgIGUgPyBjZS5wcmVmaWx0ZXJzLnVuc2hpZnQodCkgOiBjZS5wcmVmaWx0ZXJzLnB1c2godCk7XG4gICAgICB9IH0pLCB4LnNwZWVkID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgIHZhciBuID0gdCAmJiBcIm9iamVjdFwiID09ICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHQpKSA/IHguZXh0ZW5kKHt9LCB0KSA6IHsgY29tcGxldGU6IGkgfHwgIWkgJiYgZSB8fCBfKHQpICYmIHQsIGR1cmF0aW9uOiB0LCBlYXNpbmc6IGkgJiYgZSB8fCBlICYmICFfKGUpICYmIGUgfTtyZXR1cm4geC5meC5vZmYgPyBuLmR1cmF0aW9uID0gMCA6IFwibnVtYmVyXCIgIT0gdHlwZW9mIG4uZHVyYXRpb24gJiYgKG4uZHVyYXRpb24gaW4geC5meC5zcGVlZHMgPyBuLmR1cmF0aW9uID0geC5meC5zcGVlZHNbbi5kdXJhdGlvbl0gOiBuLmR1cmF0aW9uID0geC5meC5zcGVlZHMuX2RlZmF1bHQpLCBudWxsICE9IG4ucXVldWUgJiYgITAgIT09IG4ucXVldWUgfHwgKG4ucXVldWUgPSBcImZ4XCIpLCBuLm9sZCA9IG4uY29tcGxldGUsIG4uY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF8obi5vbGQpICYmIG4ub2xkLmNhbGwodGhpcyksIG4ucXVldWUgJiYgeC5kZXF1ZXVlKHRoaXMsIG4ucXVldWUpO1xuICAgICAgfSwgbjtcbiAgICB9LCB4LmZuLmV4dGVuZCh7IGZhZGVUbzogZnVuY3Rpb24gZmFkZVRvKHQsIGUsIGksIG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG90KS5jc3MoXCJvcGFjaXR5XCIsIDApLnNob3coKS5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogZSB9LCB0LCBpLCBuKTtcbiAgICAgIH0sIGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUodCwgZSwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IHguaXNFbXB0eU9iamVjdCh0KSxcbiAgICAgICAgICAgIHIgPSB4LnNwZWVkKGUsIGksIG4pLFxuICAgICAgICAgICAgbyA9IGZ1bmN0aW9uIG8oKSB7XG4gICAgICAgICAgdmFyIGUgPSBjZSh0aGlzLCB4LmV4dGVuZCh7fSwgdCksIHIpOyhzIHx8IFouZ2V0KHRoaXMsIFwiZmluaXNoXCIpKSAmJiBlLnN0b3AoITApO1xuICAgICAgICB9O3JldHVybiBvLmZpbmlzaCA9IG8sIHMgfHwgITEgPT09IHIucXVldWUgPyB0aGlzLmVhY2gobykgOiB0aGlzLnF1ZXVlKHIucXVldWUsIG8pO1xuICAgICAgfSwgc3RvcDogZnVuY3Rpb24gc3RvcCh0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuID0gZnVuY3Rpb24gbih0KSB7XG4gICAgICAgICAgdmFyIGUgPSB0LnN0b3A7ZGVsZXRlIHQuc3RvcCwgZShpKTtcbiAgICAgICAgfTtyZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCAmJiAoaSA9IGUsIGUgPSB0LCB0ID0gdm9pZCAwKSwgZSAmJiAhMSAhPT0gdCAmJiB0aGlzLnF1ZXVlKHQgfHwgXCJmeFwiLCBbXSksIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSAhMCxcbiAgICAgICAgICAgICAgcyA9IG51bGwgIT0gdCAmJiB0ICsgXCJxdWV1ZUhvb2tzXCIsXG4gICAgICAgICAgICAgIHIgPSB4LnRpbWVycyxcbiAgICAgICAgICAgICAgbyA9IFouZ2V0KHRoaXMpO2lmIChzKSBvW3NdICYmIG9bc10uc3RvcCAmJiBuKG9bc10pO2Vsc2UgZm9yIChzIGluIG8pIHtcbiAgICAgICAgICAgIG9bc10gJiYgb1tzXS5zdG9wICYmIHJlLnRlc3QocykgJiYgbihvW3NdKTtcbiAgICAgICAgICB9Zm9yIChzID0gci5sZW5ndGg7IHMtLTspIHtcbiAgICAgICAgICAgIHJbc10uZWxlbSAhPT0gdGhpcyB8fCBudWxsICE9IHQgJiYgcltzXS5xdWV1ZSAhPT0gdCB8fCAocltzXS5hbmltLnN0b3AoaSksIGUgPSAhMSwgci5zcGxpY2UocywgMSkpO1xuICAgICAgICAgIH0hZSAmJiBpIHx8IHguZGVxdWV1ZSh0aGlzLCB0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaCh0KSB7XG4gICAgICAgIHJldHVybiAhMSAhPT0gdCAmJiAodCA9IHQgfHwgXCJmeFwiKSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgaSA9IFouZ2V0KHRoaXMpLFxuICAgICAgICAgICAgICBuID0gaVt0ICsgXCJxdWV1ZVwiXSxcbiAgICAgICAgICAgICAgcyA9IGlbdCArIFwicXVldWVIb29rc1wiXSxcbiAgICAgICAgICAgICAgciA9IHgudGltZXJzLFxuICAgICAgICAgICAgICBvID0gbiA/IG4ubGVuZ3RoIDogMDtmb3IgKGkuZmluaXNoID0gITAsIHgucXVldWUodGhpcywgdCwgW10pLCBzICYmIHMuc3RvcCAmJiBzLnN0b3AuY2FsbCh0aGlzLCAhMCksIGUgPSByLmxlbmd0aDsgZS0tOykge1xuICAgICAgICAgICAgcltlXS5lbGVtID09PSB0aGlzICYmIHJbZV0ucXVldWUgPT09IHQgJiYgKHJbZV0uYW5pbS5zdG9wKCEwKSwgci5zcGxpY2UoZSwgMSkpO1xuICAgICAgICAgIH1mb3IgKGUgPSAwOyBlIDwgbzsgZSsrKSB7XG4gICAgICAgICAgICBuW2VdICYmIG5bZV0uZmluaXNoICYmIG5bZV0uZmluaXNoLmNhbGwodGhpcyk7XG4gICAgICAgICAgfWRlbGV0ZSBpLmZpbmlzaDtcbiAgICAgICAgfSk7XG4gICAgICB9IH0pLCB4LmVhY2goW1widG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICB2YXIgaSA9IHguZm5bZV07eC5mbltlXSA9IGZ1bmN0aW9uICh0LCBuLCBzKSB7XG4gICAgICAgIHJldHVybiBudWxsID09IHQgfHwgXCJib29sZWFuXCIgPT0gdHlwZW9mIHQgPyBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0aGlzLmFuaW1hdGUobGUoZSwgITApLCB0LCBuLCBzKTtcbiAgICAgIH07XG4gICAgfSksIHguZWFjaCh7IHNsaWRlRG93bjogbGUoXCJzaG93XCIpLCBzbGlkZVVwOiBsZShcImhpZGVcIiksIHNsaWRlVG9nZ2xlOiBsZShcInRvZ2dsZVwiKSwgZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sIGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSwgZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH0gfSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHguZm5bdF0gPSBmdW5jdGlvbiAodCwgaSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlKGUsIHQsIGksIG4pO1xuICAgICAgfTtcbiAgICB9KSwgeC50aW1lcnMgPSBbXSwgeC5meC50aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHQsXG4gICAgICAgICAgZSA9IDAsXG4gICAgICAgICAgaSA9IHgudGltZXJzO2ZvciAoaWUgPSBEYXRlLm5vdygpOyBlIDwgaS5sZW5ndGg7IGUrKykge1xuICAgICAgICAodCA9IGlbZV0pKCkgfHwgaVtlXSAhPT0gdCB8fCBpLnNwbGljZShlLS0sIDEpO1xuICAgICAgfWkubGVuZ3RoIHx8IHguZnguc3RvcCgpLCBpZSA9IHZvaWQgMDtcbiAgICB9LCB4LmZ4LnRpbWVyID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHgudGltZXJzLnB1c2godCksIHguZnguc3RhcnQoKTtcbiAgICB9LCB4LmZ4LmludGVydmFsID0gMTMsIHguZnguc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBuZSB8fCAobmUgPSAhMCwgb2UoKSk7XG4gICAgfSwgeC5meC5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgbmUgPSBudWxsO1xuICAgIH0sIHguZnguc3BlZWRzID0geyBzbG93OiA2MDAsIGZhc3Q6IDIwMCwgX2RlZmF1bHQ6IDQwMCB9LCB4LmZuLmRlbGF5ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHJldHVybiB0ID0geC5meCAmJiB4LmZ4LnNwZWVkc1t0XSB8fCB0LCBlID0gZSB8fCBcImZ4XCIsIHRoaXMucXVldWUoZSwgZnVuY3Rpb24gKGUsIG4pIHtcbiAgICAgICAgdmFyIHMgPSBpLnNldFRpbWVvdXQoZSwgdCk7bi5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGkuY2xlYXJUaW1lb3V0KHMpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHQgPSBvLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcbiAgICAgICAgICBlID0gby5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLmFwcGVuZENoaWxkKG8uY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7dC50eXBlID0gXCJjaGVja2JveFwiLCB2LmNoZWNrT24gPSBcIlwiICE9PSB0LnZhbHVlLCB2Lm9wdFNlbGVjdGVkID0gZS5zZWxlY3RlZCwgKHQgPSBvLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkudmFsdWUgPSBcInRcIiwgdC50eXBlID0gXCJyYWRpb1wiLCB2LnJhZGlvVmFsdWUgPSBcInRcIiA9PT0gdC52YWx1ZTtcbiAgICB9KCk7dmFyIGhlLFxuICAgICAgICBkZSA9IHguZXhwci5hdHRySGFuZGxlO3guZm4uZXh0ZW5kKHsgYXR0cjogZnVuY3Rpb24gYXR0cih0LCBlKSB7XG4gICAgICAgIHJldHVybiBVKHRoaXMsIHguYXR0ciwgdCwgZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEpO1xuICAgICAgfSwgcmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cih0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHgucmVtb3ZlQXR0cih0aGlzLCB0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IH0pLCB4LmV4dGVuZCh7IGF0dHI6IGZ1bmN0aW9uIGF0dHIodCwgZSwgaSkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByID0gdC5ub2RlVHlwZTtpZiAoMyAhPT0gciAmJiA4ICE9PSByICYmIDIgIT09IHIpIHJldHVybiB2b2lkIDAgPT09IHQuZ2V0QXR0cmlidXRlID8geC5wcm9wKHQsIGUsIGkpIDogKDEgPT09IHIgJiYgeC5pc1hNTERvYyh0KSB8fCAocyA9IHguYXR0ckhvb2tzW2UudG9Mb3dlckNhc2UoKV0gfHwgKHguZXhwci5tYXRjaC5ib29sLnRlc3QoZSkgPyBoZSA6IHZvaWQgMCkpLCB2b2lkIDAgIT09IGkgPyBudWxsID09PSBpID8gdm9pZCB4LnJlbW92ZUF0dHIodCwgZSkgOiBzICYmIFwic2V0XCIgaW4gcyAmJiB2b2lkIDAgIT09IChuID0gcy5zZXQodCwgaSwgZSkpID8gbiA6ICh0LnNldEF0dHJpYnV0ZShlLCBpICsgXCJcIiksIGkpIDogcyAmJiBcImdldFwiIGluIHMgJiYgbnVsbCAhPT0gKG4gPSBzLmdldCh0LCBlKSkgPyBuIDogbnVsbCA9PSAobiA9IHguZmluZC5hdHRyKHQsIGUpKSA/IHZvaWQgMCA6IG4pO1xuICAgICAgfSwgYXR0ckhvb2tzOiB7IHR5cGU6IHsgc2V0OiBmdW5jdGlvbiBzZXQodCwgZSkge1xuICAgICAgICAgICAgaWYgKCF2LnJhZGlvVmFsdWUgJiYgXCJyYWRpb1wiID09PSBlICYmIGoodCwgXCJpbnB1dFwiKSkge1xuICAgICAgICAgICAgICB2YXIgaSA9IHQudmFsdWU7cmV0dXJuIHQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlKSwgaSAmJiAodC52YWx1ZSA9IGkpLCBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gfSB9LCByZW1vdmVBdHRyOiBmdW5jdGlvbiByZW1vdmVBdHRyKHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gMCxcbiAgICAgICAgICAgIHMgPSBlICYmIGUubWF0Y2goRik7aWYgKHMgJiYgMSA9PT0gdC5ub2RlVHlwZSkgZm9yICg7IGkgPSBzW24rK107KSB7XG4gICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUoaSk7XG4gICAgICAgIH1cbiAgICAgIH0gfSksIGhlID0geyBzZXQ6IGZ1bmN0aW9uIHNldCh0LCBlLCBpKSB7XG4gICAgICAgIHJldHVybiAhMSA9PT0gZSA/IHgucmVtb3ZlQXR0cih0LCBpKSA6IHQuc2V0QXR0cmlidXRlKGksIGkpLCBpO1xuICAgICAgfSB9LCB4LmVhY2goeC5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgdmFyIGkgPSBkZVtlXSB8fCB4LmZpbmQuYXR0cjtkZVtlXSA9IGZ1bmN0aW9uICh0LCBlLCBuKSB7XG4gICAgICAgIHZhciBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8gPSBlLnRvTG93ZXJDYXNlKCk7cmV0dXJuIG4gfHwgKHIgPSBkZVtvXSwgZGVbb10gPSBzLCBzID0gbnVsbCAhPSBpKHQsIGUsIG4pID8gbyA6IG51bGwsIGRlW29dID0gciksIHM7XG4gICAgICB9O1xuICAgIH0pO3ZhciBwZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG4gICAgICAgIGZlID0gL14oPzphfGFyZWEpJC9pO2Z1bmN0aW9uIGdlKHQpIHtcbiAgICAgIHJldHVybiAodC5tYXRjaChGKSB8fCBbXSkuam9pbihcIiBcIik7XG4gICAgfWZ1bmN0aW9uIG1lKHQpIHtcbiAgICAgIHJldHVybiB0LmdldEF0dHJpYnV0ZSAmJiB0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCI7XG4gICAgfWZ1bmN0aW9uIHZlKHQpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHQpID8gdCA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgdC5tYXRjaChGKSB8fCBbXTtcbiAgICB9eC5mbi5leHRlbmQoeyBwcm9wOiBmdW5jdGlvbiBwcm9wKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIFUodGhpcywgeC5wcm9wLCB0LCBlLCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG4gICAgICB9LCByZW1vdmVQcm9wOiBmdW5jdGlvbiByZW1vdmVQcm9wKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXNbeC5wcm9wRml4W3RdIHx8IHRdO1xuICAgICAgICB9KTtcbiAgICAgIH0gfSksIHguZXh0ZW5kKHsgcHJvcDogZnVuY3Rpb24gcHJvcCh0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIgPSB0Lm5vZGVUeXBlO2lmICgzICE9PSByICYmIDggIT09IHIgJiYgMiAhPT0gcikgcmV0dXJuIDEgPT09IHIgJiYgeC5pc1hNTERvYyh0KSB8fCAoZSA9IHgucHJvcEZpeFtlXSB8fCBlLCBzID0geC5wcm9wSG9va3NbZV0pLCB2b2lkIDAgIT09IGkgPyBzICYmIFwic2V0XCIgaW4gcyAmJiB2b2lkIDAgIT09IChuID0gcy5zZXQodCwgaSwgZSkpID8gbiA6IHRbZV0gPSBpIDogcyAmJiBcImdldFwiIGluIHMgJiYgbnVsbCAhPT0gKG4gPSBzLmdldCh0LCBlKSkgPyBuIDogdFtlXTtcbiAgICAgIH0sIHByb3BIb29rczogeyB0YWJJbmRleDogeyBnZXQ6IGZ1bmN0aW9uIGdldCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHguZmluZC5hdHRyKHQsIFwidGFiaW5kZXhcIik7cmV0dXJuIGUgPyBwYXJzZUludChlLCAxMCkgOiBwZS50ZXN0KHQubm9kZU5hbWUpIHx8IGZlLnRlc3QodC5ub2RlTmFtZSkgJiYgdC5ocmVmID8gMCA6IC0xO1xuICAgICAgICAgIH0gfSB9LCBwcm9wRml4OiB7IGZvcjogXCJodG1sRm9yXCIsIGNsYXNzOiBcImNsYXNzTmFtZVwiIH0gfSksIHYub3B0U2VsZWN0ZWQgfHwgKHgucHJvcEhvb2tzLnNlbGVjdGVkID0geyBnZXQ6IGZ1bmN0aW9uIGdldCh0KSB7XG4gICAgICAgIHZhciBlID0gdC5wYXJlbnROb2RlO3JldHVybiBlICYmIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgbnVsbDtcbiAgICAgIH0sIHNldDogZnVuY3Rpb24gc2V0KHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LnBhcmVudE5vZGU7ZSAmJiAoZS5zZWxlY3RlZEluZGV4LCBlLnBhcmVudE5vZGUgJiYgZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgfSB9KSwgeC5lYWNoKFtcInRhYkluZGV4XCIsIFwicmVhZE9ubHlcIiwgXCJtYXhMZW5ndGhcIiwgXCJjZWxsU3BhY2luZ1wiLCBcImNlbGxQYWRkaW5nXCIsIFwicm93U3BhblwiLCBcImNvbFNwYW5cIiwgXCJ1c2VNYXBcIiwgXCJmcmFtZUJvcmRlclwiLCBcImNvbnRlbnRFZGl0YWJsZVwiXSwgZnVuY3Rpb24gKCkge1xuICAgICAgeC5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV0gPSB0aGlzO1xuICAgIH0pLCB4LmZuLmV4dGVuZCh7IGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcyh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCA9IDA7aWYgKF8odCkpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB4KHRoaXMpLmFkZENsYXNzKHQuY2FsbCh0aGlzLCBlLCBtZSh0aGlzKSkpO1xuICAgICAgICB9KTtpZiAoKGUgPSB2ZSh0KSkubGVuZ3RoKSBmb3IgKDsgaSA9IHRoaXNbbCsrXTspIHtcbiAgICAgICAgICBpZiAocyA9IG1lKGkpLCBuID0gMSA9PT0gaS5ub2RlVHlwZSAmJiBcIiBcIiArIGdlKHMpICsgXCIgXCIpIHtcbiAgICAgICAgICAgIGZvciAobyA9IDA7IHIgPSBlW28rK107KSB7XG4gICAgICAgICAgICAgIG4uaW5kZXhPZihcIiBcIiArIHIgKyBcIiBcIikgPCAwICYmIChuICs9IHIgKyBcIiBcIik7XG4gICAgICAgICAgICB9cyAhPT0gKGEgPSBnZShuKSkgJiYgaS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH0sIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCA9IDA7aWYgKF8odCkpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB4KHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLCBlLCBtZSh0aGlzKSkpO1xuICAgICAgICB9KTtpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLCBcIlwiKTtpZiAoKGUgPSB2ZSh0KSkubGVuZ3RoKSBmb3IgKDsgaSA9IHRoaXNbbCsrXTspIHtcbiAgICAgICAgICBpZiAocyA9IG1lKGkpLCBuID0gMSA9PT0gaS5ub2RlVHlwZSAmJiBcIiBcIiArIGdlKHMpICsgXCIgXCIpIHtcbiAgICAgICAgICAgIGZvciAobyA9IDA7IHIgPSBlW28rK107KSB7XG4gICAgICAgICAgICAgIGZvciAoOyBuLmluZGV4T2YoXCIgXCIgKyByICsgXCIgXCIpID4gLTE7KSB7XG4gICAgICAgICAgICAgICAgbiA9IG4ucmVwbGFjZShcIiBcIiArIHIgKyBcIiBcIiwgXCIgXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cyAhPT0gKGEgPSBnZShuKSkgJiYgaS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH0sIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiB0b2dnbGVDbGFzcyh0LCBlKSB7XG4gICAgICAgIHZhciBpID0gdHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KSxcbiAgICAgICAgICAgIG4gPSBcInN0cmluZ1wiID09PSBpIHx8IEFycmF5LmlzQXJyYXkodCk7cmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiBlICYmIG4gPyBlID8gdGhpcy5hZGRDbGFzcyh0KSA6IHRoaXMucmVtb3ZlQ2xhc3ModCkgOiBfKHQpID8gdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgeCh0aGlzKS50b2dnbGVDbGFzcyh0LmNhbGwodGhpcywgaSwgbWUodGhpcyksIGUpLCBlKTtcbiAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlLCBzLCByLCBvO2lmIChuKSBmb3IgKHMgPSAwLCByID0geCh0aGlzKSwgbyA9IHZlKHQpOyBlID0gb1tzKytdOykge1xuICAgICAgICAgICAgci5oYXNDbGFzcyhlKSA/IHIucmVtb3ZlQ2xhc3MoZSkgOiByLmFkZENsYXNzKGUpO1xuICAgICAgICAgIH0gZWxzZSB2b2lkIDAgIT09IHQgJiYgXCJib29sZWFuXCIgIT09IGkgfHwgKChlID0gbWUodGhpcykpICYmIFouc2V0KHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBlKSwgdGhpcy5zZXRBdHRyaWJ1dGUgJiYgdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBlIHx8ICExID09PSB0ID8gXCJcIiA6IFouZ2V0KHRoaXMsIFwiX19jbGFzc05hbWVfX1wiKSB8fCBcIlwiKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgaGFzQ2xhc3M6IGZ1bmN0aW9uIGhhc0NsYXNzKHQpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbiA9IDA7Zm9yIChlID0gXCIgXCIgKyB0ICsgXCIgXCI7IGkgPSB0aGlzW24rK107KSB7XG4gICAgICAgICAgaWYgKDEgPT09IGkubm9kZVR5cGUgJiYgKFwiIFwiICsgZ2UobWUoaSkpICsgXCIgXCIpLmluZGV4T2YoZSkgPiAtMSkgcmV0dXJuICEwO1xuICAgICAgICB9cmV0dXJuICExO1xuICAgICAgfSB9KTt2YXIgX2UgPSAvXFxyL2c7eC5mbi5leHRlbmQoeyB2YWw6IGZ1bmN0aW9uIHZhbCh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzID0gdGhpc1swXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChuID0gXyh0KSwgdGhpcy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgdmFyIHM7MSA9PT0gdGhpcy5ub2RlVHlwZSAmJiAobnVsbCA9PSAocyA9IG4gPyB0LmNhbGwodGhpcywgaSwgeCh0aGlzKS52YWwoKSkgOiB0KSA/IHMgPSBcIlwiIDogXCJudW1iZXJcIiA9PSB0eXBlb2YgcyA/IHMgKz0gXCJcIiA6IEFycmF5LmlzQXJyYXkocykgJiYgKHMgPSB4Lm1hcChzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IFwiXCIgOiB0ICsgXCJcIjtcbiAgICAgICAgICB9KSksIChlID0geC52YWxIb29rc1t0aGlzLnR5cGVdIHx8IHgudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkgJiYgXCJzZXRcIiBpbiBlICYmIHZvaWQgMCAhPT0gZS5zZXQodGhpcywgcywgXCJ2YWx1ZVwiKSB8fCAodGhpcy52YWx1ZSA9IHMpKTtcbiAgICAgICAgfSkpIDogcyA/IChlID0geC52YWxIb29rc1tzLnR5cGVdIHx8IHgudmFsSG9va3Nbcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkgJiYgXCJnZXRcIiBpbiBlICYmIHZvaWQgMCAhPT0gKGkgPSBlLmdldChzLCBcInZhbHVlXCIpKSA/IGkgOiBcInN0cmluZ1wiID09IHR5cGVvZiAoaSA9IHMudmFsdWUpID8gaS5yZXBsYWNlKF9lLCBcIlwiKSA6IG51bGwgPT0gaSA/IFwiXCIgOiBpIDogdm9pZCAwO1xuICAgICAgfSB9KSwgeC5leHRlbmQoeyB2YWxIb29rczogeyBvcHRpb246IHsgZ2V0OiBmdW5jdGlvbiBnZXQodCkge1xuICAgICAgICAgICAgdmFyIGUgPSB4LmZpbmQuYXR0cih0LCBcInZhbHVlXCIpO3JldHVybiBudWxsICE9IGUgPyBlIDogZ2UoeC50ZXh0KHQpKTtcbiAgICAgICAgICB9IH0sIHNlbGVjdDogeyBnZXQ6IGZ1bmN0aW9uIGdldCh0KSB7XG4gICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgcyA9IHQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICByID0gdC5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgICAgIG8gPSBcInNlbGVjdC1vbmVcIiA9PT0gdC50eXBlLFxuICAgICAgICAgICAgICAgIGEgPSBvID8gbnVsbCA6IFtdLFxuICAgICAgICAgICAgICAgIGwgPSBvID8gciArIDEgOiBzLmxlbmd0aDtmb3IgKG4gPSByIDwgMCA/IGwgOiBvID8gciA6IDA7IG4gPCBsOyBuKyspIHtcbiAgICAgICAgICAgICAgaWYgKCgoaSA9IHNbbl0pLnNlbGVjdGVkIHx8IG4gPT09IHIpICYmICFpLmRpc2FibGVkICYmICghaS5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqKGkucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSA9IHgoaSkudmFsKCksIG8pIHJldHVybiBlO2EucHVzaChlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICAgIH0sIHNldDogZnVuY3Rpb24gc2V0KHQsIGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGksIG4sIHMgPSB0Lm9wdGlvbnMsIHIgPSB4Lm1ha2VBcnJheShlKSwgbyA9IHMubGVuZ3RoOyBvLS07KSB7XG4gICAgICAgICAgICAgICgobiA9IHNbb10pLnNlbGVjdGVkID0geC5pbkFycmF5KHgudmFsSG9va3Mub3B0aW9uLmdldChuKSwgcikgPiAtMSkgJiYgKGkgPSAhMCk7XG4gICAgICAgICAgICB9cmV0dXJuIGkgfHwgKHQuc2VsZWN0ZWRJbmRleCA9IC0xKSwgcjtcbiAgICAgICAgICB9IH0gfSB9KSwgeC5lYWNoKFtcInJhZGlvXCIsIFwiY2hlY2tib3hcIl0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHgudmFsSG9va3NbdGhpc10gPSB7IHNldDogZnVuY3Rpb24gc2V0KHQsIGUpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkgcmV0dXJuIHQuY2hlY2tlZCA9IHguaW5BcnJheSh4KHQpLnZhbCgpLCBlKSA+IC0xO1xuICAgICAgICB9IH0sIHYuY2hlY2tPbiB8fCAoeC52YWxIb29rc1t0aGlzXS5nZXQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PT0gdC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA/IFwib25cIiA6IHQudmFsdWU7XG4gICAgICB9KTtcbiAgICB9KSwgdi5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiBpO3ZhciBiZSA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcbiAgICAgICAgeWUgPSBmdW5jdGlvbiB5ZSh0KSB7XG4gICAgICB0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07eC5leHRlbmQoeC5ldmVudCwgeyB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKHQsIGUsIG4sIHMpIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBwLFxuICAgICAgICAgICAgZyA9IFtuIHx8IG9dLFxuICAgICAgICAgICAgbSA9IGYuY2FsbCh0LCBcInR5cGVcIikgPyB0LnR5cGUgOiB0LFxuICAgICAgICAgICAgdiA9IGYuY2FsbCh0LCBcIm5hbWVzcGFjZVwiKSA/IHQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO2lmIChhID0gcCA9IGwgPSBuID0gbiB8fCBvLCAzICE9PSBuLm5vZGVUeXBlICYmIDggIT09IG4ubm9kZVR5cGUgJiYgIWJlLnRlc3QobSArIHguZXZlbnQudHJpZ2dlcmVkKSAmJiAobS5pbmRleE9mKFwiLlwiKSA+IC0xICYmICh2ID0gbS5zcGxpdChcIi5cIiksIG0gPSB2LnNoaWZ0KCksIHYuc29ydCgpKSwgYyA9IG0uaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIG0sICh0ID0gdFt4LmV4cGFuZG9dID8gdCA6IG5ldyB4LkV2ZW50KG0sIFwib2JqZWN0XCIgPT0gKHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodCkpICYmIHQpKS5pc1RyaWdnZXIgPSBzID8gMiA6IDMsIHQubmFtZXNwYWNlID0gdi5qb2luKFwiLlwiKSwgdC5ybmFtZXNwYWNlID0gdC5uYW1lc3BhY2UgPyBuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIgKyB2LmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIpIDogbnVsbCwgdC5yZXN1bHQgPSB2b2lkIDAsIHQudGFyZ2V0IHx8ICh0LnRhcmdldCA9IG4pLCBlID0gbnVsbCA9PSBlID8gW3RdIDogeC5tYWtlQXJyYXkoZSwgW3RdKSwgZCA9IHguZXZlbnQuc3BlY2lhbFttXSB8fCB7fSwgcyB8fCAhZC50cmlnZ2VyIHx8ICExICE9PSBkLnRyaWdnZXIuYXBwbHkobiwgZSkpKSB7XG4gICAgICAgICAgaWYgKCFzICYmICFkLm5vQnViYmxlICYmICFiKG4pKSB7XG4gICAgICAgICAgICBmb3IgKHUgPSBkLmRlbGVnYXRlVHlwZSB8fCBtLCBiZS50ZXN0KHUgKyBtKSB8fCAoYSA9IGEucGFyZW50Tm9kZSk7IGE7IGEgPSBhLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgZy5wdXNoKGEpLCBsID0gYTtcbiAgICAgICAgICAgIH1sID09PSAobi5vd25lckRvY3VtZW50IHx8IG8pICYmIGcucHVzaChsLmRlZmF1bHRWaWV3IHx8IGwucGFyZW50V2luZG93IHx8IGkpO1xuICAgICAgICAgIH1mb3IgKHIgPSAwOyAoYSA9IGdbcisrXSkgJiYgIXQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTspIHtcbiAgICAgICAgICAgIHAgPSBhLCB0LnR5cGUgPSByID4gMSA/IHUgOiBkLmJpbmRUeXBlIHx8IG0sIChoID0gKFouZ2V0KGEsIFwiZXZlbnRzXCIpIHx8IHt9KVt0LnR5cGVdICYmIFouZ2V0KGEsIFwiaGFuZGxlXCIpKSAmJiBoLmFwcGx5KGEsIGUpLCAoaCA9IGMgJiYgYVtjXSkgJiYgaC5hcHBseSAmJiBYKGEpICYmICh0LnJlc3VsdCA9IGguYXBwbHkoYSwgZSksICExID09PSB0LnJlc3VsdCAmJiB0LnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICAgIH1yZXR1cm4gdC50eXBlID0gbSwgcyB8fCB0LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGQuX2RlZmF1bHQgJiYgITEgIT09IGQuX2RlZmF1bHQuYXBwbHkoZy5wb3AoKSwgZSkgfHwgIVgobikgfHwgYyAmJiBfKG5bbV0pICYmICFiKG4pICYmICgobCA9IG5bY10pICYmIChuW2NdID0gbnVsbCksIHguZXZlbnQudHJpZ2dlcmVkID0gbSwgdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIHAuYWRkRXZlbnRMaXN0ZW5lcihtLCB5ZSksIG5bbV0oKSwgdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIHAucmVtb3ZlRXZlbnRMaXN0ZW5lcihtLCB5ZSksIHguZXZlbnQudHJpZ2dlcmVkID0gdm9pZCAwLCBsICYmIChuW2NdID0gbCkpLCB0LnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfSwgc2ltdWxhdGU6IGZ1bmN0aW9uIHNpbXVsYXRlKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSB4LmV4dGVuZChuZXcgeC5FdmVudCgpLCBpLCB7IHR5cGU6IHQsIGlzU2ltdWxhdGVkOiAhMCB9KTt4LmV2ZW50LnRyaWdnZXIobiwgbnVsbCwgZSk7XG4gICAgICB9IH0pLCB4LmZuLmV4dGVuZCh7IHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB4LmV2ZW50LnRyaWdnZXIodCwgZSwgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVyKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzWzBdO2lmIChpKSByZXR1cm4geC5ldmVudC50cmlnZ2VyKHQsIGUsIGksICEwKTtcbiAgICAgIH0gfSksIHYuZm9jdXNpbiB8fCB4LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgdmFyIGkgPSBmdW5jdGlvbiBpKHQpIHtcbiAgICAgICAgeC5ldmVudC5zaW11bGF0ZShlLCB0LnRhcmdldCwgeC5ldmVudC5maXgodCkpO1xuICAgICAgfTt4LmV2ZW50LnNwZWNpYWxbZV0gPSB7IHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgICAgICB2YXIgbiA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuICAgICAgICAgICAgICBzID0gWi5hY2Nlc3MobiwgZSk7cyB8fCBuLmFkZEV2ZW50TGlzdGVuZXIodCwgaSwgITApLCBaLmFjY2VzcyhuLCBlLCAocyB8fCAwKSArIDEpO1xuICAgICAgICB9LCB0ZWFyZG93bjogZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgICAgICAgdmFyIG4gPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcbiAgICAgICAgICAgICAgcyA9IFouYWNjZXNzKG4sIGUpIC0gMTtzID8gWi5hY2Nlc3MobiwgZSwgcykgOiAobi5yZW1vdmVFdmVudExpc3RlbmVyKHQsIGksICEwKSwgWi5yZW1vdmUobiwgZSkpO1xuICAgICAgICB9IH07XG4gICAgfSk7dmFyIGtlID0gaS5sb2NhdGlvbixcbiAgICAgICAgd2UgPSBEYXRlLm5vdygpLFxuICAgICAgICB4ZSA9IC9cXD8vO3gucGFyc2VYTUwgPSBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGU7aWYgKCF0IHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIHQpIHJldHVybiBudWxsO3RyeSB7XG4gICAgICAgIGUgPSBuZXcgaS5ET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcodCwgXCJ0ZXh0L3htbFwiKTtcbiAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgZSA9IHZvaWQgMDtcbiAgICAgIH1yZXR1cm4gZSAmJiAhZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aCB8fCB4LmVycm9yKFwiSW52YWxpZCBYTUw6IFwiICsgdCksIGU7XG4gICAgfTt2YXIgQ2UgPSAvXFxbXFxdJC8sXG4gICAgICAgIERlID0gL1xccj9cXG4vZyxcbiAgICAgICAgU2UgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG4gICAgICAgIFRlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIEllKHQsIGUsIGksIG4pIHtcbiAgICAgIHZhciBzO2lmIChBcnJheS5pc0FycmF5KGUpKSB4LmVhY2goZSwgZnVuY3Rpb24gKGUsIHMpIHtcbiAgICAgICAgaSB8fCBDZS50ZXN0KHQpID8gbih0LCBzKSA6IEllKHQgKyBcIltcIiArIChcIm9iamVjdFwiID09ICh0eXBlb2YgcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHMpKSAmJiBudWxsICE9IHMgPyBlIDogXCJcIikgKyBcIl1cIiwgcywgaSwgbik7XG4gICAgICB9KTtlbHNlIGlmIChpIHx8IFwib2JqZWN0XCIgIT09IHcoZSkpIG4odCwgZSk7ZWxzZSBmb3IgKHMgaW4gZSkge1xuICAgICAgICBJZSh0ICsgXCJbXCIgKyBzICsgXCJdXCIsIGVbc10sIGksIG4pO1xuICAgICAgfVxuICAgIH14LnBhcmFtID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4gPSBbXSxcbiAgICAgICAgICBzID0gZnVuY3Rpb24gcyh0LCBlKSB7XG4gICAgICAgIHZhciBpID0gXyhlKSA/IGUoKSA6IGU7bltuLmxlbmd0aF0gPSBlbmNvZGVVUklDb21wb25lbnQodCkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChudWxsID09IGkgPyBcIlwiIDogaSk7XG4gICAgICB9O2lmIChBcnJheS5pc0FycmF5KHQpIHx8IHQuanF1ZXJ5ICYmICF4LmlzUGxhaW5PYmplY3QodCkpIHguZWFjaCh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHModGhpcy5uYW1lLCB0aGlzLnZhbHVlKTtcbiAgICAgIH0pO2Vsc2UgZm9yIChpIGluIHQpIHtcbiAgICAgICAgSWUoaSwgdFtpXSwgZSwgcyk7XG4gICAgICB9cmV0dXJuIG4uam9pbihcIiZcIik7XG4gICAgfSwgeC5mbi5leHRlbmQoeyBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHgucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKTtcbiAgICAgIH0sIHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbiBzZXJpYWxpemVBcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdCA9IHgucHJvcCh0aGlzLCBcImVsZW1lbnRzXCIpO3JldHVybiB0ID8geC5tYWtlQXJyYXkodCkgOiB0aGlzO1xuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB0ID0gdGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUgJiYgIXgodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikgJiYgVGUudGVzdCh0aGlzLm5vZGVOYW1lKSAmJiAhU2UudGVzdCh0KSAmJiAodGhpcy5jaGVja2VkIHx8ICFkdC50ZXN0KHQpKTtcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSB4KHRoaXMpLnZhbCgpO3JldHVybiBudWxsID09IGkgPyBudWxsIDogQXJyYXkuaXNBcnJheShpKSA/IHgubWFwKGksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4geyBuYW1lOiBlLm5hbWUsIHZhbHVlOiB0LnJlcGxhY2UoRGUsIFwiXFxyXFxuXCIpIH07XG4gICAgICAgICAgfSkgOiB7IG5hbWU6IGUubmFtZSwgdmFsdWU6IGkucmVwbGFjZShEZSwgXCJcXHJcXG5cIikgfTtcbiAgICAgICAgfSkuZ2V0KCk7XG4gICAgICB9IH0pO3ZhciBBZSA9IC8lMjAvZyxcbiAgICAgICAgamUgPSAvIy4qJC8sXG4gICAgICAgIE1lID0gLyhbPyZdKV89W14mXSovLFxuICAgICAgICBQZSA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvZ20sXG4gICAgICAgIEVlID0gL14oPzpHRVR8SEVBRCkkLyxcbiAgICAgICAgT2UgPSAvXlxcL1xcLy8sXG4gICAgICAgIEhlID0ge30sXG4gICAgICAgIE5lID0ge30sXG4gICAgICAgIEJlID0gXCIqL1wiLmNvbmNhdChcIipcIiksXG4gICAgICAgIEZlID0gby5jcmVhdGVFbGVtZW50KFwiYVwiKTtmdW5jdGlvbiBMZSh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSAmJiAoaSA9IGUsIGUgPSBcIipcIik7dmFyIG4sXG4gICAgICAgICAgICBzID0gMCxcbiAgICAgICAgICAgIHIgPSBlLnRvTG93ZXJDYXNlKCkubWF0Y2goRikgfHwgW107aWYgKF8oaSkpIGZvciAoOyBuID0gcltzKytdOykge1xuICAgICAgICAgIFwiK1wiID09PSBuWzBdID8gKG4gPSBuLnNsaWNlKDEpIHx8IFwiKlwiLCAodFtuXSA9IHRbbl0gfHwgW10pLnVuc2hpZnQoaSkpIDogKHRbbl0gPSB0W25dIHx8IFtdKS5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1mdW5jdGlvbiB6ZSh0LCBlLCBpLCBuKSB7XG4gICAgICB2YXIgcyA9IHt9LFxuICAgICAgICAgIHIgPSB0ID09PSBOZTtmdW5jdGlvbiBvKGEpIHtcbiAgICAgICAgdmFyIGw7cmV0dXJuIHNbYV0gPSAhMCwgeC5lYWNoKHRbYV0gfHwgW10sIGZ1bmN0aW9uICh0LCBhKSB7XG4gICAgICAgICAgdmFyIHUgPSBhKGUsIGksIG4pO3JldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiB1IHx8IHIgfHwgc1t1XSA/IHIgPyAhKGwgPSB1KSA6IHZvaWQgMCA6IChlLmRhdGFUeXBlcy51bnNoaWZ0KHUpLCBvKHUpLCAhMSk7XG4gICAgICAgIH0pLCBsO1xuICAgICAgfXJldHVybiBvKGUuZGF0YVR5cGVzWzBdKSB8fCAhc1tcIipcIl0gJiYgbyhcIipcIik7XG4gICAgfWZ1bmN0aW9uIFdlKHQsIGUpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgcyA9IHguYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O2ZvciAoaSBpbiBlKSB7XG4gICAgICAgIHZvaWQgMCAhPT0gZVtpXSAmJiAoKHNbaV0gPyB0IDogbiB8fCAobiA9IHt9KSlbaV0gPSBlW2ldKTtcbiAgICAgIH1yZXR1cm4gbiAmJiB4LmV4dGVuZCghMCwgdCwgbiksIHQ7XG4gICAgfUZlLmhyZWYgPSBrZS5ocmVmLCB4LmV4dGVuZCh7IGFjdGl2ZTogMCwgbGFzdE1vZGlmaWVkOiB7fSwgZXRhZzoge30sIGFqYXhTZXR0aW5nczogeyB1cmw6IGtlLmhyZWYsIHR5cGU6IFwiR0VUXCIsIGlzTG9jYWw6IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3Qoa2UucHJvdG9jb2wpLCBnbG9iYWw6ICEwLCBwcm9jZXNzRGF0YTogITAsIGFzeW5jOiAhMCwgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsIGFjY2VwdHM6IHsgXCIqXCI6IEJlLCB0ZXh0OiBcInRleHQvcGxhaW5cIiwgaHRtbDogXCJ0ZXh0L2h0bWxcIiwgeG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIiwganNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIiB9LCBjb250ZW50czogeyB4bWw6IC9cXGJ4bWxcXGIvLCBodG1sOiAvXFxiaHRtbC8sIGpzb246IC9cXGJqc29uXFxiLyB9LCByZXNwb25zZUZpZWxkczogeyB4bWw6IFwicmVzcG9uc2VYTUxcIiwgdGV4dDogXCJyZXNwb25zZVRleHRcIiwganNvbjogXCJyZXNwb25zZUpTT05cIiB9LCBjb252ZXJ0ZXJzOiB7IFwiKiB0ZXh0XCI6IFN0cmluZywgXCJ0ZXh0IGh0bWxcIjogITAsIFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsIFwidGV4dCB4bWxcIjogeC5wYXJzZVhNTCB9LCBmbGF0T3B0aW9uczogeyB1cmw6ICEwLCBjb250ZXh0OiAhMCB9IH0sIGFqYXhTZXR1cDogZnVuY3Rpb24gYWpheFNldHVwKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGUgPyBXZShXZSh0LCB4LmFqYXhTZXR0aW5ncyksIGUpIDogV2UoeC5hamF4U2V0dGluZ3MsIHQpO1xuICAgICAgfSwgYWpheFByZWZpbHRlcjogTGUoSGUpLCBhamF4VHJhbnNwb3J0OiBMZShOZSksIGFqYXg6IGZ1bmN0aW9uIGFqYXgodCwgZSkge1xuICAgICAgICBcIm9iamVjdFwiID09ICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHQpKSAmJiAoZSA9IHQsIHQgPSB2b2lkIDApLCBlID0gZSB8fCB7fTt2YXIgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB1LFxuICAgICAgICAgICAgYyxcbiAgICAgICAgICAgIGgsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgcCxcbiAgICAgICAgICAgIGYgPSB4LmFqYXhTZXR1cCh7fSwgZSksXG4gICAgICAgICAgICBnID0gZi5jb250ZXh0IHx8IGYsXG4gICAgICAgICAgICBtID0gZi5jb250ZXh0ICYmIChnLm5vZGVUeXBlIHx8IGcuanF1ZXJ5KSA/IHgoZykgOiB4LmV2ZW50LFxuICAgICAgICAgICAgdiA9IHguRGVmZXJyZWQoKSxcbiAgICAgICAgICAgIF8gPSB4LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuICAgICAgICAgICAgYiA9IGYuc3RhdHVzQ29kZSB8fCB7fSxcbiAgICAgICAgICAgIHkgPSB7fSxcbiAgICAgICAgICAgIGsgPSB7fSxcbiAgICAgICAgICAgIHcgPSBcImNhbmNlbGVkXCIsXG4gICAgICAgICAgICBDID0geyByZWFkeVN0YXRlOiAwLCBnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24gZ2V0UmVzcG9uc2VIZWFkZXIodCkge1xuICAgICAgICAgICAgdmFyIGU7aWYgKGMpIHtcbiAgICAgICAgICAgICAgaWYgKCFhKSBmb3IgKGEgPSB7fTsgZSA9IFBlLmV4ZWMocik7KSB7XG4gICAgICAgICAgICAgICAgYVtlWzFdLnRvTG93ZXJDYXNlKCldID0gZVsyXTtcbiAgICAgICAgICAgICAgfWUgPSBhW3QudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICB9cmV0dXJuIG51bGwgPT0gZSA/IG51bGwgOiBlO1xuICAgICAgICAgIH0sIGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGMgPyByIDogbnVsbDtcbiAgICAgICAgICB9LCBzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IGMgJiYgKHQgPSBrW3QudG9Mb3dlckNhc2UoKV0gPSBrW3QudG9Mb3dlckNhc2UoKV0gfHwgdCwgeVt0XSA9IGUpLCB0aGlzO1xuICAgICAgICAgIH0sIG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uIG92ZXJyaWRlTWltZVR5cGUodCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gYyAmJiAoZi5taW1lVHlwZSA9IHQpLCB0aGlzO1xuICAgICAgICAgIH0sIHN0YXR1c0NvZGU6IGZ1bmN0aW9uIHN0YXR1c0NvZGUodCkge1xuICAgICAgICAgICAgdmFyIGU7aWYgKHQpIGlmIChjKSBDLmFsd2F5cyh0W0Muc3RhdHVzXSk7ZWxzZSBmb3IgKGUgaW4gdCkge1xuICAgICAgICAgICAgICBiW2VdID0gW2JbZV0sIHRbZV1dO1xuICAgICAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgICAgIH0sIGFib3J0OiBmdW5jdGlvbiBhYm9ydCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQgfHwgdztyZXR1cm4gbiAmJiBuLmFib3J0KGUpLCBEKDAsIGUpLCB0aGlzO1xuICAgICAgICAgIH0gfTtpZiAodi5wcm9taXNlKEMpLCBmLnVybCA9ICgodCB8fCBmLnVybCB8fCBrZS5ocmVmKSArIFwiXCIpLnJlcGxhY2UoT2UsIGtlLnByb3RvY29sICsgXCIvL1wiKSwgZi50eXBlID0gZS5tZXRob2QgfHwgZS50eXBlIHx8IGYubWV0aG9kIHx8IGYudHlwZSwgZi5kYXRhVHlwZXMgPSAoZi5kYXRhVHlwZSB8fCBcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChGKSB8fCBbXCJcIl0sIG51bGwgPT0gZi5jcm9zc0RvbWFpbikge1xuICAgICAgICAgIHUgPSBvLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3RyeSB7XG4gICAgICAgICAgICB1LmhyZWYgPSBmLnVybCwgdS5ocmVmID0gdS5ocmVmLCBmLmNyb3NzRG9tYWluID0gRmUucHJvdG9jb2wgKyBcIi8vXCIgKyBGZS5ob3N0ICE9IHUucHJvdG9jb2wgKyBcIi8vXCIgKyB1Lmhvc3Q7XG4gICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgZi5jcm9zc0RvbWFpbiA9ICEwO1xuICAgICAgICAgIH1cbiAgICAgICAgfWlmIChmLmRhdGEgJiYgZi5wcm9jZXNzRGF0YSAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBmLmRhdGEgJiYgKGYuZGF0YSA9IHgucGFyYW0oZi5kYXRhLCBmLnRyYWRpdGlvbmFsKSksIHplKEhlLCBmLCBlLCBDKSwgYykgcmV0dXJuIEM7Zm9yIChkIGluIChoID0geC5ldmVudCAmJiBmLmdsb2JhbCkgJiYgMCA9PSB4LmFjdGl2ZSsrICYmIHguZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSwgZi50eXBlID0gZi50eXBlLnRvVXBwZXJDYXNlKCksIGYuaGFzQ29udGVudCA9ICFFZS50ZXN0KGYudHlwZSksIHMgPSBmLnVybC5yZXBsYWNlKGplLCBcIlwiKSwgZi5oYXNDb250ZW50ID8gZi5kYXRhICYmIGYucHJvY2Vzc0RhdGEgJiYgMCA9PT0gKGYuY29udGVudFR5cGUgfHwgXCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSAmJiAoZi5kYXRhID0gZi5kYXRhLnJlcGxhY2UoQWUsIFwiK1wiKSkgOiAocCA9IGYudXJsLnNsaWNlKHMubGVuZ3RoKSwgZi5kYXRhICYmIChmLnByb2Nlc3NEYXRhIHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIGYuZGF0YSkgJiYgKHMgKz0gKHhlLnRlc3QocykgPyBcIiZcIiA6IFwiP1wiKSArIGYuZGF0YSwgZGVsZXRlIGYuZGF0YSksICExID09PSBmLmNhY2hlICYmIChzID0gcy5yZXBsYWNlKE1lLCBcIiQxXCIpLCBwID0gKHhlLnRlc3QocykgPyBcIiZcIiA6IFwiP1wiKSArIFwiXz1cIiArIHdlKysgKyBwKSwgZi51cmwgPSBzICsgcCksIGYuaWZNb2RpZmllZCAmJiAoeC5sYXN0TW9kaWZpZWRbc10gJiYgQy5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgeC5sYXN0TW9kaWZpZWRbc10pLCB4LmV0YWdbc10gJiYgQy5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLCB4LmV0YWdbc10pKSwgKGYuZGF0YSAmJiBmLmhhc0NvbnRlbnQgJiYgITEgIT09IGYuY29udGVudFR5cGUgfHwgZS5jb250ZW50VHlwZSkgJiYgQy5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIGYuY29udGVudFR5cGUpLCBDLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIiwgZi5kYXRhVHlwZXNbMF0gJiYgZi5hY2NlcHRzW2YuZGF0YVR5cGVzWzBdXSA/IGYuYWNjZXB0c1tmLmRhdGFUeXBlc1swXV0gKyAoXCIqXCIgIT09IGYuZGF0YVR5cGVzWzBdID8gXCIsIFwiICsgQmUgKyBcIjsgcT0wLjAxXCIgOiBcIlwiKSA6IGYuYWNjZXB0c1tcIipcIl0pLCBmLmhlYWRlcnMpIHtcbiAgICAgICAgICBDLnNldFJlcXVlc3RIZWFkZXIoZCwgZi5oZWFkZXJzW2RdKTtcbiAgICAgICAgfWlmIChmLmJlZm9yZVNlbmQgJiYgKCExID09PSBmLmJlZm9yZVNlbmQuY2FsbChnLCBDLCBmKSB8fCBjKSkgcmV0dXJuIEMuYWJvcnQoKTtpZiAodyA9IFwiYWJvcnRcIiwgXy5hZGQoZi5jb21wbGV0ZSksIEMuZG9uZShmLnN1Y2Nlc3MpLCBDLmZhaWwoZi5lcnJvciksIG4gPSB6ZShOZSwgZiwgZSwgQykpIHtcbiAgICAgICAgICBpZiAoQy5yZWFkeVN0YXRlID0gMSwgaCAmJiBtLnRyaWdnZXIoXCJhamF4U2VuZFwiLCBbQywgZl0pLCBjKSByZXR1cm4gQztmLmFzeW5jICYmIGYudGltZW91dCA+IDAgJiYgKGwgPSBpLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgQy5hYm9ydChcInRpbWVvdXRcIik7XG4gICAgICAgICAgfSwgZi50aW1lb3V0KSk7dHJ5IHtcbiAgICAgICAgICAgIGMgPSAhMSwgbi5zZW5kKHksIEQpO1xuICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIGlmIChjKSB0aHJvdyB0O0QoLTEsIHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIEQoLTEsIFwiTm8gVHJhbnNwb3J0XCIpO2Z1bmN0aW9uIEQodCwgZSwgbywgYSkge1xuICAgICAgICAgIHZhciB1LFxuICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICBrLFxuICAgICAgICAgICAgICB3ID0gZTtjIHx8IChjID0gITAsIGwgJiYgaS5jbGVhclRpbWVvdXQobCksIG4gPSB2b2lkIDAsIHIgPSBhIHx8IFwiXCIsIEMucmVhZHlTdGF0ZSA9IHQgPiAwID8gNCA6IDAsIHUgPSB0ID49IDIwMCAmJiB0IDwgMzAwIHx8IDMwNCA9PT0gdCwgbyAmJiAoeSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuLCBzLCByLCBvLCBhID0gdC5jb250ZW50cywgbCA9IHQuZGF0YVR5cGVzOyBcIipcIiA9PT0gbFswXTspIHtcbiAgICAgICAgICAgICAgbC5zaGlmdCgpLCB2b2lkIDAgPT09IG4gJiYgKG4gPSB0Lm1pbWVUeXBlIHx8IGUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO1xuICAgICAgICAgICAgfWlmIChuKSBmb3IgKHMgaW4gYSkge1xuICAgICAgICAgICAgICBpZiAoYVtzXSAmJiBhW3NdLnRlc3QobikpIHtcbiAgICAgICAgICAgICAgICBsLnVuc2hpZnQocyk7YnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1pZiAobFswXSBpbiBpKSByID0gbFswXTtlbHNlIHtcbiAgICAgICAgICAgICAgZm9yIChzIGluIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWxbMF0gfHwgdC5jb252ZXJ0ZXJzW3MgKyBcIiBcIiArIGxbMF1dKSB7XG4gICAgICAgICAgICAgICAgICByID0gczticmVhaztcbiAgICAgICAgICAgICAgICB9byB8fCAobyA9IHMpO1xuICAgICAgICAgICAgICB9ciA9IHIgfHwgbztcbiAgICAgICAgICAgIH1pZiAocikgcmV0dXJuIHIgIT09IGxbMF0gJiYgbC51bnNoaWZ0KHIpLCBpW3JdO1xuICAgICAgICAgIH0oZiwgQywgbykpLCB5ID0gZnVuY3Rpb24gKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICAgIHZhciBzLFxuICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgdSA9IHt9LFxuICAgICAgICAgICAgICAgIGMgPSB0LmRhdGFUeXBlcy5zbGljZSgpO2lmIChjWzFdKSBmb3IgKG8gaW4gdC5jb252ZXJ0ZXJzKSB7XG4gICAgICAgICAgICAgIHVbby50b0xvd2VyQ2FzZSgpXSA9IHQuY29udmVydGVyc1tvXTtcbiAgICAgICAgICAgIH1mb3IgKHIgPSBjLnNoaWZ0KCk7IHI7KSB7XG4gICAgICAgICAgICAgIGlmICh0LnJlc3BvbnNlRmllbGRzW3JdICYmIChpW3QucmVzcG9uc2VGaWVsZHNbcl1dID0gZSksICFsICYmIG4gJiYgdC5kYXRhRmlsdGVyICYmIChlID0gdC5kYXRhRmlsdGVyKGUsIHQuZGF0YVR5cGUpKSwgbCA9IHIsIHIgPSBjLnNoaWZ0KCkpIGlmIChcIipcIiA9PT0gcikgciA9IGw7ZWxzZSBpZiAoXCIqXCIgIT09IGwgJiYgbCAhPT0gcikge1xuICAgICAgICAgICAgICAgIGlmICghKG8gPSB1W2wgKyBcIiBcIiArIHJdIHx8IHVbXCIqIFwiICsgcl0pKSBmb3IgKHMgaW4gdSkge1xuICAgICAgICAgICAgICAgICAgaWYgKChhID0gcy5zcGxpdChcIiBcIikpWzFdID09PSByICYmIChvID0gdVtsICsgXCIgXCIgKyBhWzBdXSB8fCB1W1wiKiBcIiArIGFbMF1dKSkge1xuICAgICAgICAgICAgICAgICAgICAhMCA9PT0gbyA/IG8gPSB1W3NdIDogITAgIT09IHVbc10gJiYgKHIgPSBhWzBdLCBjLnVuc2hpZnQoYVsxXSkpO2JyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1pZiAoITAgIT09IG8pIGlmIChvICYmIHQudGhyb3dzKSBlID0gbyhlKTtlbHNlIHRyeSB7XG4gICAgICAgICAgICAgICAgICBlID0gbyhlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogbyA/IHQgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIGwgKyBcIiB0byBcIiArIHIgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1yZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IGUgfTtcbiAgICAgICAgICB9KGYsIHksIEMsIHUpLCB1ID8gKGYuaWZNb2RpZmllZCAmJiAoKGsgPSBDLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKSkgJiYgKHgubGFzdE1vZGlmaWVkW3NdID0gayksIChrID0gQy5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIikpICYmICh4LmV0YWdbc10gPSBrKSksIDIwNCA9PT0gdCB8fCBcIkhFQURcIiA9PT0gZi50eXBlID8gdyA9IFwibm9jb250ZW50XCIgOiAzMDQgPT09IHQgPyB3ID0gXCJub3Rtb2RpZmllZFwiIDogKHcgPSB5LnN0YXRlLCBkID0geS5kYXRhLCB1ID0gIShwID0geS5lcnJvcikpKSA6IChwID0gdywgIXQgJiYgdyB8fCAodyA9IFwiZXJyb3JcIiwgdCA8IDAgJiYgKHQgPSAwKSkpLCBDLnN0YXR1cyA9IHQsIEMuc3RhdHVzVGV4dCA9IChlIHx8IHcpICsgXCJcIiwgdSA/IHYucmVzb2x2ZVdpdGgoZywgW2QsIHcsIENdKSA6IHYucmVqZWN0V2l0aChnLCBbQywgdywgcF0pLCBDLnN0YXR1c0NvZGUoYiksIGIgPSB2b2lkIDAsIGggJiYgbS50cmlnZ2VyKHUgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLCBbQywgZiwgdSA/IGQgOiBwXSksIF8uZmlyZVdpdGgoZywgW0MsIHddKSwgaCAmJiAobS50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsIFtDLCBmXSksIC0teC5hY3RpdmUgfHwgeC5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKTtcbiAgICAgICAgfXJldHVybiBDO1xuICAgICAgfSwgZ2V0SlNPTjogZnVuY3Rpb24gZ2V0SlNPTih0LCBlLCBpKSB7XG4gICAgICAgIHJldHVybiB4LmdldCh0LCBlLCBpLCBcImpzb25cIik7XG4gICAgICB9LCBnZXRTY3JpcHQ6IGZ1bmN0aW9uIGdldFNjcmlwdCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB4LmdldCh0LCB2b2lkIDAsIGUsIFwic2NyaXB0XCIpO1xuICAgICAgfSB9KSwgeC5lYWNoKFtcImdldFwiLCBcInBvc3RcIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICB4W2VdID0gZnVuY3Rpb24gKHQsIGksIG4sIHMpIHtcbiAgICAgICAgcmV0dXJuIF8oaSkgJiYgKHMgPSBzIHx8IG4sIG4gPSBpLCBpID0gdm9pZCAwKSwgeC5hamF4KHguZXh0ZW5kKHsgdXJsOiB0LCB0eXBlOiBlLCBkYXRhVHlwZTogcywgZGF0YTogaSwgc3VjY2VzczogbiB9LCB4LmlzUGxhaW5PYmplY3QodCkgJiYgdCkpO1xuICAgICAgfTtcbiAgICB9KSwgeC5fZXZhbFVybCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4geC5hamF4KHsgdXJsOiB0LCB0eXBlOiBcIkdFVFwiLCBkYXRhVHlwZTogXCJzY3JpcHRcIiwgY2FjaGU6ICEwLCBhc3luYzogITEsIGdsb2JhbDogITEsIHRocm93czogITAgfSk7XG4gICAgfSwgeC5mbi5leHRlbmQoeyB3cmFwQWxsOiBmdW5jdGlvbiB3cmFwQWxsKHQpIHtcbiAgICAgICAgdmFyIGU7cmV0dXJuIHRoaXNbMF0gJiYgKF8odCkgJiYgKHQgPSB0LmNhbGwodGhpc1swXSkpLCBlID0geCh0LCB0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSwgdGhpc1swXS5wYXJlbnROb2RlICYmIGUuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLCBlLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXM7IHQuZmlyc3RFbGVtZW50Q2hpbGQ7KSB7XG4gICAgICAgICAgICB0ID0gdC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICB9cmV0dXJuIHQ7XG4gICAgICAgIH0pLmFwcGVuZCh0aGlzKSksIHRoaXM7XG4gICAgICB9LCB3cmFwSW5uZXI6IGZ1bmN0aW9uIHdyYXBJbm5lcih0KSB7XG4gICAgICAgIHJldHVybiBfKHQpID8gdGhpcy5lYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgeCh0aGlzKS53cmFwSW5uZXIodC5jYWxsKHRoaXMsIGUpKTtcbiAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0geCh0aGlzKSxcbiAgICAgICAgICAgICAgaSA9IGUuY29udGVudHMoKTtpLmxlbmd0aCA/IGkud3JhcEFsbCh0KSA6IGUuYXBwZW5kKHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHdyYXA6IGZ1bmN0aW9uIHdyYXAodCkge1xuICAgICAgICB2YXIgZSA9IF8odCk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHgodGhpcykud3JhcEFsbChlID8gdC5jYWxsKHRoaXMsIGkpIDogdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgdW53cmFwOiBmdW5jdGlvbiB1bndyYXAodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQodCkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB4KHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyk7XG4gICAgICAgIH0pLCB0aGlzO1xuICAgICAgfSB9KSwgeC5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiAheC5leHByLnBzZXVkb3MudmlzaWJsZSh0KTtcbiAgICB9LCB4LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiAhISh0Lm9mZnNldFdpZHRoIHx8IHQub2Zmc2V0SGVpZ2h0IHx8IHQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xuICAgIH0sIHguYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgaS5YTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgfSBjYXRjaCAodCkge31cbiAgICB9O3ZhciBSZSA9IHsgMDogMjAwLCAxMjIzOiAyMDQgfSxcbiAgICAgICAgJGUgPSB4LmFqYXhTZXR0aW5ncy54aHIoKTt2LmNvcnMgPSAhISRlICYmIFwid2l0aENyZWRlbnRpYWxzXCIgaW4gJGUsIHYuYWpheCA9ICRlID0gISEkZSwgeC5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgX2UzLCBuO2lmICh2LmNvcnMgfHwgJGUgJiYgIXQuY3Jvc3NEb21haW4pIHJldHVybiB7IHNlbmQ6IGZ1bmN0aW9uIHNlbmQocywgcikge1xuICAgICAgICAgIHZhciBvLFxuICAgICAgICAgICAgICBhID0gdC54aHIoKTtpZiAoYS5vcGVuKHQudHlwZSwgdC51cmwsIHQuYXN5bmMsIHQudXNlcm5hbWUsIHQucGFzc3dvcmQpLCB0LnhockZpZWxkcykgZm9yIChvIGluIHQueGhyRmllbGRzKSB7XG4gICAgICAgICAgICBhW29dID0gdC54aHJGaWVsZHNbb107XG4gICAgICAgICAgfWZvciAobyBpbiB0Lm1pbWVUeXBlICYmIGEub3ZlcnJpZGVNaW1lVHlwZSAmJiBhLm92ZXJyaWRlTWltZVR5cGUodC5taW1lVHlwZSksIHQuY3Jvc3NEb21haW4gfHwgc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gfHwgKHNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiKSwgcykge1xuICAgICAgICAgICAgYS5zZXRSZXF1ZXN0SGVhZGVyKG8sIHNbb10pO1xuICAgICAgICAgIH1fZTMgPSBmdW5jdGlvbiBlKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF9lMyAmJiAoX2UzID0gbiA9IGEub25sb2FkID0gYS5vbmVycm9yID0gYS5vbmFib3J0ID0gYS5vbnRpbWVvdXQgPSBhLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGwsIFwiYWJvcnRcIiA9PT0gdCA/IGEuYWJvcnQoKSA6IFwiZXJyb3JcIiA9PT0gdCA/IFwibnVtYmVyXCIgIT0gdHlwZW9mIGEuc3RhdHVzID8gcigwLCBcImVycm9yXCIpIDogcihhLnN0YXR1cywgYS5zdGF0dXNUZXh0KSA6IHIoUmVbYS5zdGF0dXNdIHx8IGEuc3RhdHVzLCBhLnN0YXR1c1RleHQsIFwidGV4dFwiICE9PSAoYS5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIpIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGEucmVzcG9uc2VUZXh0ID8geyBiaW5hcnk6IGEucmVzcG9uc2UgfSA6IHsgdGV4dDogYS5yZXNwb25zZVRleHQgfSwgYS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBhLm9ubG9hZCA9IF9lMygpLCBuID0gYS5vbmVycm9yID0gYS5vbnRpbWVvdXQgPSBfZTMoXCJlcnJvclwiKSwgdm9pZCAwICE9PSBhLm9uYWJvcnQgPyBhLm9uYWJvcnQgPSBuIDogYS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICA0ID09PSBhLnJlYWR5U3RhdGUgJiYgaS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX2UzICYmIG4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIF9lMyA9IF9lMyhcImFib3J0XCIpO3RyeSB7XG4gICAgICAgICAgICBhLnNlbmQodC5oYXNDb250ZW50ICYmIHQuZGF0YSB8fCBudWxsKTtcbiAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBpZiAoX2UzKSB0aHJvdyB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgIF9lMyAmJiBfZTMoKTtcbiAgICAgICAgfSB9O1xuICAgIH0pLCB4LmFqYXhQcmVmaWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHQuY3Jvc3NEb21haW4gJiYgKHQuY29udGVudHMuc2NyaXB0ID0gITEpO1xuICAgIH0pLCB4LmFqYXhTZXR1cCh7IGFjY2VwdHM6IHsgc2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCIgfSwgY29udGVudHM6IHsgc2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi8gfSwgY29udmVydGVyczogeyBcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uIHRleHRTY3JpcHQodCkge1xuICAgICAgICAgIHJldHVybiB4Lmdsb2JhbEV2YWwodCksIHQ7XG4gICAgICAgIH0gfSB9KSwgeC5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICB2b2lkIDAgPT09IHQuY2FjaGUgJiYgKHQuY2FjaGUgPSAhMSksIHQuY3Jvc3NEb21haW4gJiYgKHQudHlwZSA9IFwiR0VUXCIpO1xuICAgIH0pLCB4LmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBlLCBpO2lmICh0LmNyb3NzRG9tYWluKSByZXR1cm4geyBzZW5kOiBmdW5jdGlvbiBzZW5kKG4sIHMpIHtcbiAgICAgICAgICBlID0geChcIjxzY3JpcHQ+XCIpLnByb3AoeyBjaGFyc2V0OiB0LnNjcmlwdENoYXJzZXQsIHNyYzogdC51cmwgfSkub24oXCJsb2FkIGVycm9yXCIsIGkgPSBmdW5jdGlvbiAoX2kyKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpKF94KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfaTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9pMi50b1N0cmluZygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfShmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgZS5yZW1vdmUoKSwgaSA9IG51bGwsIHQgJiYgcyhcImVycm9yXCIgPT09IHQudHlwZSA/IDQwNCA6IDIwMCwgdC50eXBlKTtcbiAgICAgICAgICB9KSksIG8uaGVhZC5hcHBlbmRDaGlsZChlWzBdKTtcbiAgICAgICAgfSwgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgIGkgJiYgaSgpO1xuICAgICAgICB9IH07XG4gICAgfSk7dmFyIHFlLFxuICAgICAgICBVZSA9IFtdLFxuICAgICAgICBLZSA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87eC5hamF4U2V0dXAoeyBqc29ucDogXCJjYWxsYmFja1wiLCBqc29ucENhbGxiYWNrOiBmdW5jdGlvbiBqc29ucENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgdCA9IFVlLnBvcCgpIHx8IHguZXhwYW5kbyArIFwiX1wiICsgd2UrKztyZXR1cm4gdGhpc1t0XSA9ICEwLCB0O1xuICAgICAgfSB9KSwgeC5hamF4UHJlZmlsdGVyKFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiAodCwgZSwgbikge1xuICAgICAgdmFyIHMsXG4gICAgICAgICAgcixcbiAgICAgICAgICBvLFxuICAgICAgICAgIGEgPSAhMSAhPT0gdC5qc29ucCAmJiAoS2UudGVzdCh0LnVybCkgPyBcInVybFwiIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgdC5kYXRhICYmIDAgPT09ICh0LmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgS2UudGVzdCh0LmRhdGEpICYmIFwiZGF0YVwiKTtpZiAoYSB8fCBcImpzb25wXCIgPT09IHQuZGF0YVR5cGVzWzBdKSByZXR1cm4gcyA9IHQuanNvbnBDYWxsYmFjayA9IF8odC5qc29ucENhbGxiYWNrKSA/IHQuanNvbnBDYWxsYmFjaygpIDogdC5qc29ucENhbGxiYWNrLCBhID8gdFthXSA9IHRbYV0ucmVwbGFjZShLZSwgXCIkMVwiICsgcykgOiAhMSAhPT0gdC5qc29ucCAmJiAodC51cmwgKz0gKHhlLnRlc3QodC51cmwpID8gXCImXCIgOiBcIj9cIikgKyB0Lmpzb25wICsgXCI9XCIgKyBzKSwgdC5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvIHx8IHguZXJyb3IocyArIFwiIHdhcyBub3QgY2FsbGVkXCIpLCBvWzBdO1xuICAgICAgfSwgdC5kYXRhVHlwZXNbMF0gPSBcImpzb25cIiwgciA9IGlbc10sIGlbc10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG8gPSBhcmd1bWVudHM7XG4gICAgICB9LCBuLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZvaWQgMCA9PT0gciA/IHgoaSkucmVtb3ZlUHJvcChzKSA6IGlbc10gPSByLCB0W3NdICYmICh0Lmpzb25wQ2FsbGJhY2sgPSBlLmpzb25wQ2FsbGJhY2ssIFVlLnB1c2gocykpLCBvICYmIF8ocikgJiYgcihvWzBdKSwgbyA9IHIgPSB2b2lkIDA7XG4gICAgICB9KSwgXCJzY3JpcHRcIjtcbiAgICB9KSwgdi5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoKHFlID0gby5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIikuYm9keSkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiLCAyID09PSBxZS5jaGlsZE5vZGVzLmxlbmd0aCksIHgucGFyc2VIVE1MID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgIHJldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiB0ID8gW10gOiAoXCJib29sZWFuXCIgPT0gdHlwZW9mIGUgJiYgKGkgPSBlLCBlID0gITEpLCBlIHx8ICh2LmNyZWF0ZUhUTUxEb2N1bWVudCA/ICgobiA9IChlID0gby5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIikpLmNyZWF0ZUVsZW1lbnQoXCJiYXNlXCIpKS5ocmVmID0gby5sb2NhdGlvbi5ocmVmLCBlLmhlYWQuYXBwZW5kQ2hpbGQobikpIDogZSA9IG8pLCByID0gIWkgJiYgW10sIChzID0gTS5leGVjKHQpKSA/IFtlLmNyZWF0ZUVsZW1lbnQoc1sxXSldIDogKHMgPSBrdChbdF0sIGUsIHIpLCByICYmIHIubGVuZ3RoICYmIHgocikucmVtb3ZlKCksIHgubWVyZ2UoW10sIHMuY2hpbGROb2RlcykpKTt2YXIgbiwgcywgcjtcbiAgICB9LCB4LmZuLmxvYWQgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgdmFyIG4sXG4gICAgICAgICAgcyxcbiAgICAgICAgICByLFxuICAgICAgICAgIG8gPSB0aGlzLFxuICAgICAgICAgIGEgPSB0LmluZGV4T2YoXCIgXCIpO3JldHVybiBhID4gLTEgJiYgKG4gPSBnZSh0LnNsaWNlKGEpKSwgdCA9IHQuc2xpY2UoMCwgYSkpLCBfKGUpID8gKGkgPSBlLCBlID0gdm9pZCAwKSA6IGUgJiYgXCJvYmplY3RcIiA9PSAodHlwZW9mIGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihlKSkgJiYgKHMgPSBcIlBPU1RcIiksIG8ubGVuZ3RoID4gMCAmJiB4LmFqYXgoeyB1cmw6IHQsIHR5cGU6IHMgfHwgXCJHRVRcIiwgZGF0YVR5cGU6IFwiaHRtbFwiLCBkYXRhOiBlIH0pLmRvbmUoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgciA9IGFyZ3VtZW50cywgby5odG1sKG4gPyB4KFwiPGRpdj5cIikuYXBwZW5kKHgucGFyc2VIVE1MKHQpKS5maW5kKG4pIDogdCk7XG4gICAgICB9KS5hbHdheXMoaSAmJiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICBvLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGkuYXBwbHkodGhpcywgciB8fCBbdC5yZXNwb25zZVRleHQsIGUsIHRdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSwgdGhpcztcbiAgICB9LCB4LmVhY2goW1wiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCJdLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgeC5mbltlXSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uKGUsIHQpO1xuICAgICAgfTtcbiAgICB9KSwgeC5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHguZ3JlcCh4LnRpbWVycywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHQgPT09IGUuZWxlbTtcbiAgICAgIH0pLmxlbmd0aDtcbiAgICB9LCB4Lm9mZnNldCA9IHsgc2V0T2Zmc2V0OiBmdW5jdGlvbiBzZXRPZmZzZXQodCwgZSwgaSkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSA9IHguY3NzKHQsIFwicG9zaXRpb25cIiksXG4gICAgICAgICAgICBjID0geCh0KSxcbiAgICAgICAgICAgIGggPSB7fTtcInN0YXRpY1wiID09PSB1ICYmICh0LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiKSwgYSA9IGMub2Zmc2V0KCksIHIgPSB4LmNzcyh0LCBcInRvcFwiKSwgbCA9IHguY3NzKHQsIFwibGVmdFwiKSwgKFwiYWJzb2x1dGVcIiA9PT0gdSB8fCBcImZpeGVkXCIgPT09IHUpICYmIChyICsgbCkuaW5kZXhPZihcImF1dG9cIikgPiAtMSA/IChvID0gKG4gPSBjLnBvc2l0aW9uKCkpLnRvcCwgcyA9IG4ubGVmdCkgOiAobyA9IHBhcnNlRmxvYXQocikgfHwgMCwgcyA9IHBhcnNlRmxvYXQobCkgfHwgMCksIF8oZSkgJiYgKGUgPSBlLmNhbGwodCwgaSwgeC5leHRlbmQoe30sIGEpKSksIG51bGwgIT0gZS50b3AgJiYgKGgudG9wID0gZS50b3AgLSBhLnRvcCArIG8pLCBudWxsICE9IGUubGVmdCAmJiAoaC5sZWZ0ID0gZS5sZWZ0IC0gYS5sZWZ0ICsgcyksIFwidXNpbmdcIiBpbiBlID8gZS51c2luZy5jYWxsKHQsIGgpIDogYy5jc3MoaCk7XG4gICAgICB9IH0sIHguZm4uZXh0ZW5kKHsgb2Zmc2V0OiBmdW5jdGlvbiBvZmZzZXQodCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZvaWQgMCA9PT0gdCA/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB4Lm9mZnNldC5zZXRPZmZzZXQodGhpcywgdCwgZSk7XG4gICAgICAgIH0pO3ZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4gPSB0aGlzWzBdO3JldHVybiBuID8gbi5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA/IChlID0gbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgaSA9IG4ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldywgeyB0b3A6IGUudG9wICsgaS5wYWdlWU9mZnNldCwgbGVmdDogZS5sZWZ0ICsgaS5wYWdlWE9mZnNldCB9KSA6IHsgdG9wOiAwLCBsZWZ0OiAwIH0gOiB2b2lkIDA7XG4gICAgICB9LCBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzWzBdKSB7XG4gICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4gPSB0aGlzWzBdLFxuICAgICAgICAgICAgICBzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtpZiAoXCJmaXhlZFwiID09PSB4LmNzcyhuLCBcInBvc2l0aW9uXCIpKSBlID0gbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlbHNlIHtcbiAgICAgICAgICAgIGZvciAoZSA9IHRoaXMub2Zmc2V0KCksIGkgPSBuLm93bmVyRG9jdW1lbnQsIHQgPSBuLm9mZnNldFBhcmVudCB8fCBpLmRvY3VtZW50RWxlbWVudDsgdCAmJiAodCA9PT0gaS5ib2R5IHx8IHQgPT09IGkuZG9jdW1lbnRFbGVtZW50KSAmJiBcInN0YXRpY1wiID09PSB4LmNzcyh0LCBcInBvc2l0aW9uXCIpOykge1xuICAgICAgICAgICAgICB0ID0gdC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfXQgJiYgdCAhPT0gbiAmJiAxID09PSB0Lm5vZGVUeXBlICYmICgocyA9IHgodCkub2Zmc2V0KCkpLnRvcCArPSB4LmNzcyh0LCBcImJvcmRlclRvcFdpZHRoXCIsICEwKSwgcy5sZWZ0ICs9IHguY3NzKHQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsICEwKSk7XG4gICAgICAgICAgfXJldHVybiB7IHRvcDogZS50b3AgLSBzLnRvcCAtIHguY3NzKG4sIFwibWFyZ2luVG9wXCIsICEwKSwgbGVmdDogZS5sZWZ0IC0gcy5sZWZ0IC0geC5jc3MobiwgXCJtYXJnaW5MZWZ0XCIsICEwKSB9O1xuICAgICAgICB9XG4gICAgICB9LCBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uIG9mZnNldFBhcmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmb3IgKHZhciB0ID0gdGhpcy5vZmZzZXRQYXJlbnQ7IHQgJiYgXCJzdGF0aWNcIiA9PT0geC5jc3ModCwgXCJwb3NpdGlvblwiKTspIHtcbiAgICAgICAgICAgIHQgPSB0Lm9mZnNldFBhcmVudDtcbiAgICAgICAgICB9cmV0dXJuIHQgfHwgd3Q7XG4gICAgICAgIH0pO1xuICAgICAgfSB9KSwgeC5lYWNoKHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgdmFyIGkgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IGU7eC5mblt0XSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBVKHRoaXMsIGZ1bmN0aW9uICh0LCBuLCBzKSB7XG4gICAgICAgICAgdmFyIHI7aWYgKGIodCkgPyByID0gdCA6IDkgPT09IHQubm9kZVR5cGUgJiYgKHIgPSB0LmRlZmF1bHRWaWV3KSwgdm9pZCAwID09PSBzKSByZXR1cm4gciA/IHJbZV0gOiB0W25dO3IgPyByLnNjcm9sbFRvKGkgPyByLnBhZ2VYT2Zmc2V0IDogcywgaSA/IHMgOiByLnBhZ2VZT2Zmc2V0KSA6IHRbbl0gPSBzO1xuICAgICAgICB9LCB0LCBuLCBhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgIH07XG4gICAgfSksIHguZWFjaChbXCJ0b3BcIiwgXCJsZWZ0XCJdLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgeC5jc3NIb29rc1tlXSA9IHF0KHYucGl4ZWxQb3NpdGlvbiwgZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgaWYgKGkpIHJldHVybiBpID0gJHQodCwgZSksIHp0LnRlc3QoaSkgPyB4KHQpLnBvc2l0aW9uKClbZV0gKyBcInB4XCIgOiBpO1xuICAgICAgfSk7XG4gICAgfSksIHguZWFjaCh7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgeC5lYWNoKHsgcGFkZGluZzogXCJpbm5lclwiICsgdCwgY29udGVudDogZSwgXCJcIjogXCJvdXRlclwiICsgdCB9LCBmdW5jdGlvbiAoaSwgbikge1xuICAgICAgICB4LmZuW25dID0gZnVuY3Rpb24gKHMsIHIpIHtcbiAgICAgICAgICB2YXIgbyA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKGkgfHwgXCJib29sZWFuXCIgIT0gdHlwZW9mIHMpLFxuICAgICAgICAgICAgICBhID0gaSB8fCAoITAgPT09IHMgfHwgITAgPT09IHIgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIik7cmV0dXJuIFUodGhpcywgZnVuY3Rpb24gKGUsIGksIHMpIHtcbiAgICAgICAgICAgIHZhciByO3JldHVybiBiKGUpID8gMCA9PT0gbi5pbmRleE9mKFwib3V0ZXJcIikgPyBlW1wiaW5uZXJcIiArIHRdIDogZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIHRdIDogOSA9PT0gZS5ub2RlVHlwZSA/IChyID0gZS5kb2N1bWVudEVsZW1lbnQsIE1hdGgubWF4KGUuYm9keVtcInNjcm9sbFwiICsgdF0sIHJbXCJzY3JvbGxcIiArIHRdLCBlLmJvZHlbXCJvZmZzZXRcIiArIHRdLCByW1wib2Zmc2V0XCIgKyB0XSwgcltcImNsaWVudFwiICsgdF0pKSA6IHZvaWQgMCA9PT0gcyA/IHguY3NzKGUsIGksIGEpIDogeC5zdHlsZShlLCBpLCBzLCBhKTtcbiAgICAgICAgICB9LCBlLCBvID8gcyA6IHZvaWQgMCwgbyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSwgeC5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHguZm5bZV0gPSBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyB0aGlzLm9uKGUsIG51bGwsIHQsIGkpIDogdGhpcy50cmlnZ2VyKGUpO1xuICAgICAgfTtcbiAgICB9KSwgeC5mbi5leHRlbmQoeyBob3ZlcjogZnVuY3Rpb24gaG92ZXIodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3VzZWVudGVyKHQpLm1vdXNlbGVhdmUoZSB8fCB0KTtcbiAgICAgIH0gfSksIHguZm4uZXh0ZW5kKHsgYmluZDogZnVuY3Rpb24gYmluZCh0LCBlLCBpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uKHQsIG51bGwsIGUsIGkpO1xuICAgICAgfSwgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQodCwgZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmYodCwgbnVsbCwgZSk7XG4gICAgICB9LCBkZWxlZ2F0ZTogZnVuY3Rpb24gZGVsZWdhdGUodCwgZSwgaSwgbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vbihlLCB0LCBpLCBuKTtcbiAgICAgIH0sIHVuZGVsZWdhdGU6IGZ1bmN0aW9uIHVuZGVsZWdhdGUodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gMSA9PT0gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMub2ZmKHQsIFwiKipcIikgOiB0aGlzLm9mZihlLCB0IHx8IFwiKipcIiwgaSk7XG4gICAgICB9IH0pLCB4LnByb3h5ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgIHZhciBpLCBuLCBzO2lmIChcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChpID0gdFtlXSwgZSA9IHQsIHQgPSBpKSwgXyh0KSkgcmV0dXJuIG4gPSBsLmNhbGwoYXJndW1lbnRzLCAyKSwgKHMgPSBmdW5jdGlvbiBzKCkge1xuICAgICAgICByZXR1cm4gdC5hcHBseShlIHx8IHRoaXMsIG4uY29uY2F0KGwuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICB9KS5ndWlkID0gdC5ndWlkID0gdC5ndWlkIHx8IHguZ3VpZCsrLCBzO1xuICAgIH0sIHguaG9sZFJlYWR5ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHQgPyB4LnJlYWR5V2FpdCsrIDogeC5yZWFkeSghMCk7XG4gICAgfSwgeC5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSwgeC5wYXJzZUpTT04gPSBKU09OLnBhcnNlLCB4Lm5vZGVOYW1lID0gaiwgeC5pc0Z1bmN0aW9uID0gXywgeC5pc1dpbmRvdyA9IGIsIHguY2FtZWxDYXNlID0gRywgeC50eXBlID0gdywgeC5ub3cgPSBEYXRlLm5vdywgeC5pc051bWVyaWMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGUgPSB4LnR5cGUodCk7cmV0dXJuIChcIm51bWJlclwiID09PSBlIHx8IFwic3RyaW5nXCIgPT09IGUpICYmICFpc05hTih0IC0gcGFyc2VGbG9hdCh0KSk7XG4gICAgfSwgdm9pZCAwID09PSAobiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0uYXBwbHkoZSwgW10pKSB8fCAodC5leHBvcnRzID0gbik7dmFyIFllID0gaS5qUXVlcnksXG4gICAgICAgIFZlID0gaS4kO3JldHVybiB4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGkuJCA9PT0geCAmJiAoaS4kID0gVmUpLCB0ICYmIGkualF1ZXJ5ID09PSB4ICYmIChpLmpRdWVyeSA9IFllKSwgeDtcbiAgICB9LCBzIHx8IChpLmpRdWVyeSA9IGkuJCA9IHgpLCB4O1xuICB9KTtcbn0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gIHQuZXhwb3J0cyA9IHsgY29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdCA9IFwiaHR0cHM6Ly93d3cyLmJhcm5lbnNiaWJsaW90ZWsuc2VcIixcbiAgICAgICAgICBlID0gXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlXCIsXG4gICAgICAgICAgaSA9IFwiL2RldmtleS9hbGYvP3R5cGU9anNvbnAmY2FsbGJhY2s9P1wiLFxuICAgICAgICAgIG4gPSBcIi9Qb3J0YWxzL19kZWZhdWx0L1NraW5zL2JiX0RBR09CQUhfa3J5cGluL2h0bWx0ZW1wbGF0ZXMvXCI7cmV0dXJuIHsgYXBpc2VydmVyOiB0LCBkbm5VUkw6IGUsIGxvY2FsT3JTZXJ2ZXJVUkw6IFwiXCIsIGh0bWx0ZW1wbGF0ZXVybDogZSArIG4sIGRldmtleTogXCJhbGZcIiwgaGFuZGxlYmFydGVtcGxhdGU6IHsgaGJfYm9va2xpc3RfdG1wOiBcImh0dHBzOi8vd3d3LmJhcm5lbnNiaWJsaW90ZWsuc2UvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9odG1sdGVtcGxhdGVzL2Jva2xpc3Rvcl9saXN0YS50eHRcIiwgaGJfc2tyaXZib2tlbmxpc3RfdG1wOiBcImh0dHBzOi8vd3d3LmJhcm5lbnNiaWJsaW90ZWsuc2UvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9odG1sdGVtcGxhdGVzL3Nrcml2Ym9rZW5fbGlzdGEudHh0XCIsIGhiX3Nrcml2Ym9rTW9kYWxWaWV3X3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9za3JpdmJva01vZGFsX1ZpZXcudHh0XCIsIGhiX2Jva3RpcHNsaXN0X3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9ib2t0aXBzX2xpc3RhLnR4dFwiLCBoYl9ib2t0aXBzTW9kYWxWaWV3X3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9ib2t0aXBzTW9kYWxfVmlldy50eHRcIiwgaGJfYmliYmxvbW9ubGlzdF90bXA6IFwiaHR0cHM6Ly93d3cuYmFybmVuc2JpYmxpb3Rlay5zZS9Qb3J0YWxzL19kZWZhdWx0L1NraW5zL2JiX0RBR09CQUhfa3J5cGluL2h0bWx0ZW1wbGF0ZXMvQmliYmxvbW9uX2xpc3RhLnR4dFwiLCBoYl9iaWJibG9tb25JdGVtX3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9CaWJibG9tb25fSXRlbS50eHRcIiwgaGJfc2tyaWJva2VuYmFkZ2VzX3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9iYWRnZXNfc2tyaXZib2tlbl9saXN0YS50eHRcIiwgaGJfYm9rdGlwc2JhZGdlc190bXA6IFwiaHR0cHM6Ly93d3cuYmFybmVuc2JpYmxpb3Rlay5zZS9Qb3J0YWxzL19kZWZhdWx0L1NraW5zL2JiX0RBR09CQUhfa3J5cGluL2h0bWx0ZW1wbGF0ZXMvYmFkZ2VzX2Jva3RpcHNfbGlzdGEudHh0XCIsIGhiX3NwZWNpYWxiYWRnZXNfdG1wOiBcImh0dHBzOi8vd3d3LmJhcm5lbnNiaWJsaW90ZWsuc2UvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9odG1sdGVtcGxhdGVzL2JhZGdlc19zcGVjaWFsX2xpc3RhLnR4dFwiLCBoYl9oaWdoc2NvcmViYWRnZXNfdG1wOiBcImh0dHBzOi8vd3d3LmJhcm5lbnNiaWJsaW90ZWsuc2UvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9odG1sdGVtcGxhdGVzL2JhZGdlc19oaWdoc2NvcmVfbGlzdGEudHh0XCIsIGhiX3NldHRpbmdzQXZhdGFyX3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9zZXR0aW5nc19hdmF0YXJfbGlzdGEudHh0XCIsIGhiX3NldHRpbmdzU2tpbnNfdG1wOiBcImh0dHBzOi8vd3d3LmJhcm5lbnNiaWJsaW90ZWsuc2UvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9odG1sdGVtcGxhdGVzL3NldHRpbmdzX3NraW5fbGlzdGEudHh0XCIsIGhiX2xhc2VyanVzdG51X3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9sYXNlcmp1c3RudV9pdGVtLnR4dFwiLCBoYl91c2VybGF0ZXN0Ym9rdGlwc190bXA6IFwiaHR0cHM6Ly93d3cuYmFybmVuc2JpYmxpb3Rlay5zZS9Qb3J0YWxzL19kZWZhdWx0L1NraW5zL2JiX0RBR09CQUhfa3J5cGluL2h0bWx0ZW1wbGF0ZXMvYm9rdGlwc1NpbmdlbF9JdGVtLnR4dFwiLCBoYl9QcmludE1vZGFsVmFsX3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9wcmludF9tb2RhbFZhbC50eHRcIiwgaGJfUHJpbnRCb2tsaXN0X3RtcDogXCJodHRwczovL3d3dy5iYXJuZW5zYmlibGlvdGVrLnNlL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaHRtbHRlbXBsYXRlcy9wcmludF9Cb2tsaXN0b3IudHh0XCIgfSwgYXBpOiB7IGJva2xpc3RvcjogeyBnZXR1c2VyYm9rbGlzdDogZnVuY3Rpb24gZ2V0dXNlcmJva2xpc3QoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL2Jvb2tsaXN0L3VpZC9cIiArIGUgKyBpO1xuICAgICAgICAgICAgfSwgYWRkdXNlcmJva2l0ZW06IGZ1bmN0aW9uIGFkZHVzZXJib2tpdGVtKGUsIG4sIHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9ib29rbGlzdC90eXAvYWRkYm9vay9ibGlzdGlkL1wiICsgZSArIFwiL3ZhbHVlL1wiICsgbiArIFwiL3VpZC9cIiArIHMgKyBpO1xuICAgICAgICAgICAgfSwgZGVsdXNlcmJva2l0ZW06IGZ1bmN0aW9uIGRlbHVzZXJib2tpdGVtKGUsIG4sIHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9ib29rbGlzdC90eXAvZGVsYm9vay9ibGlzdGlkL1wiICsgZSArIFwiL3ZhbHVlL1wiICsgbiArIFwiL3VpZC9cIiArIHMgKyBpO1xuICAgICAgICAgICAgfSwgYWRkYm9va2xpc3Q6IGZ1bmN0aW9uIGFkZGJvb2tsaXN0KGUsIG4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9ib29rbGlzdC90eXAvYWRkYm9va2xpc3QvYmxpc3RpZC8wL3ZhbHVlL1wiICsgZSArIFwiL3VpZC9cIiArIG4gKyBpO1xuICAgICAgICAgICAgfSwgZWRpdGJvb2tsaXN0OiBmdW5jdGlvbiBlZGl0Ym9va2xpc3QoZSwgbiwgcykge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL2Jvb2tsaXN0L3R5cC9lZGl0Ym9va2xpc3QvYmxpc3RpZC9cIiArIGUgKyBcIi92YWx1ZS9cIiArIG4gKyBcIi91aWQvXCIgKyBzICsgaTtcbiAgICAgICAgICAgIH0sIGRlbGJvb2tsaXN0OiBmdW5jdGlvbiBkZWxib29rbGlzdChlLCBuKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ICsgXCIvQXBpX3YzLjEvYm9va2xpc3QvdHlwL2RlbGJvb2tsaXN0L2JsaXN0aWQvXCIgKyBlICsgXCIvdmFsdWUvMC91aWQvXCIgKyBuICsgaTtcbiAgICAgICAgICAgIH0sIHByaW50VXJsOiBmdW5jdGlvbiBwcmludFVybCh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlICsgXCIvRGVza3RvcE1vZHVsZXMvYmFybmVuc2JpYmxTZXJ2aWNlL2tyeXBpbmJva2xpc3RvclByaW50L2Jva2xpc3RQcmludFRlbXBsYXRlLmh0bWw/dWlkPVwiICsgdC51c2VyaWQgKyBcIiZsaXN0aWQ9XCIgKyB0LmJvb2tsaXN0aWQgKyBcIiZiZz1cIiArIHQuYmdpbWcgKyBcIiZjb2w9XCIgKyB0LmNvbG9yICsgXCImZm9udD1cIiArIHQuZm9udDtcbiAgICAgICAgICAgIH0gfSwgc2tyaXZib2tlbmxpc3RvcjogeyBnZXR1c2Vyc2tyaWJva2VubGlzdDogZnVuY3Rpb24gZ2V0dXNlcnNrcmlib2tlbmxpc3QoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL3Nrcml2Ym9rZW4vY21kdHlwL0J5VXNlcklEL3ZhbC9cIiArIGUgKyBcIi90eXAvMi9hcC8wL3B1Yi8wXCIgKyBpO1xuICAgICAgICAgICAgfSwgZ2V0dXNlcnNrcmlib2tlbkJ5SUQ6IGZ1bmN0aW9uIGdldHVzZXJza3JpYm9rZW5CeUlEKGUsIG4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9za3JpdmJva2VuL2NtZHR5cC9CeVNrcml2aWQvdmFsL1wiICsgZSArIFwiL3R5cC9cIiArIG4gKyBcIi9hcC8wL3B1Yi8wXCIgKyBpO1xuICAgICAgICAgICAgfSwgYWRkc2tyaWJva2VuSXRlbTogZnVuY3Rpb24gYWRkc2tyaWJva2VuSXRlbSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9za3JpdmJva2VuL3R5cC9hZGRza3JpdmJva2VuL2RldmtleS9hbGZcIjtcbiAgICAgICAgICAgIH0sIGVkaXRza3JpYm9rZW5JdGVtOiBmdW5jdGlvbiBlZGl0c2tyaWJva2VuSXRlbSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9za3JpdmJva2VuL3R5cC9lZGl0c2tyaXZib2tlbi9kZXZrZXkvYWxmXCI7XG4gICAgICAgICAgICB9LCBkZWxza3JpYm9rZW5JdGVtOiBmdW5jdGlvbiBkZWxza3JpYm9rZW5JdGVtKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL3Nrcml2Ym9rZW4vdHlwL2RlbGV0ZXNrcml2Ym9rL2RldmtleS9hbGZcIjtcbiAgICAgICAgICAgIH0gfSwgYm9rdGlwc2xpc3RvcjogeyBnZXR1c2VyYm9rdGlwc2xpc3Q6IGZ1bmN0aW9uIGdldHVzZXJib2t0aXBzbGlzdChlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ICsgXCIvQXBpX3YzLjEvYm9rdGlwcy90eXAvQnlVc2VySWQvdmFsL1wiICsgZSArIFwiL3R4dHZhbC8wXCIgKyBpO1xuICAgICAgICAgICAgfSwgZ2V0dXNlcmJva3RpcHNCeVRpcElEOiBmdW5jdGlvbiBnZXR1c2VyYm9rdGlwc0J5VGlwSUQoZSwgbikge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL2Jva3RpcHMvdHlwL0J5VGlwSWQvdmFsL1wiICsgZSArIFwiL3R4dHZhbC8wXCIgKyBpO1xuICAgICAgICAgICAgfSwgZ2V0Ym9va0NvbnRleHRCeUJvb2tJRDogZnVuY3Rpb24gZ2V0Ym9va0NvbnRleHRCeUJvb2tJRChlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ICsgXCIvQXBpX3YzLjEvYm9rdGlwcy90eXAvQnlCb29rSWQvdmFsL1wiICsgZSArIFwiL3R4dHZhbC8wXCIgKyBpO1xuICAgICAgICAgICAgfSwgYWRkYm9rdGlwc0l0ZW06IGZ1bmN0aW9uIGFkZGJva3RpcHNJdGVtKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL2Jva3RpcHMvdHlwL2FkZGJva3RpcHMvZGV2a2V5L2FsZlwiO1xuICAgICAgICAgICAgfSwgZWRpdGJva3RpcHNJdGVtOiBmdW5jdGlvbiBlZGl0Ym9rdGlwc0l0ZW0oKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ICsgXCIvQXBpX3YzLjEvYm9rdGlwcy90eXAvZWRpdGJva3RpcHMvZGV2a2V5L2FsZlwiO1xuICAgICAgICAgICAgfSwgZGVsYm9rdGlwc0l0ZW06IGZ1bmN0aW9uIGRlbGJva3RpcHNJdGVtKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL2Jva3RpcHMvdHlwL2RlbGV0ZWJva3RpcHMvZGV2a2V5L2FsZlwiO1xuICAgICAgICAgICAgfSB9LCBiaWJibG9tb25saXN0b3I6IHsgZ2V0dXNlcmJpYmJsb21vbmxpc3Q6IGZ1bmN0aW9uIGdldHVzZXJiaWJibG9tb25saXN0KGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9iaWJibG9tb24vY21kdHlwL3Vzcm1vbi91aWQvXCIgKyBlICsgXCIvbW9uaWQvMC9kZXZrZXkvYWxmLz90eXBlPWpzb25wXCI7XG4gICAgICAgICAgICB9IH0sIHNjb3JlYm9hcmQ6IHsgZ2V0dXNlcmJhZGdlc2xpc3Q6IGZ1bmN0aW9uIGdldHVzZXJiYWRnZXNsaXN0KGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9hd2FyZC9jbWR0eXAvYnl1c2VyaWQvdWlkL1wiICsgZSArIFwiL2FnLzAvZGV2a2V5L2FsZi8/dHlwZT1qc29ucFwiO1xuICAgICAgICAgICAgfSB9LCBhdXRvY29tcGxldGU6IHsgZ2V0dXJsOiBmdW5jdGlvbiBnZXR1cmwoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiL0FwaV92My4xL2thdGFsb2dlbi9jbWR0eXAvYXV0b2NvbXBsZXRlL2FudGFsL1wiICsgZSArIFwiL2RldmtleS9hbGYvP3R5cGU9anNvblwiO1xuICAgICAgICAgICAgfSB9LCBpbnN0YWxsbmluZ2FyOiB7IHNyYzogZnVuY3Rpb24gc3JjKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9zZXR0aW5ncy9jbWR0eXAvZ2V0L3VpZC9cIiArIGUgKyBcIi9zZXRpZC8wL3NldHZhbC8wL2RldmtleS9hbGYvP3R5cGU9anNvbnBcIjtcbiAgICAgICAgICAgIH0sIGN1ckF2YXRhcnNyYzogXCIvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9pbWFnZXMvYXZhdGFycy9cIiwgY3VyU2tpbnNyYzogXCIvUG9ydGFscy9fZGVmYXVsdC9Ta2lucy9iYl9EQUdPQkFIX2tyeXBpbi9pbWFnZXMvYmFrZ3J1bmRlci9cIiwgdXBkYXRlc2V0dGluZ3M6IGZ1bmN0aW9uIHVwZGF0ZXNldHRpbmdzKGUsIGksIG4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9zZXR0aW5ncy9jbWR0eXAvc2V0dGluZ3MvdWlkL1wiICsgZSArIFwiL3NldGlkL1wiICsgaSArIFwiL3NldHZhbC9cIiArIG4gKyBcIi9kZXZrZXkvYWxmLz90eXBlPWpzb25wXCI7XG4gICAgICAgICAgICB9LCBhdmF0YXJpbWdzcmM6IFwiL1BvcnRhbHMvX2RlZmF1bHQvU2tpbnMvYmJfREFHT0JBSF9rcnlwaW4vaW1hZ2VzL2F2YXRhcnMvXCIsIGxhc2VyanVzdG51OiBmdW5jdGlvbiBsYXNlcmp1c3RudShlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ICsgXCIvQXBpX3YzLjEvc2V0dGluZ3MvY21kdHlwL2dldGxhc2VybnUvdWlkL1wiICsgZSArIFwiL3NldGlkLzAvc2V0dmFsLzAvZGV2a2V5L2FsZi8/dHlwZT1qc29ucFwiO1xuICAgICAgICAgICAgfSwgdXNlcmxhdGVzdGJva3RpcHM6IGZ1bmN0aW9uIHVzZXJsYXRlc3Rib2t0aXBzKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIi9BcGlfdjMuMS9ib2t0aXBzL3R5cC9CeVVzZXJJZExhdGVzdC92YWwvXCIgKyBlICsgXCIvdHh0dmFsLzAvZGV2a2V5L2FsZi8/dHlwZT1qc29ucFwiO1xuICAgICAgICAgICAgfSB9LCBkZXZrZXllbmQ6IGkgfSwgdXNlcmluZm86IHsgYXZhdGFyaW1nOiBcIlwiLCBhdmF0YXJpZDogXCJcIiwgZGVmYXVsdGF2YXRhcmltZzogXCJcIiwgZGVmYXVsdGF2YXRhcmlkOiBcIlwiLCBza2luOiBcIlwiLCBza2luaWQ6IFwiXCIsIGRlZmF1bHRza2luaW1nOiBcIlwiLCBkZWZhdWx0c2tpbmNsYXNzOiBcIlwiLCBkZWZhdWx0c2tpbmlkOiBcIlwiLCB1c2VyaWQ6IFwiXCIsIHJvbGxpZDogXCJcIiB9LCBkZWJ1ZzogXCJmYWxzZVwiIH07XG4gICAgfSgpLCBza3JpdmJva2ltYWdlczogeyBjYXRpbWdiYXNlOiBcIi9EZXNrdG9wTW9kdWxlcy9iYl9hal9Ta3JpdmJva2VuX0tyeXBpbi9pbWFnZXMvXCIsIGNhdGltYWdlc3JjOiBbeyBjYXRpZDogXCIwMDFcIiwgY2F0bmFtZTogXCJCaWxkIHNha25hc1wiLCBpbWdzcmM6IFwiZm90b19zYWtuYXMuanBnXCIgfSwgeyBjYXRpZDogXCIwXCIsIGNhdG5hbWU6IFwiJk91bWw7dnJpZ3RcIiwgaW1nc3JjOiBcInNrcml2Ym9rX2RlZmF1bHQyNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxXCIsIGNhdG5hbWU6IFwiJk91bWw7dnJpZ3RcIiwgaW1nc3JjOiBcInNrcml2Ym9rX292cmlndDI1Nl8zNi5wbmdcIiB9LCB7IGNhdGlkOiBcIjJcIiwgY2F0bmFtZTogXCImT3VtbDt2cmlndFwiLCBpbWdzcmM6IFwic2tyaXZib2tfb3ZyaWd0MjU2XzM2LnBuZ1wiIH0sIHsgY2F0aWQ6IFwiM1wiLCBjYXRuYW1lOiBcIkJlciZhdW1sO3R0ZWxzZVwiLCBpbWdzcmM6IFwic2tyaXZib2tfYmVyYXR0ZWxzZS0yNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCI0XCIsIGNhdG5hbWU6IFwiRGlrdFwiLCBpbWdzcmM6IFwic2tyaXZib2tfZGlrdC0yNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCI1XCIsIGNhdG5hbWU6IFwiVGFua2FyXCIsIGltZ3NyYzogXCJza3JpdmJva190YW5rYXIyNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCI2XCIsIGNhdG5hbWU6IFwiJk91bWw7dnJpZ3RcIiwgaW1nc3JjOiBcInNrcml2Ym9rX292cmlndDI1Nl8zNi5wbmdcIiB9LCB7IGNhdGlkOiBcIjhcIiwgY2F0bmFtZTogXCJEZWNrYXJlXCIsIGltZ3NyYzogXCJza3JpdmJva19kZWNrYXJlMjU2XzM2LnBuZ1wiIH0sIHsgY2F0aWQ6IFwiOVwiLCBjYXRuYW1lOiBcIkRqdXJcIiwgaW1nc3JjOiBcInNrcml2Ym9rX2RqdXIyNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxMFwiLCBjYXRuYW1lOiBcIkZhbnRhc3lcIiwgaW1nc3JjOiBcInNrcml2Ym9rX2ZhbnRhc3kyNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxMVwiLCBjYXRuYW1lOiBcIlNrciZhdW1sO2NrXCIsIGltZ3NyYzogXCJza3JpdmJva19za3JhY2syNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxMlwiLCBjYXRuYW1lOiBcIksmYXVtbDtybGVrXCIsIGltZ3NyYzogXCJza3JpdmJva19rYXJsZWsyNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxM1wiLCBjYXRuYW1lOiBcIlJhbXNhXCIsIGltZ3NyYzogXCJza3JpdmJva19yYW1zYTI1Nl8zNi5wbmdcIiB9LCB7IGNhdGlkOiBcIjE1XCIsIGNhdG5hbWU6IFwiU29yZ2xpZ3RcIiwgaW1nc3JjOiBcInNrcml2Ym9rX3NvcmdsaWd0MjU2XzM2LnBuZ1wiIH0sIHsgY2F0aWQ6IFwiMTZcIiwgY2F0bmFtZTogXCJIdW1vclwiLCBpbWdzcmM6IFwic2tyaXZib2tfc2tyYXR0YTI1Nl8zNi5wbmdcIiB9LCB7IGNhdGlkOiBcIjE3XCIsIGNhdG5hbWU6IFwiU3AmYXVtbDtubmluZ1wiLCBpbWdzcmM6IFwic2tyaXZib2tfc3Bhbm5pbmcyNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxOFwiLCBjYXRuYW1lOiBcIlNwJm91bWw7a2VuXCIsIGltZ3NyYzogXCJza3JpdmJva19zcG9rZW4yNTZfMzYucG5nXCIgfSwgeyBjYXRpZDogXCIxOVwiLCBjYXRuYW1lOiBcIiZBdW1sO3ZlbnR5clwiLCBpbWdzcmM6IFwic2tyaXZib2tfYXZlbnR5cjI1Nl8zNi5wbmdcIiB9LCB7IGNhdGlkOiBcIjIxXCIsIGNhdG5hbWU6IFwiSGFzdGFyXCIsIGltZ3NyYzogXCJza3JpdmJva19oYXN0YXIyNTZfMzYucG5nXCIgfV0gfSwgdXNlcm1lc3NhZ2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdCA9IGZ1bmN0aW9uIHQoX3QyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoX3QyKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlQWxsID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cCh0LnJlcGxhY2UoLyhbXFwvXFwsXFwhXFxcXFxcXlxcJFxce1xcfVxcW1xcXVxcKFxcKVxcLlxcKlxcK1xcP1xcfFxcPFxcPlxcLVxcJl0pL2csIFwiXFxcXCQmXCIpLCBpID8gXCJnaVwiIDogXCJnXCIpLCBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gZS5yZXBsYWNlKC9cXCQvZywgXCIkJCQkXCIpIDogZSk7XG4gICAgICAgICAgfSwgX3QyID0gKF90MiA9IChfdDIgPSAoX3QyID0gKF90MiA9IChfdDIgPSBfdDIucmVwbGFjZUFsbChcIsOEXCIsIFN0cmluZy5mcm9tQ2hhckNvZGUoMTk2KSkpLnJlcGxhY2VBbGwoXCLDhVwiLCBTdHJpbmcuZnJvbUNoYXJDb2RlKDE5NykpKS5yZXBsYWNlQWxsKFwiw5ZcIiwgU3RyaW5nLmZyb21DaGFyQ29kZSgyMTQpKSkucmVwbGFjZUFsbChcIsOkXCIsIFN0cmluZy5mcm9tQ2hhckNvZGUoMjI4KSkpLnJlcGxhY2VBbGwoXCLDpVwiLCBTdHJpbmcuZnJvbUNoYXJDb2RlKDIyOSkpKS5yZXBsYWNlQWxsKFwiw7ZcIiwgU3RyaW5nLmZyb21DaGFyQ29kZSgyNDYpKTtcbiAgICAgICAgfVxuICAgICAgfTtyZXR1cm4geyBpbnN0YWxsbmluZ2FyOiB7IGNvbmZpcm1TYXZlOiB0KFwiw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgc3BhcmEgw6RuZHJpbmdhcm5hP1wiKSB9LCBza3JpdmJvazogeyBjb25maXJtQWxlcnQ6IHQoXCJEdSBtw6VzdGUgZnlsbGEgaSBhbGxhIHVwcGdpZnRlclwiKSwgY29uZmlybUFkZDogdChcIsOEciBkdSBzw6RrZXIgcMOlIGF0dCBkdSB2aWxsIGzDpGdnYSB0aWxsIHRleHRlbj9cIiksIGNvbmZpcm1FZGl0OiB0KFwiw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgw6RuZHJhIGkgdGV4dGVuP1wiKSwgY29uZmlybURlbDogdChcIsOEciBkdSBzw6RrZXIgcMOlIGF0dCBkdSB2aWxsIHRhIGJvcnQgdGV4dGVuP1wiKSB9LCBib2t0aXBzOiB7IGNvbmZpcm1BbGVydDogdChcIkR1IG3DpXN0ZSBmeWxsYSBpIGFsbGEgdXBwZ2lmdGVyXCIpLCBjb25maXJtQWRkOiB0KFwiw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgbMOkZ2dhIHRpbGwgYm9rdGlwc2V0P1wiKSwgY29uZmlybUVkaXQ6IHQoXCLDhHIgZHUgc8Oka2VyIHDDpSBhdHQgZHUgdmlsbCDDpG5kcmEgaSBib2t0aXBzZXQ/XCIpLCBjb25maXJtRGVsOiB0KFwiw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgdGEgYm9ydCBib2t0aXBzZXQ/XCIpIH0sIGJva2xpc3Q6IHsgY29uZmlybUFsZXJ0OiB0KFwiRHUgbcOlc3RlIHNrcml2YSBuw6Vnb3QhXCIpLCBjb25maXJtQWRkOiB0KFwiVmlsbCBkdSBsw6RnZ2EgdGlsbCBkZW5uYSBib2tsaXN0YT9cIiksIGNvbmZpcm1FZGl0OiB0KFwiVmlsbCBkdSBieXRhIG5hbW4gcMOlIGJva2xpc3Rhbj9cIiksIGNvbmZpcm1EZWw6IFwiVmlsbCBkdSB0YSBib3J0IGJva2xpc3Rhbj9cIiB9LCBsYXNlcmp1c3RudTogeyBjb25maXJtUmVtb3ZlOiB0KFwiw4RyIGR1IHPDpGtlcj9cIikgfSB9O1xuICAgIH0oKSB9O1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgKGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgdmFyIHM7XG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gICAgICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAgICAgKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gICAgICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAgICAgKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAgICAgKi8oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHIsXG4gICAgICAgICAgbyA9IDIwMCxcbiAgICAgICAgICBhID0gXCJVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC5cIixcbiAgICAgICAgICBsID0gXCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIsXG4gICAgICAgICAgdSA9IFwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiLFxuICAgICAgICAgIGMgPSA1MDAsXG4gICAgICAgICAgaCA9IFwiX19sb2Rhc2hfcGxhY2Vob2xkZXJfX1wiLFxuICAgICAgICAgIGQgPSAxLFxuICAgICAgICAgIHAgPSAyLFxuICAgICAgICAgIGYgPSA0LFxuICAgICAgICAgIGcgPSAxLFxuICAgICAgICAgIG0gPSAyLFxuICAgICAgICAgIHYgPSAxLFxuICAgICAgICAgIF8gPSAyLFxuICAgICAgICAgIGIgPSA0LFxuICAgICAgICAgIHkgPSA4LFxuICAgICAgICAgIGsgPSAxNixcbiAgICAgICAgICB3ID0gMzIsXG4gICAgICAgICAgeCA9IDY0LFxuICAgICAgICAgIEMgPSAxMjgsXG4gICAgICAgICAgRCA9IDI1NixcbiAgICAgICAgICBTID0gNTEyLFxuICAgICAgICAgIFQgPSAzMCxcbiAgICAgICAgICBJID0gXCIuLi5cIixcbiAgICAgICAgICBBID0gODAwLFxuICAgICAgICAgIGogPSAxNixcbiAgICAgICAgICBNID0gMSxcbiAgICAgICAgICBQID0gMixcbiAgICAgICAgICBFID0gMSAvIDAsXG4gICAgICAgICAgTyA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICAgICAgSCA9IDEuNzk3NjkzMTM0ODYyMzE1N2UzMDgsXG4gICAgICAgICAgTiA9IE5hTixcbiAgICAgICAgICBCID0gNDI5NDk2NzI5NSxcbiAgICAgICAgICBGID0gQiAtIDEsXG4gICAgICAgICAgTCA9IEIgPj4+IDEsXG4gICAgICAgICAgeiA9IFtbXCJhcnlcIiwgQ10sIFtcImJpbmRcIiwgdl0sIFtcImJpbmRLZXlcIiwgX10sIFtcImN1cnJ5XCIsIHldLCBbXCJjdXJyeVJpZ2h0XCIsIGtdLCBbXCJmbGlwXCIsIFNdLCBbXCJwYXJ0aWFsXCIsIHddLCBbXCJwYXJ0aWFsUmlnaHRcIiwgeF0sIFtcInJlYXJnXCIsIERdXSxcbiAgICAgICAgICBXID0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIixcbiAgICAgICAgICBSID0gXCJbb2JqZWN0IEFycmF5XVwiLFxuICAgICAgICAgICQgPSBcIltvYmplY3QgQXN5bmNGdW5jdGlvbl1cIixcbiAgICAgICAgICBxID0gXCJbb2JqZWN0IEJvb2xlYW5dXCIsXG4gICAgICAgICAgVSA9IFwiW29iamVjdCBEYXRlXVwiLFxuICAgICAgICAgIEsgPSBcIltvYmplY3QgRE9NRXhjZXB0aW9uXVwiLFxuICAgICAgICAgIFkgPSBcIltvYmplY3QgRXJyb3JdXCIsXG4gICAgICAgICAgViA9IFwiW29iamVjdCBGdW5jdGlvbl1cIixcbiAgICAgICAgICBHID0gXCJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXVwiLFxuICAgICAgICAgIFggPSBcIltvYmplY3QgTWFwXVwiLFxuICAgICAgICAgIEogPSBcIltvYmplY3QgTnVtYmVyXVwiLFxuICAgICAgICAgIFogPSBcIltvYmplY3QgTnVsbF1cIixcbiAgICAgICAgICBRID0gXCJbb2JqZWN0IE9iamVjdF1cIixcbiAgICAgICAgICB0dCA9IFwiW29iamVjdCBQcm94eV1cIixcbiAgICAgICAgICBldCA9IFwiW29iamVjdCBSZWdFeHBdXCIsXG4gICAgICAgICAgaXQgPSBcIltvYmplY3QgU2V0XVwiLFxuICAgICAgICAgIG50ID0gXCJbb2JqZWN0IFN0cmluZ11cIixcbiAgICAgICAgICBzdCA9IFwiW29iamVjdCBTeW1ib2xdXCIsXG4gICAgICAgICAgcnQgPSBcIltvYmplY3QgVW5kZWZpbmVkXVwiLFxuICAgICAgICAgIG90ID0gXCJbb2JqZWN0IFdlYWtNYXBdXCIsXG4gICAgICAgICAgYXQgPSBcIltvYmplY3QgV2Vha1NldF1cIixcbiAgICAgICAgICBsdCA9IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIixcbiAgICAgICAgICB1dCA9IFwiW29iamVjdCBEYXRhVmlld11cIixcbiAgICAgICAgICBjdCA9IFwiW29iamVjdCBGbG9hdDMyQXJyYXldXCIsXG4gICAgICAgICAgaHQgPSBcIltvYmplY3QgRmxvYXQ2NEFycmF5XVwiLFxuICAgICAgICAgIGR0ID0gXCJbb2JqZWN0IEludDhBcnJheV1cIixcbiAgICAgICAgICBwdCA9IFwiW29iamVjdCBJbnQxNkFycmF5XVwiLFxuICAgICAgICAgIGZ0ID0gXCJbb2JqZWN0IEludDMyQXJyYXldXCIsXG4gICAgICAgICAgZ3QgPSBcIltvYmplY3QgVWludDhBcnJheV1cIixcbiAgICAgICAgICBtdCA9IFwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIixcbiAgICAgICAgICB2dCA9IFwiW29iamVjdCBVaW50MTZBcnJheV1cIixcbiAgICAgICAgICBfdCA9IFwiW29iamVjdCBVaW50MzJBcnJheV1cIixcbiAgICAgICAgICBidCA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgICAgICB5dCA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgICAgIGt0ID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZyxcbiAgICAgICAgICB3dCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgICAgICB4dCA9IC9bJjw+XCInXS9nLFxuICAgICAgICAgIEN0ID0gUmVnRXhwKHd0LnNvdXJjZSksXG4gICAgICAgICAgRHQgPSBSZWdFeHAoeHQuc291cmNlKSxcbiAgICAgICAgICBTdCA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgICAgIFR0ID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgICAgICBJdCA9IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgICAgIEF0ID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgICAgICBqdCA9IC9eXFx3KiQvLFxuICAgICAgICAgIE10ID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nLFxuICAgICAgICAgIFB0ID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgICAgIEV0ID0gUmVnRXhwKFB0LnNvdXJjZSksXG4gICAgICAgICAgT3QgPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgICAgICBIdCA9IC9eXFxzKy8sXG4gICAgICAgICAgTnQgPSAvXFxzKyQvLFxuICAgICAgICAgIEJ0ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgICAgICBGdCA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgICAgICBMdCA9IC8sPyAmIC8sXG4gICAgICAgICAgenQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2csXG4gICAgICAgICAgV3QgPSAvXFxcXChcXFxcKT8vZyxcbiAgICAgICAgICBSdCA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZyxcbiAgICAgICAgICAkdCA9IC9cXHcqJC8sXG4gICAgICAgICAgcXQgPSAvXlstK10weFswLTlhLWZdKyQvaSxcbiAgICAgICAgICBVdCA9IC9eMGJbMDFdKyQvaSxcbiAgICAgICAgICBLdCA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sXG4gICAgICAgICAgWXQgPSAvXjBvWzAtN10rJC9pLFxuICAgICAgICAgIFZ0ID0gL14oPzowfFsxLTldXFxkKikkLyxcbiAgICAgICAgICBHdCA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nLFxuICAgICAgICAgIFh0ID0gLygkXikvLFxuICAgICAgICAgIEp0ID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nLFxuICAgICAgICAgIFp0ID0gXCJcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyZlxcXFx1MjBkMC1cXFxcdTIwZmZcIixcbiAgICAgICAgICBRdCA9IFwiXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmN1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZlxcXFx1MjAwMC1cXFxcdTIwNmYgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMFwiLFxuICAgICAgICAgIHRlID0gXCJbXFxcXHVkODAwLVxcXFx1ZGZmZl1cIixcbiAgICAgICAgICBlZSA9IFwiW1wiICsgUXQgKyBcIl1cIixcbiAgICAgICAgICBpZSA9IFwiW1wiICsgWnQgKyBcIl1cIixcbiAgICAgICAgICBuZSA9IFwiXFxcXGQrXCIsXG4gICAgICAgICAgc2UgPSBcIltcXFxcdTI3MDAtXFxcXHUyN2JmXVwiLFxuICAgICAgICAgIHJlID0gXCJbYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmXVwiLFxuICAgICAgICAgIG9lID0gXCJbXlxcXFx1ZDgwMC1cXFxcdWRmZmZcIiArIFF0ICsgbmUgKyBcIlxcXFx1MjcwMC1cXFxcdTI3YmZhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmZBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdXCIsXG4gICAgICAgICAgYWUgPSBcIlxcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXVwiLFxuICAgICAgICAgIGxlID0gXCJbXlxcXFx1ZDgwMC1cXFxcdWRmZmZdXCIsXG4gICAgICAgICAgdWUgPSBcIig/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn1cIixcbiAgICAgICAgICBjZSA9IFwiW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdXCIsXG4gICAgICAgICAgaGUgPSBcIltBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdXCIsXG4gICAgICAgICAgZGUgPSBcIig/OlwiICsgcmUgKyBcInxcIiArIG9lICsgXCIpXCIsXG4gICAgICAgICAgcGUgPSBcIig/OlwiICsgaGUgKyBcInxcIiArIG9lICsgXCIpXCIsXG4gICAgICAgICAgZmUgPSBcIig/OlwiICsgaWUgKyBcInxcIiArIGFlICsgXCIpXCIgKyBcIj9cIixcbiAgICAgICAgICBnZSA9IFwiW1xcXFx1ZmUwZVxcXFx1ZmUwZl0/XCIgKyBmZSArIChcIig/OlxcXFx1MjAwZCg/OlwiICsgW2xlLCB1ZSwgY2VdLmpvaW4oXCJ8XCIpICsgXCIpW1xcXFx1ZmUwZVxcXFx1ZmUwZl0/XCIgKyBmZSArIFwiKSpcIiksXG4gICAgICAgICAgbWUgPSBcIig/OlwiICsgW3NlLCB1ZSwgY2VdLmpvaW4oXCJ8XCIpICsgXCIpXCIgKyBnZSxcbiAgICAgICAgICB2ZSA9IFwiKD86XCIgKyBbbGUgKyBpZSArIFwiP1wiLCBpZSwgdWUsIGNlLCB0ZV0uam9pbihcInxcIikgKyBcIilcIixcbiAgICAgICAgICBfZSA9IFJlZ0V4cChcIlsn4oCZXVwiLCBcImdcIiksXG4gICAgICAgICAgYmUgPSBSZWdFeHAoaWUsIFwiZ1wiKSxcbiAgICAgICAgICB5ZSA9IFJlZ0V4cChhZSArIFwiKD89XCIgKyBhZSArIFwiKXxcIiArIHZlICsgZ2UsIFwiZ1wiKSxcbiAgICAgICAgICBrZSA9IFJlZ0V4cChbaGUgKyBcIj9cIiArIHJlICsgXCIrKD86WyfigJldKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPyg/PVwiICsgW2VlLCBoZSwgXCIkXCJdLmpvaW4oXCJ8XCIpICsgXCIpXCIsIHBlICsgXCIrKD86WyfigJldKD86RHxMTHxNfFJFfFN8VHxWRSkpPyg/PVwiICsgW2VlLCBoZSArIGRlLCBcIiRcIl0uam9pbihcInxcIikgKyBcIilcIiwgaGUgKyBcIj9cIiArIGRlICsgXCIrKD86WyfigJldKD86ZHxsbHxtfHJlfHN8dHx2ZSkpP1wiLCBoZSArIFwiKyg/Olsn4oCZXSg/OkR8TEx8TXxSRXxTfFR8VkUpKT9cIiwgXCJcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSlcIiwgXCJcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSlcIiwgbmUsIG1lXS5qb2luKFwifFwiKSwgXCJnXCIpLFxuICAgICAgICAgIHdlID0gUmVnRXhwKFwiW1xcXFx1MjAwZFxcXFx1ZDgwMC1cXFxcdWRmZmZcIiArIFp0ICsgXCJcXFxcdWZlMGVcXFxcdWZlMGZdXCIpLFxuICAgICAgICAgIHhlID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS8sXG4gICAgICAgICAgQ2UgPSBbXCJBcnJheVwiLCBcIkJ1ZmZlclwiLCBcIkRhdGFWaWV3XCIsIFwiRGF0ZVwiLCBcIkVycm9yXCIsIFwiRmxvYXQzMkFycmF5XCIsIFwiRmxvYXQ2NEFycmF5XCIsIFwiRnVuY3Rpb25cIiwgXCJJbnQ4QXJyYXlcIiwgXCJJbnQxNkFycmF5XCIsIFwiSW50MzJBcnJheVwiLCBcIk1hcFwiLCBcIk1hdGhcIiwgXCJPYmplY3RcIiwgXCJQcm9taXNlXCIsIFwiUmVnRXhwXCIsIFwiU2V0XCIsIFwiU3RyaW5nXCIsIFwiU3ltYm9sXCIsIFwiVHlwZUVycm9yXCIsIFwiVWludDhBcnJheVwiLCBcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsIFwiVWludDE2QXJyYXlcIiwgXCJVaW50MzJBcnJheVwiLCBcIldlYWtNYXBcIiwgXCJfXCIsIFwiY2xlYXJUaW1lb3V0XCIsIFwiaXNGaW5pdGVcIiwgXCJwYXJzZUludFwiLCBcInNldFRpbWVvdXRcIl0sXG4gICAgICAgICAgRGUgPSAtMSxcbiAgICAgICAgICBTZSA9IHt9O1NlW2N0XSA9IFNlW2h0XSA9IFNlW2R0XSA9IFNlW3B0XSA9IFNlW2Z0XSA9IFNlW2d0XSA9IFNlW210XSA9IFNlW3Z0XSA9IFNlW190XSA9ICEwLCBTZVtXXSA9IFNlW1JdID0gU2VbbHRdID0gU2VbcV0gPSBTZVt1dF0gPSBTZVtVXSA9IFNlW1ldID0gU2VbVl0gPSBTZVtYXSA9IFNlW0pdID0gU2VbUV0gPSBTZVtldF0gPSBTZVtpdF0gPSBTZVtudF0gPSBTZVtvdF0gPSAhMTt2YXIgVGUgPSB7fTtUZVtXXSA9IFRlW1JdID0gVGVbbHRdID0gVGVbdXRdID0gVGVbcV0gPSBUZVtVXSA9IFRlW2N0XSA9IFRlW2h0XSA9IFRlW2R0XSA9IFRlW3B0XSA9IFRlW2Z0XSA9IFRlW1hdID0gVGVbSl0gPSBUZVtRXSA9IFRlW2V0XSA9IFRlW2l0XSA9IFRlW250XSA9IFRlW3N0XSA9IFRlW2d0XSA9IFRlW210XSA9IFRlW3Z0XSA9IFRlW190XSA9ICEwLCBUZVtZXSA9IFRlW1ZdID0gVGVbb3RdID0gITE7dmFyIEllID0geyBcIlxcXFxcIjogXCJcXFxcXCIsIFwiJ1wiOiBcIidcIiwgXCJcXG5cIjogXCJuXCIsIFwiXFxyXCI6IFwiclwiLCBcIlxcdTIwMjhcIjogXCJ1MjAyOFwiLCBcIlxcdTIwMjlcIjogXCJ1MjAyOVwiIH0sXG4gICAgICAgICAgQWUgPSBwYXJzZUZsb2F0LFxuICAgICAgICAgIGplID0gcGFyc2VJbnQsXG4gICAgICAgICAgTWUgPSBcIm9iamVjdFwiID09ICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHQpKSAmJiB0ICYmIHQuT2JqZWN0ID09PSBPYmplY3QgJiYgdCxcbiAgICAgICAgICBQZSA9IFwib2JqZWN0XCIgPT0gKHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yoc2VsZikpICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmLFxuICAgICAgICAgIEVlID0gTWUgfHwgUGUgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLFxuICAgICAgICAgIE9lID0gZSAmJiAhZS5ub2RlVHlwZSAmJiBlLFxuICAgICAgICAgIEhlID0gT2UgJiYgXCJvYmplY3RcIiA9PSAodHlwZW9mIG4gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihuKSkgJiYgbiAmJiAhbi5ub2RlVHlwZSAmJiBuLFxuICAgICAgICAgIE5lID0gSGUgJiYgSGUuZXhwb3J0cyA9PT0gT2UsXG4gICAgICAgICAgQmUgPSBOZSAmJiBNZS5wcm9jZXNzLFxuICAgICAgICAgIEZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciB0ID0gSGUgJiYgSGUucmVxdWlyZSAmJiBIZS5yZXF1aXJlKFwidXRpbFwiKS50eXBlcztyZXR1cm4gdCB8fCBCZSAmJiBCZS5iaW5kaW5nICYmIEJlLmJpbmRpbmcoXCJ1dGlsXCIpO1xuICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgfSgpLFxuICAgICAgICAgIExlID0gRmUgJiYgRmUuaXNBcnJheUJ1ZmZlcixcbiAgICAgICAgICB6ZSA9IEZlICYmIEZlLmlzRGF0ZSxcbiAgICAgICAgICBXZSA9IEZlICYmIEZlLmlzTWFwLFxuICAgICAgICAgIFJlID0gRmUgJiYgRmUuaXNSZWdFeHAsXG4gICAgICAgICAgJGUgPSBGZSAmJiBGZS5pc1NldCxcbiAgICAgICAgICBxZSA9IEZlICYmIEZlLmlzVHlwZWRBcnJheTtmdW5jdGlvbiBVZSh0LCBlLCBpKSB7XG4gICAgICAgIHN3aXRjaCAoaS5sZW5ndGgpIHtjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gdC5jYWxsKGUpO2Nhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgaVswXSk7Y2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIHQuY2FsbChlLCBpWzBdLCBpWzFdKTtjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gdC5jYWxsKGUsIGlbMF0sIGlbMV0sIGlbMl0pO31yZXR1cm4gdC5hcHBseShlLCBpKTtcbiAgICAgIH1mdW5jdGlvbiBLZSh0LCBlLCBpLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSAtMSwgciA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDsgKytzIDwgcjspIHtcbiAgICAgICAgICB2YXIgbyA9IHRbc107ZShuLCBvLCBpKG8pLCB0KTtcbiAgICAgICAgfXJldHVybiBuO1xuICAgICAgfWZ1bmN0aW9uIFllKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IC0xLCBuID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoOyArK2kgPCBuICYmICExICE9PSBlKHRbaV0sIGksIHQpOykge31yZXR1cm4gdDtcbiAgICAgIH1mdW5jdGlvbiBWZSh0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7IGktLSAmJiAhMSAhPT0gZSh0W2ldLCBpLCB0KTspIHt9cmV0dXJuIHQ7XG4gICAgICB9ZnVuY3Rpb24gR2UodCwgZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgaWYgKCFlKHRbaV0sIGksIHQpKSByZXR1cm4gITE7XG4gICAgICAgIH1yZXR1cm4gITA7XG4gICAgICB9ZnVuY3Rpb24gWGUodCwgZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGgsIHMgPSAwLCByID0gW107ICsraSA8IG47KSB7XG4gICAgICAgICAgdmFyIG8gPSB0W2ldO2UobywgaSwgdCkgJiYgKHJbcysrXSA9IG8pO1xuICAgICAgICB9cmV0dXJuIHI7XG4gICAgICB9ZnVuY3Rpb24gSmUodCwgZSkge1xuICAgICAgICByZXR1cm4gISEobnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoKSAmJiBhaSh0LCBlLCAwKSA+IC0xO1xuICAgICAgfWZ1bmN0aW9uIFplKHQsIGUsIGkpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IC0xLCBzID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoOyArK24gPCBzOykge1xuICAgICAgICAgIGlmIChpKGUsIHRbbl0pKSByZXR1cm4gITA7XG4gICAgICAgIH1yZXR1cm4gITE7XG4gICAgICB9ZnVuY3Rpb24gUWUodCwgZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGgsIHMgPSBBcnJheShuKTsgKytpIDwgbjspIHtcbiAgICAgICAgICBzW2ldID0gZSh0W2ldLCBpLCB0KTtcbiAgICAgICAgfXJldHVybiBzO1xuICAgICAgfWZ1bmN0aW9uIHRpKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IC0xLCBuID0gZS5sZW5ndGgsIHMgPSB0Lmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgICB0W3MgKyBpXSA9IGVbaV07XG4gICAgICAgIH1yZXR1cm4gdDtcbiAgICAgIH1mdW5jdGlvbiBlaSh0LCBlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzID0gLTEsXG4gICAgICAgICAgICByID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO2ZvciAobiAmJiByICYmIChpID0gdFsrK3NdKTsgKytzIDwgcjspIHtcbiAgICAgICAgICBpID0gZShpLCB0W3NdLCBzLCB0KTtcbiAgICAgICAgfXJldHVybiBpO1xuICAgICAgfWZ1bmN0aW9uIGlpKHQsIGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7Zm9yIChuICYmIHMgJiYgKGkgPSB0Wy0tc10pOyBzLS07KSB7XG4gICAgICAgICAgaSA9IGUoaSwgdFtzXSwgcywgdCk7XG4gICAgICAgIH1yZXR1cm4gaTtcbiAgICAgIH1mdW5jdGlvbiBuaSh0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgICBpZiAoZSh0W2ldLCBpLCB0KSkgcmV0dXJuICEwO1xuICAgICAgICB9cmV0dXJuICExO1xuICAgICAgfXZhciBzaSA9IGhpKFwibGVuZ3RoXCIpO2Z1bmN0aW9uIHJpKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG47cmV0dXJuIGkodCwgZnVuY3Rpb24gKHQsIGksIHMpIHtcbiAgICAgICAgICBpZiAoZSh0LCBpLCBzKSkgcmV0dXJuIG4gPSBpLCAhMTtcbiAgICAgICAgfSksIG47XG4gICAgICB9ZnVuY3Rpb24gb2kodCwgZSwgaSwgbikge1xuICAgICAgICBmb3IgKHZhciBzID0gdC5sZW5ndGgsIHIgPSBpICsgKG4gPyAxIDogLTEpOyBuID8gci0tIDogKytyIDwgczspIHtcbiAgICAgICAgICBpZiAoZSh0W3JdLCByLCB0KSkgcmV0dXJuIHI7XG4gICAgICAgIH1yZXR1cm4gLTE7XG4gICAgICB9ZnVuY3Rpb24gYWkodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gZSA9PSBlID8gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IGkgLSAxLFxuICAgICAgICAgICAgICBzID0gdC5sZW5ndGg7Zm9yICg7ICsrbiA8IHM7KSB7XG4gICAgICAgICAgICBpZiAodFtuXSA9PT0gZSkgcmV0dXJuIG47XG4gICAgICAgICAgfXJldHVybiAtMTtcbiAgICAgICAgfSh0LCBlLCBpKSA6IG9pKHQsIHVpLCBpKTtcbiAgICAgIH1mdW5jdGlvbiBsaSh0LCBlLCBpLCBuKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSBpIC0gMSwgciA9IHQubGVuZ3RoOyArK3MgPCByOykge1xuICAgICAgICAgIGlmIChuKHRbc10sIGUpKSByZXR1cm4gcztcbiAgICAgICAgfXJldHVybiAtMTtcbiAgICAgIH1mdW5jdGlvbiB1aSh0KSB7XG4gICAgICAgIHJldHVybiB0ICE9IHQ7XG4gICAgICB9ZnVuY3Rpb24gY2kodCwgZSkge1xuICAgICAgICB2YXIgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtyZXR1cm4gaSA/IGZpKHQsIGUpIC8gaSA6IE47XG4gICAgICB9ZnVuY3Rpb24gaGkodCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSBlID8gciA6IGVbdF07XG4gICAgICAgIH07XG4gICAgICB9ZnVuY3Rpb24gZGkodCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gciA6IHRbZV07XG4gICAgICAgIH07XG4gICAgICB9ZnVuY3Rpb24gcGkodCwgZSwgaSwgbiwgcykge1xuICAgICAgICByZXR1cm4gcyh0LCBmdW5jdGlvbiAodCwgcywgcikge1xuICAgICAgICAgIGkgPSBuID8gKG4gPSAhMSwgdCkgOiBlKGksIHQsIHMsIHIpO1xuICAgICAgICB9KSwgaTtcbiAgICAgIH1mdW5jdGlvbiBmaSh0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIGksIG4gPSAtMSwgcyA9IHQubGVuZ3RoOyArK24gPCBzOykge1xuICAgICAgICAgIHZhciBvID0gZSh0W25dKTtvICE9PSByICYmIChpID0gaSA9PT0gciA/IG8gOiBpICsgbyk7XG4gICAgICAgIH1yZXR1cm4gaTtcbiAgICAgIH1mdW5jdGlvbiBnaSh0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IEFycmF5KHQpOyArK2kgPCB0Oykge1xuICAgICAgICAgIG5baV0gPSBlKGkpO1xuICAgICAgICB9cmV0dXJuIG47XG4gICAgICB9ZnVuY3Rpb24gbWkodCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gdChlKTtcbiAgICAgICAgfTtcbiAgICAgIH1mdW5jdGlvbiB2aSh0LCBlKSB7XG4gICAgICAgIHJldHVybiBRZShlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiB0W2VdO1xuICAgICAgICB9KTtcbiAgICAgIH1mdW5jdGlvbiBfaSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0LmhhcyhlKTtcbiAgICAgIH1mdW5jdGlvbiBiaSh0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IHQubGVuZ3RoOyArK2kgPCBuICYmIGFpKGUsIHRbaV0sIDApID4gLTE7KSB7fXJldHVybiBpO1xuICAgICAgfWZ1bmN0aW9uIHlpKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHQubGVuZ3RoOyBpLS0gJiYgYWkoZSwgdFtpXSwgMCkgPiAtMTspIHt9cmV0dXJuIGk7XG4gICAgICB9dmFyIGtpID0gZGkoeyBcIsOAXCI6IFwiQVwiLCBcIsOBXCI6IFwiQVwiLCBcIsOCXCI6IFwiQVwiLCBcIsODXCI6IFwiQVwiLCBcIsOEXCI6IFwiQVwiLCBcIsOFXCI6IFwiQVwiLCBcIsOgXCI6IFwiYVwiLCBcIsOhXCI6IFwiYVwiLCBcIsOiXCI6IFwiYVwiLCBcIsOjXCI6IFwiYVwiLCBcIsOkXCI6IFwiYVwiLCBcIsOlXCI6IFwiYVwiLCBcIsOHXCI6IFwiQ1wiLCBcIsOnXCI6IFwiY1wiLCBcIsOQXCI6IFwiRFwiLCBcIsOwXCI6IFwiZFwiLCBcIsOIXCI6IFwiRVwiLCBcIsOJXCI6IFwiRVwiLCBcIsOKXCI6IFwiRVwiLCBcIsOLXCI6IFwiRVwiLCBcIsOoXCI6IFwiZVwiLCBcIsOpXCI6IFwiZVwiLCBcIsOqXCI6IFwiZVwiLCBcIsOrXCI6IFwiZVwiLCBcIsOMXCI6IFwiSVwiLCBcIsONXCI6IFwiSVwiLCBcIsOOXCI6IFwiSVwiLCBcIsOPXCI6IFwiSVwiLCBcIsOsXCI6IFwiaVwiLCBcIsOtXCI6IFwiaVwiLCBcIsOuXCI6IFwiaVwiLCBcIsOvXCI6IFwiaVwiLCBcIsORXCI6IFwiTlwiLCBcIsOxXCI6IFwiblwiLCBcIsOSXCI6IFwiT1wiLCBcIsOTXCI6IFwiT1wiLCBcIsOUXCI6IFwiT1wiLCBcIsOVXCI6IFwiT1wiLCBcIsOWXCI6IFwiT1wiLCBcIsOYXCI6IFwiT1wiLCBcIsOyXCI6IFwib1wiLCBcIsOzXCI6IFwib1wiLCBcIsO0XCI6IFwib1wiLCBcIsO1XCI6IFwib1wiLCBcIsO2XCI6IFwib1wiLCBcIsO4XCI6IFwib1wiLCBcIsOZXCI6IFwiVVwiLCBcIsOaXCI6IFwiVVwiLCBcIsObXCI6IFwiVVwiLCBcIsOcXCI6IFwiVVwiLCBcIsO5XCI6IFwidVwiLCBcIsO6XCI6IFwidVwiLCBcIsO7XCI6IFwidVwiLCBcIsO8XCI6IFwidVwiLCBcIsOdXCI6IFwiWVwiLCBcIsO9XCI6IFwieVwiLCBcIsO/XCI6IFwieVwiLCBcIsOGXCI6IFwiQWVcIiwgXCLDplwiOiBcImFlXCIsIFwiw55cIjogXCJUaFwiLCBcIsO+XCI6IFwidGhcIiwgXCLDn1wiOiBcInNzXCIsIFwixIBcIjogXCJBXCIsIFwixIJcIjogXCJBXCIsIFwixIRcIjogXCJBXCIsIFwixIFcIjogXCJhXCIsIFwixINcIjogXCJhXCIsIFwixIVcIjogXCJhXCIsIFwixIZcIjogXCJDXCIsIFwixIhcIjogXCJDXCIsIFwixIpcIjogXCJDXCIsIFwixIxcIjogXCJDXCIsIFwixIdcIjogXCJjXCIsIFwixIlcIjogXCJjXCIsIFwixItcIjogXCJjXCIsIFwixI1cIjogXCJjXCIsIFwixI5cIjogXCJEXCIsIFwixJBcIjogXCJEXCIsIFwixI9cIjogXCJkXCIsIFwixJFcIjogXCJkXCIsIFwixJJcIjogXCJFXCIsIFwixJRcIjogXCJFXCIsIFwixJZcIjogXCJFXCIsIFwixJhcIjogXCJFXCIsIFwixJpcIjogXCJFXCIsIFwixJNcIjogXCJlXCIsIFwixJVcIjogXCJlXCIsIFwixJdcIjogXCJlXCIsIFwixJlcIjogXCJlXCIsIFwixJtcIjogXCJlXCIsIFwixJxcIjogXCJHXCIsIFwixJ5cIjogXCJHXCIsIFwixKBcIjogXCJHXCIsIFwixKJcIjogXCJHXCIsIFwixJ1cIjogXCJnXCIsIFwixJ9cIjogXCJnXCIsIFwixKFcIjogXCJnXCIsIFwixKNcIjogXCJnXCIsIFwixKRcIjogXCJIXCIsIFwixKZcIjogXCJIXCIsIFwixKVcIjogXCJoXCIsIFwixKdcIjogXCJoXCIsIFwixKhcIjogXCJJXCIsIFwixKpcIjogXCJJXCIsIFwixKxcIjogXCJJXCIsIFwixK5cIjogXCJJXCIsIFwixLBcIjogXCJJXCIsIFwixKlcIjogXCJpXCIsIFwixKtcIjogXCJpXCIsIFwixK1cIjogXCJpXCIsIFwixK9cIjogXCJpXCIsIFwixLFcIjogXCJpXCIsIFwixLRcIjogXCJKXCIsIFwixLVcIjogXCJqXCIsIFwixLZcIjogXCJLXCIsIFwixLdcIjogXCJrXCIsIFwixLhcIjogXCJrXCIsIFwixLlcIjogXCJMXCIsIFwixLtcIjogXCJMXCIsIFwixL1cIjogXCJMXCIsIFwixL9cIjogXCJMXCIsIFwixYFcIjogXCJMXCIsIFwixLpcIjogXCJsXCIsIFwixLxcIjogXCJsXCIsIFwixL5cIjogXCJsXCIsIFwixYBcIjogXCJsXCIsIFwixYJcIjogXCJsXCIsIFwixYNcIjogXCJOXCIsIFwixYVcIjogXCJOXCIsIFwixYdcIjogXCJOXCIsIFwixYpcIjogXCJOXCIsIFwixYRcIjogXCJuXCIsIFwixYZcIjogXCJuXCIsIFwixYhcIjogXCJuXCIsIFwixYtcIjogXCJuXCIsIFwixYxcIjogXCJPXCIsIFwixY5cIjogXCJPXCIsIFwixZBcIjogXCJPXCIsIFwixY1cIjogXCJvXCIsIFwixY9cIjogXCJvXCIsIFwixZFcIjogXCJvXCIsIFwixZRcIjogXCJSXCIsIFwixZZcIjogXCJSXCIsIFwixZhcIjogXCJSXCIsIFwixZVcIjogXCJyXCIsIFwixZdcIjogXCJyXCIsIFwixZlcIjogXCJyXCIsIFwixZpcIjogXCJTXCIsIFwixZxcIjogXCJTXCIsIFwixZ5cIjogXCJTXCIsIFwixaBcIjogXCJTXCIsIFwixZtcIjogXCJzXCIsIFwixZ1cIjogXCJzXCIsIFwixZ9cIjogXCJzXCIsIFwixaFcIjogXCJzXCIsIFwixaJcIjogXCJUXCIsIFwixaRcIjogXCJUXCIsIFwixaZcIjogXCJUXCIsIFwixaNcIjogXCJ0XCIsIFwixaVcIjogXCJ0XCIsIFwixadcIjogXCJ0XCIsIFwixahcIjogXCJVXCIsIFwixapcIjogXCJVXCIsIFwixaxcIjogXCJVXCIsIFwixa5cIjogXCJVXCIsIFwixbBcIjogXCJVXCIsIFwixbJcIjogXCJVXCIsIFwixalcIjogXCJ1XCIsIFwixatcIjogXCJ1XCIsIFwixa1cIjogXCJ1XCIsIFwixa9cIjogXCJ1XCIsIFwixbFcIjogXCJ1XCIsIFwixbNcIjogXCJ1XCIsIFwixbRcIjogXCJXXCIsIFwixbVcIjogXCJ3XCIsIFwixbZcIjogXCJZXCIsIFwixbdcIjogXCJ5XCIsIFwixbhcIjogXCJZXCIsIFwixblcIjogXCJaXCIsIFwixbtcIjogXCJaXCIsIFwixb1cIjogXCJaXCIsIFwixbpcIjogXCJ6XCIsIFwixbxcIjogXCJ6XCIsIFwixb5cIjogXCJ6XCIsIFwixLJcIjogXCJJSlwiLCBcIsSzXCI6IFwiaWpcIiwgXCLFklwiOiBcIk9lXCIsIFwixZNcIjogXCJvZVwiLCBcIsWJXCI6IFwiJ25cIiwgXCLFv1wiOiBcInNcIiB9KSxcbiAgICAgICAgICB3aSA9IGRpKHsgXCImXCI6IFwiJmFtcDtcIiwgXCI8XCI6IFwiJmx0O1wiLCBcIj5cIjogXCImZ3Q7XCIsICdcIic6IFwiJnF1b3Q7XCIsIFwiJ1wiOiBcIiYjMzk7XCIgfSk7ZnVuY3Rpb24geGkodCkge1xuICAgICAgICByZXR1cm4gXCJcXFxcXCIgKyBJZVt0XTtcbiAgICAgIH1mdW5jdGlvbiBDaSh0KSB7XG4gICAgICAgIHJldHVybiB3ZS50ZXN0KHQpO1xuICAgICAgfWZ1bmN0aW9uIERpKHQpIHtcbiAgICAgICAgdmFyIGUgPSAtMSxcbiAgICAgICAgICAgIGkgPSBBcnJheSh0LnNpemUpO3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgICBpWysrZV0gPSBbbiwgdF07XG4gICAgICAgIH0pLCBpO1xuICAgICAgfWZ1bmN0aW9uIFNpKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgcmV0dXJuIHQoZShpKSk7XG4gICAgICAgIH07XG4gICAgICB9ZnVuY3Rpb24gVGkodCwgZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSB0Lmxlbmd0aCwgcyA9IDAsIHIgPSBbXTsgKytpIDwgbjspIHtcbiAgICAgICAgICB2YXIgbyA9IHRbaV07byAhPT0gZSAmJiBvICE9PSBoIHx8ICh0W2ldID0gaCwgcltzKytdID0gaSk7XG4gICAgICAgIH1yZXR1cm4gcjtcbiAgICAgIH1mdW5jdGlvbiBJaSh0KSB7XG4gICAgICAgIHZhciBlID0gLTEsXG4gICAgICAgICAgICBpID0gQXJyYXkodC5zaXplKTtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaVsrK2VdID0gdDtcbiAgICAgICAgfSksIGk7XG4gICAgICB9ZnVuY3Rpb24gQWkodCkge1xuICAgICAgICB2YXIgZSA9IC0xLFxuICAgICAgICAgICAgaSA9IEFycmF5KHQuc2l6ZSk7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGlbKytlXSA9IFt0LCB0XTtcbiAgICAgICAgfSksIGk7XG4gICAgICB9ZnVuY3Rpb24gamkodCkge1xuICAgICAgICByZXR1cm4gQ2kodCkgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0geWUubGFzdEluZGV4ID0gMDtmb3IgKDsgeWUudGVzdCh0KTspIHtcbiAgICAgICAgICAgICsrZTtcbiAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgIH0odCkgOiBzaSh0KTtcbiAgICAgIH1mdW5jdGlvbiBNaSh0KSB7XG4gICAgICAgIHJldHVybiBDaSh0KSA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQubWF0Y2goeWUpIHx8IFtdO1xuICAgICAgICB9KHQpIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5zcGxpdChcIlwiKTtcbiAgICAgICAgfSh0KTtcbiAgICAgIH12YXIgUGkgPSBkaSh7IFwiJmFtcDtcIjogXCImXCIsIFwiJmx0O1wiOiBcIjxcIiwgXCImZ3Q7XCI6IFwiPlwiLCBcIiZxdW90O1wiOiAnXCInLCBcIiYjMzk7XCI6IFwiJ1wiIH0pO3ZhciBFaSA9IGZ1bmN0aW9uIHQoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4gPSAoZSA9IG51bGwgPT0gZSA/IEVlIDogRWkuZGVmYXVsdHMoRWUuT2JqZWN0KCksIGUsIEVpLnBpY2soRWUsIENlKSkpLkFycmF5LFxuICAgICAgICAgICAgcyA9IGUuRGF0ZSxcbiAgICAgICAgICAgIFp0ID0gZS5FcnJvcixcbiAgICAgICAgICAgIFF0ID0gZS5GdW5jdGlvbixcbiAgICAgICAgICAgIHRlID0gZS5NYXRoLFxuICAgICAgICAgICAgZWUgPSBlLk9iamVjdCxcbiAgICAgICAgICAgIGllID0gZS5SZWdFeHAsXG4gICAgICAgICAgICBuZSA9IGUuU3RyaW5nLFxuICAgICAgICAgICAgc2UgPSBlLlR5cGVFcnJvcixcbiAgICAgICAgICAgIHJlID0gbi5wcm90b3R5cGUsXG4gICAgICAgICAgICBvZSA9IFF0LnByb3RvdHlwZSxcbiAgICAgICAgICAgIGFlID0gZWUucHJvdG90eXBlLFxuICAgICAgICAgICAgbGUgPSBlW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdLFxuICAgICAgICAgICAgdWUgPSBvZS50b1N0cmluZyxcbiAgICAgICAgICAgIGNlID0gYWUuaGFzT3duUHJvcGVydHksXG4gICAgICAgICAgICBoZSA9IDAsXG4gICAgICAgICAgICBkZSA9IChpID0gL1teLl0rJC8uZXhlYyhsZSAmJiBsZS5rZXlzICYmIGxlLmtleXMuSUVfUFJPVE8gfHwgXCJcIikpID8gXCJTeW1ib2woc3JjKV8xLlwiICsgaSA6IFwiXCIsXG4gICAgICAgICAgICBwZSA9IGFlLnRvU3RyaW5nLFxuICAgICAgICAgICAgZmUgPSB1ZS5jYWxsKGVlKSxcbiAgICAgICAgICAgIGdlID0gRWUuXyxcbiAgICAgICAgICAgIG1lID0gaWUoXCJeXCIgKyB1ZS5jYWxsKGNlKS5yZXBsYWNlKFB0LCBcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCBcIiQxLio/XCIpICsgXCIkXCIpLFxuICAgICAgICAgICAgdmUgPSBOZSA/IGUuQnVmZmVyIDogcixcbiAgICAgICAgICAgIHllID0gZS5TeW1ib2wsXG4gICAgICAgICAgICB3ZSA9IGUuVWludDhBcnJheSxcbiAgICAgICAgICAgIEllID0gdmUgPyB2ZS5hbGxvY1Vuc2FmZSA6IHIsXG4gICAgICAgICAgICBNZSA9IFNpKGVlLmdldFByb3RvdHlwZU9mLCBlZSksXG4gICAgICAgICAgICBQZSA9IGVlLmNyZWF0ZSxcbiAgICAgICAgICAgIE9lID0gYWUucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgICAgICBIZSA9IHJlLnNwbGljZSxcbiAgICAgICAgICAgIEJlID0geWUgPyB5ZS5pc0NvbmNhdFNwcmVhZGFibGUgOiByLFxuICAgICAgICAgICAgRmUgPSB5ZSA/IHllLml0ZXJhdG9yIDogcixcbiAgICAgICAgICAgIHNpID0geWUgPyB5ZS50b1N0cmluZ1RhZyA6IHIsXG4gICAgICAgICAgICBkaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHQgPSBGcihlZSwgXCJkZWZpbmVQcm9wZXJ0eVwiKTtyZXR1cm4gdCh7fSwgXCJcIiwge30pLCB0O1xuICAgICAgICAgIH0gY2F0Y2ggKHQpIHt9XG4gICAgICAgIH0oKSxcbiAgICAgICAgICAgIE9pID0gZS5jbGVhclRpbWVvdXQgIT09IEVlLmNsZWFyVGltZW91dCAmJiBlLmNsZWFyVGltZW91dCxcbiAgICAgICAgICAgIEhpID0gcyAmJiBzLm5vdyAhPT0gRWUuRGF0ZS5ub3cgJiYgcy5ub3csXG4gICAgICAgICAgICBOaSA9IGUuc2V0VGltZW91dCAhPT0gRWUuc2V0VGltZW91dCAmJiBlLnNldFRpbWVvdXQsXG4gICAgICAgICAgICBCaSA9IHRlLmNlaWwsXG4gICAgICAgICAgICBGaSA9IHRlLmZsb29yLFxuICAgICAgICAgICAgTGkgPSBlZS5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgICAgICB6aSA9IHZlID8gdmUuaXNCdWZmZXIgOiByLFxuICAgICAgICAgICAgV2kgPSBlLmlzRmluaXRlLFxuICAgICAgICAgICAgUmkgPSByZS5qb2luLFxuICAgICAgICAgICAgJGkgPSBTaShlZS5rZXlzLCBlZSksXG4gICAgICAgICAgICBxaSA9IHRlLm1heCxcbiAgICAgICAgICAgIFVpID0gdGUubWluLFxuICAgICAgICAgICAgS2kgPSBzLm5vdyxcbiAgICAgICAgICAgIFlpID0gZS5wYXJzZUludCxcbiAgICAgICAgICAgIFZpID0gdGUucmFuZG9tLFxuICAgICAgICAgICAgR2kgPSByZS5yZXZlcnNlLFxuICAgICAgICAgICAgWGkgPSBGcihlLCBcIkRhdGFWaWV3XCIpLFxuICAgICAgICAgICAgSmkgPSBGcihlLCBcIk1hcFwiKSxcbiAgICAgICAgICAgIFppID0gRnIoZSwgXCJQcm9taXNlXCIpLFxuICAgICAgICAgICAgUWkgPSBGcihlLCBcIlNldFwiKSxcbiAgICAgICAgICAgIHRuID0gRnIoZSwgXCJXZWFrTWFwXCIpLFxuICAgICAgICAgICAgZW4gPSBGcihlZSwgXCJjcmVhdGVcIiksXG4gICAgICAgICAgICBubiA9IHRuICYmIG5ldyB0bigpLFxuICAgICAgICAgICAgc24gPSB7fSxcbiAgICAgICAgICAgIHJuID0gY28oWGkpLFxuICAgICAgICAgICAgb24gPSBjbyhKaSksXG4gICAgICAgICAgICBhbiA9IGNvKFppKSxcbiAgICAgICAgICAgIGxuID0gY28oUWkpLFxuICAgICAgICAgICAgdW4gPSBjbyh0biksXG4gICAgICAgICAgICBjbiA9IHllID8geWUucHJvdG90eXBlIDogcixcbiAgICAgICAgICAgIGhuID0gY24gPyBjbi52YWx1ZU9mIDogcixcbiAgICAgICAgICAgIGRuID0gY24gPyBjbi50b1N0cmluZyA6IHI7ZnVuY3Rpb24gcG4odCkge1xuICAgICAgICAgIGlmIChJYSh0KSAmJiAhdmEodCkgJiYgISh0IGluc3RhbmNlb2Ygdm4pKSB7XG4gICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIG1uKSByZXR1cm4gdDtpZiAoY2UuY2FsbCh0LCBcIl9fd3JhcHBlZF9fXCIpKSByZXR1cm4gaG8odCk7XG4gICAgICAgICAgfXJldHVybiBuZXcgbW4odCk7XG4gICAgICAgIH12YXIgZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuY3Rpb24gdCgpIHt9cmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIVRhKGUpKSByZXR1cm4ge307aWYgKFBlKSByZXR1cm4gUGUoZSk7dC5wcm90b3R5cGUgPSBlO3ZhciBpID0gbmV3IHQoKTtyZXR1cm4gdC5wcm90b3R5cGUgPSByLCBpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0oKTtmdW5jdGlvbiBnbigpIHt9ZnVuY3Rpb24gbW4odCwgZSkge1xuICAgICAgICAgIHRoaXMuX193cmFwcGVkX18gPSB0LCB0aGlzLl9fYWN0aW9uc19fID0gW10sIHRoaXMuX19jaGFpbl9fID0gISFlLCB0aGlzLl9faW5kZXhfXyA9IDAsIHRoaXMuX192YWx1ZXNfXyA9IHI7XG4gICAgICAgIH1mdW5jdGlvbiB2bih0KSB7XG4gICAgICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHQsIHRoaXMuX19hY3Rpb25zX18gPSBbXSwgdGhpcy5fX2Rpcl9fID0gMSwgdGhpcy5fX2ZpbHRlcmVkX18gPSAhMSwgdGhpcy5fX2l0ZXJhdGVlc19fID0gW10sIHRoaXMuX190YWtlQ291bnRfXyA9IEIsIHRoaXMuX192aWV3c19fID0gW107XG4gICAgICAgIH1mdW5jdGlvbiBfbih0KSB7XG4gICAgICAgICAgdmFyIGUgPSAtMSxcbiAgICAgICAgICAgICAgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtmb3IgKHRoaXMuY2xlYXIoKTsgKytlIDwgaTspIHtcbiAgICAgICAgICAgIHZhciBuID0gdFtlXTt0aGlzLnNldChuWzBdLCBuWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiBibih0KSB7XG4gICAgICAgICAgdmFyIGUgPSAtMSxcbiAgICAgICAgICAgICAgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtmb3IgKHRoaXMuY2xlYXIoKTsgKytlIDwgaTspIHtcbiAgICAgICAgICAgIHZhciBuID0gdFtlXTt0aGlzLnNldChuWzBdLCBuWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiB5bih0KSB7XG4gICAgICAgICAgdmFyIGUgPSAtMSxcbiAgICAgICAgICAgICAgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtmb3IgKHRoaXMuY2xlYXIoKTsgKytlIDwgaTspIHtcbiAgICAgICAgICAgIHZhciBuID0gdFtlXTt0aGlzLnNldChuWzBdLCBuWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiBrbih0KSB7XG4gICAgICAgICAgdmFyIGUgPSAtMSxcbiAgICAgICAgICAgICAgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtmb3IgKHRoaXMuX19kYXRhX18gPSBuZXcgeW4oKTsgKytlIDwgaTspIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHRbZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfWZ1bmN0aW9uIHduKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMuX19kYXRhX18gPSBuZXcgYm4odCk7dGhpcy5zaXplID0gZS5zaXplO1xuICAgICAgICB9ZnVuY3Rpb24geG4odCwgZSkge1xuICAgICAgICAgIHZhciBpID0gdmEodCksXG4gICAgICAgICAgICAgIG4gPSAhaSAmJiBtYSh0KSxcbiAgICAgICAgICAgICAgcyA9ICFpICYmICFuICYmIGthKHQpLFxuICAgICAgICAgICAgICByID0gIWkgJiYgIW4gJiYgIXMgJiYgTmEodCksXG4gICAgICAgICAgICAgIG8gPSBpIHx8IG4gfHwgcyB8fCByLFxuICAgICAgICAgICAgICBhID0gbyA/IGdpKHQubGVuZ3RoLCBuZSkgOiBbXSxcbiAgICAgICAgICAgICAgbCA9IGEubGVuZ3RoO2ZvciAodmFyIHUgaW4gdCkge1xuICAgICAgICAgICAgIWUgJiYgIWNlLmNhbGwodCwgdSkgfHwgbyAmJiAoXCJsZW5ndGhcIiA9PSB1IHx8IHMgJiYgKFwib2Zmc2V0XCIgPT0gdSB8fCBcInBhcmVudFwiID09IHUpIHx8IHIgJiYgKFwiYnVmZmVyXCIgPT0gdSB8fCBcImJ5dGVMZW5ndGhcIiA9PSB1IHx8IFwiYnl0ZU9mZnNldFwiID09IHUpIHx8IFVyKHUsIGwpKSB8fCBhLnB1c2godSk7XG4gICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICB9ZnVuY3Rpb24gQ24odCkge1xuICAgICAgICAgIHZhciBlID0gdC5sZW5ndGg7cmV0dXJuIGUgPyB0W2tzKDAsIGUgLSAxKV0gOiByO1xuICAgICAgICB9ZnVuY3Rpb24gRG4odCwgZSkge1xuICAgICAgICAgIHJldHVybiBhbyhpcih0KSwgT24oZSwgMCwgdC5sZW5ndGgpKTtcbiAgICAgICAgfWZ1bmN0aW9uIFNuKHQpIHtcbiAgICAgICAgICByZXR1cm4gYW8oaXIodCkpO1xuICAgICAgICB9ZnVuY3Rpb24gVG4odCwgZSwgaSkge1xuICAgICAgICAgIChpID09PSByIHx8IHBhKHRbZV0sIGkpKSAmJiAoaSAhPT0gciB8fCBlIGluIHQpIHx8IFBuKHQsIGUsIGkpO1xuICAgICAgICB9ZnVuY3Rpb24gSW4odCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gdFtlXTtjZS5jYWxsKHQsIGUpICYmIHBhKG4sIGkpICYmIChpICE9PSByIHx8IGUgaW4gdCkgfHwgUG4odCwgZSwgaSk7XG4gICAgICAgIH1mdW5jdGlvbiBBbih0LCBlKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHQubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICBpZiAocGEodFtpXVswXSwgZSkpIHJldHVybiBpO1xuICAgICAgICAgIH1yZXR1cm4gLTE7XG4gICAgICAgIH1mdW5jdGlvbiBqbih0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgcmV0dXJuIExuKHQsIGZ1bmN0aW9uICh0LCBzLCByKSB7XG4gICAgICAgICAgICBlKG4sIHQsIGkodCksIHIpO1xuICAgICAgICAgIH0pLCBuO1xuICAgICAgICB9ZnVuY3Rpb24gTW4odCwgZSkge1xuICAgICAgICAgIHJldHVybiB0ICYmIG5yKGUsIHNsKGUpLCB0KTtcbiAgICAgICAgfWZ1bmN0aW9uIFBuKHQsIGUsIGkpIHtcbiAgICAgICAgICBcIl9fcHJvdG9fX1wiID09IGUgJiYgZGkgPyBkaSh0LCBlLCB7IGNvbmZpZ3VyYWJsZTogITAsIGVudW1lcmFibGU6ICEwLCB2YWx1ZTogaSwgd3JpdGFibGU6ICEwIH0pIDogdFtlXSA9IGk7XG4gICAgICAgIH1mdW5jdGlvbiBFbih0LCBlKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IC0xLCBzID0gZS5sZW5ndGgsIG8gPSBuKHMpLCBhID0gbnVsbCA9PSB0OyArK2kgPCBzOykge1xuICAgICAgICAgICAgb1tpXSA9IGEgPyByIDogUWEodCwgZVtpXSk7XG4gICAgICAgICAgfXJldHVybiBvO1xuICAgICAgICB9ZnVuY3Rpb24gT24odCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiB0ID09IHQgJiYgKGkgIT09IHIgJiYgKHQgPSB0IDw9IGkgPyB0IDogaSksIGUgIT09IHIgJiYgKHQgPSB0ID49IGUgPyB0IDogZSkpLCB0O1xuICAgICAgICB9ZnVuY3Rpb24gSG4odCwgZSwgaSwgbiwgcywgbykge1xuICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICBsID0gZSAmIGQsXG4gICAgICAgICAgICAgIHUgPSBlICYgcCxcbiAgICAgICAgICAgICAgYyA9IGUgJiBmO2lmIChpICYmIChhID0gcyA/IGkodCwgbiwgcywgbykgOiBpKHQpKSwgYSAhPT0gcikgcmV0dXJuIGE7aWYgKCFUYSh0KSkgcmV0dXJuIHQ7dmFyIGggPSB2YSh0KTtpZiAoaCkge1xuICAgICAgICAgICAgaWYgKGEgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHQubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgaSA9IG5ldyB0LmNvbnN0cnVjdG9yKGUpO3JldHVybiBlICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHRbMF0gJiYgY2UuY2FsbCh0LCBcImluZGV4XCIpICYmIChpLmluZGV4ID0gdC5pbmRleCwgaS5pbnB1dCA9IHQuaW5wdXQpLCBpO1xuICAgICAgICAgICAgfSh0KSwgIWwpIHJldHVybiBpcih0LCBhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGcgPSBXcih0KSxcbiAgICAgICAgICAgICAgICBtID0gZyA9PSBWIHx8IGcgPT0gRztpZiAoa2EodCkpIHJldHVybiBYcyh0LCBsKTtpZiAoZyA9PSBRIHx8IGcgPT0gVyB8fCBtICYmICFzKSB7XG4gICAgICAgICAgICAgIGlmIChhID0gdSB8fCBtID8ge30gOiAkcih0KSwgIWwpIHJldHVybiB1ID8gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnIodCwgenIodCksIGUpO1xuICAgICAgICAgICAgICB9KHQsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgbnIoZSwgcmwoZSksIHQpO1xuICAgICAgICAgICAgICB9KGEsIHQpKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5yKHQsIExyKHQpLCBlKTtcbiAgICAgICAgICAgICAgfSh0LCBNbihhLCB0KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIVRlW2ddKSByZXR1cm4gcyA/IHQgOiB7fTthID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgbyA9IHQuY29uc3RydWN0b3I7c3dpdGNoIChlKSB7Y2FzZSBsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpzKHQpO2Nhc2UgcTpjYXNlIFU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbygrdCk7Y2FzZSB1dDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlID8gSnModC5idWZmZXIpIDogdC5idWZmZXI7cmV0dXJuIG5ldyB0LmNvbnN0cnVjdG9yKGksIHQuYnl0ZU9mZnNldCwgdC5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfSh0LCBpKTtjYXNlIGN0OmNhc2UgaHQ6Y2FzZSBkdDpjYXNlIHB0OmNhc2UgZnQ6Y2FzZSBndDpjYXNlIG10OmNhc2UgdnQ6Y2FzZSBfdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFpzKHQsIGkpO2Nhc2UgWDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBvKCk7Y2FzZSBKOmNhc2UgbnQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbyh0KTtjYXNlIGV0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHIgPSBuZXcgKHMgPSB0KS5jb25zdHJ1Y3RvcihzLnNvdXJjZSwgJHQuZXhlYyhzKSkpLmxhc3RJbmRleCA9IHMubGFzdEluZGV4LCByO2Nhc2UgaXQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbygpO2Nhc2Ugc3Q6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gdCwgaG4gPyBlZShobi5jYWxsKG4pKSA6IHt9O31cbiAgICAgICAgICAgICAgfSh0LCBnLCBsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9byB8fCAobyA9IG5ldyB3bigpKTt2YXIgdiA9IG8uZ2V0KHQpO2lmICh2KSByZXR1cm4gdjtpZiAoby5zZXQodCwgYSksIEVhKHQpKSByZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICBhLmFkZChIbihuLCBlLCBpLCBuLCB0LCBvKSk7XG4gICAgICAgICAgfSksIGE7aWYgKEFhKHQpKSByZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uIChuLCBzKSB7XG4gICAgICAgICAgICBhLnNldChzLCBIbihuLCBlLCBpLCBzLCB0LCBvKSk7XG4gICAgICAgICAgfSksIGE7dmFyIF8gPSBoID8gciA6IChjID8gdSA/IE1yIDoganIgOiB1ID8gcmwgOiBzbCkodCk7cmV0dXJuIFllKF8gfHwgdCwgZnVuY3Rpb24gKG4sIHMpIHtcbiAgICAgICAgICAgIF8gJiYgKG4gPSB0W3MgPSBuXSksIEluKGEsIHMsIEhuKG4sIGUsIGksIHMsIHQsIG8pKTtcbiAgICAgICAgICB9KSwgYTtcbiAgICAgICAgfWZ1bmN0aW9uIE5uKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IGkubGVuZ3RoO2lmIChudWxsID09IHQpIHJldHVybiAhbjtmb3IgKHQgPSBlZSh0KTsgbi0tOykge1xuICAgICAgICAgICAgdmFyIHMgPSBpW25dLFxuICAgICAgICAgICAgICAgIG8gPSBlW3NdLFxuICAgICAgICAgICAgICAgIGEgPSB0W3NdO2lmIChhID09PSByICYmICEocyBpbiB0KSB8fCAhbyhhKSkgcmV0dXJuICExO1xuICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgIH1mdW5jdGlvbiBCbih0LCBlLCBpKSB7XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgdGhyb3cgbmV3IHNlKGwpO3JldHVybiBubyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0LmFwcGx5KHIsIGkpO1xuICAgICAgICAgIH0sIGUpO1xuICAgICAgICB9ZnVuY3Rpb24gRm4odCwgZSwgaSwgbikge1xuICAgICAgICAgIHZhciBzID0gLTEsXG4gICAgICAgICAgICAgIHIgPSBKZSxcbiAgICAgICAgICAgICAgYSA9ICEwLFxuICAgICAgICAgICAgICBsID0gdC5sZW5ndGgsXG4gICAgICAgICAgICAgIHUgPSBbXSxcbiAgICAgICAgICAgICAgYyA9IGUubGVuZ3RoO2lmICghbCkgcmV0dXJuIHU7aSAmJiAoZSA9IFFlKGUsIG1pKGkpKSksIG4gPyAociA9IFplLCBhID0gITEpIDogZS5sZW5ndGggPj0gbyAmJiAociA9IF9pLCBhID0gITEsIGUgPSBuZXcga24oZSkpO3Q6IGZvciAoOyArK3MgPCBsOykge1xuICAgICAgICAgICAgdmFyIGggPSB0W3NdLFxuICAgICAgICAgICAgICAgIGQgPSBudWxsID09IGkgPyBoIDogaShoKTtpZiAoaCA9IG4gfHwgMCAhPT0gaCA/IGggOiAwLCBhICYmIGQgPT0gZCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBwID0gYzsgcC0tOykge1xuICAgICAgICAgICAgICAgIGlmIChlW3BdID09PSBkKSBjb250aW51ZSB0O1xuICAgICAgICAgICAgICB9dS5wdXNoKGgpO1xuICAgICAgICAgICAgfSBlbHNlIHIoZSwgZCwgbikgfHwgdS5wdXNoKGgpO1xuICAgICAgICAgIH1yZXR1cm4gdTtcbiAgICAgICAgfXBuLnRlbXBsYXRlU2V0dGluZ3MgPSB7IGVzY2FwZTogU3QsIGV2YWx1YXRlOiBUdCwgaW50ZXJwb2xhdGU6IEl0LCB2YXJpYWJsZTogXCJcIiwgaW1wb3J0czogeyBfOiBwbiB9IH0sIHBuLnByb3RvdHlwZSA9IGduLnByb3RvdHlwZSwgcG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gcG4sIG1uLnByb3RvdHlwZSA9IGZuKGduLnByb3RvdHlwZSksIG1uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG1uLCB2bi5wcm90b3R5cGUgPSBmbihnbi5wcm90b3R5cGUpLCB2bi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSB2biwgX24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuX19kYXRhX18gPSBlbiA/IGVuKG51bGwpIDoge30sIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIH0sIF9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy5oYXModCkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19bdF07cmV0dXJuIHRoaXMuc2l6ZSAtPSBlID8gMSA6IDAsIGU7XG4gICAgICAgIH0sIF9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy5fX2RhdGFfXztpZiAoZW4pIHtcbiAgICAgICAgICAgIHZhciBpID0gZVt0XTtyZXR1cm4gaSA9PT0gdSA/IHIgOiBpO1xuICAgICAgICAgIH1yZXR1cm4gY2UuY2FsbChlLCB0KSA/IGVbdF0gOiByO1xuICAgICAgICB9LCBfbi5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMuX19kYXRhX187cmV0dXJuIGVuID8gZVt0XSAhPT0gciA6IGNlLmNhbGwoZSwgdCk7XG4gICAgICAgIH0sIF9uLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5fX2RhdGFfXztyZXR1cm4gdGhpcy5zaXplICs9IHRoaXMuaGFzKHQpID8gMCA6IDEsIGlbdF0gPSBlbiAmJiBlID09PSByID8gdSA6IGUsIHRoaXM7XG4gICAgICAgIH0sIGJuLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YV9fID0gW10sIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIH0sIGJuLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICAgICAgaSA9IEFuKGUsIHQpO3JldHVybiAhKGkgPCAwIHx8IChpID09IGUubGVuZ3RoIC0gMSA/IGUucG9wKCkgOiBIZS5jYWxsKGUsIGksIDEpLCAtLXRoaXMuc2l6ZSwgMCkpO1xuICAgICAgICB9LCBibi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgICAgIGkgPSBBbihlLCB0KTtyZXR1cm4gaSA8IDAgPyByIDogZVtpXVsxXTtcbiAgICAgICAgfSwgYm4ucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIEFuKHRoaXMuX19kYXRhX18sIHQpID4gLTE7XG4gICAgICAgIH0sIGJuLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICAgICAgbiA9IEFuKGksIHQpO3JldHVybiBuIDwgMCA/ICgrK3RoaXMuc2l6ZSwgaS5wdXNoKFt0LCBlXSkpIDogaVtuXVsxXSA9IGUsIHRoaXM7XG4gICAgICAgIH0sIHluLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnNpemUgPSAwLCB0aGlzLl9fZGF0YV9fID0geyBoYXNoOiBuZXcgX24oKSwgbWFwOiBuZXcgKEppIHx8IGJuKSgpLCBzdHJpbmc6IG5ldyBfbigpIH07XG4gICAgICAgIH0sIHluLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gTnIodGhpcywgdCkuZGVsZXRlKHQpO3JldHVybiB0aGlzLnNpemUgLT0gZSA/IDEgOiAwLCBlO1xuICAgICAgICB9LCB5bi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gTnIodGhpcywgdCkuZ2V0KHQpO1xuICAgICAgICB9LCB5bi5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gTnIodGhpcywgdCkuaGFzKHQpO1xuICAgICAgICB9LCB5bi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IE5yKHRoaXMsIHQpLFxuICAgICAgICAgICAgICBuID0gaS5zaXplO3JldHVybiBpLnNldCh0LCBlKSwgdGhpcy5zaXplICs9IGkuc2l6ZSA9PSBuID8gMCA6IDEsIHRoaXM7XG4gICAgICAgIH0sIGtuLnByb3RvdHlwZS5hZGQgPSBrbi5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uc2V0KHQsIHUpLCB0aGlzO1xuICAgICAgICB9LCBrbi5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModCk7XG4gICAgICAgIH0sIHduLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IGJuKCksIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIH0sIHduLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICAgICAgaSA9IGUuZGVsZXRlKHQpO3JldHVybiB0aGlzLnNpemUgPSBlLnNpemUsIGk7XG4gICAgICAgIH0sIHduLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldCh0KTtcbiAgICAgICAgfSwgd24ucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHQpO1xuICAgICAgICB9LCB3bi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMuX19kYXRhX187aWYgKGkgaW5zdGFuY2VvZiBibikge1xuICAgICAgICAgICAgdmFyIG4gPSBpLl9fZGF0YV9fO2lmICghSmkgfHwgbi5sZW5ndGggPCBvIC0gMSkgcmV0dXJuIG4ucHVzaChbdCwgZV0pLCB0aGlzLnNpemUgPSArK2kuc2l6ZSwgdGhpcztpID0gdGhpcy5fX2RhdGFfXyA9IG5ldyB5bihuKTtcbiAgICAgICAgICB9cmV0dXJuIGkuc2V0KHQsIGUpLCB0aGlzLnNpemUgPSBpLnNpemUsIHRoaXM7XG4gICAgICAgIH07dmFyIExuID0gb3IoWW4pLFxuICAgICAgICAgICAgem4gPSBvcihWbiwgITApO2Z1bmN0aW9uIFduKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9ICEwO3JldHVybiBMbih0LCBmdW5jdGlvbiAodCwgbiwgcykge1xuICAgICAgICAgICAgcmV0dXJuIGkgPSAhIWUodCwgbiwgcyk7XG4gICAgICAgICAgfSksIGk7XG4gICAgICAgIH1mdW5jdGlvbiBSbih0LCBlLCBpKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCBzID0gdC5sZW5ndGg7ICsrbiA8IHM7KSB7XG4gICAgICAgICAgICB2YXIgbyA9IHRbbl0sXG4gICAgICAgICAgICAgICAgYSA9IGUobyk7aWYgKG51bGwgIT0gYSAmJiAobCA9PT0gciA/IGEgPT0gYSAmJiAhSGEoYSkgOiBpKGEsIGwpKSkgdmFyIGwgPSBhLFxuICAgICAgICAgICAgICAgIHUgPSBvO1xuICAgICAgICAgIH1yZXR1cm4gdTtcbiAgICAgICAgfWZ1bmN0aW9uICRuKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IFtdO3JldHVybiBMbih0LCBmdW5jdGlvbiAodCwgbiwgcykge1xuICAgICAgICAgICAgZSh0LCBuLCBzKSAmJiBpLnB1c2godCk7XG4gICAgICAgICAgfSksIGk7XG4gICAgICAgIH1mdW5jdGlvbiBxbih0LCBlLCBpLCBuLCBzKSB7XG4gICAgICAgICAgdmFyIHIgPSAtMSxcbiAgICAgICAgICAgICAgbyA9IHQubGVuZ3RoO2ZvciAoaSB8fCAoaSA9IHFyKSwgcyB8fCAocyA9IFtdKTsgKytyIDwgbzspIHtcbiAgICAgICAgICAgIHZhciBhID0gdFtyXTtlID4gMCAmJiBpKGEpID8gZSA+IDEgPyBxbihhLCBlIC0gMSwgaSwgbiwgcykgOiB0aShzLCBhKSA6IG4gfHwgKHNbcy5sZW5ndGhdID0gYSk7XG4gICAgICAgICAgfXJldHVybiBzO1xuICAgICAgICB9dmFyIFVuID0gYXIoKSxcbiAgICAgICAgICAgIEtuID0gYXIoITApO2Z1bmN0aW9uIFluKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiBVbih0LCBlLCBzbCk7XG4gICAgICAgIH1mdW5jdGlvbiBWbih0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgS24odCwgZSwgc2wpO1xuICAgICAgICB9ZnVuY3Rpb24gR24odCwgZSkge1xuICAgICAgICAgIHJldHVybiBYZShlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIENhKHRbZV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9ZnVuY3Rpb24gWG4odCwgZSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gKGUgPSBLcyhlLCB0KSkubGVuZ3RoOyBudWxsICE9IHQgJiYgaSA8IG47KSB7XG4gICAgICAgICAgICB0ID0gdFt1byhlW2krK10pXTtcbiAgICAgICAgICB9cmV0dXJuIGkgJiYgaSA9PSBuID8gdCA6IHI7XG4gICAgICAgIH1mdW5jdGlvbiBKbih0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSBlKHQpO3JldHVybiB2YSh0KSA/IG4gOiB0aShuLCBpKHQpKTtcbiAgICAgICAgfWZ1bmN0aW9uIFpuKHQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gdCA9PT0gciA/IHJ0IDogWiA6IHNpICYmIHNpIGluIGVlKHQpID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gY2UuY2FsbCh0LCBzaSksXG4gICAgICAgICAgICAgICAgaSA9IHRbc2ldO3RyeSB7XG4gICAgICAgICAgICAgIHRbc2ldID0gcjt2YXIgbiA9ICEwO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge312YXIgcyA9IHBlLmNhbGwodCk7cmV0dXJuIG4gJiYgKGUgPyB0W3NpXSA9IGkgOiBkZWxldGUgdFtzaV0pLCBzO1xuICAgICAgICAgIH0odCkgOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHBlLmNhbGwodCk7XG4gICAgICAgICAgfSh0KTtcbiAgICAgICAgfWZ1bmN0aW9uIFFuKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCA+IGU7XG4gICAgICAgIH1mdW5jdGlvbiB0cyh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCAmJiBjZS5jYWxsKHQsIGUpO1xuICAgICAgICB9ZnVuY3Rpb24gZXModCwgZSkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgZSBpbiBlZSh0KTtcbiAgICAgICAgfWZ1bmN0aW9uIGlzKHQsIGUsIGkpIHtcbiAgICAgICAgICBmb3IgKHZhciBzID0gaSA/IFplIDogSmUsIG8gPSB0WzBdLmxlbmd0aCwgYSA9IHQubGVuZ3RoLCBsID0gYSwgdSA9IG4oYSksIGMgPSAxIC8gMCwgaCA9IFtdOyBsLS07KSB7XG4gICAgICAgICAgICB2YXIgZCA9IHRbbF07bCAmJiBlICYmIChkID0gUWUoZCwgbWkoZSkpKSwgYyA9IFVpKGQubGVuZ3RoLCBjKSwgdVtsXSA9ICFpICYmIChlIHx8IG8gPj0gMTIwICYmIGQubGVuZ3RoID49IDEyMCkgPyBuZXcga24obCAmJiBkKSA6IHI7XG4gICAgICAgICAgfWQgPSB0WzBdO3ZhciBwID0gLTEsXG4gICAgICAgICAgICAgIGYgPSB1WzBdO3Q6IGZvciAoOyArK3AgPCBvICYmIGgubGVuZ3RoIDwgYzspIHtcbiAgICAgICAgICAgIHZhciBnID0gZFtwXSxcbiAgICAgICAgICAgICAgICBtID0gZSA/IGUoZykgOiBnO2lmIChnID0gaSB8fCAwICE9PSBnID8gZyA6IDAsICEoZiA/IF9pKGYsIG0pIDogcyhoLCBtLCBpKSkpIHtcbiAgICAgICAgICAgICAgZm9yIChsID0gYTsgLS1sOykge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gdVtsXTtpZiAoISh2ID8gX2kodiwgbSkgOiBzKHRbbF0sIG0sIGkpKSkgY29udGludWUgdDtcbiAgICAgICAgICAgICAgfWYgJiYgZi5wdXNoKG0pLCBoLnB1c2goZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfXJldHVybiBoO1xuICAgICAgICB9ZnVuY3Rpb24gbnModCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gbnVsbCA9PSAodCA9IHRvKHQsIGUgPSBLcyhlLCB0KSkpID8gdCA6IHRbdW8oeG8oZSkpXTtyZXR1cm4gbnVsbCA9PSBuID8gciA6IFVlKG4sIHQsIGkpO1xuICAgICAgICB9ZnVuY3Rpb24gc3ModCkge1xuICAgICAgICAgIHJldHVybiBJYSh0KSAmJiBabih0KSA9PSBXO1xuICAgICAgICB9ZnVuY3Rpb24gcnModCwgZSwgaSwgbiwgcykge1xuICAgICAgICAgIHJldHVybiB0ID09PSBlIHx8IChudWxsID09IHQgfHwgbnVsbCA9PSBlIHx8ICFJYSh0KSAmJiAhSWEoZSkgPyB0ICE9IHQgJiYgZSAhPSBlIDogZnVuY3Rpb24gKHQsIGUsIGksIG4sIHMsIG8pIHtcbiAgICAgICAgICAgIHZhciBhID0gdmEodCksXG4gICAgICAgICAgICAgICAgbCA9IHZhKGUpLFxuICAgICAgICAgICAgICAgIHUgPSBhID8gUiA6IFdyKHQpLFxuICAgICAgICAgICAgICAgIGMgPSBsID8gUiA6IFdyKGUpLFxuICAgICAgICAgICAgICAgIGggPSAodSA9IHUgPT0gVyA/IFEgOiB1KSA9PSBRLFxuICAgICAgICAgICAgICAgIGQgPSAoYyA9IGMgPT0gVyA/IFEgOiBjKSA9PSBRLFxuICAgICAgICAgICAgICAgIHAgPSB1ID09IGM7aWYgKHAgJiYga2EodCkpIHtcbiAgICAgICAgICAgICAgaWYgKCFrYShlKSkgcmV0dXJuICExO2EgPSAhMCwgaCA9ICExO1xuICAgICAgICAgICAgfWlmIChwICYmICFoKSByZXR1cm4gbyB8fCAobyA9IG5ldyB3bigpKSwgYSB8fCBOYSh0KSA/IElyKHQsIGUsIGksIG4sIHMsIG8pIDogZnVuY3Rpb24gKHQsIGUsIGksIG4sIHMsIHIsIG8pIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChpKSB7Y2FzZSB1dDpcbiAgICAgICAgICAgICAgICAgIGlmICh0LmJ5dGVMZW5ndGggIT0gZS5ieXRlTGVuZ3RoIHx8IHQuYnl0ZU9mZnNldCAhPSBlLmJ5dGVPZmZzZXQpIHJldHVybiAhMTt0ID0gdC5idWZmZXIsIGUgPSBlLmJ1ZmZlcjtjYXNlIGx0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuICEodC5ieXRlTGVuZ3RoICE9IGUuYnl0ZUxlbmd0aCB8fCAhcihuZXcgd2UodCksIG5ldyB3ZShlKSkpO2Nhc2UgcTpjYXNlIFU6Y2FzZSBKOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhKCt0LCArZSk7Y2FzZSBZOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubmFtZSA9PSBlLm5hbWUgJiYgdC5tZXNzYWdlID09IGUubWVzc2FnZTtjYXNlIGV0OmNhc2UgbnQ6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBlICsgXCJcIjtjYXNlIFg6XG4gICAgICAgICAgICAgICAgICB2YXIgYSA9IERpO2Nhc2UgaXQ6XG4gICAgICAgICAgICAgICAgICB2YXIgbCA9IG4gJiBnO2lmIChhIHx8IChhID0gSWkpLCB0LnNpemUgIT0gZS5zaXplICYmICFsKSByZXR1cm4gITE7dmFyIHUgPSBvLmdldCh0KTtpZiAodSkgcmV0dXJuIHUgPT0gZTtuIHw9IG0sIG8uc2V0KHQsIGUpO3ZhciBjID0gSXIoYSh0KSwgYShlKSwgbiwgcywgciwgbyk7cmV0dXJuIG8uZGVsZXRlKHQpLCBjO2Nhc2Ugc3Q6XG4gICAgICAgICAgICAgICAgICBpZiAoaG4pIHJldHVybiBobi5jYWxsKHQpID09IGhuLmNhbGwoZSk7fXJldHVybiAhMTtcbiAgICAgICAgICAgIH0odCwgZSwgdSwgaSwgbiwgcywgbyk7aWYgKCEoaSAmIGcpKSB7XG4gICAgICAgICAgICAgIHZhciBmID0gaCAmJiBjZS5jYWxsKHQsIFwiX193cmFwcGVkX19cIiksXG4gICAgICAgICAgICAgICAgICB2ID0gZCAmJiBjZS5jYWxsKGUsIFwiX193cmFwcGVkX19cIik7aWYgKGYgfHwgdikge1xuICAgICAgICAgICAgICAgIHZhciBfID0gZiA/IHQudmFsdWUoKSA6IHQsXG4gICAgICAgICAgICAgICAgICAgIGIgPSB2ID8gZS52YWx1ZSgpIDogZTtyZXR1cm4gbyB8fCAobyA9IG5ldyB3bigpKSwgcyhfLCBiLCBpLCBuLCBvKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiAhIXAgJiYgKG8gfHwgKG8gPSBuZXcgd24oKSksIGZ1bmN0aW9uICh0LCBlLCBpLCBuLCBzLCBvKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gaSAmIGcsXG4gICAgICAgICAgICAgICAgICBsID0ganIodCksXG4gICAgICAgICAgICAgICAgICB1ID0gbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICBjID0ganIoZSkubGVuZ3RoO2lmICh1ICE9IGMgJiYgIWEpIHJldHVybiAhMTtmb3IgKHZhciBoID0gdTsgaC0tOykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gbFtoXTtpZiAoIShhID8gZCBpbiBlIDogY2UuY2FsbChlLCBkKSkpIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgfXZhciBwID0gby5nZXQodCk7aWYgKHAgJiYgby5nZXQoZSkpIHJldHVybiBwID09IGU7dmFyIGYgPSAhMDtvLnNldCh0LCBlKSwgby5zZXQoZSwgdCk7Zm9yICh2YXIgbSA9IGE7ICsraCA8IHU7KSB7XG4gICAgICAgICAgICAgICAgZCA9IGxbaF07dmFyIHYgPSB0W2RdLFxuICAgICAgICAgICAgICAgICAgICBfID0gZVtkXTtpZiAobikgdmFyIGIgPSBhID8gbihfLCB2LCBkLCBlLCB0LCBvKSA6IG4odiwgXywgZCwgdCwgZSwgbyk7aWYgKCEoYiA9PT0gciA/IHYgPT09IF8gfHwgcyh2LCBfLCBpLCBuLCBvKSA6IGIpKSB7XG4gICAgICAgICAgICAgICAgICBmID0gITE7YnJlYWs7XG4gICAgICAgICAgICAgICAgfW0gfHwgKG0gPSBcImNvbnN0cnVjdG9yXCIgPT0gZCk7XG4gICAgICAgICAgICAgIH1pZiAoZiAmJiAhbSkge1xuICAgICAgICAgICAgICAgIHZhciB5ID0gdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgICAgICAgICAgayA9IGUuY29uc3RydWN0b3I7eSAhPSBrICYmIFwiY29uc3RydWN0b3JcIiBpbiB0ICYmIFwiY29uc3RydWN0b3JcIiBpbiBlICYmICEoXCJmdW5jdGlvblwiID09IHR5cGVvZiB5ICYmIHkgaW5zdGFuY2VvZiB5ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgayAmJiBrIGluc3RhbmNlb2YgaykgJiYgKGYgPSAhMSk7XG4gICAgICAgICAgICAgIH1yZXR1cm4gby5kZWxldGUodCksIG8uZGVsZXRlKGUpLCBmO1xuICAgICAgICAgICAgfSh0LCBlLCBpLCBuLCBzLCBvKSk7XG4gICAgICAgICAgfSh0LCBlLCBpLCBuLCBycywgcykpO1xuICAgICAgICB9ZnVuY3Rpb24gb3ModCwgZSwgaSwgbikge1xuICAgICAgICAgIHZhciBzID0gaS5sZW5ndGgsXG4gICAgICAgICAgICAgIG8gPSBzLFxuICAgICAgICAgICAgICBhID0gIW47aWYgKG51bGwgPT0gdCkgcmV0dXJuICFvO2ZvciAodCA9IGVlKHQpOyBzLS07KSB7XG4gICAgICAgICAgICB2YXIgbCA9IGlbc107aWYgKGEgJiYgbFsyXSA/IGxbMV0gIT09IHRbbFswXV0gOiAhKGxbMF0gaW4gdCkpIHJldHVybiAhMTtcbiAgICAgICAgICB9Zm9yICg7ICsrcyA8IG87KSB7XG4gICAgICAgICAgICB2YXIgdSA9IChsID0gaVtzXSlbMF0sXG4gICAgICAgICAgICAgICAgYyA9IHRbdV0sXG4gICAgICAgICAgICAgICAgaCA9IGxbMV07aWYgKGEgJiYgbFsyXSkge1xuICAgICAgICAgICAgICBpZiAoYyA9PT0gciAmJiAhKHUgaW4gdCkpIHJldHVybiAhMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBkID0gbmV3IHduKCk7aWYgKG4pIHZhciBwID0gbihjLCBoLCB1LCB0LCBlLCBkKTtpZiAoIShwID09PSByID8gcnMoaCwgYywgZyB8IG0sIG4sIGQpIDogcCkpIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuICEwO1xuICAgICAgICB9ZnVuY3Rpb24gYXModCkge1xuICAgICAgICAgIHJldHVybiAhKCFUYSh0KSB8fCAoZSA9IHQsIGRlICYmIGRlIGluIGUpKSAmJiAoQ2EodCkgPyBtZSA6IEt0KS50ZXN0KGNvKHQpKTt2YXIgZTtcbiAgICAgICAgfWZ1bmN0aW9uIGxzKHQpIHtcbiAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gdCA6IG51bGwgPT0gdCA/IGpsIDogXCJvYmplY3RcIiA9PSAodHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KSkgPyB2YSh0KSA/IGZzKHRbMF0sIHRbMV0pIDogcHModCkgOiBMbCh0KTtcbiAgICAgICAgfWZ1bmN0aW9uIHVzKHQpIHtcbiAgICAgICAgICBpZiAoIVhyKHQpKSByZXR1cm4gJGkodCk7dmFyIGUgPSBbXTtmb3IgKHZhciBpIGluIGVlKHQpKSB7XG4gICAgICAgICAgICBjZS5jYWxsKHQsIGkpICYmIFwiY29uc3RydWN0b3JcIiAhPSBpICYmIGUucHVzaChpKTtcbiAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgIH1mdW5jdGlvbiBjcyh0KSB7XG4gICAgICAgICAgaWYgKCFUYSh0KSkgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IFtdO2lmIChudWxsICE9IHQpIGZvciAodmFyIGkgaW4gZWUodCkpIHtcbiAgICAgICAgICAgICAgZS5wdXNoKGkpO1xuICAgICAgICAgICAgfXJldHVybiBlO1xuICAgICAgICAgIH0odCk7dmFyIGUgPSBYcih0KSxcbiAgICAgICAgICAgICAgaSA9IFtdO2ZvciAodmFyIG4gaW4gdCkge1xuICAgICAgICAgICAgKFwiY29uc3RydWN0b3JcIiAhPSBuIHx8ICFlICYmIGNlLmNhbGwodCwgbikpICYmIGkucHVzaChuKTtcbiAgICAgICAgICB9cmV0dXJuIGk7XG4gICAgICAgIH1mdW5jdGlvbiBocyh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgPCBlO1xuICAgICAgICB9ZnVuY3Rpb24gZHModCwgZSkge1xuICAgICAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgICAgIHMgPSBiYSh0KSA/IG4odC5sZW5ndGgpIDogW107cmV0dXJuIExuKHQsIGZ1bmN0aW9uICh0LCBuLCByKSB7XG4gICAgICAgICAgICBzWysraV0gPSBlKHQsIG4sIHIpO1xuICAgICAgICAgIH0pLCBzO1xuICAgICAgICB9ZnVuY3Rpb24gcHModCkge1xuICAgICAgICAgIHZhciBlID0gQnIodCk7cmV0dXJuIDEgPT0gZS5sZW5ndGggJiYgZVswXVsyXSA/IFpyKGVbMF1bMF0sIGVbMF1bMV0pIDogZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpID09PSB0IHx8IG9zKGksIHQsIGUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1mdW5jdGlvbiBmcyh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIFlyKHQpICYmIEpyKGUpID8gWnIodW8odCksIGUpIDogZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBuID0gUWEoaSwgdCk7cmV0dXJuIG4gPT09IHIgJiYgbiA9PT0gZSA/IHRsKGksIHQpIDogcnMoZSwgbiwgZyB8IG0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1mdW5jdGlvbiBncyh0LCBlLCBpLCBuLCBzKSB7XG4gICAgICAgICAgdCAhPT0gZSAmJiBVbihlLCBmdW5jdGlvbiAobywgYSkge1xuICAgICAgICAgICAgaWYgKFRhKG8pKSBzIHx8IChzID0gbmV3IHduKCkpLCBmdW5jdGlvbiAodCwgZSwgaSwgbiwgcywgbywgYSkge1xuICAgICAgICAgICAgICB2YXIgbCA9IGVvKHQsIGkpLFxuICAgICAgICAgICAgICAgICAgdSA9IGVvKGUsIGkpLFxuICAgICAgICAgICAgICAgICAgYyA9IGEuZ2V0KHUpO2lmIChjKSBUbih0LCBpLCBjKTtlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IG8gPyBvKGwsIHUsIGkgKyBcIlwiLCB0LCBlLCBhKSA6IHIsXG4gICAgICAgICAgICAgICAgICAgIGQgPSBoID09PSByO2lmIChkKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcCA9IHZhKHUpLFxuICAgICAgICAgICAgICAgICAgICAgIGYgPSAhcCAmJiBrYSh1KSxcbiAgICAgICAgICAgICAgICAgICAgICBnID0gIXAgJiYgIWYgJiYgTmEodSk7aCA9IHUsIHAgfHwgZiB8fCBnID8gdmEobCkgPyBoID0gbCA6IHlhKGwpID8gaCA9IGlyKGwpIDogZiA/IChkID0gITEsIGggPSBYcyh1LCAhMCkpIDogZyA/IChkID0gITEsIGggPSBacyh1LCAhMCkpIDogaCA9IFtdIDogTWEodSkgfHwgbWEodSkgPyAoaCA9IGwsIG1hKGwpID8gaCA9IHFhKGwpIDogVGEobCkgJiYgIUNhKGwpIHx8IChoID0gJHIodSkpKSA6IGQgPSAhMTtcbiAgICAgICAgICAgICAgICB9ZCAmJiAoYS5zZXQodSwgaCksIHMoaCwgdSwgbiwgbywgYSksIGEuZGVsZXRlKHUpKSwgVG4odCwgaSwgaCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0odCwgZSwgYSwgaSwgZ3MsIG4sIHMpO2Vsc2Uge1xuICAgICAgICAgICAgICB2YXIgbCA9IG4gPyBuKGVvKHQsIGEpLCBvLCBhICsgXCJcIiwgdCwgZSwgcykgOiByO2wgPT09IHIgJiYgKGwgPSBvKSwgVG4odCwgYSwgbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmwpO1xuICAgICAgICB9ZnVuY3Rpb24gbXModCwgZSkge1xuICAgICAgICAgIHZhciBpID0gdC5sZW5ndGg7aWYgKGkpIHJldHVybiBVcihlICs9IGUgPCAwID8gaSA6IDAsIGkpID8gdFtlXSA6IHI7XG4gICAgICAgIH1mdW5jdGlvbiB2cyh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSAtMTtyZXR1cm4gZSA9IFFlKGUubGVuZ3RoID8gZSA6IFtqbF0sIG1pKEhyKCkpKSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdC5sZW5ndGg7Zm9yICh0LnNvcnQoZSk7IGktLTspIHtcbiAgICAgICAgICAgICAgdFtpXSA9IHRbaV0udmFsdWU7XG4gICAgICAgICAgICB9cmV0dXJuIHQ7XG4gICAgICAgICAgfShkcyh0LCBmdW5jdGlvbiAodCwgaSwgcykge1xuICAgICAgICAgICAgcmV0dXJuIHsgY3JpdGVyaWE6IFFlKGUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUodCk7XG4gICAgICAgICAgICAgIH0pLCBpbmRleDogKytuLCB2YWx1ZTogdCB9O1xuICAgICAgICAgIH0pLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMSwgcyA9IHQuY3JpdGVyaWEsIHIgPSBlLmNyaXRlcmlhLCBvID0gcy5sZW5ndGgsIGEgPSBpLmxlbmd0aDsgKytuIDwgbzspIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IFFzKHNbbl0sIHJbbl0pO2lmIChsKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobiA+PSBhKSByZXR1cm4gbDt2YXIgdSA9IGlbbl07cmV0dXJuIGwgKiAoXCJkZXNjXCIgPT0gdSA/IC0xIDogMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9cmV0dXJuIHQuaW5kZXggLSBlLmluZGV4O1xuICAgICAgICAgICAgfSh0LCBlLCBpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfWZ1bmN0aW9uIF9zKHQsIGUsIGkpIHtcbiAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHMgPSBlLmxlbmd0aCwgciA9IHt9OyArK24gPCBzOykge1xuICAgICAgICAgICAgdmFyIG8gPSBlW25dLFxuICAgICAgICAgICAgICAgIGEgPSBYbih0LCBvKTtpKGEsIG8pICYmIFNzKHIsIEtzKG8sIHQpLCBhKTtcbiAgICAgICAgICB9cmV0dXJuIHI7XG4gICAgICAgIH1mdW5jdGlvbiBicyh0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgdmFyIHMgPSBuID8gbGkgOiBhaSxcbiAgICAgICAgICAgICAgciA9IC0xLFxuICAgICAgICAgICAgICBvID0gZS5sZW5ndGgsXG4gICAgICAgICAgICAgIGEgPSB0O2ZvciAodCA9PT0gZSAmJiAoZSA9IGlyKGUpKSwgaSAmJiAoYSA9IFFlKHQsIG1pKGkpKSk7ICsrciA8IG87KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBsID0gMCwgdSA9IGVbcl0sIGMgPSBpID8gaSh1KSA6IHU7IChsID0gcyhhLCBjLCBsLCBuKSkgPiAtMTspIHtcbiAgICAgICAgICAgICAgYSAhPT0gdCAmJiBIZS5jYWxsKGEsIGwsIDEpLCBIZS5jYWxsKHQsIGwsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1yZXR1cm4gdDtcbiAgICAgICAgfWZ1bmN0aW9uIHlzKHQsIGUpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gdCA/IGUubGVuZ3RoIDogMCwgbiA9IGkgLSAxOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgcyA9IGVbaV07aWYgKGkgPT0gbiB8fCBzICE9PSByKSB7XG4gICAgICAgICAgICAgIHZhciByID0gcztVcihzKSA/IEhlLmNhbGwodCwgcywgMSkgOiBGcyh0LCBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuIHQ7XG4gICAgICAgIH1mdW5jdGlvbiBrcyh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgKyBGaShWaSgpICogKGUgLSB0ICsgMSkpO1xuICAgICAgICB9ZnVuY3Rpb24gd3ModCwgZSkge1xuICAgICAgICAgIHZhciBpID0gXCJcIjtpZiAoIXQgfHwgZSA8IDEgfHwgZSA+IE8pIHJldHVybiBpO2RvIHtcbiAgICAgICAgICAgIGUgJSAyICYmIChpICs9IHQpLCAoZSA9IEZpKGUgLyAyKSkgJiYgKHQgKz0gdCk7XG4gICAgICAgICAgfSB3aGlsZSAoZSk7cmV0dXJuIGk7XG4gICAgICAgIH1mdW5jdGlvbiB4cyh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHNvKFFyKHQsIGUsIGpsKSwgdCArIFwiXCIpO1xuICAgICAgICB9ZnVuY3Rpb24gQ3ModCkge1xuICAgICAgICAgIHJldHVybiBDbihwbCh0KSk7XG4gICAgICAgIH1mdW5jdGlvbiBEcyh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBwbCh0KTtyZXR1cm4gYW8oaSwgT24oZSwgMCwgaS5sZW5ndGgpKTtcbiAgICAgICAgfWZ1bmN0aW9uIFNzKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICBpZiAoIVRhKHQpKSByZXR1cm4gdDtmb3IgKHZhciBzID0gLTEsIG8gPSAoZSA9IEtzKGUsIHQpKS5sZW5ndGgsIGEgPSBvIC0gMSwgbCA9IHQ7IG51bGwgIT0gbCAmJiArK3MgPCBvOykge1xuICAgICAgICAgICAgdmFyIHUgPSB1byhlW3NdKSxcbiAgICAgICAgICAgICAgICBjID0gaTtpZiAocyAhPSBhKSB7XG4gICAgICAgICAgICAgIHZhciBoID0gbFt1XTsoYyA9IG4gPyBuKGgsIHUsIGwpIDogcikgPT09IHIgJiYgKGMgPSBUYShoKSA/IGggOiBVcihlW3MgKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICAgIH1JbihsLCB1LCBjKSwgbCA9IGxbdV07XG4gICAgICAgICAgfXJldHVybiB0O1xuICAgICAgICB9dmFyIFRzID0gbm4gPyBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBubi5zZXQodCwgZSksIHQ7XG4gICAgICAgIH0gOiBqbCxcbiAgICAgICAgICAgIElzID0gZGkgPyBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBkaSh0LCBcInRvU3RyaW5nXCIsIHsgY29uZmlndXJhYmxlOiAhMCwgZW51bWVyYWJsZTogITEsIHZhbHVlOiBUbChlKSwgd3JpdGFibGU6ICEwIH0pO1xuICAgICAgICB9IDogamw7ZnVuY3Rpb24gQXModCkge1xuICAgICAgICAgIHJldHVybiBhbyhwbCh0KSk7XG4gICAgICAgIH1mdW5jdGlvbiBqcyh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIHMgPSAtMSxcbiAgICAgICAgICAgICAgciA9IHQubGVuZ3RoO2UgPCAwICYmIChlID0gLWUgPiByID8gMCA6IHIgKyBlKSwgKGkgPSBpID4gciA/IHIgOiBpKSA8IDAgJiYgKGkgKz0gciksIHIgPSBlID4gaSA/IDAgOiBpIC0gZSA+Pj4gMCwgZSA+Pj49IDA7Zm9yICh2YXIgbyA9IG4ocik7ICsrcyA8IHI7KSB7XG4gICAgICAgICAgICBvW3NdID0gdFtzICsgZV07XG4gICAgICAgICAgfXJldHVybiBvO1xuICAgICAgICB9ZnVuY3Rpb24gTXModCwgZSkge1xuICAgICAgICAgIHZhciBpO3JldHVybiBMbih0LCBmdW5jdGlvbiAodCwgbiwgcykge1xuICAgICAgICAgICAgcmV0dXJuICEoaSA9IGUodCwgbiwgcykpO1xuICAgICAgICAgIH0pLCAhIWk7XG4gICAgICAgIH1mdW5jdGlvbiBQcyh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSAwLFxuICAgICAgICAgICAgICBzID0gbnVsbCA9PSB0ID8gbiA6IHQubGVuZ3RoO2lmIChcIm51bWJlclwiID09IHR5cGVvZiBlICYmIGUgPT0gZSAmJiBzIDw9IEwpIHtcbiAgICAgICAgICAgIGZvciAoOyBuIDwgczspIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBuICsgcyA+Pj4gMSxcbiAgICAgICAgICAgICAgICAgIG8gPSB0W3JdO251bGwgIT09IG8gJiYgIUhhKG8pICYmIChpID8gbyA8PSBlIDogbyA8IGUpID8gbiA9IHIgKyAxIDogcyA9IHI7XG4gICAgICAgICAgICB9cmV0dXJuIHM7XG4gICAgICAgICAgfXJldHVybiBFcyh0LCBlLCBqbCwgaSk7XG4gICAgICAgIH1mdW5jdGlvbiBFcyh0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgZSA9IGkoZSk7Zm9yICh2YXIgcyA9IDAsIG8gPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGgsIGEgPSBlICE9IGUsIGwgPSBudWxsID09PSBlLCB1ID0gSGEoZSksIGMgPSBlID09PSByOyBzIDwgbzspIHtcbiAgICAgICAgICAgIHZhciBoID0gRmkoKHMgKyBvKSAvIDIpLFxuICAgICAgICAgICAgICAgIGQgPSBpKHRbaF0pLFxuICAgICAgICAgICAgICAgIHAgPSBkICE9PSByLFxuICAgICAgICAgICAgICAgIGYgPSBudWxsID09PSBkLFxuICAgICAgICAgICAgICAgIGcgPSBkID09IGQsXG4gICAgICAgICAgICAgICAgbSA9IEhhKGQpO2lmIChhKSB2YXIgdiA9IG4gfHwgZztlbHNlIHYgPSBjID8gZyAmJiAobiB8fCBwKSA6IGwgPyBnICYmIHAgJiYgKG4gfHwgIWYpIDogdSA/IGcgJiYgcCAmJiAhZiAmJiAobiB8fCAhbSkgOiAhZiAmJiAhbSAmJiAobiA/IGQgPD0gZSA6IGQgPCBlKTt2ID8gcyA9IGggKyAxIDogbyA9IGg7XG4gICAgICAgICAgfXJldHVybiBVaShvLCBGKTtcbiAgICAgICAgfWZ1bmN0aW9uIE9zKHQsIGUpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gLTEsIG4gPSB0Lmxlbmd0aCwgcyA9IDAsIHIgPSBbXTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIHZhciBvID0gdFtpXSxcbiAgICAgICAgICAgICAgICBhID0gZSA/IGUobykgOiBvO2lmICghaSB8fCAhcGEoYSwgbCkpIHtcbiAgICAgICAgICAgICAgdmFyIGwgPSBhO3JbcysrXSA9IDAgPT09IG8gPyAwIDogbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuIHI7XG4gICAgICAgIH1mdW5jdGlvbiBIcyh0KSB7XG4gICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgPyB0IDogSGEodCkgPyBOIDogK3Q7XG4gICAgICAgIH1mdW5jdGlvbiBOcyh0KSB7XG4gICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIHJldHVybiB0O2lmICh2YSh0KSkgcmV0dXJuIFFlKHQsIE5zKSArIFwiXCI7aWYgKEhhKHQpKSByZXR1cm4gZG4gPyBkbi5jYWxsKHQpIDogXCJcIjt2YXIgZSA9IHQgKyBcIlwiO3JldHVybiBcIjBcIiA9PSBlICYmIDEgLyB0ID09IC1FID8gXCItMFwiIDogZTtcbiAgICAgICAgfWZ1bmN0aW9uIEJzKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IC0xLFxuICAgICAgICAgICAgICBzID0gSmUsXG4gICAgICAgICAgICAgIHIgPSB0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgYSA9ICEwLFxuICAgICAgICAgICAgICBsID0gW10sXG4gICAgICAgICAgICAgIHUgPSBsO2lmIChpKSBhID0gITEsIHMgPSBaZTtlbHNlIGlmIChyID49IG8pIHtcbiAgICAgICAgICAgIHZhciBjID0gZSA/IG51bGwgOiB3cih0KTtpZiAoYykgcmV0dXJuIElpKGMpO2EgPSAhMSwgcyA9IF9pLCB1ID0gbmV3IGtuKCk7XG4gICAgICAgICAgfSBlbHNlIHUgPSBlID8gW10gOiBsO3Q6IGZvciAoOyArK24gPCByOykge1xuICAgICAgICAgICAgdmFyIGggPSB0W25dLFxuICAgICAgICAgICAgICAgIGQgPSBlID8gZShoKSA6IGg7aWYgKGggPSBpIHx8IDAgIT09IGggPyBoIDogMCwgYSAmJiBkID09IGQpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IHUubGVuZ3RoOyBwLS07KSB7XG4gICAgICAgICAgICAgICAgaWYgKHVbcF0gPT09IGQpIGNvbnRpbnVlIHQ7XG4gICAgICAgICAgICAgIH1lICYmIHUucHVzaChkKSwgbC5wdXNoKGgpO1xuICAgICAgICAgICAgfSBlbHNlIHModSwgZCwgaSkgfHwgKHUgIT09IGwgJiYgdS5wdXNoKGQpLCBsLnB1c2goaCkpO1xuICAgICAgICAgIH1yZXR1cm4gbDtcbiAgICAgICAgfWZ1bmN0aW9uIEZzKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSAodCA9IHRvKHQsIGUgPSBLcyhlLCB0KSkpIHx8IGRlbGV0ZSB0W3VvKHhvKGUpKV07XG4gICAgICAgIH1mdW5jdGlvbiBMcyh0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgcmV0dXJuIFNzKHQsIGUsIGkoWG4odCwgZSkpLCBuKTtcbiAgICAgICAgfWZ1bmN0aW9uIHpzKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICBmb3IgKHZhciBzID0gdC5sZW5ndGgsIHIgPSBuID8gcyA6IC0xOyAobiA/IHItLSA6ICsrciA8IHMpICYmIGUodFtyXSwgciwgdCk7KSB7fXJldHVybiBpID8ganModCwgbiA/IDAgOiByLCBuID8gciArIDEgOiBzKSA6IGpzKHQsIG4gPyByICsgMSA6IDAsIG4gPyBzIDogcik7XG4gICAgICAgIH1mdW5jdGlvbiBXcyh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSB0O3JldHVybiBpIGluc3RhbmNlb2Ygdm4gJiYgKGkgPSBpLnZhbHVlKCkpLCBlaShlLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUuZnVuYy5hcHBseShlLnRoaXNBcmcsIHRpKFt0XSwgZS5hcmdzKSk7XG4gICAgICAgICAgfSwgaSk7XG4gICAgICAgIH1mdW5jdGlvbiBScyh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIHMgPSB0Lmxlbmd0aDtpZiAocyA8IDIpIHJldHVybiBzID8gQnModFswXSkgOiBbXTtmb3IgKHZhciByID0gLTEsIG8gPSBuKHMpOyArK3IgPCBzOykge1xuICAgICAgICAgICAgZm9yICh2YXIgYSA9IHRbcl0sIGwgPSAtMTsgKytsIDwgczspIHtcbiAgICAgICAgICAgICAgbCAhPSByICYmIChvW3JdID0gRm4ob1tyXSB8fCBhLCB0W2xdLCBlLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfXJldHVybiBCcyhxbihvLCAxKSwgZSwgaSk7XG4gICAgICAgIH1mdW5jdGlvbiAkcyh0LCBlLCBpKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCBzID0gdC5sZW5ndGgsIG8gPSBlLmxlbmd0aCwgYSA9IHt9OyArK24gPCBzOykge1xuICAgICAgICAgICAgdmFyIGwgPSBuIDwgbyA/IGVbbl0gOiByO2koYSwgdFtuXSwgbCk7XG4gICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICB9ZnVuY3Rpb24gcXModCkge1xuICAgICAgICAgIHJldHVybiB5YSh0KSA/IHQgOiBbXTtcbiAgICAgICAgfWZ1bmN0aW9uIFVzKHQpIHtcbiAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ID8gdCA6IGpsO1xuICAgICAgICB9ZnVuY3Rpb24gS3ModCwgZSkge1xuICAgICAgICAgIHJldHVybiB2YSh0KSA/IHQgOiBZcih0LCBlKSA/IFt0XSA6IGxvKFVhKHQpKTtcbiAgICAgICAgfXZhciBZcyA9IHhzO2Z1bmN0aW9uIFZzKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IHQubGVuZ3RoO3JldHVybiBpID0gaSA9PT0gciA/IG4gOiBpLCAhZSAmJiBpID49IG4gPyB0IDoganModCwgZSwgaSk7XG4gICAgICAgIH12YXIgR3MgPSBPaSB8fCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBFZS5jbGVhclRpbWVvdXQodCk7XG4gICAgICAgIH07ZnVuY3Rpb24gWHModCwgZSkge1xuICAgICAgICAgIGlmIChlKSByZXR1cm4gdC5zbGljZSgpO3ZhciBpID0gdC5sZW5ndGgsXG4gICAgICAgICAgICAgIG4gPSBJZSA/IEllKGkpIDogbmV3IHQuY29uc3RydWN0b3IoaSk7cmV0dXJuIHQuY29weShuKSwgbjtcbiAgICAgICAgfWZ1bmN0aW9uIEpzKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IG5ldyB0LmNvbnN0cnVjdG9yKHQuYnl0ZUxlbmd0aCk7cmV0dXJuIG5ldyB3ZShlKS5zZXQobmV3IHdlKHQpKSwgZTtcbiAgICAgICAgfWZ1bmN0aW9uIFpzKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IGUgPyBKcyh0LmJ1ZmZlcikgOiB0LmJ1ZmZlcjtyZXR1cm4gbmV3IHQuY29uc3RydWN0b3IoaSwgdC5ieXRlT2Zmc2V0LCB0Lmxlbmd0aCk7XG4gICAgICAgIH1mdW5jdGlvbiBRcyh0LCBlKSB7XG4gICAgICAgICAgaWYgKHQgIT09IGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdCAhPT0gcixcbiAgICAgICAgICAgICAgICBuID0gbnVsbCA9PT0gdCxcbiAgICAgICAgICAgICAgICBzID0gdCA9PSB0LFxuICAgICAgICAgICAgICAgIG8gPSBIYSh0KSxcbiAgICAgICAgICAgICAgICBhID0gZSAhPT0gcixcbiAgICAgICAgICAgICAgICBsID0gbnVsbCA9PT0gZSxcbiAgICAgICAgICAgICAgICB1ID0gZSA9PSBlLFxuICAgICAgICAgICAgICAgIGMgPSBIYShlKTtpZiAoIWwgJiYgIWMgJiYgIW8gJiYgdCA+IGUgfHwgbyAmJiBhICYmIHUgJiYgIWwgJiYgIWMgfHwgbiAmJiBhICYmIHUgfHwgIWkgJiYgdSB8fCAhcykgcmV0dXJuIDE7aWYgKCFuICYmICFvICYmICFjICYmIHQgPCBlIHx8IGMgJiYgaSAmJiBzICYmICFuICYmICFvIHx8IGwgJiYgaSAmJiBzIHx8ICFhICYmIHMgfHwgIXUpIHJldHVybiAtMTtcbiAgICAgICAgICB9cmV0dXJuIDA7XG4gICAgICAgIH1mdW5jdGlvbiB0cih0LCBlLCBpLCBzKSB7XG4gICAgICAgICAgZm9yICh2YXIgciA9IC0xLCBvID0gdC5sZW5ndGgsIGEgPSBpLmxlbmd0aCwgbCA9IC0xLCB1ID0gZS5sZW5ndGgsIGMgPSBxaShvIC0gYSwgMCksIGggPSBuKHUgKyBjKSwgZCA9ICFzOyArK2wgPCB1Oykge1xuICAgICAgICAgICAgaFtsXSA9IGVbbF07XG4gICAgICAgICAgfWZvciAoOyArK3IgPCBhOykge1xuICAgICAgICAgICAgKGQgfHwgciA8IG8pICYmIChoW2lbcl1dID0gdFtyXSk7XG4gICAgICAgICAgfWZvciAoOyBjLS07KSB7XG4gICAgICAgICAgICBoW2wrK10gPSB0W3IrK107XG4gICAgICAgICAgfXJldHVybiBoO1xuICAgICAgICB9ZnVuY3Rpb24gZXIodCwgZSwgaSwgcykge1xuICAgICAgICAgIGZvciAodmFyIHIgPSAtMSwgbyA9IHQubGVuZ3RoLCBhID0gLTEsIGwgPSBpLmxlbmd0aCwgdSA9IC0xLCBjID0gZS5sZW5ndGgsIGggPSBxaShvIC0gbCwgMCksIGQgPSBuKGggKyBjKSwgcCA9ICFzOyArK3IgPCBoOykge1xuICAgICAgICAgICAgZFtyXSA9IHRbcl07XG4gICAgICAgICAgfWZvciAodmFyIGYgPSByOyArK3UgPCBjOykge1xuICAgICAgICAgICAgZFtmICsgdV0gPSBlW3VdO1xuICAgICAgICAgIH1mb3IgKDsgKythIDwgbDspIHtcbiAgICAgICAgICAgIChwIHx8IHIgPCBvKSAmJiAoZFtmICsgaVthXV0gPSB0W3IrK10pO1xuICAgICAgICAgIH1yZXR1cm4gZDtcbiAgICAgICAgfWZ1bmN0aW9uIGlyKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgICAgICBzID0gdC5sZW5ndGg7Zm9yIChlIHx8IChlID0gbihzKSk7ICsraSA8IHM7KSB7XG4gICAgICAgICAgICBlW2ldID0gdFtpXTtcbiAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgIH1mdW5jdGlvbiBucih0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgdmFyIHMgPSAhaTtpIHx8IChpID0ge30pO2ZvciAodmFyIG8gPSAtMSwgYSA9IGUubGVuZ3RoOyArK28gPCBhOykge1xuICAgICAgICAgICAgdmFyIGwgPSBlW29dLFxuICAgICAgICAgICAgICAgIHUgPSBuID8gbihpW2xdLCB0W2xdLCBsLCBpLCB0KSA6IHI7dSA9PT0gciAmJiAodSA9IHRbbF0pLCBzID8gUG4oaSwgbCwgdSkgOiBJbihpLCBsLCB1KTtcbiAgICAgICAgICB9cmV0dXJuIGk7XG4gICAgICAgIH1mdW5jdGlvbiBzcih0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHZhKGkpID8gS2UgOiBqbixcbiAgICAgICAgICAgICAgICByID0gZSA/IGUoKSA6IHt9O3JldHVybiBzKGksIHQsIEhyKG4sIDIpLCByKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gcnIodCkge1xuICAgICAgICAgIHJldHVybiB4cyhmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgdmFyIG4gPSAtMSxcbiAgICAgICAgICAgICAgICBzID0gaS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbyA9IHMgPiAxID8gaVtzIC0gMV0gOiByLFxuICAgICAgICAgICAgICAgIGEgPSBzID4gMiA/IGlbMl0gOiByO2ZvciAobyA9IHQubGVuZ3RoID4gMyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG8gPyAocy0tLCBvKSA6IHIsIGEgJiYgS3IoaVswXSwgaVsxXSwgYSkgJiYgKG8gPSBzIDwgMyA/IHIgOiBvLCBzID0gMSksIGUgPSBlZShlKTsgKytuIDwgczspIHtcbiAgICAgICAgICAgICAgdmFyIGwgPSBpW25dO2wgJiYgdChlLCBsLCBuLCBvKTtcbiAgICAgICAgICAgIH1yZXR1cm4gZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfWZ1bmN0aW9uIG9yKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgIGlmIChudWxsID09IGkpIHJldHVybiBpO2lmICghYmEoaSkpIHJldHVybiB0KGksIG4pO2ZvciAodmFyIHMgPSBpLmxlbmd0aCwgciA9IGUgPyBzIDogLTEsIG8gPSBlZShpKTsgKGUgPyByLS0gOiArK3IgPCBzKSAmJiAhMSAhPT0gbihvW3JdLCByLCBvKTspIHt9cmV0dXJuIGk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIGFyKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIGksIG4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIHMgPSAtMSwgciA9IGVlKGUpLCBvID0gbihlKSwgYSA9IG8ubGVuZ3RoOyBhLS07KSB7XG4gICAgICAgICAgICAgIHZhciBsID0gb1t0ID8gYSA6ICsrc107aWYgKCExID09PSBpKHJbbF0sIGwsIHIpKSBicmVhaztcbiAgICAgICAgICAgIH1yZXR1cm4gZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gbHIodCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGkgPSBDaShlID0gVWEoZSkpID8gTWkoZSkgOiByLFxuICAgICAgICAgICAgICAgIG4gPSBpID8gaVswXSA6IGUuY2hhckF0KDApLFxuICAgICAgICAgICAgICAgIHMgPSBpID8gVnMoaSwgMSkuam9pbihcIlwiKSA6IGUuc2xpY2UoMSk7cmV0dXJuIG5bdF0oKSArIHM7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIHVyKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlaShDbChtbChlKS5yZXBsYWNlKF9lLCBcIlwiKSksIHQsIFwiXCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1mdW5jdGlvbiBjcih0KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzO3N3aXRjaCAoZS5sZW5ndGgpIHtjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0KCk7Y2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdKTtjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0KGVbMF0sIGVbMV0pO2Nhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQoZVswXSwgZVsxXSwgZVsyXSk7Y2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdLCBlWzNdKTtjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0KGVbMF0sIGVbMV0sIGVbMl0sIGVbM10sIGVbNF0pO2Nhc2UgNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHQoZVswXSwgZVsxXSwgZVsyXSwgZVszXSwgZVs0XSwgZVs1XSk7Y2FzZSA3OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdLCBlWzNdLCBlWzRdLCBlWzVdLCBlWzZdKTt9dmFyIGkgPSBmbih0LnByb3RvdHlwZSksXG4gICAgICAgICAgICAgICAgbiA9IHQuYXBwbHkoaSwgZSk7cmV0dXJuIFRhKG4pID8gbiA6IGk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIGhyKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIGksIG4pIHtcbiAgICAgICAgICAgIHZhciBzID0gZWUoZSk7aWYgKCFiYShlKSkge1xuICAgICAgICAgICAgICB2YXIgbyA9IEhyKGksIDMpO2UgPSBzbChlKSwgaSA9IGZ1bmN0aW9uIGkodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvKHNbdF0sIHQsIHMpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfXZhciBhID0gdChlLCBpLCBuKTtyZXR1cm4gYSA+IC0xID8gc1tvID8gZVthXSA6IGFdIDogcjtcbiAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gZHIodCkge1xuICAgICAgICAgIHJldHVybiBBcihmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGkgPSBlLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuID0gaSxcbiAgICAgICAgICAgICAgICBzID0gbW4ucHJvdG90eXBlLnRocnU7Zm9yICh0ICYmIGUucmV2ZXJzZSgpOyBuLS07KSB7XG4gICAgICAgICAgICAgIHZhciBvID0gZVtuXTtpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBvKSB0aHJvdyBuZXcgc2UobCk7aWYgKHMgJiYgIWEgJiYgXCJ3cmFwcGVyXCIgPT0gRXIobykpIHZhciBhID0gbmV3IG1uKFtdLCAhMCk7XG4gICAgICAgICAgICB9Zm9yIChuID0gYSA/IG4gOiBpOyArK24gPCBpOykge1xuICAgICAgICAgICAgICB2YXIgdSA9IEVyKG8gPSBlW25dKSxcbiAgICAgICAgICAgICAgICAgIGMgPSBcIndyYXBwZXJcIiA9PSB1ID8gUHIobykgOiByO2EgPSBjICYmIFZyKGNbMF0pICYmIGNbMV0gPT0gKEMgfCB5IHwgdyB8IEQpICYmICFjWzRdLmxlbmd0aCAmJiAxID09IGNbOV0gPyBhW0VyKGNbMF0pXS5hcHBseShhLCBjWzNdKSA6IDEgPT0gby5sZW5ndGggJiYgVnIobykgPyBhW3VdKCkgOiBhLnRocnUobyk7XG4gICAgICAgICAgICB9cmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICBuID0gdFswXTtpZiAoYSAmJiAxID09IHQubGVuZ3RoICYmIHZhKG4pKSByZXR1cm4gYS5wbGFudChuKS52YWx1ZSgpO2ZvciAodmFyIHMgPSAwLCByID0gaSA/IGVbc10uYXBwbHkodGhpcywgdCkgOiBuOyArK3MgPCBpOykge1xuICAgICAgICAgICAgICAgIHIgPSBlW3NdLmNhbGwodGhpcywgcik7XG4gICAgICAgICAgICAgIH1yZXR1cm4gcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1mdW5jdGlvbiBwcih0LCBlLCBpLCBzLCBvLCBhLCBsLCB1LCBjLCBoKSB7XG4gICAgICAgICAgdmFyIGQgPSBlICYgQyxcbiAgICAgICAgICAgICAgcCA9IGUgJiB2LFxuICAgICAgICAgICAgICBmID0gZSAmIF8sXG4gICAgICAgICAgICAgIGcgPSBlICYgKHkgfCBrKSxcbiAgICAgICAgICAgICAgbSA9IGUgJiBTLFxuICAgICAgICAgICAgICBiID0gZiA/IHIgOiBjcih0KTtyZXR1cm4gZnVuY3Rpb24gdigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF8gPSBhcmd1bWVudHMubGVuZ3RoLCB5ID0gbihfKSwgayA9IF87IGstLTspIHtcbiAgICAgICAgICAgICAgeVtrXSA9IGFyZ3VtZW50c1trXTtcbiAgICAgICAgICAgIH1pZiAoZykgdmFyIHcgPSBPcih2KSxcbiAgICAgICAgICAgICAgICB4ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHQubGVuZ3RoLCBuID0gMDsgaS0tOykge1xuICAgICAgICAgICAgICAgIHRbaV0gPT09IGUgJiYgKytuO1xuICAgICAgICAgICAgICB9cmV0dXJuIG47XG4gICAgICAgICAgICB9KHksIHcpO2lmIChzICYmICh5ID0gdHIoeSwgcywgbywgZykpLCBhICYmICh5ID0gZXIoeSwgYSwgbCwgZykpLCBfIC09IHgsIGcgJiYgXyA8IGgpIHtcbiAgICAgICAgICAgICAgdmFyIEMgPSBUaSh5LCB3KTtyZXR1cm4geXIodCwgZSwgcHIsIHYucGxhY2Vob2xkZXIsIGksIHksIEMsIHUsIGMsIGggLSBfKTtcbiAgICAgICAgICAgIH12YXIgRCA9IHAgPyBpIDogdGhpcyxcbiAgICAgICAgICAgICAgICBTID0gZiA/IERbdF0gOiB0O3JldHVybiBfID0geS5sZW5ndGgsIHUgPyB5ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHQubGVuZ3RoLCBuID0gVWkoZS5sZW5ndGgsIGkpLCBzID0gaXIodCk7IG4tLTspIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGVbbl07dFtuXSA9IFVyKG8sIGkpID8gc1tvXSA6IHI7XG4gICAgICAgICAgICAgIH1yZXR1cm4gdDtcbiAgICAgICAgICAgIH0oeSwgdSkgOiBtICYmIF8gPiAxICYmIHkucmV2ZXJzZSgpLCBkICYmIGMgPCBfICYmICh5Lmxlbmd0aCA9IGMpLCB0aGlzICYmIHRoaXMgIT09IEVlICYmIHRoaXMgaW5zdGFuY2VvZiB2ICYmIChTID0gYiB8fCBjcihTKSksIFMuYXBwbHkoRCwgeSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIGZyKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgICAgICByZXR1cm4gWW4odCwgZnVuY3Rpb24gKHQsIHMsIHIpIHtcbiAgICAgICAgICAgICAgICBlKG4sIGkodCksIHMsIHIpO1xuICAgICAgICAgICAgICB9KSwgbjtcbiAgICAgICAgICAgIH0oaSwgdCwgZShuKSwge30pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1mdW5jdGlvbiBncih0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICB2YXIgcztpZiAoaSA9PT0gciAmJiBuID09PSByKSByZXR1cm4gZTtpZiAoaSAhPT0gciAmJiAocyA9IGkpLCBuICE9PSByKSB7XG4gICAgICAgICAgICAgIGlmIChzID09PSByKSByZXR1cm4gbjtcInN0cmluZ1wiID09IHR5cGVvZiBpIHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIG4gPyAoaSA9IE5zKGkpLCBuID0gTnMobikpIDogKGkgPSBIcyhpKSwgbiA9IEhzKG4pKSwgcyA9IHQoaSwgbik7XG4gICAgICAgICAgICB9cmV0dXJuIHM7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIG1yKHQpIHtcbiAgICAgICAgICByZXR1cm4gQXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlID0gUWUoZSwgbWkoSHIoKSkpLCB4cyhmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICB2YXIgbiA9IHRoaXM7cmV0dXJuIHQoZSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVWUodCwgbiwgaSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1mdW5jdGlvbiB2cih0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSAoZSA9IGUgPT09IHIgPyBcIiBcIiA6IE5zKGUpKS5sZW5ndGg7aWYgKGkgPCAyKSByZXR1cm4gaSA/IHdzKGUsIHQpIDogZTt2YXIgbiA9IHdzKGUsIEJpKHQgLyBqaShlKSkpO3JldHVybiBDaShlKSA/IFZzKE1pKG4pLCAwLCB0KS5qb2luKFwiXCIpIDogbi5zbGljZSgwLCB0KTtcbiAgICAgICAgfWZ1bmN0aW9uIF9yKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIGksIHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzICYmIFwibnVtYmVyXCIgIT0gdHlwZW9mIHMgJiYgS3IoZSwgaSwgcykgJiYgKGkgPSBzID0gciksIGUgPSB6YShlKSwgaSA9PT0gciA/IChpID0gZSwgZSA9IDApIDogaSA9IHphKGkpLCBmdW5jdGlvbiAodCwgZSwgaSwgcykge1xuICAgICAgICAgICAgICBmb3IgKHZhciByID0gLTEsIG8gPSBxaShCaSgoZSAtIHQpIC8gKGkgfHwgMSkpLCAwKSwgYSA9IG4obyk7IG8tLTspIHtcbiAgICAgICAgICAgICAgICBhW3MgPyBvIDogKytyXSA9IHQsIHQgKz0gaTtcbiAgICAgICAgICAgICAgfXJldHVybiBhO1xuICAgICAgICAgICAgfShlLCBpLCBzID0gcyA9PT0gciA/IGUgPCBpID8gMSA6IC0xIDogemEocyksIHQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1mdW5jdGlvbiBicih0KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBpIHx8IChlID0gJGEoZSksIGkgPSAkYShpKSksIHQoZSwgaSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIHlyKHQsIGUsIGksIG4sIHMsIG8sIGEsIGwsIHUsIGMpIHtcbiAgICAgICAgICB2YXIgaCA9IGUgJiB5O2UgfD0gaCA/IHcgOiB4LCAoZSAmPSB+KGggPyB4IDogdykpICYgYiB8fCAoZSAmPSB+KHYgfCBfKSk7dmFyIGQgPSBbdCwgZSwgcywgaCA/IG8gOiByLCBoID8gYSA6IHIsIGggPyByIDogbywgaCA/IHIgOiBhLCBsLCB1LCBjXSxcbiAgICAgICAgICAgICAgcCA9IGkuYXBwbHkociwgZCk7cmV0dXJuIFZyKHQpICYmIGlvKHAsIGQpLCBwLnBsYWNlaG9sZGVyID0gbiwgcm8ocCwgdCwgZSk7XG4gICAgICAgIH1mdW5jdGlvbiBrcih0KSB7XG4gICAgICAgICAgdmFyIGUgPSB0ZVt0XTtyZXR1cm4gZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICAgIGlmICh0ID0gJGEodCksIGkgPSBudWxsID09IGkgPyAwIDogVWkoV2EoaSksIDI5MikpIHtcbiAgICAgICAgICAgICAgdmFyIG4gPSAoVWEodCkgKyBcImVcIikuc3BsaXQoXCJlXCIpO3JldHVybiArKChuID0gKFVhKGUoblswXSArIFwiZVwiICsgKCtuWzFdICsgaSkpKSArIFwiZVwiKS5zcGxpdChcImVcIikpWzBdICsgXCJlXCIgKyAoK25bMV0gLSBpKSk7XG4gICAgICAgICAgICB9cmV0dXJuIGUodCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfXZhciB3ciA9IFFpICYmIDEgLyBJaShuZXcgUWkoWywgLTBdKSlbMV0gPT0gRSA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBRaSh0KTtcbiAgICAgICAgfSA6IEhsO2Z1bmN0aW9uIHhyKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gV3IoZSk7cmV0dXJuIGkgPT0gWCA/IERpKGUpIDogaSA9PSBpdCA/IEFpKGUpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFFlKGUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtlLCB0W2VdXTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KGUsIHQoZSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1mdW5jdGlvbiBDcih0LCBlLCBpLCBzLCBvLCBhLCB1LCBjKSB7XG4gICAgICAgICAgdmFyIGQgPSBlICYgXztpZiAoIWQgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgc2UobCk7dmFyIHAgPSBzID8gcy5sZW5ndGggOiAwO2lmIChwIHx8IChlICY9IH4odyB8IHgpLCBzID0gbyA9IHIpLCB1ID0gdSA9PT0gciA/IHUgOiBxaShXYSh1KSwgMCksIGMgPSBjID09PSByID8gYyA6IFdhKGMpLCBwIC09IG8gPyBvLmxlbmd0aCA6IDAsIGUgJiB4KSB7XG4gICAgICAgICAgICB2YXIgZiA9IHMsXG4gICAgICAgICAgICAgICAgZyA9IG87cyA9IG8gPSByO1xuICAgICAgICAgIH12YXIgbSA9IGQgPyByIDogUHIodCksXG4gICAgICAgICAgICAgIFMgPSBbdCwgZSwgaSwgcywgbywgZiwgZywgYSwgdSwgY107aWYgKG0gJiYgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdFsxXSxcbiAgICAgICAgICAgICAgICBuID0gZVsxXSxcbiAgICAgICAgICAgICAgICBzID0gaSB8IG4sXG4gICAgICAgICAgICAgICAgciA9IHMgPCAodiB8IF8gfCBDKSxcbiAgICAgICAgICAgICAgICBvID0gbiA9PSBDICYmIGkgPT0geSB8fCBuID09IEMgJiYgaSA9PSBEICYmIHRbN10ubGVuZ3RoIDw9IGVbOF0gfHwgbiA9PSAoQyB8IEQpICYmIGVbN10ubGVuZ3RoIDw9IGVbOF0gJiYgaSA9PSB5O2lmICghciAmJiAhbykgcmV0dXJuIHQ7biAmIHYgJiYgKHRbMl0gPSBlWzJdLCBzIHw9IGkgJiB2ID8gMCA6IGIpO3ZhciBhID0gZVszXTtpZiAoYSkge1xuICAgICAgICAgICAgICB2YXIgbCA9IHRbM107dFszXSA9IGwgPyB0cihsLCBhLCBlWzRdKSA6IGEsIHRbNF0gPSBsID8gVGkodFszXSwgaCkgOiBlWzRdO1xuICAgICAgICAgICAgfShhID0gZVs1XSkgJiYgKGwgPSB0WzVdLCB0WzVdID0gbCA/IGVyKGwsIGEsIGVbNl0pIDogYSwgdFs2XSA9IGwgPyBUaSh0WzVdLCBoKSA6IGVbNl0pLCAoYSA9IGVbN10pICYmICh0WzddID0gYSksIG4gJiBDICYmICh0WzhdID0gbnVsbCA9PSB0WzhdID8gZVs4XSA6IFVpKHRbOF0sIGVbOF0pKSwgbnVsbCA9PSB0WzldICYmICh0WzldID0gZVs5XSksIHRbMF0gPSBlWzBdLCB0WzFdID0gcztcbiAgICAgICAgICB9KFMsIG0pLCB0ID0gU1swXSwgZSA9IFNbMV0sIGkgPSBTWzJdLCBzID0gU1szXSwgbyA9IFNbNF0sICEoYyA9IFNbOV0gPSBTWzldID09PSByID8gZCA/IDAgOiB0Lmxlbmd0aCA6IHFpKFNbOV0gLSBwLCAwKSkgJiYgZSAmICh5IHwgaykgJiYgKGUgJj0gfih5IHwgaykpLCBlICYmIGUgIT0gdikgVCA9IGUgPT0geSB8fCBlID09IGsgPyBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgICAgdmFyIHMgPSBjcih0KTtyZXR1cm4gZnVuY3Rpb24gbygpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGgsIGwgPSBuKGEpLCB1ID0gYSwgYyA9IE9yKG8pOyB1LS07KSB7XG4gICAgICAgICAgICAgICAgbFt1XSA9IGFyZ3VtZW50c1t1XTtcbiAgICAgICAgICAgICAgfXZhciBoID0gYSA8IDMgJiYgbFswXSAhPT0gYyAmJiBsW2EgLSAxXSAhPT0gYyA/IFtdIDogVGkobCwgYyk7cmV0dXJuIChhIC09IGgubGVuZ3RoKSA8IGkgPyB5cih0LCBlLCBwciwgby5wbGFjZWhvbGRlciwgciwgbCwgaCwgciwgciwgaSAtIGEpIDogVWUodGhpcyAmJiB0aGlzICE9PSBFZSAmJiB0aGlzIGluc3RhbmNlb2YgbyA/IHMgOiB0LCB0aGlzLCBsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSh0LCBlLCBjKSA6IGUgIT0gdyAmJiBlICE9ICh2IHwgdykgfHwgby5sZW5ndGggPyBwci5hcHBseShyLCBTKSA6IGZ1bmN0aW9uICh0LCBlLCBpLCBzKSB7XG4gICAgICAgICAgICB2YXIgciA9IGUgJiB2LFxuICAgICAgICAgICAgICAgIG8gPSBjcih0KTtyZXR1cm4gZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IC0xLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgdSA9IC0xLCBjID0gcy5sZW5ndGgsIGggPSBuKGMgKyBsKSwgZCA9IHRoaXMgJiYgdGhpcyAhPT0gRWUgJiYgdGhpcyBpbnN0YW5jZW9mIGUgPyBvIDogdDsgKyt1IDwgYzspIHtcbiAgICAgICAgICAgICAgICBoW3VdID0gc1t1XTtcbiAgICAgICAgICAgICAgfWZvciAoOyBsLS07KSB7XG4gICAgICAgICAgICAgICAgaFt1KytdID0gYXJndW1lbnRzWysrYV07XG4gICAgICAgICAgICAgIH1yZXR1cm4gVWUoZCwgciA/IGkgOiB0aGlzLCBoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSh0LCBlLCBpLCBzKTtlbHNlIHZhciBUID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIHZhciBuID0gZSAmIHYsXG4gICAgICAgICAgICAgICAgcyA9IGNyKHQpO3JldHVybiBmdW5jdGlvbiBlKCkge1xuICAgICAgICAgICAgICByZXR1cm4gKHRoaXMgJiYgdGhpcyAhPT0gRWUgJiYgdGhpcyBpbnN0YW5jZW9mIGUgPyBzIDogdCkuYXBwbHkobiA/IGkgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KHQsIGUsIGkpO3JldHVybiBybygobSA/IFRzIDogaW8pKFQsIFMpLCB0LCBlKTtcbiAgICAgICAgfWZ1bmN0aW9uIERyKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICByZXR1cm4gdCA9PT0gciB8fCBwYSh0LCBhZVtpXSkgJiYgIWNlLmNhbGwobiwgaSkgPyBlIDogdDtcbiAgICAgICAgfWZ1bmN0aW9uIFNyKHQsIGUsIGksIG4sIHMsIG8pIHtcbiAgICAgICAgICByZXR1cm4gVGEodCkgJiYgVGEoZSkgJiYgKG8uc2V0KGUsIHQpLCBncyh0LCBlLCByLCBTciwgbyksIG8uZGVsZXRlKGUpKSwgdDtcbiAgICAgICAgfWZ1bmN0aW9uIFRyKHQpIHtcbiAgICAgICAgICByZXR1cm4gTWEodCkgPyByIDogdDtcbiAgICAgICAgfWZ1bmN0aW9uIElyKHQsIGUsIGksIG4sIHMsIG8pIHtcbiAgICAgICAgICB2YXIgYSA9IGkgJiBnLFxuICAgICAgICAgICAgICBsID0gdC5sZW5ndGgsXG4gICAgICAgICAgICAgIHUgPSBlLmxlbmd0aDtpZiAobCAhPSB1ICYmICEoYSAmJiB1ID4gbCkpIHJldHVybiAhMTt2YXIgYyA9IG8uZ2V0KHQpO2lmIChjICYmIG8uZ2V0KGUpKSByZXR1cm4gYyA9PSBlO3ZhciBoID0gLTEsXG4gICAgICAgICAgICAgIGQgPSAhMCxcbiAgICAgICAgICAgICAgcCA9IGkgJiBtID8gbmV3IGtuKCkgOiByO2ZvciAoby5zZXQodCwgZSksIG8uc2V0KGUsIHQpOyArK2ggPCBsOykge1xuICAgICAgICAgICAgdmFyIGYgPSB0W2hdLFxuICAgICAgICAgICAgICAgIHYgPSBlW2hdO2lmIChuKSB2YXIgXyA9IGEgPyBuKHYsIGYsIGgsIGUsIHQsIG8pIDogbihmLCB2LCBoLCB0LCBlLCBvKTtpZiAoXyAhPT0gcikge1xuICAgICAgICAgICAgICBpZiAoXykgY29udGludWU7ZCA9ICExO2JyZWFrO1xuICAgICAgICAgICAgfWlmIChwKSB7XG4gICAgICAgICAgICAgIGlmICghbmkoZSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV9pKHAsIGUpICYmIChmID09PSB0IHx8IHMoZiwgdCwgaSwgbiwgbykpKSByZXR1cm4gcC5wdXNoKGUpO1xuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgIGQgPSAhMTticmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmICE9PSB2ICYmICFzKGYsIHYsIGksIG4sIG8pKSB7XG4gICAgICAgICAgICAgIGQgPSAhMTticmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuIG8uZGVsZXRlKHQpLCBvLmRlbGV0ZShlKSwgZDtcbiAgICAgICAgfWZ1bmN0aW9uIEFyKHQpIHtcbiAgICAgICAgICByZXR1cm4gc28oUXIodCwgciwgX28pLCB0ICsgXCJcIik7XG4gICAgICAgIH1mdW5jdGlvbiBqcih0KSB7XG4gICAgICAgICAgcmV0dXJuIEpuKHQsIHNsLCBMcik7XG4gICAgICAgIH1mdW5jdGlvbiBNcih0KSB7XG4gICAgICAgICAgcmV0dXJuIEpuKHQsIHJsLCB6cik7XG4gICAgICAgIH12YXIgUHIgPSBubiA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIG5uLmdldCh0KTtcbiAgICAgICAgfSA6IEhsO2Z1bmN0aW9uIEVyKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBlID0gdC5uYW1lICsgXCJcIiwgaSA9IHNuW2VdLCBuID0gY2UuY2FsbChzbiwgZSkgPyBpLmxlbmd0aCA6IDA7IG4tLTspIHtcbiAgICAgICAgICAgIHZhciBzID0gaVtuXSxcbiAgICAgICAgICAgICAgICByID0gcy5mdW5jO2lmIChudWxsID09IHIgfHwgciA9PSB0KSByZXR1cm4gcy5uYW1lO1xuICAgICAgICAgIH1yZXR1cm4gZTtcbiAgICAgICAgfWZ1bmN0aW9uIE9yKHQpIHtcbiAgICAgICAgICByZXR1cm4gKGNlLmNhbGwocG4sIFwicGxhY2Vob2xkZXJcIikgPyBwbiA6IHQpLnBsYWNlaG9sZGVyO1xuICAgICAgICB9ZnVuY3Rpb24gSHIoKSB7XG4gICAgICAgICAgdmFyIHQgPSBwbi5pdGVyYXRlZSB8fCBNbDtyZXR1cm4gdCA9IHQgPT09IE1sID8gbHMgOiB0LCBhcmd1bWVudHMubGVuZ3RoID8gdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiB0O1xuICAgICAgICB9ZnVuY3Rpb24gTnIodCwgZSkge1xuICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICBzID0gdC5fX2RhdGFfXztyZXR1cm4gKFwic3RyaW5nXCIgPT0gKG4gPSBfdHlwZW9mKGkgPSBlKSkgfHwgXCJudW1iZXJcIiA9PSBuIHx8IFwic3ltYm9sXCIgPT0gbiB8fCBcImJvb2xlYW5cIiA9PSBuID8gXCJfX3Byb3RvX19cIiAhPT0gaSA6IG51bGwgPT09IGkpID8gc1tcInN0cmluZ1wiID09IHR5cGVvZiBlID8gXCJzdHJpbmdcIiA6IFwiaGFzaFwiXSA6IHMubWFwO1xuICAgICAgICB9ZnVuY3Rpb24gQnIodCkge1xuICAgICAgICAgIGZvciAodmFyIGUgPSBzbCh0KSwgaSA9IGUubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgbiA9IGVbaV0sXG4gICAgICAgICAgICAgICAgcyA9IHRbbl07ZVtpXSA9IFtuLCBzLCBKcihzKV07XG4gICAgICAgICAgfXJldHVybiBlO1xuICAgICAgICB9ZnVuY3Rpb24gRnIodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyByIDogdFtlXTtcbiAgICAgICAgICB9KHQsIGUpO3JldHVybiBhcyhpKSA/IGkgOiByO1xuICAgICAgICB9dmFyIExyID0gTGkgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBbXSA6ICh0ID0gZWUodCksIFhlKExpKHQpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIE9lLmNhbGwodCwgZSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IDogUmwsXG4gICAgICAgICAgICB6ciA9IExpID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBlID0gW107IHQ7KSB7XG4gICAgICAgICAgICB0aShlLCBMcih0KSksIHQgPSBNZSh0KTtcbiAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgIH0gOiBSbCxcbiAgICAgICAgICAgIFdyID0gWm47ZnVuY3Rpb24gUnIodCwgZSwgaSkge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAtMSwgcyA9IChlID0gS3MoZSwgdCkpLmxlbmd0aCwgciA9ICExOyArK24gPCBzOykge1xuICAgICAgICAgICAgdmFyIG8gPSB1byhlW25dKTtpZiAoIShyID0gbnVsbCAhPSB0ICYmIGkodCwgbykpKSBicmVhazt0ID0gdFtvXTtcbiAgICAgICAgICB9cmV0dXJuIHIgfHwgKytuICE9IHMgPyByIDogISEocyA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aCkgJiYgU2EocykgJiYgVXIobywgcykgJiYgKHZhKHQpIHx8IG1hKHQpKTtcbiAgICAgICAgfWZ1bmN0aW9uICRyKHQpIHtcbiAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0LmNvbnN0cnVjdG9yIHx8IFhyKHQpID8ge30gOiBmbihNZSh0KSk7XG4gICAgICAgIH1mdW5jdGlvbiBxcih0KSB7XG4gICAgICAgICAgcmV0dXJuIHZhKHQpIHx8IG1hKHQpIHx8ICEhKEJlICYmIHQgJiYgdFtCZV0pO1xuICAgICAgICB9ZnVuY3Rpb24gVXIodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gdHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KTtyZXR1cm4gISEoZSA9IG51bGwgPT0gZSA/IE8gOiBlKSAmJiAoXCJudW1iZXJcIiA9PSBpIHx8IFwic3ltYm9sXCIgIT0gaSAmJiBWdC50ZXN0KHQpKSAmJiB0ID4gLTEgJiYgdCAlIDEgPT0gMCAmJiB0IDwgZTtcbiAgICAgICAgfWZ1bmN0aW9uIEtyKHQsIGUsIGkpIHtcbiAgICAgICAgICBpZiAoIVRhKGkpKSByZXR1cm4gITE7dmFyIG4gPSB0eXBlb2YgZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGUpO3JldHVybiAhIShcIm51bWJlclwiID09IG4gPyBiYShpKSAmJiBVcihlLCBpLmxlbmd0aCkgOiBcInN0cmluZ1wiID09IG4gJiYgZSBpbiBpKSAmJiBwYShpW2VdLCB0KTtcbiAgICAgICAgfWZ1bmN0aW9uIFlyKHQsIGUpIHtcbiAgICAgICAgICBpZiAodmEodCkpIHJldHVybiAhMTt2YXIgaSA9IHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodCk7cmV0dXJuICEoXCJudW1iZXJcIiAhPSBpICYmIFwic3ltYm9sXCIgIT0gaSAmJiBcImJvb2xlYW5cIiAhPSBpICYmIG51bGwgIT0gdCAmJiAhSGEodCkpIHx8IGp0LnRlc3QodCkgfHwgIUF0LnRlc3QodCkgfHwgbnVsbCAhPSBlICYmIHQgaW4gZWUoZSk7XG4gICAgICAgIH1mdW5jdGlvbiBWcih0KSB7XG4gICAgICAgICAgdmFyIGUgPSBFcih0KSxcbiAgICAgICAgICAgICAgaSA9IHBuW2VdO2lmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGkgfHwgIShlIGluIHZuLnByb3RvdHlwZSkpIHJldHVybiAhMTtpZiAodCA9PT0gaSkgcmV0dXJuICEwO3ZhciBuID0gUHIoaSk7cmV0dXJuICEhbiAmJiB0ID09PSBuWzBdO1xuICAgICAgICB9KFhpICYmIFdyKG5ldyBYaShuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSB1dCB8fCBKaSAmJiBXcihuZXcgSmkoKSkgIT0gWCB8fCBaaSAmJiBcIltvYmplY3QgUHJvbWlzZV1cIiAhPSBXcihaaS5yZXNvbHZlKCkpIHx8IFFpICYmIFdyKG5ldyBRaSgpKSAhPSBpdCB8fCB0biAmJiBXcihuZXcgdG4oKSkgIT0gb3QpICYmIChXciA9IGZ1bmN0aW9uIFdyKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IFpuKHQpLFxuICAgICAgICAgICAgICBpID0gZSA9PSBRID8gdC5jb25zdHJ1Y3RvciA6IHIsXG4gICAgICAgICAgICAgIG4gPSBpID8gY28oaSkgOiBcIlwiO2lmIChuKSBzd2l0Y2ggKG4pIHtjYXNlIHJuOlxuICAgICAgICAgICAgICByZXR1cm4gdXQ7Y2FzZSBvbjpcbiAgICAgICAgICAgICAgcmV0dXJuIFg7Y2FzZSBhbjpcbiAgICAgICAgICAgICAgcmV0dXJuIFwiW29iamVjdCBQcm9taXNlXVwiO2Nhc2UgbG46XG4gICAgICAgICAgICAgIHJldHVybiBpdDtjYXNlIHVuOlxuICAgICAgICAgICAgICByZXR1cm4gb3Q7fXJldHVybiBlO1xuICAgICAgICB9KTt2YXIgR3IgPSBsZSA/IENhIDogJGw7ZnVuY3Rpb24gWHIodCkge1xuICAgICAgICAgIHZhciBlID0gdCAmJiB0LmNvbnN0cnVjdG9yO3JldHVybiB0ID09PSAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlICYmIGUucHJvdG90eXBlIHx8IGFlKTtcbiAgICAgICAgfWZ1bmN0aW9uIEpyKHQpIHtcbiAgICAgICAgICByZXR1cm4gdCA9PSB0ICYmICFUYSh0KTtcbiAgICAgICAgfWZ1bmN0aW9uIFpyKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsICE9IGkgJiYgaVt0XSA9PT0gZSAmJiAoZSAhPT0gciB8fCB0IGluIGVlKGkpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gUXIodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBlID0gcWkoZSA9PT0gciA/IHQubGVuZ3RoIC0gMSA6IGUsIDApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzID0gYXJndW1lbnRzLCByID0gLTEsIG8gPSBxaShzLmxlbmd0aCAtIGUsIDApLCBhID0gbihvKTsgKytyIDwgbzspIHtcbiAgICAgICAgICAgICAgYVtyXSA9IHNbZSArIHJdO1xuICAgICAgICAgICAgfXIgPSAtMTtmb3IgKHZhciBsID0gbihlICsgMSk7ICsrciA8IGU7KSB7XG4gICAgICAgICAgICAgIGxbcl0gPSBzW3JdO1xuICAgICAgICAgICAgfXJldHVybiBsW2VdID0gaShhKSwgVWUodCwgdGhpcywgbCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIHRvKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPCAyID8gdCA6IFhuKHQsIGpzKGUsIDAsIC0xKSk7XG4gICAgICAgIH1mdW5jdGlvbiBlbyh0LCBlKSB7XG4gICAgICAgICAgaWYgKFwiX19wcm90b19fXCIgIT0gZSkgcmV0dXJuIHRbZV07XG4gICAgICAgIH12YXIgaW8gPSBvbyhUcyksXG4gICAgICAgICAgICBubyA9IE5pIHx8IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIEVlLnNldFRpbWVvdXQodCwgZSk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBzbyA9IG9vKElzKTtmdW5jdGlvbiBybyh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSBlICsgXCJcIjtyZXR1cm4gc28odCwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gZS5sZW5ndGg7aWYgKCFpKSByZXR1cm4gdDt2YXIgbiA9IGkgLSAxO3JldHVybiBlW25dID0gKGkgPiAxID8gXCImIFwiIDogXCJcIikgKyBlW25dLCBlID0gZS5qb2luKGkgPiAyID8gXCIsIFwiIDogXCIgXCIpLCB0LnJlcGxhY2UoQnQsIFwie1xcbi8qIFt3cmFwcGVkIHdpdGggXCIgKyBlICsgXCJdICovXFxuXCIpO1xuICAgICAgICAgIH0obiwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBZZSh6LCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICB2YXIgbiA9IFwiXy5cIiArIGlbMF07ZSAmIGlbMV0gJiYgIUplKHQsIG4pICYmIHQucHVzaChuKTtcbiAgICAgICAgICAgIH0pLCB0LnNvcnQoKTtcbiAgICAgICAgICB9KGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQubWF0Y2goRnQpO3JldHVybiBlID8gZVsxXS5zcGxpdChMdCkgOiBbXTtcbiAgICAgICAgICB9KG4pLCBpKSkpO1xuICAgICAgICB9ZnVuY3Rpb24gb28odCkge1xuICAgICAgICAgIHZhciBlID0gMCxcbiAgICAgICAgICAgICAgaSA9IDA7cmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuID0gS2koKSxcbiAgICAgICAgICAgICAgICBzID0gaiAtIChuIC0gaSk7aWYgKGkgPSBuLCBzID4gMCkge1xuICAgICAgICAgICAgICBpZiAoKytlID49IEEpIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB9IGVsc2UgZSA9IDA7cmV0dXJuIHQuYXBwbHkociwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gYW8odCwgZSkge1xuICAgICAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgICAgIG4gPSB0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgcyA9IG4gLSAxO2ZvciAoZSA9IGUgPT09IHIgPyBuIDogZTsgKytpIDwgZTspIHtcbiAgICAgICAgICAgIHZhciBvID0ga3MoaSwgcyksXG4gICAgICAgICAgICAgICAgYSA9IHRbb107dFtvXSA9IHRbaV0sIHRbaV0gPSBhO1xuICAgICAgICAgIH1yZXR1cm4gdC5sZW5ndGggPSBlLCB0O1xuICAgICAgICB9dmFyIGxvID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IGFhKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gaS5zaXplID09PSBjICYmIGkuY2xlYXIoKSwgdDtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgaSA9IGUuY2FjaGU7cmV0dXJuIGU7XG4gICAgICAgIH0oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IFtdO3JldHVybiA0NiA9PT0gdC5jaGFyQ29kZUF0KDApICYmIGUucHVzaChcIlwiKSwgdC5yZXBsYWNlKE10LCBmdW5jdGlvbiAodCwgaSwgbiwgcykge1xuICAgICAgICAgICAgZS5wdXNoKG4gPyBzLnJlcGxhY2UoV3QsIFwiJDFcIikgOiBpIHx8IHQpO1xuICAgICAgICAgIH0pLCBlO1xuICAgICAgICB9KTtmdW5jdGlvbiB1byh0KSB7XG4gICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgfHwgSGEodCkpIHJldHVybiB0O3ZhciBlID0gdCArIFwiXCI7cmV0dXJuIFwiMFwiID09IGUgJiYgMSAvIHQgPT0gLUUgPyBcIi0wXCIgOiBlO1xuICAgICAgICB9ZnVuY3Rpb24gY28odCkge1xuICAgICAgICAgIGlmIChudWxsICE9IHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiB1ZS5jYWxsKHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge310cnkge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIFwiXCI7XG4gICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICAgIH1yZXR1cm4gXCJcIjtcbiAgICAgICAgfWZ1bmN0aW9uIGhvKHQpIHtcbiAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIHZuKSByZXR1cm4gdC5jbG9uZSgpO3ZhciBlID0gbmV3IG1uKHQuX193cmFwcGVkX18sIHQuX19jaGFpbl9fKTtyZXR1cm4gZS5fX2FjdGlvbnNfXyA9IGlyKHQuX19hY3Rpb25zX18pLCBlLl9faW5kZXhfXyA9IHQuX19pbmRleF9fLCBlLl9fdmFsdWVzX18gPSB0Ll9fdmFsdWVzX18sIGU7XG4gICAgICAgIH12YXIgcG8gPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB5YSh0KSA/IEZuKHQsIHFuKGUsIDEsIHlhLCAhMCkpIDogW107XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgZm8gPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0geG8oZSk7cmV0dXJuIHlhKGkpICYmIChpID0gciksIHlhKHQpID8gRm4odCwgcW4oZSwgMSwgeWEsICEwKSwgSHIoaSwgMikpIDogW107XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgZ28gPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0geG8oZSk7cmV0dXJuIHlhKGkpICYmIChpID0gciksIHlhKHQpID8gRm4odCwgcW4oZSwgMSwgeWEsICEwKSwgciwgaSkgOiBbXTtcbiAgICAgICAgfSk7ZnVuY3Rpb24gbW8odCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO2lmICghbikgcmV0dXJuIC0xO3ZhciBzID0gbnVsbCA9PSBpID8gMCA6IFdhKGkpO3JldHVybiBzIDwgMCAmJiAocyA9IHFpKG4gKyBzLCAwKSksIG9pKHQsIEhyKGUsIDMpLCBzKTtcbiAgICAgICAgfWZ1bmN0aW9uIHZvKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtpZiAoIW4pIHJldHVybiAtMTt2YXIgcyA9IG4gLSAxO3JldHVybiBpICE9PSByICYmIChzID0gV2EoaSksIHMgPSBpIDwgMCA/IHFpKG4gKyBzLCAwKSA6IFVpKHMsIG4gLSAxKSksIG9pKHQsIEhyKGUsIDMpLCBzLCAhMCk7XG4gICAgICAgIH1mdW5jdGlvbiBfbyh0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCAmJiB0Lmxlbmd0aCA/IHFuKHQsIDEpIDogW107XG4gICAgICAgIH1mdW5jdGlvbiBibyh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPyB0WzBdIDogcjtcbiAgICAgICAgfXZhciB5byA9IHhzKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSBRZSh0LCBxcyk7cmV0dXJuIGUubGVuZ3RoICYmIGVbMF0gPT09IHRbMF0gPyBpcyhlKSA6IFtdO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIGtvID0geHMoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHhvKHQpLFxuICAgICAgICAgICAgICBpID0gUWUodCwgcXMpO3JldHVybiBlID09PSB4byhpKSA/IGUgPSByIDogaS5wb3AoKSwgaS5sZW5ndGggJiYgaVswXSA9PT0gdFswXSA/IGlzKGksIEhyKGUsIDIpKSA6IFtdO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIHdvID0geHMoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHhvKHQpLFxuICAgICAgICAgICAgICBpID0gUWUodCwgcXMpO3JldHVybiAoZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGUgOiByKSAmJiBpLnBvcCgpLCBpLmxlbmd0aCAmJiBpWzBdID09PSB0WzBdID8gaXMoaSwgciwgZSkgOiBbXTtcbiAgICAgICAgfSk7ZnVuY3Rpb24geG8odCkge1xuICAgICAgICAgIHZhciBlID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO3JldHVybiBlID8gdFtlIC0gMV0gOiByO1xuICAgICAgICB9dmFyIENvID0geHMoRG8pO2Z1bmN0aW9uIERvKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCAmJiBlICYmIGUubGVuZ3RoID8gYnModCwgZSkgOiB0O1xuICAgICAgICB9dmFyIFNvID0gQXIoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgbiA9IEVuKHQsIGUpO3JldHVybiB5cyh0LCBRZShlLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIFVyKHQsIGkpID8gK3QgOiB0O1xuICAgICAgICAgIH0pLnNvcnQoUXMpKSwgbjtcbiAgICAgICAgfSk7ZnVuY3Rpb24gVG8odCkge1xuICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyB0IDogR2kuY2FsbCh0KTtcbiAgICAgICAgfXZhciBJbyA9IHhzKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIEJzKHFuKHQsIDEsIHlhLCAhMCkpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIEFvID0geHMoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHhvKHQpO3JldHVybiB5YShlKSAmJiAoZSA9IHIpLCBCcyhxbih0LCAxLCB5YSwgITApLCBIcihlLCAyKSk7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgam8gPSB4cyhmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHZhciBlID0geG8odCk7cmV0dXJuIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUgPyBlIDogciwgQnMocW4odCwgMSwgeWEsICEwKSwgciwgZSk7XG4gICAgICAgIH0pO2Z1bmN0aW9uIE1vKHQpIHtcbiAgICAgICAgICBpZiAoIXQgfHwgIXQubGVuZ3RoKSByZXR1cm4gW107dmFyIGUgPSAwO3JldHVybiB0ID0gWGUodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGlmICh5YSh0KSkgcmV0dXJuIGUgPSBxaSh0Lmxlbmd0aCwgZSksICEwO1xuICAgICAgICAgIH0pLCBnaShlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFFlKHQsIGhpKGUpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfWZ1bmN0aW9uIFBvKHQsIGUpIHtcbiAgICAgICAgICBpZiAoIXQgfHwgIXQubGVuZ3RoKSByZXR1cm4gW107dmFyIGkgPSBNbyh0KTtyZXR1cm4gbnVsbCA9PSBlID8gaSA6IFFlKGksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gVWUoZSwgciwgdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH12YXIgRW8gPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB5YSh0KSA/IEZuKHQsIGUpIDogW107XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgT28gPSB4cyhmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBScyhYZSh0LCB5YSkpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIEhvID0geHMoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHhvKHQpO3JldHVybiB5YShlKSAmJiAoZSA9IHIpLCBScyhYZSh0LCB5YSksIEhyKGUsIDIpKTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBObyA9IHhzKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSB4byh0KTtyZXR1cm4gZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGUgOiByLCBScyhYZSh0LCB5YSksIHIsIGUpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIEJvID0geHMoTW8pO3ZhciBGbyA9IHhzKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSB0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgaSA9IGUgPiAxID8gdFtlIC0gMV0gOiByO3JldHVybiBpID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpID8gKHQucG9wKCksIGkpIDogciwgUG8odCwgaSk7XG4gICAgICAgIH0pO2Z1bmN0aW9uIExvKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHBuKHQpO3JldHVybiBlLl9fY2hhaW5fXyA9ICEwLCBlO1xuICAgICAgICB9ZnVuY3Rpb24gem8odCwgZSkge1xuICAgICAgICAgIHJldHVybiBlKHQpO1xuICAgICAgICB9dmFyIFdvID0gQXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHQubGVuZ3RoLFxuICAgICAgICAgICAgICBpID0gZSA/IHRbMF0gOiAwLFxuICAgICAgICAgICAgICBuID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgICAgcyA9IGZ1bmN0aW9uIHMoZSkge1xuICAgICAgICAgICAgcmV0dXJuIEVuKGUsIHQpO1xuICAgICAgICAgIH07cmV0dXJuICEoZSA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpICYmIG4gaW5zdGFuY2VvZiB2biAmJiBVcihpKSA/ICgobiA9IG4uc2xpY2UoaSwgK2kgKyAoZSA/IDEgOiAwKSkpLl9fYWN0aW9uc19fLnB1c2goeyBmdW5jOiB6bywgYXJnczogW3NdLCB0aGlzQXJnOiByIH0pLCBuZXcgbW4obiwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlICYmICF0Lmxlbmd0aCAmJiB0LnB1c2gociksIHQ7XG4gICAgICAgICAgfSkpIDogdGhpcy50aHJ1KHMpO1xuICAgICAgICB9KTt2YXIgUm8gPSBzcihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIGNlLmNhbGwodCwgaSkgPyArK3RbaV0gOiBQbih0LCBpLCAxKTtcbiAgICAgICAgfSk7dmFyICRvID0gaHIobW8pLFxuICAgICAgICAgICAgcW8gPSBocih2byk7ZnVuY3Rpb24gVW8odCwgZSkge1xuICAgICAgICAgIHJldHVybiAodmEodCkgPyBZZSA6IExuKSh0LCBIcihlLCAzKSk7XG4gICAgICAgIH1mdW5jdGlvbiBLbyh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuICh2YSh0KSA/IFZlIDogem4pKHQsIEhyKGUsIDMpKTtcbiAgICAgICAgfXZhciBZbyA9IHNyKGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgY2UuY2FsbCh0LCBpKSA/IHRbaV0ucHVzaChlKSA6IFBuKHQsIGksIFtlXSk7XG4gICAgICAgIH0pO3ZhciBWbyA9IHhzKGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIHMgPSAtMSxcbiAgICAgICAgICAgICAgciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSxcbiAgICAgICAgICAgICAgbyA9IGJhKHQpID8gbih0Lmxlbmd0aCkgOiBbXTtyZXR1cm4gTG4odCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIG9bKytzXSA9IHIgPyBVZShlLCB0LCBpKSA6IG5zKHQsIGUsIGkpO1xuICAgICAgICAgIH0pLCBvO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIEdvID0gc3IoZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICBQbih0LCBpLCBlKTtcbiAgICAgICAgfSk7ZnVuY3Rpb24gWG8odCwgZSkge1xuICAgICAgICAgIHJldHVybiAodmEodCkgPyBRZSA6IGRzKSh0LCBIcihlLCAzKSk7XG4gICAgICAgIH12YXIgSm8gPSBzcihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHRbaSA/IDAgOiAxXS5wdXNoKGUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFtbXSwgW11dO1xuICAgICAgICB9KTt2YXIgWm8gPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmIChudWxsID09IHQpIHJldHVybiBbXTt2YXIgaSA9IGUubGVuZ3RoO3JldHVybiBpID4gMSAmJiBLcih0LCBlWzBdLCBlWzFdKSA/IGUgPSBbXSA6IGkgPiAyICYmIEtyKGVbMF0sIGVbMV0sIGVbMl0pICYmIChlID0gW2VbMF1dKSwgdnModCwgcW4oZSwgMSksIFtdKTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBRbyA9IEhpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gRWUuRGF0ZS5ub3coKTtcbiAgICAgICAgfTtmdW5jdGlvbiB0YSh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGUgPSBpID8gciA6IGUsIGUgPSB0ICYmIG51bGwgPT0gZSA/IHQubGVuZ3RoIDogZSwgQ3IodCwgQywgciwgciwgciwgciwgZSk7XG4gICAgICAgIH1mdW5jdGlvbiBlYSh0LCBlKSB7XG4gICAgICAgICAgdmFyIGk7aWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgdGhyb3cgbmV3IHNlKGwpO3JldHVybiB0ID0gV2EodCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAtLXQgPiAwICYmIChpID0gZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgdCA8PSAxICYmIChlID0gciksIGk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfXZhciBpYSA9IHhzKGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSB2O2lmIChpLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHMgPSBUaShpLCBPcihpYSkpO24gfD0gdztcbiAgICAgICAgICB9cmV0dXJuIENyKHQsIG4sIGUsIGksIHMpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIG5hID0geHMoZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IHYgfCBfO2lmIChpLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHMgPSBUaShpLCBPcihuYSkpO24gfD0gdztcbiAgICAgICAgICB9cmV0dXJuIENyKGUsIG4sIHQsIGksIHMpO1xuICAgICAgICB9KTtmdW5jdGlvbiBzYSh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgIGggPSAwLFxuICAgICAgICAgICAgICBkID0gITEsXG4gICAgICAgICAgICAgIHAgPSAhMSxcbiAgICAgICAgICAgICAgZiA9ICEwO2lmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQpIHRocm93IG5ldyBzZShsKTtmdW5jdGlvbiBnKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gbixcbiAgICAgICAgICAgICAgICBvID0gcztyZXR1cm4gbiA9IHMgPSByLCBoID0gZSwgYSA9IHQuYXBwbHkobywgaSk7XG4gICAgICAgICAgfWZ1bmN0aW9uIG0odCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0IC0gYztyZXR1cm4gYyA9PT0gciB8fCBpID49IGUgfHwgaSA8IDAgfHwgcCAmJiB0IC0gaCA+PSBvO1xuICAgICAgICAgIH1mdW5jdGlvbiB2KCkge1xuICAgICAgICAgICAgdmFyIHQgPSBRbygpO2lmIChtKHQpKSByZXR1cm4gXyh0KTt1ID0gbm8odiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSBlIC0gKHQgLSBjKTtyZXR1cm4gcCA/IFVpKGksIG8gLSAodCAtIGgpKSA6IGk7XG4gICAgICAgICAgICB9KHQpKTtcbiAgICAgICAgICB9ZnVuY3Rpb24gXyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdSA9IHIsIGYgJiYgbiA/IGcodCkgOiAobiA9IHMgPSByLCBhKTtcbiAgICAgICAgICB9ZnVuY3Rpb24gYigpIHtcbiAgICAgICAgICAgIHZhciB0ID0gUW8oKSxcbiAgICAgICAgICAgICAgICBpID0gbSh0KTtpZiAobiA9IGFyZ3VtZW50cywgcyA9IHRoaXMsIGMgPSB0LCBpKSB7XG4gICAgICAgICAgICAgIGlmICh1ID09PSByKSByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaCA9IHQsIHUgPSBubyh2LCBlKSwgZCA/IGcodCkgOiBhO1xuICAgICAgICAgICAgICB9KGMpO2lmIChwKSByZXR1cm4gdSA9IG5vKHYsIGUpLCBnKGMpO1xuICAgICAgICAgICAgfXJldHVybiB1ID09PSByICYmICh1ID0gbm8odiwgZSkpLCBhO1xuICAgICAgICAgIH1yZXR1cm4gZSA9ICRhKGUpIHx8IDAsIFRhKGkpICYmIChkID0gISFpLmxlYWRpbmcsIG8gPSAocCA9IFwibWF4V2FpdFwiIGluIGkpID8gcWkoJGEoaS5tYXhXYWl0KSB8fCAwLCBlKSA6IG8sIGYgPSBcInRyYWlsaW5nXCIgaW4gaSA/ICEhaS50cmFpbGluZyA6IGYpLCBiLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHUgIT09IHIgJiYgR3ModSksIGggPSAwLCBuID0gYyA9IHMgPSB1ID0gcjtcbiAgICAgICAgICB9LCBiLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHUgPT09IHIgPyBhIDogXyhRbygpKTtcbiAgICAgICAgICB9LCBiO1xuICAgICAgICB9dmFyIHJhID0geHMoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gQm4odCwgMSwgZSk7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgb2EgPSB4cyhmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBCbih0LCAkYShlKSB8fCAwLCBpKTtcbiAgICAgICAgfSk7ZnVuY3Rpb24gYWEodCwgZSkge1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQgfHwgbnVsbCAhPSBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgdGhyb3cgbmV3IHNlKGwpO3ZhciBpID0gZnVuY3Rpb24gaSgpIHtcbiAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHMgPSBlID8gZS5hcHBseSh0aGlzLCBuKSA6IG5bMF0sXG4gICAgICAgICAgICAgICAgciA9IGkuY2FjaGU7aWYgKHIuaGFzKHMpKSByZXR1cm4gci5nZXQocyk7dmFyIG8gPSB0LmFwcGx5KHRoaXMsIG4pO3JldHVybiBpLmNhY2hlID0gci5zZXQocywgbykgfHwgciwgbztcbiAgICAgICAgICB9O3JldHVybiBpLmNhY2hlID0gbmV3IChhYS5DYWNoZSB8fCB5bikoKSwgaTtcbiAgICAgICAgfWZ1bmN0aW9uIGxhKHQpIHtcbiAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgc2UobCk7cmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzO3N3aXRjaCAoZS5sZW5ndGgpIHtjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuICF0LmNhbGwodGhpcyk7Y2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiAhdC5jYWxsKHRoaXMsIGVbMF0pO2Nhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gIXQuY2FsbCh0aGlzLCBlWzBdLCBlWzFdKTtjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICF0LmNhbGwodGhpcywgZVswXSwgZVsxXSwgZVsyXSk7fXJldHVybiAhdC5hcHBseSh0aGlzLCBlKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9YWEuQ2FjaGUgPSB5bjt2YXIgdWEgPSBZcyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gKGUgPSAxID09IGUubGVuZ3RoICYmIHZhKGVbMF0pID8gUWUoZVswXSwgbWkoSHIoKSkpIDogUWUocW4oZSwgMSksIG1pKEhyKCkpKSkubGVuZ3RoO3JldHVybiB4cyhmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgZm9yICh2YXIgcyA9IC0xLCByID0gVWkobi5sZW5ndGgsIGkpOyArK3MgPCByOykge1xuICAgICAgICAgICAgICBuW3NdID0gZVtzXS5jYWxsKHRoaXMsIG5bc10pO1xuICAgICAgICAgICAgfXJldHVybiBVZSh0LCB0aGlzLCBuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBjYSA9IHhzKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBUaShlLCBPcihjYSkpO3JldHVybiBDcih0LCB3LCByLCBlLCBpKTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBoYSA9IHhzKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBUaShlLCBPcihoYSkpO3JldHVybiBDcih0LCB4LCByLCBlLCBpKTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBkYSA9IEFyKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIENyKHQsIEQsIHIsIHIsIHIsIGUpO1xuICAgICAgICB9KTtmdW5jdGlvbiBwYSh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgPT09IGUgfHwgdCAhPSB0ICYmIGUgIT0gZTtcbiAgICAgICAgfXZhciBmYSA9IGJyKFFuKSxcbiAgICAgICAgICAgIGdhID0gYnIoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCA+PSBlO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIG1hID0gc3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHM7XG4gICAgICAgIH0oKSkgPyBzcyA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIElhKHQpICYmIGNlLmNhbGwodCwgXCJjYWxsZWVcIikgJiYgIU9lLmNhbGwodCwgXCJjYWxsZWVcIik7XG4gICAgICAgIH0sXG4gICAgICAgICAgICB2YSA9IG4uaXNBcnJheSxcbiAgICAgICAgICAgIF9hID0gTGUgPyBtaShMZSkgOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBJYSh0KSAmJiBabih0KSA9PSBsdDtcbiAgICAgICAgfTtmdW5jdGlvbiBiYSh0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCAmJiBTYSh0Lmxlbmd0aCkgJiYgIUNhKHQpO1xuICAgICAgICB9ZnVuY3Rpb24geWEodCkge1xuICAgICAgICAgIHJldHVybiBJYSh0KSAmJiBiYSh0KTtcbiAgICAgICAgfXZhciBrYSA9IHppIHx8ICRsLFxuICAgICAgICAgICAgd2EgPSB6ZSA/IG1pKHplKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIElhKHQpICYmIFpuKHQpID09IFU7XG4gICAgICAgIH07ZnVuY3Rpb24geGEodCkge1xuICAgICAgICAgIGlmICghSWEodCkpIHJldHVybiAhMTt2YXIgZSA9IFpuKHQpO3JldHVybiBlID09IFkgfHwgZSA9PSBLIHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQubWVzc2FnZSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0Lm5hbWUgJiYgIU1hKHQpO1xuICAgICAgICB9ZnVuY3Rpb24gQ2EodCkge1xuICAgICAgICAgIGlmICghVGEodCkpIHJldHVybiAhMTt2YXIgZSA9IFpuKHQpO3JldHVybiBlID09IFYgfHwgZSA9PSBHIHx8IGUgPT0gJCB8fCBlID09IHR0O1xuICAgICAgICB9ZnVuY3Rpb24gRGEodCkge1xuICAgICAgICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiB0ICYmIHQgPT0gV2EodCk7XG4gICAgICAgIH1mdW5jdGlvbiBTYSh0KSB7XG4gICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgJiYgdCA+IC0xICYmIHQgJSAxID09IDAgJiYgdCA8PSBPO1xuICAgICAgICB9ZnVuY3Rpb24gVGEodCkge1xuICAgICAgICAgIHZhciBlID0gdHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KTtyZXR1cm4gbnVsbCAhPSB0ICYmIChcIm9iamVjdFwiID09IGUgfHwgXCJmdW5jdGlvblwiID09IGUpO1xuICAgICAgICB9ZnVuY3Rpb24gSWEodCkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgXCJvYmplY3RcIiA9PSAodHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KSk7XG4gICAgICAgIH12YXIgQWEgPSBXZSA/IG1pKFdlKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIElhKHQpICYmIFdyKHQpID09IFg7XG4gICAgICAgIH07ZnVuY3Rpb24gamEodCkge1xuICAgICAgICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiB0IHx8IElhKHQpICYmIFpuKHQpID09IEo7XG4gICAgICAgIH1mdW5jdGlvbiBNYSh0KSB7XG4gICAgICAgICAgaWYgKCFJYSh0KSB8fCBabih0KSAhPSBRKSByZXR1cm4gITE7dmFyIGUgPSBNZSh0KTtpZiAobnVsbCA9PT0gZSkgcmV0dXJuICEwO3ZhciBpID0gY2UuY2FsbChlLCBcImNvbnN0cnVjdG9yXCIpICYmIGUuY29uc3RydWN0b3I7cmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaSAmJiBpIGluc3RhbmNlb2YgaSAmJiB1ZS5jYWxsKGkpID09IGZlO1xuICAgICAgICB9dmFyIFBhID0gUmUgPyBtaShSZSkgOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBJYSh0KSAmJiBabih0KSA9PSBldDtcbiAgICAgICAgfTt2YXIgRWEgPSAkZSA/IG1pKCRlKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIElhKHQpICYmIFdyKHQpID09IGl0O1xuICAgICAgICB9O2Z1bmN0aW9uIE9hKHQpIHtcbiAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCB8fCAhdmEodCkgJiYgSWEodCkgJiYgWm4odCkgPT0gbnQ7XG4gICAgICAgIH1mdW5jdGlvbiBIYSh0KSB7XG4gICAgICAgICAgcmV0dXJuIFwic3ltYm9sXCIgPT0gKHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodCkpIHx8IElhKHQpICYmIFpuKHQpID09IHN0O1xuICAgICAgICB9dmFyIE5hID0gcWUgPyBtaShxZSkgOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBJYSh0KSAmJiBTYSh0Lmxlbmd0aCkgJiYgISFTZVtabih0KV07XG4gICAgICAgIH07dmFyIEJhID0gYnIoaHMpLFxuICAgICAgICAgICAgRmEgPSBicihmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB0IDw9IGU7XG4gICAgICAgIH0pO2Z1bmN0aW9uIExhKHQpIHtcbiAgICAgICAgICBpZiAoIXQpIHJldHVybiBbXTtpZiAoYmEodCkpIHJldHVybiBPYSh0KSA/IE1pKHQpIDogaXIodCk7aWYgKEZlICYmIHRbRmVdKSByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGUsIGkgPSBbXTsgIShlID0gdC5uZXh0KCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIGkucHVzaChlLnZhbHVlKTtcbiAgICAgICAgICAgIH1yZXR1cm4gaTtcbiAgICAgICAgICB9KHRbRmVdKCkpO3ZhciBlID0gV3IodCk7cmV0dXJuIChlID09IFggPyBEaSA6IGUgPT0gaXQgPyBJaSA6IHBsKSh0KTtcbiAgICAgICAgfWZ1bmN0aW9uIHphKHQpIHtcbiAgICAgICAgICByZXR1cm4gdCA/ICh0ID0gJGEodCkpID09PSBFIHx8IHQgPT09IC1FID8gKHQgPCAwID8gLTEgOiAxKSAqIEggOiB0ID09IHQgPyB0IDogMCA6IDAgPT09IHQgPyB0IDogMDtcbiAgICAgICAgfWZ1bmN0aW9uIFdhKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHphKHQpLFxuICAgICAgICAgICAgICBpID0gZSAlIDE7cmV0dXJuIGUgPT0gZSA/IGkgPyBlIC0gaSA6IGUgOiAwO1xuICAgICAgICB9ZnVuY3Rpb24gUmEodCkge1xuICAgICAgICAgIHJldHVybiB0ID8gT24oV2EodCksIDAsIEIpIDogMDtcbiAgICAgICAgfWZ1bmN0aW9uICRhKHQpIHtcbiAgICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdCkgcmV0dXJuIHQ7aWYgKEhhKHQpKSByZXR1cm4gTjtpZiAoVGEodCkpIHtcbiAgICAgICAgICAgIHZhciBlID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0LnZhbHVlT2YgPyB0LnZhbHVlT2YoKSA6IHQ7dCA9IFRhKGUpID8gZSArIFwiXCIgOiBlO1xuICAgICAgICAgIH1pZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCkgcmV0dXJuIDAgPT09IHQgPyB0IDogK3Q7dCA9IHQucmVwbGFjZShPdCwgXCJcIik7dmFyIGkgPSBVdC50ZXN0KHQpO3JldHVybiBpIHx8IFl0LnRlc3QodCkgPyBqZSh0LnNsaWNlKDIpLCBpID8gMiA6IDgpIDogcXQudGVzdCh0KSA/IE4gOiArdDtcbiAgICAgICAgfWZ1bmN0aW9uIHFhKHQpIHtcbiAgICAgICAgICByZXR1cm4gbnIodCwgcmwodCkpO1xuICAgICAgICB9ZnVuY3Rpb24gVWEodCkge1xuICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBcIlwiIDogTnModCk7XG4gICAgICAgIH12YXIgS2EgPSBycihmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmIChYcihlKSB8fCBiYShlKSkgbnIoZSwgc2woZSksIHQpO2Vsc2UgZm9yICh2YXIgaSBpbiBlKSB7XG4gICAgICAgICAgICBjZS5jYWxsKGUsIGkpICYmIEluKHQsIGksIGVbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgICAgICBZYSA9IHJyKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgbnIoZSwgcmwoZSksIHQpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIFZhID0gcnIoZnVuY3Rpb24gKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICBucihlLCBybChlKSwgdCwgbik7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgR2EgPSBycihmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgIG5yKGUsIHNsKGUpLCB0LCBuKTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBYYSA9IEFyKEVuKTt2YXIgSmEgPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHQgPSBlZSh0KTt2YXIgaSA9IC0xLFxuICAgICAgICAgICAgICBuID0gZS5sZW5ndGgsXG4gICAgICAgICAgICAgIHMgPSBuID4gMiA/IGVbMl0gOiByO2ZvciAocyAmJiBLcihlWzBdLCBlWzFdLCBzKSAmJiAobiA9IDEpOyArK2kgPCBuOykge1xuICAgICAgICAgICAgZm9yICh2YXIgbyA9IGVbaV0sIGEgPSBybChvKSwgbCA9IC0xLCB1ID0gYS5sZW5ndGg7ICsrbCA8IHU7KSB7XG4gICAgICAgICAgICAgIHZhciBjID0gYVtsXSxcbiAgICAgICAgICAgICAgICAgIGggPSB0W2NdOyhoID09PSByIHx8IHBhKGgsIGFlW2NdKSAmJiAhY2UuY2FsbCh0LCBjKSkgJiYgKHRbY10gPSBvW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9cmV0dXJuIHQ7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgWmEgPSB4cyhmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnB1c2gociwgU3IpLCBVZShhbCwgciwgdCk7XG4gICAgICAgIH0pO2Z1bmN0aW9uIFFhKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IG51bGwgPT0gdCA/IHIgOiBYbih0LCBlKTtyZXR1cm4gbiA9PT0gciA/IGkgOiBuO1xuICAgICAgICB9ZnVuY3Rpb24gdGwodCwgZSkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgUnIodCwgZSwgZXMpO1xuICAgICAgICB9dmFyIGVsID0gZnIoZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICBudWxsICE9IGUgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlLnRvU3RyaW5nICYmIChlID0gcGUuY2FsbChlKSksIHRbZV0gPSBpO1xuICAgICAgICB9LCBUbChqbCkpLFxuICAgICAgICAgICAgaWwgPSBmcihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIG51bGwgIT0gZSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUudG9TdHJpbmcgJiYgKGUgPSBwZS5jYWxsKGUpKSwgY2UuY2FsbCh0LCBlKSA/IHRbZV0ucHVzaChpKSA6IHRbZV0gPSBbaV07XG4gICAgICAgIH0sIEhyKSxcbiAgICAgICAgICAgIG5sID0geHMobnMpO2Z1bmN0aW9uIHNsKHQpIHtcbiAgICAgICAgICByZXR1cm4gYmEodCkgPyB4bih0KSA6IHVzKHQpO1xuICAgICAgICB9ZnVuY3Rpb24gcmwodCkge1xuICAgICAgICAgIHJldHVybiBiYSh0KSA/IHhuKHQsICEwKSA6IGNzKHQpO1xuICAgICAgICB9dmFyIG9sID0gcnIoZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICBncyh0LCBlLCBpKTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBhbCA9IHJyKGZ1bmN0aW9uICh0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgZ3ModCwgZSwgaSwgbik7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgbGwgPSBBcihmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0ge307aWYgKG51bGwgPT0gdCkgcmV0dXJuIGk7dmFyIG4gPSAhMTtlID0gUWUoZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlID0gS3MoZSwgdCksIG4gfHwgKG4gPSBlLmxlbmd0aCA+IDEpLCBlO1xuICAgICAgICAgIH0pLCBucih0LCBNcih0KSwgaSksIG4gJiYgKGkgPSBIbihpLCBkIHwgcCB8IGYsIFRyKSk7Zm9yICh2YXIgcyA9IGUubGVuZ3RoOyBzLS07KSB7XG4gICAgICAgICAgICBGcyhpLCBlW3NdKTtcbiAgICAgICAgICB9cmV0dXJuIGk7XG4gICAgICAgIH0pO3ZhciB1bCA9IEFyKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IHt9IDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfcyh0LCBlLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGwodCwgaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KHQsIGUpO1xuICAgICAgICB9KTtmdW5jdGlvbiBjbCh0LCBlKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuIHt9O3ZhciBpID0gUWUoTXIodCksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gW3RdO1xuICAgICAgICAgIH0pO3JldHVybiBlID0gSHIoZSksIF9zKHQsIGksIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gZSh0LCBpWzBdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfXZhciBobCA9IHhyKHNsKSxcbiAgICAgICAgICAgIGRsID0geHIocmwpO2Z1bmN0aW9uIHBsKHQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gW10gOiB2aSh0LCBzbCh0KSk7XG4gICAgICAgIH12YXIgZmwgPSB1cihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBlID0gZS50b0xvd2VyQ2FzZSgpLCB0ICsgKGkgPyBnbChlKSA6IGUpO1xuICAgICAgICB9KTtmdW5jdGlvbiBnbCh0KSB7XG4gICAgICAgICAgcmV0dXJuIHhsKFVhKHQpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9ZnVuY3Rpb24gbWwodCkge1xuICAgICAgICAgIHJldHVybiAodCA9IFVhKHQpKSAmJiB0LnJlcGxhY2UoR3QsIGtpKS5yZXBsYWNlKGJlLCBcIlwiKTtcbiAgICAgICAgfXZhciB2bCA9IHVyKGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHQgKyAoaSA/IFwiLVwiIDogXCJcIikgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgX2wgPSB1cihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiB0ICsgKGkgPyBcIiBcIiA6IFwiXCIpICsgZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KSxcbiAgICAgICAgICAgIGJsID0gbHIoXCJ0b0xvd2VyQ2FzZVwiKTt2YXIgeWwgPSB1cihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiB0ICsgKGkgPyBcIl9cIiA6IFwiXCIpICsgZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTt2YXIga2wgPSB1cihmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiB0ICsgKGkgPyBcIiBcIiA6IFwiXCIpICsgeGwoZSk7XG4gICAgICAgIH0pO3ZhciB3bCA9IHVyKGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHQgKyAoaSA/IFwiIFwiIDogXCJcIikgKyBlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgeGwgPSBscihcInRvVXBwZXJDYXNlXCIpO2Z1bmN0aW9uIENsKHQsIGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gdCA9IFVhKHQpLCAoZSA9IGkgPyByIDogZSkgPT09IHIgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHhlLnRlc3QodCk7XG4gICAgICAgICAgfSh0KSA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5tYXRjaChrZSkgfHwgW107XG4gICAgICAgICAgfSh0KSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5tYXRjaCh6dCkgfHwgW107XG4gICAgICAgICAgfSh0KSA6IHQubWF0Y2goZSkgfHwgW107XG4gICAgICAgIH12YXIgRGwgPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gVWUodCwgciwgZSk7XG4gICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHhhKHQpID8gdCA6IG5ldyBadCh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgU2wgPSBBcihmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBZZShlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZSA9IHVvKGUpLCBQbih0LCBlLCBpYSh0W2VdLCB0KSk7XG4gICAgICAgICAgfSksIHQ7XG4gICAgICAgIH0pO2Z1bmN0aW9uIFRsKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgfXZhciBJbCA9IGRyKCksXG4gICAgICAgICAgICBBbCA9IGRyKCEwKTtmdW5jdGlvbiBqbCh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH1mdW5jdGlvbiBNbCh0KSB7XG4gICAgICAgICAgcmV0dXJuIGxzKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCA/IHQgOiBIbih0LCBkKSk7XG4gICAgICAgIH12YXIgUGwgPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIG5zKGksIHQsIGUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgRWwgPSB4cyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIG5zKHQsIGksIGUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO2Z1bmN0aW9uIE9sKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IHNsKGUpLFxuICAgICAgICAgICAgICBzID0gR24oZSwgbik7bnVsbCAhPSBpIHx8IFRhKGUpICYmIChzLmxlbmd0aCB8fCAhbi5sZW5ndGgpIHx8IChpID0gZSwgZSA9IHQsIHQgPSB0aGlzLCBzID0gR24oZSwgc2woZSkpKTt2YXIgciA9ICEoVGEoaSkgJiYgXCJjaGFpblwiIGluIGkgJiYgIWkuY2hhaW4pLFxuICAgICAgICAgICAgICBvID0gQ2EodCk7cmV0dXJuIFllKHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGVbaV07dFtpXSA9IG4sIG8gJiYgKHQucHJvdG90eXBlW2ldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuX19jaGFpbl9fO2lmIChyIHx8IGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQodGhpcy5fX3dyYXBwZWRfXyk7cmV0dXJuIChpLl9fYWN0aW9uc19fID0gaXIodGhpcy5fX2FjdGlvbnNfXykpLnB1c2goeyBmdW5jOiBuLCBhcmdzOiBhcmd1bWVudHMsIHRoaXNBcmc6IHQgfSksIGkuX19jaGFpbl9fID0gZSwgaTtcbiAgICAgICAgICAgICAgfXJldHVybiBuLmFwcGx5KHQsIHRpKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLCB0O1xuICAgICAgICB9ZnVuY3Rpb24gSGwoKSB7fXZhciBObCA9IG1yKFFlKSxcbiAgICAgICAgICAgIEJsID0gbXIoR2UpLFxuICAgICAgICAgICAgRmwgPSBtcihuaSk7ZnVuY3Rpb24gTGwodCkge1xuICAgICAgICAgIHJldHVybiBZcih0KSA/IGhpKHVvKHQpKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFhuKGUsIHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KHQpO1xuICAgICAgICB9dmFyIHpsID0gX3IoKSxcbiAgICAgICAgICAgIFdsID0gX3IoITApO2Z1bmN0aW9uIFJsKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfWZ1bmN0aW9uICRsKCkge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfXZhciBxbCA9IGdyKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgKyBlO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgICAgIFVsID0ga3IoXCJjZWlsXCIpLFxuICAgICAgICAgICAgS2wgPSBncihmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB0IC8gZTtcbiAgICAgICAgfSwgMSksXG4gICAgICAgICAgICBZbCA9IGtyKFwiZmxvb3JcIik7dmFyIFZsLFxuICAgICAgICAgICAgR2wgPSBncihmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB0ICogZTtcbiAgICAgICAgfSwgMSksXG4gICAgICAgICAgICBYbCA9IGtyKFwicm91bmRcIiksXG4gICAgICAgICAgICBKbCA9IGdyKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgLSBlO1xuICAgICAgICB9LCAwKTtyZXR1cm4gcG4uYWZ0ZXIgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHRocm93IG5ldyBzZShsKTtyZXR1cm4gdCA9IFdhKHQpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoLS10IDwgMSkgcmV0dXJuIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBwbi5hcnkgPSB0YSwgcG4uYXNzaWduID0gS2EsIHBuLmFzc2lnbkluID0gWWEsIHBuLmFzc2lnbkluV2l0aCA9IFZhLCBwbi5hc3NpZ25XaXRoID0gR2EsIHBuLmF0ID0gWGEsIHBuLmJlZm9yZSA9IGVhLCBwbi5iaW5kID0gaWEsIHBuLmJpbmRBbGwgPSBTbCwgcG4uYmluZEtleSA9IG5hLCBwbi5jYXN0QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW107dmFyIHQgPSBhcmd1bWVudHNbMF07cmV0dXJuIHZhKHQpID8gdCA6IFt0XTtcbiAgICAgICAgfSwgcG4uY2hhaW4gPSBMbywgcG4uY2h1bmsgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIGUgPSAoaSA/IEtyKHQsIGUsIGkpIDogZSA9PT0gcikgPyAxIDogcWkoV2EoZSksIDApO3ZhciBzID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO2lmICghcyB8fCBlIDwgMSkgcmV0dXJuIFtdO2ZvciAodmFyIG8gPSAwLCBhID0gMCwgbCA9IG4oQmkocyAvIGUpKTsgbyA8IHM7KSB7XG4gICAgICAgICAgICBsW2ErK10gPSBqcyh0LCBvLCBvICs9IGUpO1xuICAgICAgICAgIH1yZXR1cm4gbDtcbiAgICAgICAgfSwgcG4uY29tcGFjdCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgZm9yICh2YXIgZSA9IC0xLCBpID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoLCBuID0gMCwgcyA9IFtdOyArK2UgPCBpOykge1xuICAgICAgICAgICAgdmFyIHIgPSB0W2VdO3IgJiYgKHNbbisrXSA9IHIpO1xuICAgICAgICAgIH1yZXR1cm4gcztcbiAgICAgICAgfSwgcG4uY29uY2F0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aDtpZiAoIXQpIHJldHVybiBbXTtmb3IgKHZhciBlID0gbih0IC0gMSksIGkgPSBhcmd1bWVudHNbMF0sIHMgPSB0OyBzLS07KSB7XG4gICAgICAgICAgICBlW3MgLSAxXSA9IGFyZ3VtZW50c1tzXTtcbiAgICAgICAgICB9cmV0dXJuIHRpKHZhKGkpID8gaXIoaSkgOiBbaV0sIHFuKGUsIDEpKTtcbiAgICAgICAgfSwgcG4uY29uZCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGgsXG4gICAgICAgICAgICAgIGkgPSBIcigpO3JldHVybiB0ID0gZSA/IFFlKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0WzFdKSB0aHJvdyBuZXcgc2UobCk7cmV0dXJuIFtpKHRbMF0pLCB0WzFdXTtcbiAgICAgICAgICB9KSA6IFtdLCB4cyhmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IC0xOyArK24gPCBlOykge1xuICAgICAgICAgICAgICB2YXIgcyA9IHRbbl07aWYgKFVlKHNbMF0sIHRoaXMsIGkpKSByZXR1cm4gVWUoc1sxXSwgdGhpcywgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIHBuLmNvbmZvcm1zID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gc2wodCk7cmV0dXJuIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBObihpLCB0LCBlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfShIbih0LCBkKSk7XG4gICAgICAgIH0sIHBuLmNvbnN0YW50ID0gVGwsIHBuLmNvdW50QnkgPSBSbywgcG4uY3JlYXRlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IGZuKHQpO3JldHVybiBudWxsID09IGUgPyBpIDogTW4oaSwgZSk7XG4gICAgICAgIH0sIHBuLmN1cnJ5ID0gZnVuY3Rpb24gdChlLCBpLCBuKSB7XG4gICAgICAgICAgdmFyIHMgPSBDcihlLCB5LCByLCByLCByLCByLCByLCBpID0gbiA/IHIgOiBpKTtyZXR1cm4gcy5wbGFjZWhvbGRlciA9IHQucGxhY2Vob2xkZXIsIHM7XG4gICAgICAgIH0sIHBuLmN1cnJ5UmlnaHQgPSBmdW5jdGlvbiB0KGUsIGksIG4pIHtcbiAgICAgICAgICB2YXIgcyA9IENyKGUsIGssIHIsIHIsIHIsIHIsIHIsIGkgPSBuID8gciA6IGkpO3JldHVybiBzLnBsYWNlaG9sZGVyID0gdC5wbGFjZWhvbGRlciwgcztcbiAgICAgICAgfSwgcG4uZGVib3VuY2UgPSBzYSwgcG4uZGVmYXVsdHMgPSBKYSwgcG4uZGVmYXVsdHNEZWVwID0gWmEsIHBuLmRlZmVyID0gcmEsIHBuLmRlbGF5ID0gb2EsIHBuLmRpZmZlcmVuY2UgPSBwbywgcG4uZGlmZmVyZW5jZUJ5ID0gZm8sIHBuLmRpZmZlcmVuY2VXaXRoID0gZ28sIHBuLmRyb3AgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO3JldHVybiBuID8ganModCwgKGUgPSBpIHx8IGUgPT09IHIgPyAxIDogV2EoZSkpIDwgMCA/IDAgOiBlLCBuKSA6IFtdO1xuICAgICAgICB9LCBwbi5kcm9wUmlnaHQgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO3JldHVybiBuID8ganModCwgMCwgKGUgPSBuIC0gKGUgPSBpIHx8IGUgPT09IHIgPyAxIDogV2EoZSkpKSA8IDAgPyAwIDogZSkgOiBbXTtcbiAgICAgICAgfSwgcG4uZHJvcFJpZ2h0V2hpbGUgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8genModCwgSHIoZSwgMyksICEwLCAhMCkgOiBbXTtcbiAgICAgICAgfSwgcG4uZHJvcFdoaWxlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IHpzKHQsIEhyKGUsIDMpLCAhMCkgOiBbXTtcbiAgICAgICAgfSwgcG4uZmlsbCA9IGZ1bmN0aW9uICh0LCBlLCBpLCBuKSB7XG4gICAgICAgICAgdmFyIHMgPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7cmV0dXJuIHMgPyAoaSAmJiBcIm51bWJlclwiICE9IHR5cGVvZiBpICYmIEtyKHQsIGUsIGkpICYmIChpID0gMCwgbiA9IHMpLCBmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgICAgdmFyIHMgPSB0Lmxlbmd0aDtmb3IgKChpID0gV2EoaSkpIDwgMCAmJiAoaSA9IC1pID4gcyA/IDAgOiBzICsgaSksIChuID0gbiA9PT0gciB8fCBuID4gcyA/IHMgOiBXYShuKSkgPCAwICYmIChuICs9IHMpLCBuID0gaSA+IG4gPyAwIDogUmEobik7IGkgPCBuOykge1xuICAgICAgICAgICAgICB0W2krK10gPSBlO1xuICAgICAgICAgICAgfXJldHVybiB0O1xuICAgICAgICAgIH0odCwgZSwgaSwgbikpIDogW107XG4gICAgICAgIH0sIHBuLmZpbHRlciA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuICh2YSh0KSA/IFhlIDogJG4pKHQsIEhyKGUsIDMpKTtcbiAgICAgICAgfSwgcG4uZmxhdE1hcCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHFuKFhvKHQsIGUpLCAxKTtcbiAgICAgICAgfSwgcG4uZmxhdE1hcERlZXAgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBxbihYbyh0LCBlKSwgRSk7XG4gICAgICAgIH0sIHBuLmZsYXRNYXBEZXB0aCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGkgPSBpID09PSByID8gMSA6IFdhKGkpLCBxbihYbyh0LCBlKSwgaSk7XG4gICAgICAgIH0sIHBuLmZsYXR0ZW4gPSBfbywgcG4uZmxhdHRlbkRlZXAgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgdC5sZW5ndGggPyBxbih0LCBFKSA6IFtdO1xuICAgICAgICB9LCBwbi5mbGF0dGVuRGVwdGggPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgdC5sZW5ndGggPyBxbih0LCBlID0gZSA9PT0gciA/IDEgOiBXYShlKSkgOiBbXTtcbiAgICAgICAgfSwgcG4uZmxpcCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIENyKHQsIFMpO1xuICAgICAgICB9LCBwbi5mbG93ID0gSWwsIHBuLmZsb3dSaWdodCA9IEFsLCBwbi5mcm9tUGFpcnMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGZvciAodmFyIGUgPSAtMSwgaSA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aCwgbiA9IHt9OyArK2UgPCBpOykge1xuICAgICAgICAgICAgdmFyIHMgPSB0W2VdO25bc1swXV0gPSBzWzFdO1xuICAgICAgICAgIH1yZXR1cm4gbjtcbiAgICAgICAgfSwgcG4uZnVuY3Rpb25zID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gW10gOiBHbih0LCBzbCh0KSk7XG4gICAgICAgIH0sIHBuLmZ1bmN0aW9uc0luID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gW10gOiBHbih0LCBybCh0KSk7XG4gICAgICAgIH0sIHBuLmdyb3VwQnkgPSBZbywgcG4uaW5pdGlhbCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCAmJiB0Lmxlbmd0aCA/IGpzKHQsIDAsIC0xKSA6IFtdO1xuICAgICAgICB9LCBwbi5pbnRlcnNlY3Rpb24gPSB5bywgcG4uaW50ZXJzZWN0aW9uQnkgPSBrbywgcG4uaW50ZXJzZWN0aW9uV2l0aCA9IHdvLCBwbi5pbnZlcnQgPSBlbCwgcG4uaW52ZXJ0QnkgPSBpbCwgcG4uaW52b2tlTWFwID0gVm8sIHBuLml0ZXJhdGVlID0gTWwsIHBuLmtleUJ5ID0gR28sIHBuLmtleXMgPSBzbCwgcG4ua2V5c0luID0gcmwsIHBuLm1hcCA9IFhvLCBwbi5tYXBLZXlzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHt9O3JldHVybiBlID0gSHIoZSwgMyksIFluKHQsIGZ1bmN0aW9uICh0LCBuLCBzKSB7XG4gICAgICAgICAgICBQbihpLCBlKHQsIG4sIHMpLCB0KTtcbiAgICAgICAgICB9KSwgaTtcbiAgICAgICAgfSwgcG4ubWFwVmFsdWVzID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHt9O3JldHVybiBlID0gSHIoZSwgMyksIFluKHQsIGZ1bmN0aW9uICh0LCBuLCBzKSB7XG4gICAgICAgICAgICBQbihpLCBuLCBlKHQsIG4sIHMpKTtcbiAgICAgICAgICB9KSwgaTtcbiAgICAgICAgfSwgcG4ubWF0Y2hlcyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHBzKEhuKHQsIGQpKTtcbiAgICAgICAgfSwgcG4ubWF0Y2hlc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gZnModCwgSG4oZSwgZCkpO1xuICAgICAgICB9LCBwbi5tZW1vaXplID0gYWEsIHBuLm1lcmdlID0gb2wsIHBuLm1lcmdlV2l0aCA9IGFsLCBwbi5tZXRob2QgPSBQbCwgcG4ubWV0aG9kT2YgPSBFbCwgcG4ubWl4aW4gPSBPbCwgcG4ubmVnYXRlID0gbGEsIHBuLm50aEFyZyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgPSBXYSh0KSwgeHMoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtcyhlLCB0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcG4ub21pdCA9IGxsLCBwbi5vbWl0QnkgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBjbCh0LCBsYShIcihlKSkpO1xuICAgICAgICB9LCBwbi5vbmNlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gZWEoMiwgdCk7XG4gICAgICAgIH0sIHBuLm9yZGVyQnkgPSBmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBbXSA6ICh2YShlKSB8fCAoZSA9IG51bGwgPT0gZSA/IFtdIDogW2VdKSwgdmEoaSA9IG4gPyByIDogaSkgfHwgKGkgPSBudWxsID09IGkgPyBbXSA6IFtpXSksIHZzKHQsIGUsIGkpKTtcbiAgICAgICAgfSwgcG4ub3ZlciA9IE5sLCBwbi5vdmVyQXJncyA9IHVhLCBwbi5vdmVyRXZlcnkgPSBCbCwgcG4ub3ZlclNvbWUgPSBGbCwgcG4ucGFydGlhbCA9IGNhLCBwbi5wYXJ0aWFsUmlnaHQgPSBoYSwgcG4ucGFydGl0aW9uID0gSm8sIHBuLnBpY2sgPSB1bCwgcG4ucGlja0J5ID0gY2wsIHBuLnByb3BlcnR5ID0gTGwsIHBuLnByb3BlcnR5T2YgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IHIgOiBYbih0LCBlKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LCBwbi5wdWxsID0gQ28sIHBuLnB1bGxBbGwgPSBEbywgcG4ucHVsbEFsbEJ5ID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCAmJiBlICYmIGUubGVuZ3RoID8gYnModCwgZSwgSHIoaSwgMikpIDogdDtcbiAgICAgICAgfSwgcG4ucHVsbEFsbFdpdGggPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoICYmIGUgJiYgZS5sZW5ndGggPyBicyh0LCBlLCByLCBpKSA6IHQ7XG4gICAgICAgIH0sIHBuLnB1bGxBdCA9IFNvLCBwbi5yYW5nZSA9IHpsLCBwbi5yYW5nZVJpZ2h0ID0gV2wsIHBuLnJlYXJnID0gZGEsIHBuLnJlamVjdCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuICh2YSh0KSA/IFhlIDogJG4pKHQsIGxhKEhyKGUsIDMpKSk7XG4gICAgICAgIH0sIHBuLnJlbW92ZSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBbXTtpZiAoIXQgfHwgIXQubGVuZ3RoKSByZXR1cm4gaTt2YXIgbiA9IC0xLFxuICAgICAgICAgICAgICBzID0gW10sXG4gICAgICAgICAgICAgIHIgPSB0Lmxlbmd0aDtmb3IgKGUgPSBIcihlLCAzKTsgKytuIDwgcjspIHtcbiAgICAgICAgICAgIHZhciBvID0gdFtuXTtlKG8sIG4sIHQpICYmIChpLnB1c2gobyksIHMucHVzaChuKSk7XG4gICAgICAgICAgfXJldHVybiB5cyh0LCBzKSwgaTtcbiAgICAgICAgfSwgcG4ucmVzdCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgdGhyb3cgbmV3IHNlKGwpO3JldHVybiB4cyh0LCBlID0gZSA9PT0gciA/IGUgOiBXYShlKSk7XG4gICAgICAgIH0sIHBuLnJldmVyc2UgPSBUbywgcG4uc2FtcGxlU2l6ZSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGUgPSAoaSA/IEtyKHQsIGUsIGkpIDogZSA9PT0gcikgPyAxIDogV2EoZSksICh2YSh0KSA/IERuIDogRHMpKHQsIGUpO1xuICAgICAgICB9LCBwbi5zZXQgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyB0IDogU3ModCwgZSwgaSk7XG4gICAgICAgIH0sIHBuLnNldFdpdGggPSBmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgIHJldHVybiBuID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBuID8gbiA6IHIsIG51bGwgPT0gdCA/IHQgOiBTcyh0LCBlLCBpLCBuKTtcbiAgICAgICAgfSwgcG4uc2h1ZmZsZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuICh2YSh0KSA/IFNuIDogQXMpKHQpO1xuICAgICAgICB9LCBwbi5zbGljZSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7cmV0dXJuIG4gPyAoaSAmJiBcIm51bWJlclwiICE9IHR5cGVvZiBpICYmIEtyKHQsIGUsIGkpID8gKGUgPSAwLCBpID0gbikgOiAoZSA9IG51bGwgPT0gZSA/IDAgOiBXYShlKSwgaSA9IGkgPT09IHIgPyBuIDogV2EoaSkpLCBqcyh0LCBlLCBpKSkgOiBbXTtcbiAgICAgICAgfSwgcG4uc29ydEJ5ID0gWm8sIHBuLnNvcnRlZFVuaXEgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gT3ModCkgOiBbXTtcbiAgICAgICAgfSwgcG4uc29ydGVkVW5pcUJ5ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IE9zKHQsIEhyKGUsIDIpKSA6IFtdO1xuICAgICAgICB9LCBwbi5zcGxpdCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGkgJiYgXCJudW1iZXJcIiAhPSB0eXBlb2YgaSAmJiBLcih0LCBlLCBpKSAmJiAoZSA9IGkgPSByKSwgKGkgPSBpID09PSByID8gQiA6IGkgPj4+IDApID8gKHQgPSBVYSh0KSkgJiYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgfHwgbnVsbCAhPSBlICYmICFQYShlKSkgJiYgIShlID0gTnMoZSkpICYmIENpKHQpID8gVnMoTWkodCksIDAsIGkpIDogdC5zcGxpdChlLCBpKSA6IFtdO1xuICAgICAgICB9LCBwbi5zcHJlYWQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQpIHRocm93IG5ldyBzZShsKTtyZXR1cm4gZSA9IG51bGwgPT0gZSA/IDAgOiBxaShXYShlKSwgMCksIHhzKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGlbZV0sXG4gICAgICAgICAgICAgICAgcyA9IFZzKGksIDAsIGUpO3JldHVybiBuICYmIHRpKHMsIG4pLCBVZSh0LCB0aGlzLCBzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgcG4udGFpbCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7cmV0dXJuIGUgPyBqcyh0LCAxLCBlKSA6IFtdO1xuICAgICAgICB9LCBwbi50YWtlID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IGpzKHQsIDAsIChlID0gaSB8fCBlID09PSByID8gMSA6IFdhKGUpKSA8IDAgPyAwIDogZSkgOiBbXTtcbiAgICAgICAgfSwgcG4udGFrZVJpZ2h0ID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtyZXR1cm4gbiA/IGpzKHQsIChlID0gbiAtIChlID0gaSB8fCBlID09PSByID8gMSA6IFdhKGUpKSkgPCAwID8gMCA6IGUsIG4pIDogW107XG4gICAgICAgIH0sIHBuLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IHpzKHQsIEhyKGUsIDMpLCAhMSwgITApIDogW107XG4gICAgICAgIH0sIHBuLnRha2VXaGlsZSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPyB6cyh0LCBIcihlLCAzKSkgOiBbXTtcbiAgICAgICAgfSwgcG4udGFwID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gZSh0KSwgdDtcbiAgICAgICAgfSwgcG4udGhyb3R0bGUgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gITAsXG4gICAgICAgICAgICAgIHMgPSAhMDtpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgc2UobCk7cmV0dXJuIFRhKGkpICYmIChuID0gXCJsZWFkaW5nXCIgaW4gaSA/ICEhaS5sZWFkaW5nIDogbiwgcyA9IFwidHJhaWxpbmdcIiBpbiBpID8gISFpLnRyYWlsaW5nIDogcyksIHNhKHQsIGUsIHsgbGVhZGluZzogbiwgbWF4V2FpdDogZSwgdHJhaWxpbmc6IHMgfSk7XG4gICAgICAgIH0sIHBuLnRocnUgPSB6bywgcG4udG9BcnJheSA9IExhLCBwbi50b1BhaXJzID0gaGwsIHBuLnRvUGFpcnNJbiA9IGRsLCBwbi50b1BhdGggPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB2YSh0KSA/IFFlKHQsIHVvKSA6IEhhKHQpID8gW3RdIDogaXIobG8oVWEodCkpKTtcbiAgICAgICAgfSwgcG4udG9QbGFpbk9iamVjdCA9IHFhLCBwbi50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gdmEodCksXG4gICAgICAgICAgICAgIHMgPSBuIHx8IGthKHQpIHx8IE5hKHQpO2lmIChlID0gSHIoZSwgNCksIG51bGwgPT0gaSkge1xuICAgICAgICAgICAgdmFyIHIgPSB0ICYmIHQuY29uc3RydWN0b3I7aSA9IHMgPyBuID8gbmV3IHIoKSA6IFtdIDogVGEodCkgJiYgQ2EocikgPyBmbihNZSh0KSkgOiB7fTtcbiAgICAgICAgICB9cmV0dXJuIChzID8gWWUgOiBZbikodCwgZnVuY3Rpb24gKHQsIG4sIHMpIHtcbiAgICAgICAgICAgIHJldHVybiBlKGksIHQsIG4sIHMpO1xuICAgICAgICAgIH0pLCBpO1xuICAgICAgICB9LCBwbi51bmFyeSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHRhKHQsIDEpO1xuICAgICAgICB9LCBwbi51bmlvbiA9IElvLCBwbi51bmlvbkJ5ID0gQW8sIHBuLnVuaW9uV2l0aCA9IGpvLCBwbi51bmlxID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IEJzKHQpIDogW107XG4gICAgICAgIH0sIHBuLnVuaXFCeSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPyBCcyh0LCBIcihlLCAyKSkgOiBbXTtcbiAgICAgICAgfSwgcG4udW5pcVdpdGggPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBlID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlID8gZSA6IHIsIHQgJiYgdC5sZW5ndGggPyBCcyh0LCByLCBlKSA6IFtdO1xuICAgICAgICB9LCBwbi51bnNldCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCB8fCBGcyh0LCBlKTtcbiAgICAgICAgfSwgcG4udW56aXAgPSBNbywgcG4udW56aXBXaXRoID0gUG8sIHBuLnVwZGF0ZSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IHQgOiBMcyh0LCBlLCBVcyhpKSk7XG4gICAgICAgIH0sIHBuLnVwZGF0ZVdpdGggPSBmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgIHJldHVybiBuID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBuID8gbiA6IHIsIG51bGwgPT0gdCA/IHQgOiBMcyh0LCBlLCBVcyhpKSwgbik7XG4gICAgICAgIH0sIHBuLnZhbHVlcyA9IHBsLCBwbi52YWx1ZXNJbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IFtdIDogdmkodCwgcmwodCkpO1xuICAgICAgICB9LCBwbi53aXRob3V0ID0gRW8sIHBuLndvcmRzID0gQ2wsIHBuLndyYXAgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBjYShVcyhlKSwgdCk7XG4gICAgICAgIH0sIHBuLnhvciA9IE9vLCBwbi54b3JCeSA9IEhvLCBwbi54b3JXaXRoID0gTm8sIHBuLnppcCA9IEJvLCBwbi56aXBPYmplY3QgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiAkcyh0IHx8IFtdLCBlIHx8IFtdLCBJbik7XG4gICAgICAgIH0sIHBuLnppcE9iamVjdERlZXAgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiAkcyh0IHx8IFtdLCBlIHx8IFtdLCBTcyk7XG4gICAgICAgIH0sIHBuLnppcFdpdGggPSBGbywgcG4uZW50cmllcyA9IGhsLCBwbi5lbnRyaWVzSW4gPSBkbCwgcG4uZXh0ZW5kID0gWWEsIHBuLmV4dGVuZFdpdGggPSBWYSwgT2wocG4sIHBuKSwgcG4uYWRkID0gcWwsIHBuLmF0dGVtcHQgPSBEbCwgcG4uY2FtZWxDYXNlID0gZmwsIHBuLmNhcGl0YWxpemUgPSBnbCwgcG4uY2VpbCA9IFVsLCBwbi5jbGFtcCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGkgPT09IHIgJiYgKGkgPSBlLCBlID0gciksIGkgIT09IHIgJiYgKGkgPSAoaSA9ICRhKGkpKSA9PSBpID8gaSA6IDApLCBlICE9PSByICYmIChlID0gKGUgPSAkYShlKSkgPT0gZSA/IGUgOiAwKSwgT24oJGEodCksIGUsIGkpO1xuICAgICAgICB9LCBwbi5jbG9uZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIEhuKHQsIGYpO1xuICAgICAgICB9LCBwbi5jbG9uZURlZXAgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBIbih0LCBkIHwgZik7XG4gICAgICAgIH0sIHBuLmNsb25lRGVlcFdpdGggPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBIbih0LCBkIHwgZiwgZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGUgOiByKTtcbiAgICAgICAgfSwgcG4uY2xvbmVXaXRoID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gSG4odCwgZiwgZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGUgOiByKTtcbiAgICAgICAgfSwgcG4uY29uZm9ybXNUbyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSB8fCBObih0LCBlLCBzbChlKSk7XG4gICAgICAgIH0sIHBuLmRlYnVyciA9IG1sLCBwbi5kZWZhdWx0VG8gPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBudWxsID09IHQgfHwgdCAhPSB0ID8gZSA6IHQ7XG4gICAgICAgIH0sIHBuLmRpdmlkZSA9IEtsLCBwbi5lbmRzV2l0aCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdCA9IFVhKHQpLCBlID0gTnMoZSk7dmFyIG4gPSB0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgcyA9IGkgPSBpID09PSByID8gbiA6IE9uKFdhKGkpLCAwLCBuKTtyZXR1cm4gKGkgLT0gZS5sZW5ndGgpID49IDAgJiYgdC5zbGljZShpLCBzKSA9PSBlO1xuICAgICAgICB9LCBwbi5lcSA9IHBhLCBwbi5lc2NhcGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiAodCA9IFVhKHQpKSAmJiBEdC50ZXN0KHQpID8gdC5yZXBsYWNlKHh0LCB3aSkgOiB0O1xuICAgICAgICB9LCBwbi5lc2NhcGVSZWdFeHAgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiAodCA9IFVhKHQpKSAmJiBFdC50ZXN0KHQpID8gdC5yZXBsYWNlKFB0LCBcIlxcXFwkJlwiKSA6IHQ7XG4gICAgICAgIH0sIHBuLmV2ZXJ5ID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IHZhKHQpID8gR2UgOiBXbjtyZXR1cm4gaSAmJiBLcih0LCBlLCBpKSAmJiAoZSA9IHIpLCBuKHQsIEhyKGUsIDMpKTtcbiAgICAgICAgfSwgcG4uZmluZCA9ICRvLCBwbi5maW5kSW5kZXggPSBtbywgcG4uZmluZEtleSA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHJpKHQsIEhyKGUsIDMpLCBZbik7XG4gICAgICAgIH0sIHBuLmZpbmRMYXN0ID0gcW8sIHBuLmZpbmRMYXN0SW5kZXggPSB2bywgcG4uZmluZExhc3RLZXkgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiByaSh0LCBIcihlLCAzKSwgVm4pO1xuICAgICAgICB9LCBwbi5mbG9vciA9IFlsLCBwbi5mb3JFYWNoID0gVW8sIHBuLmZvckVhY2hSaWdodCA9IEtvLCBwbi5mb3JJbiA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IHQgOiBVbih0LCBIcihlLCAzKSwgcmwpO1xuICAgICAgICB9LCBwbi5mb3JJblJpZ2h0ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gdCA6IEtuKHQsIEhyKGUsIDMpLCBybCk7XG4gICAgICAgIH0sIHBuLmZvck93biA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgWW4odCwgSHIoZSwgMykpO1xuICAgICAgICB9LCBwbi5mb3JPd25SaWdodCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgVm4odCwgSHIoZSwgMykpO1xuICAgICAgICB9LCBwbi5nZXQgPSBRYSwgcG4uZ3QgPSBmYSwgcG4uZ3RlID0gZ2EsIHBuLmhhcyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCAmJiBScih0LCBlLCB0cyk7XG4gICAgICAgIH0sIHBuLmhhc0luID0gdGwsIHBuLmhlYWQgPSBibywgcG4uaWRlbnRpdHkgPSBqbCwgcG4uaW5jbHVkZXMgPSBmdW5jdGlvbiAodCwgZSwgaSwgbikge1xuICAgICAgICAgIHQgPSBiYSh0KSA/IHQgOiBwbCh0KSwgaSA9IGkgJiYgIW4gPyBXYShpKSA6IDA7dmFyIHMgPSB0Lmxlbmd0aDtyZXR1cm4gaSA8IDAgJiYgKGkgPSBxaShzICsgaSwgMCkpLCBPYSh0KSA/IGkgPD0gcyAmJiB0LmluZGV4T2YoZSwgaSkgPiAtMSA6ICEhcyAmJiBhaSh0LCBlLCBpKSA+IC0xO1xuICAgICAgICB9LCBwbi5pbmRleE9mID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IG51bGwgPT0gdCA/IDAgOiB0Lmxlbmd0aDtpZiAoIW4pIHJldHVybiAtMTt2YXIgcyA9IG51bGwgPT0gaSA/IDAgOiBXYShpKTtyZXR1cm4gcyA8IDAgJiYgKHMgPSBxaShuICsgcywgMCkpLCBhaSh0LCBlLCBzKTtcbiAgICAgICAgfSwgcG4uaW5SYW5nZSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGUgPSB6YShlKSwgaSA9PT0gciA/IChpID0gZSwgZSA9IDApIDogaSA9IHphKGkpLCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHQgPj0gVWkoZSwgaSkgJiYgdCA8IHFpKGUsIGkpO1xuICAgICAgICAgIH0odCA9ICRhKHQpLCBlLCBpKTtcbiAgICAgICAgfSwgcG4uaW52b2tlID0gbmwsIHBuLmlzQXJndW1lbnRzID0gbWEsIHBuLmlzQXJyYXkgPSB2YSwgcG4uaXNBcnJheUJ1ZmZlciA9IF9hLCBwbi5pc0FycmF5TGlrZSA9IGJhLCBwbi5pc0FycmF5TGlrZU9iamVjdCA9IHlhLCBwbi5pc0Jvb2xlYW4gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiAhMCA9PT0gdCB8fCAhMSA9PT0gdCB8fCBJYSh0KSAmJiBabih0KSA9PSBxO1xuICAgICAgICB9LCBwbi5pc0J1ZmZlciA9IGthLCBwbi5pc0RhdGUgPSB3YSwgcG4uaXNFbGVtZW50ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gSWEodCkgJiYgMSA9PT0gdC5ub2RlVHlwZSAmJiAhTWEodCk7XG4gICAgICAgIH0sIHBuLmlzRW1wdHkgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGlmIChudWxsID09IHQpIHJldHVybiAhMDtpZiAoYmEodCkgJiYgKHZhKHQpIHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0LnNwbGljZSB8fCBrYSh0KSB8fCBOYSh0KSB8fCBtYSh0KSkpIHJldHVybiAhdC5sZW5ndGg7dmFyIGUgPSBXcih0KTtpZiAoZSA9PSBYIHx8IGUgPT0gaXQpIHJldHVybiAhdC5zaXplO2lmIChYcih0KSkgcmV0dXJuICF1cyh0KS5sZW5ndGg7Zm9yICh2YXIgaSBpbiB0KSB7XG4gICAgICAgICAgICBpZiAoY2UuY2FsbCh0LCBpKSkgcmV0dXJuICExO1xuICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgIH0sIHBuLmlzRXF1YWwgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBycyh0LCBlKTtcbiAgICAgICAgfSwgcG4uaXNFcXVhbFdpdGggPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gKGkgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGkgPyBpIDogcikgPyBpKHQsIGUpIDogcjtyZXR1cm4gbiA9PT0gciA/IHJzKHQsIGUsIHIsIGkpIDogISFuO1xuICAgICAgICB9LCBwbi5pc0Vycm9yID0geGEsIHBuLmlzRmluaXRlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgdCAmJiBXaSh0KTtcbiAgICAgICAgfSwgcG4uaXNGdW5jdGlvbiA9IENhLCBwbi5pc0ludGVnZXIgPSBEYSwgcG4uaXNMZW5ndGggPSBTYSwgcG4uaXNNYXAgPSBBYSwgcG4uaXNNYXRjaCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIHQgPT09IGUgfHwgb3ModCwgZSwgQnIoZSkpO1xuICAgICAgICB9LCBwbi5pc01hdGNoV2l0aCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGkgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGkgPyBpIDogciwgb3ModCwgZSwgQnIoZSksIGkpO1xuICAgICAgICB9LCBwbi5pc05hTiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGphKHQpICYmIHQgIT0gK3Q7XG4gICAgICAgIH0sIHBuLmlzTmF0aXZlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBpZiAoR3IodCkpIHRocm93IG5ldyBadChhKTtyZXR1cm4gYXModCk7XG4gICAgICAgIH0sIHBuLmlzTmlsID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0O1xuICAgICAgICB9LCBwbi5pc051bGwgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBudWxsID09PSB0O1xuICAgICAgICB9LCBwbi5pc051bWJlciA9IGphLCBwbi5pc09iamVjdCA9IFRhLCBwbi5pc09iamVjdExpa2UgPSBJYSwgcG4uaXNQbGFpbk9iamVjdCA9IE1hLCBwbi5pc1JlZ0V4cCA9IFBhLCBwbi5pc1NhZmVJbnRlZ2VyID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gRGEodCkgJiYgdCA+PSAtTyAmJiB0IDw9IE87XG4gICAgICAgIH0sIHBuLmlzU2V0ID0gRWEsIHBuLmlzU3RyaW5nID0gT2EsIHBuLmlzU3ltYm9sID0gSGEsIHBuLmlzVHlwZWRBcnJheSA9IE5hLCBwbi5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgPT09IHI7XG4gICAgICAgIH0sIHBuLmlzV2Vha01hcCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIElhKHQpICYmIFdyKHQpID09IG90O1xuICAgICAgICB9LCBwbi5pc1dlYWtTZXQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBJYSh0KSAmJiBabih0KSA9PSBhdDtcbiAgICAgICAgfSwgcG4uam9pbiA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IFwiXCIgOiBSaS5jYWxsKHQsIGUpO1xuICAgICAgICB9LCBwbi5rZWJhYkNhc2UgPSB2bCwgcG4ubGFzdCA9IHhvLCBwbi5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSBudWxsID09IHQgPyAwIDogdC5sZW5ndGg7aWYgKCFuKSByZXR1cm4gLTE7dmFyIHMgPSBuO3JldHVybiBpICE9PSByICYmIChzID0gKHMgPSBXYShpKSkgPCAwID8gcWkobiArIHMsIDApIDogVWkocywgbiAtIDEpKSwgZSA9PSBlID8gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSBpICsgMTsgbi0tOykge1xuICAgICAgICAgICAgICBpZiAodFtuXSA9PT0gZSkgcmV0dXJuIG47XG4gICAgICAgICAgICB9cmV0dXJuIG47XG4gICAgICAgICAgfSh0LCBlLCBzKSA6IG9pKHQsIHVpLCBzLCAhMCk7XG4gICAgICAgIH0sIHBuLmxvd2VyQ2FzZSA9IF9sLCBwbi5sb3dlckZpcnN0ID0gYmwsIHBuLmx0ID0gQmEsIHBuLmx0ZSA9IEZhLCBwbi5tYXggPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gUm4odCwgamwsIFFuKSA6IHI7XG4gICAgICAgIH0sIHBuLm1heEJ5ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IFJuKHQsIEhyKGUsIDIpLCBRbikgOiByO1xuICAgICAgICB9LCBwbi5tZWFuID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gY2kodCwgamwpO1xuICAgICAgICB9LCBwbi5tZWFuQnkgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiBjaSh0LCBIcihlLCAyKSk7XG4gICAgICAgIH0sIHBuLm1pbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgJiYgdC5sZW5ndGggPyBSbih0LCBqbCwgaHMpIDogcjtcbiAgICAgICAgfSwgcG4ubWluQnkgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gUm4odCwgSHIoZSwgMiksIGhzKSA6IHI7XG4gICAgICAgIH0sIHBuLnN0dWJBcnJheSA9IFJsLCBwbi5zdHViRmFsc2UgPSAkbCwgcG4uc3R1Yk9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sIHBuLnN0dWJTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH0sIHBuLnN0dWJUcnVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgfSwgcG4ubXVsdGlwbHkgPSBHbCwgcG4ubnRoID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IG1zKHQsIFdhKGUpKSA6IHI7XG4gICAgICAgIH0sIHBuLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIEVlLl8gPT09IHRoaXMgJiYgKEVlLl8gPSBnZSksIHRoaXM7XG4gICAgICAgIH0sIHBuLm5vb3AgPSBIbCwgcG4ubm93ID0gUW8sIHBuLnBhZCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdCA9IFVhKHQpO3ZhciBuID0gKGUgPSBXYShlKSkgPyBqaSh0KSA6IDA7aWYgKCFlIHx8IG4gPj0gZSkgcmV0dXJuIHQ7dmFyIHMgPSAoZSAtIG4pIC8gMjtyZXR1cm4gdnIoRmkocyksIGkpICsgdCArIHZyKEJpKHMpLCBpKTtcbiAgICAgICAgfSwgcG4ucGFkRW5kID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB0ID0gVWEodCk7dmFyIG4gPSAoZSA9IFdhKGUpKSA/IGppKHQpIDogMDtyZXR1cm4gZSAmJiBuIDwgZSA/IHQgKyB2cihlIC0gbiwgaSkgOiB0O1xuICAgICAgICB9LCBwbi5wYWRTdGFydCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdCA9IFVhKHQpO3ZhciBuID0gKGUgPSBXYShlKSkgPyBqaSh0KSA6IDA7cmV0dXJuIGUgJiYgbiA8IGUgPyB2cihlIC0gbiwgaSkgKyB0IDogdDtcbiAgICAgICAgfSwgcG4ucGFyc2VJbnQgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBpIHx8IG51bGwgPT0gZSA/IGUgPSAwIDogZSAmJiAoZSA9ICtlKSwgWWkoVWEodCkucmVwbGFjZShIdCwgXCJcIiksIGUgfHwgMCk7XG4gICAgICAgIH0sIHBuLnJhbmRvbSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgaWYgKGkgJiYgXCJib29sZWFuXCIgIT0gdHlwZW9mIGkgJiYgS3IodCwgZSwgaSkgJiYgKGUgPSBpID0gciksIGkgPT09IHIgJiYgKFwiYm9vbGVhblwiID09IHR5cGVvZiBlID8gKGkgPSBlLCBlID0gcikgOiBcImJvb2xlYW5cIiA9PSB0eXBlb2YgdCAmJiAoaSA9IHQsIHQgPSByKSksIHQgPT09IHIgJiYgZSA9PT0gciA/ICh0ID0gMCwgZSA9IDEpIDogKHQgPSB6YSh0KSwgZSA9PT0gciA/IChlID0gdCwgdCA9IDApIDogZSA9IHphKGUpKSwgdCA+IGUpIHtcbiAgICAgICAgICAgIHZhciBuID0gdDt0ID0gZSwgZSA9IG47XG4gICAgICAgICAgfWlmIChpIHx8IHQgJSAxIHx8IGUgJSAxKSB7XG4gICAgICAgICAgICB2YXIgcyA9IFZpKCk7cmV0dXJuIFVpKHQgKyBzICogKGUgLSB0ICsgQWUoXCIxZS1cIiArICgocyArIFwiXCIpLmxlbmd0aCAtIDEpKSksIGUpO1xuICAgICAgICAgIH1yZXR1cm4ga3ModCwgZSk7XG4gICAgICAgIH0sIHBuLnJlZHVjZSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSB2YSh0KSA/IGVpIDogcGksXG4gICAgICAgICAgICAgIHMgPSBhcmd1bWVudHMubGVuZ3RoIDwgMztyZXR1cm4gbih0LCBIcihlLCA0KSwgaSwgcywgTG4pO1xuICAgICAgICB9LCBwbi5yZWR1Y2VSaWdodCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSB2YSh0KSA/IGlpIDogcGksXG4gICAgICAgICAgICAgIHMgPSBhcmd1bWVudHMubGVuZ3RoIDwgMztyZXR1cm4gbih0LCBIcihlLCA0KSwgaSwgcywgem4pO1xuICAgICAgICB9LCBwbi5yZXBlYXQgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBlID0gKGkgPyBLcih0LCBlLCBpKSA6IGUgPT09IHIpID8gMSA6IFdhKGUpLCB3cyhVYSh0KSwgZSk7XG4gICAgICAgIH0sIHBuLnJlcGxhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGUgPSBVYSh0WzBdKTtyZXR1cm4gdC5sZW5ndGggPCAzID8gZSA6IGUucmVwbGFjZSh0WzFdLCB0WzJdKTtcbiAgICAgICAgfSwgcG4ucmVzdWx0ID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IC0xLFxuICAgICAgICAgICAgICBzID0gKGUgPSBLcyhlLCB0KSkubGVuZ3RoO2ZvciAocyB8fCAocyA9IDEsIHQgPSByKTsgKytuIDwgczspIHtcbiAgICAgICAgICAgIHZhciBvID0gbnVsbCA9PSB0ID8gciA6IHRbdW8oZVtuXSldO28gPT09IHIgJiYgKG4gPSBzLCBvID0gaSksIHQgPSBDYShvKSA/IG8uY2FsbCh0KSA6IG87XG4gICAgICAgICAgfXJldHVybiB0O1xuICAgICAgICB9LCBwbi5yb3VuZCA9IFhsLCBwbi5ydW5JbkNvbnRleHQgPSB0LCBwbi5zYW1wbGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiAodmEodCkgPyBDbiA6IENzKSh0KTtcbiAgICAgICAgfSwgcG4uc2l6ZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuIDA7aWYgKGJhKHQpKSByZXR1cm4gT2EodCkgPyBqaSh0KSA6IHQubGVuZ3RoO3ZhciBlID0gV3IodCk7cmV0dXJuIGUgPT0gWCB8fCBlID09IGl0ID8gdC5zaXplIDogdXModCkubGVuZ3RoO1xuICAgICAgICB9LCBwbi5zbmFrZUNhc2UgPSB5bCwgcG4uc29tZSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSB2YSh0KSA/IG5pIDogTXM7cmV0dXJuIGkgJiYgS3IodCwgZSwgaSkgJiYgKGUgPSByKSwgbih0LCBIcihlLCAzKSk7XG4gICAgICAgIH0sIHBuLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gUHModCwgZSk7XG4gICAgICAgIH0sIHBuLnNvcnRlZEluZGV4QnkgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiBFcyh0LCBlLCBIcihpLCAyKSk7XG4gICAgICAgIH0sIHBuLnNvcnRlZEluZGV4T2YgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gbnVsbCA9PSB0ID8gMCA6IHQubGVuZ3RoO2lmIChpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IFBzKHQsIGUpO2lmIChuIDwgaSAmJiBwYSh0W25dLCBlKSkgcmV0dXJuIG47XG4gICAgICAgICAgfXJldHVybiAtMTtcbiAgICAgICAgfSwgcG4uc29ydGVkTGFzdEluZGV4ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gUHModCwgZSwgITApO1xuICAgICAgICB9LCBwbi5zb3J0ZWRMYXN0SW5kZXhCeSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIEVzKHQsIGUsIEhyKGksIDIpLCAhMCk7XG4gICAgICAgIH0sIHBuLnNvcnRlZExhc3RJbmRleE9mID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBpZiAobnVsbCAhPSB0ICYmIHQubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgaSA9IFBzKHQsIGUsICEwKSAtIDE7aWYgKHBhKHRbaV0sIGUpKSByZXR1cm4gaTtcbiAgICAgICAgICB9cmV0dXJuIC0xO1xuICAgICAgICB9LCBwbi5zdGFydENhc2UgPSBrbCwgcG4uc3RhcnRzV2l0aCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHQgPSBVYSh0KSwgaSA9IG51bGwgPT0gaSA/IDAgOiBPbihXYShpKSwgMCwgdC5sZW5ndGgpLCBlID0gTnMoZSksIHQuc2xpY2UoaSwgaSArIGUubGVuZ3RoKSA9PSBlO1xuICAgICAgICB9LCBwbi5zdWJ0cmFjdCA9IEpsLCBwbi5zdW0gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gZmkodCwgamwpIDogMDtcbiAgICAgICAgfSwgcG4uc3VtQnkgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gZmkodCwgSHIoZSwgMikpIDogMDtcbiAgICAgICAgfSwgcG4udGVtcGxhdGUgPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gcG4udGVtcGxhdGVTZXR0aW5ncztpICYmIEtyKHQsIGUsIGkpICYmIChlID0gciksIHQgPSBVYSh0KSwgZSA9IFZhKHt9LCBlLCBuLCBEcik7dmFyIHMsXG4gICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgIGEgPSBWYSh7fSwgZS5pbXBvcnRzLCBuLmltcG9ydHMsIERyKSxcbiAgICAgICAgICAgICAgbCA9IHNsKGEpLFxuICAgICAgICAgICAgICB1ID0gdmkoYSwgbCksXG4gICAgICAgICAgICAgIGMgPSAwLFxuICAgICAgICAgICAgICBoID0gZS5pbnRlcnBvbGF0ZSB8fCBYdCxcbiAgICAgICAgICAgICAgZCA9IFwiX19wICs9ICdcIixcbiAgICAgICAgICAgICAgcCA9IGllKChlLmVzY2FwZSB8fCBYdCkuc291cmNlICsgXCJ8XCIgKyBoLnNvdXJjZSArIFwifFwiICsgKGggPT09IEl0ID8gUnQgOiBYdCkuc291cmNlICsgXCJ8XCIgKyAoZS5ldmFsdWF0ZSB8fCBYdCkuc291cmNlICsgXCJ8JFwiLCBcImdcIiksXG4gICAgICAgICAgICAgIGYgPSBcIi8vIyBzb3VyY2VVUkw9XCIgKyAoXCJzb3VyY2VVUkxcIiBpbiBlID8gZS5zb3VyY2VVUkwgOiBcImxvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbXCIgKyArK0RlICsgXCJdXCIpICsgXCJcXG5cIjt0LnJlcGxhY2UocCwgZnVuY3Rpb24gKGUsIGksIG4sIHIsIGEsIGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuIHx8IChuID0gciksIGQgKz0gdC5zbGljZShjLCBsKS5yZXBsYWNlKEp0LCB4aSksIGkgJiYgKHMgPSAhMCwgZCArPSBcIicgK1xcbl9fZShcIiArIGkgKyBcIikgK1xcbidcIiksIGEgJiYgKG8gPSAhMCwgZCArPSBcIic7XFxuXCIgKyBhICsgXCI7XFxuX19wICs9ICdcIiksIG4gJiYgKGQgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIG4gKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIiksIGMgPSBsICsgZS5sZW5ndGgsIGU7XG4gICAgICAgICAgfSksIGQgKz0gXCInO1xcblwiO3ZhciBnID0gZS52YXJpYWJsZTtnIHx8IChkID0gXCJ3aXRoIChvYmopIHtcXG5cIiArIGQgKyBcIlxcbn1cXG5cIiksIGQgPSAobyA/IGQucmVwbGFjZShidCwgXCJcIikgOiBkKS5yZXBsYWNlKHl0LCBcIiQxXCIpLnJlcGxhY2Uoa3QsIFwiJDE7XCIpLCBkID0gXCJmdW5jdGlvbihcIiArIChnIHx8IFwib2JqXCIpICsgXCIpIHtcXG5cIiArIChnID8gXCJcIiA6IFwib2JqIHx8IChvYmogPSB7fSk7XFxuXCIpICsgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICsgKHMgPyBcIiwgX19lID0gXy5lc2NhcGVcIiA6IFwiXCIpICsgKG8gPyBcIiwgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCIgOiBcIjtcXG5cIikgKyBkICsgXCJyZXR1cm4gX19wXFxufVwiO3ZhciBtID0gRGwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFF0KGwsIGYgKyBcInJldHVybiBcIiArIGQpLmFwcGx5KHIsIHUpO1xuICAgICAgICAgIH0pO2lmIChtLnNvdXJjZSA9IGQsIHhhKG0pKSB0aHJvdyBtO3JldHVybiBtO1xuICAgICAgICB9LCBwbi50aW1lcyA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgaWYgKCh0ID0gV2EodCkpIDwgMSB8fCB0ID4gTykgcmV0dXJuIFtdO3ZhciBpID0gQixcbiAgICAgICAgICAgICAgbiA9IFVpKHQsIEIpO2UgPSBIcihlKSwgdCAtPSBCO2ZvciAodmFyIHMgPSBnaShuLCBlKTsgKytpIDwgdDspIHtcbiAgICAgICAgICAgIGUoaSk7XG4gICAgICAgICAgfXJldHVybiBzO1xuICAgICAgICB9LCBwbi50b0Zpbml0ZSA9IHphLCBwbi50b0ludGVnZXIgPSBXYSwgcG4udG9MZW5ndGggPSBSYSwgcG4udG9Mb3dlciA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIFVhKHQpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sIHBuLnRvTnVtYmVyID0gJGEsIHBuLnRvU2FmZUludGVnZXIgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0ID8gT24oV2EodCksIC1PLCBPKSA6IDAgPT09IHQgPyB0IDogMDtcbiAgICAgICAgfSwgcG4udG9TdHJpbmcgPSBVYSwgcG4udG9VcHBlciA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIFVhKHQpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0sIHBuLnRyaW0gPSBmdW5jdGlvbiAodCwgZSwgaSkge1xuICAgICAgICAgIGlmICgodCA9IFVhKHQpKSAmJiAoaSB8fCBlID09PSByKSkgcmV0dXJuIHQucmVwbGFjZShPdCwgXCJcIik7aWYgKCF0IHx8ICEoZSA9IE5zKGUpKSkgcmV0dXJuIHQ7dmFyIG4gPSBNaSh0KSxcbiAgICAgICAgICAgICAgcyA9IE1pKGUpO3JldHVybiBWcyhuLCBiaShuLCBzKSwgeWkobiwgcykgKyAxKS5qb2luKFwiXCIpO1xuICAgICAgICB9LCBwbi50cmltRW5kID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgICAgICAgICBpZiAoKHQgPSBVYSh0KSkgJiYgKGkgfHwgZSA9PT0gcikpIHJldHVybiB0LnJlcGxhY2UoTnQsIFwiXCIpO2lmICghdCB8fCAhKGUgPSBOcyhlKSkpIHJldHVybiB0O3ZhciBuID0gTWkodCk7cmV0dXJuIFZzKG4sIDAsIHlpKG4sIE1pKGUpKSArIDEpLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIHBuLnRyaW1TdGFydCA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgaWYgKCh0ID0gVWEodCkpICYmIChpIHx8IGUgPT09IHIpKSByZXR1cm4gdC5yZXBsYWNlKEh0LCBcIlwiKTtpZiAoIXQgfHwgIShlID0gTnMoZSkpKSByZXR1cm4gdDt2YXIgbiA9IE1pKHQpO3JldHVybiBWcyhuLCBiaShuLCBNaShlKSkpLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIHBuLnRydW5jYXRlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IFQsXG4gICAgICAgICAgICAgIG4gPSBJO2lmIChUYShlKSkge1xuICAgICAgICAgICAgdmFyIHMgPSBcInNlcGFyYXRvclwiIGluIGUgPyBlLnNlcGFyYXRvciA6IHM7aSA9IFwibGVuZ3RoXCIgaW4gZSA/IFdhKGUubGVuZ3RoKSA6IGksIG4gPSBcIm9taXNzaW9uXCIgaW4gZSA/IE5zKGUub21pc3Npb24pIDogbjtcbiAgICAgICAgICB9dmFyIG8gPSAodCA9IFVhKHQpKS5sZW5ndGg7aWYgKENpKHQpKSB7XG4gICAgICAgICAgICB2YXIgYSA9IE1pKHQpO28gPSBhLmxlbmd0aDtcbiAgICAgICAgICB9aWYgKGkgPj0gbykgcmV0dXJuIHQ7dmFyIGwgPSBpIC0gamkobik7aWYgKGwgPCAxKSByZXR1cm4gbjt2YXIgdSA9IGEgPyBWcyhhLCAwLCBsKS5qb2luKFwiXCIpIDogdC5zbGljZSgwLCBsKTtpZiAocyA9PT0gcikgcmV0dXJuIHUgKyBuO2lmIChhICYmIChsICs9IHUubGVuZ3RoIC0gbCksIFBhKHMpKSB7XG4gICAgICAgICAgICBpZiAodC5zbGljZShsKS5zZWFyY2gocykpIHtcbiAgICAgICAgICAgICAgdmFyIGMsXG4gICAgICAgICAgICAgICAgICBoID0gdTtmb3IgKHMuZ2xvYmFsIHx8IChzID0gaWUocy5zb3VyY2UsIFVhKCR0LmV4ZWMocykpICsgXCJnXCIpKSwgcy5sYXN0SW5kZXggPSAwOyBjID0gcy5leGVjKGgpOykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYy5pbmRleDtcbiAgICAgICAgICAgICAgfXUgPSB1LnNsaWNlKDAsIGQgPT09IHIgPyBsIDogZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0LmluZGV4T2YoTnMocyksIGwpICE9IGwpIHtcbiAgICAgICAgICAgIHZhciBwID0gdS5sYXN0SW5kZXhPZihzKTtwID4gLTEgJiYgKHUgPSB1LnNsaWNlKDAsIHApKTtcbiAgICAgICAgICB9cmV0dXJuIHUgKyBuO1xuICAgICAgICB9LCBwbi51bmVzY2FwZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuICh0ID0gVWEodCkpICYmIEN0LnRlc3QodCkgPyB0LnJlcGxhY2Uod3QsIFBpKSA6IHQ7XG4gICAgICAgIH0sIHBuLnVuaXF1ZUlkID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9ICsraGU7cmV0dXJuIFVhKHQpICsgZTtcbiAgICAgICAgfSwgcG4udXBwZXJDYXNlID0gd2wsIHBuLnVwcGVyRmlyc3QgPSB4bCwgcG4uZWFjaCA9IFVvLCBwbi5lYWNoUmlnaHQgPSBLbywgcG4uZmlyc3QgPSBibywgT2wocG4sIChWbCA9IHt9LCBZbihwbiwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBjZS5jYWxsKHBuLnByb3RvdHlwZSwgZSkgfHwgKFZsW2VdID0gdCk7XG4gICAgICAgIH0pLCBWbCksIHsgY2hhaW46ICExIH0pLCBwbi5WRVJTSU9OID0gXCI0LjE3LjExXCIsIFllKFtcImJpbmRcIiwgXCJiaW5kS2V5XCIsIFwiY3VycnlcIiwgXCJjdXJyeVJpZ2h0XCIsIFwicGFydGlhbFwiLCBcInBhcnRpYWxSaWdodFwiXSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBwblt0XS5wbGFjZWhvbGRlciA9IHBuO1xuICAgICAgICB9KSwgWWUoW1wiZHJvcFwiLCBcInRha2VcIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdm4ucHJvdG90eXBlW3RdID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGkgPSBpID09PSByID8gMSA6IHFpKFdhKGkpLCAwKTt2YXIgbiA9IHRoaXMuX19maWx0ZXJlZF9fICYmICFlID8gbmV3IHZuKHRoaXMpIDogdGhpcy5jbG9uZSgpO3JldHVybiBuLl9fZmlsdGVyZWRfXyA/IG4uX190YWtlQ291bnRfXyA9IFVpKGksIG4uX190YWtlQ291bnRfXykgOiBuLl9fdmlld3NfXy5wdXNoKHsgc2l6ZTogVWkoaSwgQiksIHR5cGU6IHQgKyAobi5fX2Rpcl9fIDwgMCA/IFwiUmlnaHRcIiA6IFwiXCIpIH0pLCBuO1xuICAgICAgICAgIH0sIHZuLnByb3RvdHlwZVt0ICsgXCJSaWdodFwiXSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbdF0oZSkucmV2ZXJzZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCBZZShbXCJmaWx0ZXJcIiwgXCJtYXBcIiwgXCJ0YWtlV2hpbGVcIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBlICsgMSxcbiAgICAgICAgICAgICAgbiA9IGkgPT0gTSB8fCAzID09IGk7dm4ucHJvdG90eXBlW3RdID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5jbG9uZSgpO3JldHVybiBlLl9faXRlcmF0ZWVzX18ucHVzaCh7IGl0ZXJhdGVlOiBIcih0LCAzKSwgdHlwZTogaSB9KSwgZS5fX2ZpbHRlcmVkX18gPSBlLl9fZmlsdGVyZWRfXyB8fCBuLCBlO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCBZZShbXCJoZWFkXCIsIFwibGFzdFwiXSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IFwidGFrZVwiICsgKGUgPyBcIlJpZ2h0XCIgOiBcIlwiKTt2bi5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tpXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCBZZShbXCJpbml0aWFsXCIsIFwidGFpbFwiXSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSA9IFwiZHJvcFwiICsgKGUgPyBcIlwiIDogXCJSaWdodFwiKTt2bi5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgdm4odGhpcykgOiB0aGlzW2ldKDEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCB2bi5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoamwpO1xuICAgICAgICB9LCB2bi5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHQpLmhlYWQoKTtcbiAgICAgICAgfSwgdm4ucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZCh0KTtcbiAgICAgICAgfSwgdm4ucHJvdG90eXBlLmludm9rZU1hcCA9IHhzKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdCA/IG5ldyB2bih0aGlzKSA6IHRoaXMubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnMoaSwgdCwgZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLCB2bi5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIobGEoSHIodCkpKTtcbiAgICAgICAgfSwgdm4ucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICB0ID0gV2EodCk7dmFyIGkgPSB0aGlzO3JldHVybiBpLl9fZmlsdGVyZWRfXyAmJiAodCA+IDAgfHwgZSA8IDApID8gbmV3IHZuKGkpIDogKHQgPCAwID8gaSA9IGkudGFrZVJpZ2h0KC10KSA6IHQgJiYgKGkgPSBpLmRyb3AodCkpLCBlICE9PSByICYmIChpID0gKGUgPSBXYShlKSkgPCAwID8gaS5kcm9wUmlnaHQoLWUpIDogaS50YWtlKGUgLSB0KSksIGkpO1xuICAgICAgICB9LCB2bi5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUodCkucmV2ZXJzZSgpO1xuICAgICAgICB9LCB2bi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50YWtlKEIpO1xuICAgICAgICB9LCBZbih2bi5wcm90b3R5cGUsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChlKSxcbiAgICAgICAgICAgICAgbiA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QoZSksXG4gICAgICAgICAgICAgIHMgPSBwbltuID8gXCJ0YWtlXCIgKyAoXCJsYXN0XCIgPT0gZSA/IFwiUmlnaHRcIiA6IFwiXCIpIDogZV0sXG4gICAgICAgICAgICAgIG8gPSBuIHx8IC9eZmluZC8udGVzdChlKTtzICYmIChwbi5wcm90b3R5cGVbZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICAgICAgYSA9IG4gPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgbCA9IGUgaW5zdGFuY2VvZiB2bixcbiAgICAgICAgICAgICAgICB1ID0gYVswXSxcbiAgICAgICAgICAgICAgICBjID0gbCB8fCB2YShlKSxcbiAgICAgICAgICAgICAgICBoID0gZnVuY3Rpb24gaCh0KSB7XG4gICAgICAgICAgICAgIHZhciBlID0gcy5hcHBseShwbiwgdGkoW3RdLCBhKSk7cmV0dXJuIG4gJiYgZCA/IGVbMF0gOiBlO1xuICAgICAgICAgICAgfTtjICYmIGkgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiB1ICYmIDEgIT0gdS5sZW5ndGggJiYgKGwgPSBjID0gITEpO3ZhciBkID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICAgICAgcCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZiA9IG8gJiYgIWQsXG4gICAgICAgICAgICAgICAgZyA9IGwgJiYgIXA7aWYgKCFvICYmIGMpIHtcbiAgICAgICAgICAgICAgZSA9IGcgPyBlIDogbmV3IHZuKHRoaXMpO3ZhciBtID0gdC5hcHBseShlLCBhKTtyZXR1cm4gbS5fX2FjdGlvbnNfXy5wdXNoKHsgZnVuYzogem8sIGFyZ3M6IFtoXSwgdGhpc0FyZzogciB9KSwgbmV3IG1uKG0sIGQpO1xuICAgICAgICAgICAgfXJldHVybiBmICYmIGcgPyB0LmFwcGx5KHRoaXMsIGEpIDogKG0gPSB0aGlzLnRocnUoaCksIGYgPyBuID8gbS52YWx1ZSgpWzBdIDogbS52YWx1ZSgpIDogbSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLCBZZShbXCJwb3BcIiwgXCJwdXNoXCIsIFwic2hpZnRcIiwgXCJzb3J0XCIsIFwic3BsaWNlXCIsIFwidW5zaGlmdFwiXSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHJlW3RdLFxuICAgICAgICAgICAgICBpID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KHQpID8gXCJ0YXBcIiA6IFwidGhydVwiLFxuICAgICAgICAgICAgICBuID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdCh0KTtwbi5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cztpZiAobiAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLnZhbHVlKCk7cmV0dXJuIGUuYXBwbHkodmEocykgPyBzIDogW10sIHQpO1xuICAgICAgICAgICAgfXJldHVybiB0aGlzW2ldKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlLmFwcGx5KHZhKGkpID8gaSA6IFtdLCB0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pLCBZbih2bi5wcm90b3R5cGUsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBwbltlXTtpZiAoaSkge1xuICAgICAgICAgICAgdmFyIG4gPSBpLm5hbWUgKyBcIlwiOyhzbltuXSB8fCAoc25bbl0gPSBbXSkpLnB1c2goeyBuYW1lOiBlLCBmdW5jOiBpIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIHNuW3ByKHIsIF8pLm5hbWVdID0gW3sgbmFtZTogXCJ3cmFwcGVyXCIsIGZ1bmM6IHIgfV0sIHZuLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdCA9IG5ldyB2bih0aGlzLl9fd3JhcHBlZF9fKTtyZXR1cm4gdC5fX2FjdGlvbnNfXyA9IGlyKHRoaXMuX19hY3Rpb25zX18pLCB0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX18sIHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX18sIHQuX19pdGVyYXRlZXNfXyA9IGlyKHRoaXMuX19pdGVyYXRlZXNfXyksIHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXywgdC5fX3ZpZXdzX18gPSBpcih0aGlzLl9fdmlld3NfXyksIHQ7XG4gICAgICAgIH0sIHZuLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICAgICAgdmFyIHQgPSBuZXcgdm4odGhpcyk7dC5fX2Rpcl9fID0gLTEsIHQuX19maWx0ZXJlZF9fID0gITA7XG4gICAgICAgICAgfSBlbHNlICh0ID0gdGhpcy5jbG9uZSgpKS5fX2Rpcl9fICo9IC0xO3JldHVybiB0O1xuICAgICAgICB9LCB2bi5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgICAgIGUgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgICAgIGkgPSB2YSh0KSxcbiAgICAgICAgICAgICAgbiA9IGUgPCAwLFxuICAgICAgICAgICAgICBzID0gaSA/IHQubGVuZ3RoIDogMCxcbiAgICAgICAgICAgICAgciA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHMgPSBpLmxlbmd0aDsgKytuIDwgczspIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBpW25dLFxuICAgICAgICAgICAgICAgICAgbyA9IHIuc2l6ZTtzd2l0Y2ggKHIudHlwZSkge2Nhc2UgXCJkcm9wXCI6XG4gICAgICAgICAgICAgICAgICB0ICs9IG87YnJlYWs7Y2FzZSBcImRyb3BSaWdodFwiOlxuICAgICAgICAgICAgICAgICAgZSAtPSBvO2JyZWFrO2Nhc2UgXCJ0YWtlXCI6XG4gICAgICAgICAgICAgICAgICBlID0gVWkoZSwgdCArIG8pO2JyZWFrO2Nhc2UgXCJ0YWtlUmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgIHQgPSBxaSh0LCBlIC0gbyk7fVxuICAgICAgICAgICAgfXJldHVybiB7IHN0YXJ0OiB0LCBlbmQ6IGUgfTtcbiAgICAgICAgICB9KDAsIHMsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICAgICAgbyA9IHIuc3RhcnQsXG4gICAgICAgICAgICAgIGEgPSByLmVuZCxcbiAgICAgICAgICAgICAgbCA9IGEgLSBvLFxuICAgICAgICAgICAgICB1ID0gbiA/IGEgOiBvIC0gMSxcbiAgICAgICAgICAgICAgYyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICAgICAgaCA9IGMubGVuZ3RoLFxuICAgICAgICAgICAgICBkID0gMCxcbiAgICAgICAgICAgICAgcCA9IFVpKGwsIHRoaXMuX190YWtlQ291bnRfXyk7aWYgKCFpIHx8ICFuICYmIHMgPT0gbCAmJiBwID09IGwpIHJldHVybiBXcyh0LCB0aGlzLl9fYWN0aW9uc19fKTt2YXIgZiA9IFtdO3Q6IGZvciAoOyBsLS0gJiYgZCA8IHA7KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBnID0gLTEsIG0gPSB0W3UgKz0gZV07ICsrZyA8IGg7KSB7XG4gICAgICAgICAgICAgIHZhciB2ID0gY1tnXSxcbiAgICAgICAgICAgICAgICAgIF8gPSB2Lml0ZXJhdGVlLFxuICAgICAgICAgICAgICAgICAgYiA9IHYudHlwZSxcbiAgICAgICAgICAgICAgICAgIHkgPSBfKG0pO2lmIChiID09IFApIG0gPSB5O2Vsc2UgaWYgKCF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGIgPT0gTSkgY29udGludWUgdDticmVhayB0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZltkKytdID0gbTtcbiAgICAgICAgICB9cmV0dXJuIGY7XG4gICAgICAgIH0sIHBuLnByb3RvdHlwZS5hdCA9IFdvLCBwbi5wcm90b3R5cGUuY2hhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIExvKHRoaXMpO1xuICAgICAgICB9LCBwbi5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgbW4odGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICAgIH0sIHBuLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuX192YWx1ZXNfXyA9PT0gciAmJiAodGhpcy5fX3ZhbHVlc19fID0gTGEodGhpcy52YWx1ZSgpKSk7dmFyIHQgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoO3JldHVybiB7IGRvbmU6IHQsIHZhbHVlOiB0ID8gciA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXSB9O1xuICAgICAgICB9LCBwbi5wcm90b3R5cGUucGxhbnQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGZvciAodmFyIGUsIGkgPSB0aGlzOyBpIGluc3RhbmNlb2YgZ247KSB7XG4gICAgICAgICAgICB2YXIgbiA9IGhvKGkpO24uX19pbmRleF9fID0gMCwgbi5fX3ZhbHVlc19fID0gciwgZSA/IHMuX193cmFwcGVkX18gPSBuIDogZSA9IG47dmFyIHMgPSBuO2kgPSBpLl9fd3JhcHBlZF9fO1xuICAgICAgICAgIH1yZXR1cm4gcy5fX3dyYXBwZWRfXyA9IHQsIGU7XG4gICAgICAgIH0sIHBuLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB0ID0gdGhpcy5fX3dyYXBwZWRfXztpZiAodCBpbnN0YW5jZW9mIHZuKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQ7cmV0dXJuIHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoICYmIChlID0gbmV3IHZuKHRoaXMpKSwgKGUgPSBlLnJldmVyc2UoKSkuX19hY3Rpb25zX18ucHVzaCh7IGZ1bmM6IHpvLCBhcmdzOiBbVG9dLCB0aGlzQXJnOiByIH0pLCBuZXcgbW4oZSwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgICAgIH1yZXR1cm4gdGhpcy50aHJ1KFRvKTtcbiAgICAgICAgfSwgcG4ucHJvdG90eXBlLnRvSlNPTiA9IHBuLnByb3RvdHlwZS52YWx1ZU9mID0gcG4ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBXcyh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgICAgfSwgcG4ucHJvdG90eXBlLmZpcnN0ID0gcG4ucHJvdG90eXBlLmhlYWQsIEZlICYmIChwbi5wcm90b3R5cGVbRmVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9KSwgcG47XG4gICAgICB9KCk7RWUuXyA9IEVpLCAocyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEVpO1xuICAgICAgfS5jYWxsKGUsIGksIGUsIG4pKSA9PT0gciB8fCAobi5leHBvcnRzID0gcyk7XG4gICAgfSkuY2FsbCh0aGlzKTtcbiAgfSkuY2FsbCh0aGlzLCBpKDE1KSwgaSgxNikodCkpO1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgdmFyIG4gPSBpKDApO3QuZXhwb3J0cyA9IHsgZ2V0anNvbmRhdGE6IGZ1bmN0aW9uIGdldGpzb25kYXRhKHQsIGUpIHtcbiAgICAgIGlmICghdCkgcmV0dXJuICExO24uYWpheCh7IGFzeW5jOiAhMCwgdHlwZTogXCJnZXRcIiwgZGF0YVR5cGU6IFwianNvbnBcIiwgdXJsOiB0LCBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKHQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlYXJjaCBEZXRhbGogYXJyYW5nZW1hbmcgaMOkbXRhdDogXCIpLCBlKHQpO1xuICAgICAgICB9LCBlcnJvcjogZnVuY3Rpb24gZXJyb3IodCwgZSwgaSkge1xuICAgICAgICAgIGFsZXJ0KFwiTsOldHQgYmxldiBmZWwgdmlkIGjDpG10bmluZyBhdiBhcnJhbmdlbWFuZyFcIik7XG4gICAgICAgIH0gfSk7XG4gICAgfSwgcG9zdGpzb25kYXRhOiBmdW5jdGlvbiBwb3N0anNvbmRhdGEodCwgZSwgaSkge1xuICAgICAgaWYgKCF0KSByZXR1cm4gITE7bi5hamF4KHsgYXN5bmM6ICEwLCB0eXBlOiBcInBvc3RcIiwgdXJsOiB0LCBkYXRhOiBlLCBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKHQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkjDpG10YXIgRGF0YTogXCIpLCBpKHQpO1xuICAgICAgICB9LCBlcnJvcjogZnVuY3Rpb24gZXJyb3IodCwgZSwgaSkge1xuICAgICAgICAgIGFsZXJ0KFwiTsOldHQgYmxldiBmZWwgdmlkIGjDpG10bmluZyBhdiBQT1NUIGpzb24hXCIpO1xuICAgICAgICB9IH0pO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIHZhciBuID0gaSgwKTt0LmV4cG9ydHMgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQodCkge1xuICAgICAgdGhpcy5jYWNoZURvbSh0KSwgdGhpcy5CaW5kRXZlbnQoKSwgdGhpcy5TZXR0aW5ncygpO1xuICAgIH0sIGNhY2hlRG9tOiBmdW5jdGlvbiBjYWNoZURvbSh0KSB7XG4gICAgICB0aGlzLiRjbWRNZW55T3BlbiA9IG4oXCIua2tfYmJfb3BlblwiICsgdCk7XG4gICAgfSwgQmluZEV2ZW50OiBmdW5jdGlvbiBCaW5kRXZlbnQoKSB7fSwgU2V0dGluZ3M6IGZ1bmN0aW9uIFNldHRpbmdzKCkge1xuICAgICAgdGhpcy4kY21kTWVueU9wZW4uYWRkQ2xhc3MoXCJiYl9hal92YWxkbWVueVwiKTtcbiAgICB9IH07XG59LCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICB2YXIgbiA9IGkoMCksXG4gICAgICBzID0gKGkoMSksIGkoMTcpKTt0LmV4cG9ydHMgPSB7IGluamVjdGh0bWx0ZW1wbGF0ZTogZnVuY3Rpb24gaW5qZWN0aHRtbHRlbXBsYXRlKHQsIGUsIGksIHIpIHtcbiAgICAgIHMuaW5pdCgpLCBuLmdldChlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgcyA9IEhhbmRsZWJhcnMuY29tcGlsZShlKTtuKHQpLmh0bWwocyhpKSksIHIoKTtcbiAgICAgIH0sIFwiaHRtbFwiKTtcbiAgICB9LCByZXR1cm5odG1sdGVtcGxhdGU6IGZ1bmN0aW9uIHJldHVybmh0bWx0ZW1wbGF0ZSh0LCBlLCBpKSB7XG4gICAgICBzLmluaXQoKSwgbi5nZXQodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIG4gPSBIYW5kbGViYXJzLmNvbXBpbGUodCk7aShuKGUpKTtcbiAgICAgIH0sIFwiaHRtbFwiKTtcbiAgICB9IH07XG59LCBmdW5jdGlvbiAodCwgZSkge1xuICB0LmV4cG9ydHMgPSB7IGNhbGxFdmVudHM6IHsgZXZlbnRzOiB7fSwgb246IGZ1bmN0aW9uIG9uKHQsIGUpIHtcbiAgICAgICAgdGhpcy5ldmVudHNbdF0gPSB0aGlzLmV2ZW50c1t0XSB8fCBbXSwgdGhpcy5ldmVudHNbdF0ucHVzaChlKTtcbiAgICAgIH0sIG9mZjogZnVuY3Rpb24gb2ZmKHQsIGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzW3RdKSBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzW3RdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZXZlbnRzW3RdW2ldID09PSBlKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0XS5zcGxpY2UoaSwgMSk7YnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBlbWl0OiBmdW5jdGlvbiBlbWl0KHQsIGUpIHtcbiAgICAgICAgdGhpcy5ldmVudHNbdF0gJiYgdGhpcy5ldmVudHNbdF0uZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHQoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSB9IH07XG59LCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICB2YXIgbiA9IGkoMCk7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHRoaXMuY2FjaGVEb20odCksIHRoaXMuYmluZEV2ZW50KCksIHRoaXMucmVuZGVyKCk7XG4gICAgfSwgY2FjaGVEb206IGZ1bmN0aW9uIGNhY2hlRG9tKHQpIHtcbiAgICAgIHRoaXMuJGJiX2FqX2NtZEFkZCA9IG4oXCIjYmJfYWpfY21kQWRkX1wiICsgdCksIHRoaXMuJGJiX2FqX2NtZFNldHRpbmcgPSBuKFwiI2JiX2FqX2NtZFNldHRpbmdfXCIgKyB0KSwgdGhpcy4kYmJfYWpfQ29udGFpbmVyID0gbihcIi5iYl9hal9Db250YWluZXJcIiksIHRoaXMuJGJiX2FqX0FkZENvbnRhaW5lciA9IG4oXCIuYmJfYWpfQWRkQ29udGFpbmVyX1wiICsgdCksIHRoaXMuJGJiX2FqX1NldHRpbmdzQ29udGFpbmVyID0gbihcIi5iYl9hal9TZXR0aW5nc0NvbnRhaW5lcl9cIiArIHQpLCB0aGlzLiRiYl9hal9jbWRDbG9zZSA9IG4oXCIuYmJfYWpfQ2xvc2VDb250YWluZXJcIik7XG4gICAgfSwgYmluZEV2ZW50OiBmdW5jdGlvbiBiaW5kRXZlbnQoKSB7XG4gICAgICB0aGlzLiRiYl9hal9jbWRBZGQub24oXCJjbGlja1wiLCB0aGlzLmFkZGJveGJlaGF2aW9yLmJpbmQodGhpcykpLCB0aGlzLiRiYl9hal9jbWRTZXR0aW5nLm9uKFwiY2xpY2tcIiwgdGhpcy5zZXR0aW5nc2JveGJlaGF2aW9yLmJpbmQodGhpcykpLCB0aGlzLiRiYl9hal9jbWRDbG9zZS5vbihcImNsaWNrXCIsIHRoaXMuY2xvc2Vib3hiZWhhdmlvci5iaW5kKHRoaXMpKTtcbiAgICB9LCByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHRoaXMuJGJiX2FqX0NvbnRhaW5lci5oaWRlKCk7XG4gICAgfSwgYWRkYm94YmVoYXZpb3I6IGZ1bmN0aW9uIGFkZGJveGJlaGF2aW9yKCkge1xuICAgICAgdGhpcy4kYmJfYWpfQWRkQ29udGFpbmVyLnNsaWRlVG9nZ2xlKDUwMCksIHRoaXMuJGJiX2FqX1NldHRpbmdzQ29udGFpbmVyLmlzKFwiOnZpc2libGVcIikgJiYgdGhpcy4kYmJfYWpfU2V0dGluZ3NDb250YWluZXIuaGlkZSg1MDApO1xuICAgIH0sIHNldHRpbmdzYm94YmVoYXZpb3I6IGZ1bmN0aW9uIHNldHRpbmdzYm94YmVoYXZpb3IoKSB7XG4gICAgICB0aGlzLiRiYl9hal9TZXR0aW5nc0NvbnRhaW5lci5zbGlkZVRvZ2dsZSg1MDApLCB0aGlzLiRiYl9hal9BZGRDb250YWluZXIuaXMoXCI6dmlzaWJsZVwiKSAmJiB0aGlzLiRiYl9hal9BZGRDb250YWluZXIuaGlkZSg1MDApO1xuICAgIH0sIGNsb3NlYm94YmVoYXZpb3I6IGZ1bmN0aW9uIGNsb3NlYm94YmVoYXZpb3IoKSB7XG4gICAgICB0aGlzLiRiYl9hal9Db250YWluZXIuaGlkZSg1MDApO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBuKSB7XG4gIChmdW5jdGlvbiAoZSkge1xuICAgIHZhciBzID0gbigxKTt0LmV4cG9ydHMgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7fSwgSGVscGVyc2V0U2VsZWN0ZWRJbmRleDogZnVuY3Rpb24gSGVscGVyc2V0U2VsZWN0ZWRJbmRleCh0LCBlKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0Lm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodC5vcHRpb25zW2ldLnZhbHVlID09IGUpIHtcbiAgICAgICAgICAgIHQub3B0aW9uc1tpXS5zZWxlY3RlZCA9ICEwO2JyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgZ2V0aW1hZ2VIZWxwZXI6IGZ1bmN0aW9uIGdldGltYWdlSGVscGVyKHQpIHtcbiAgICAgICAgdmFyIGkgPSBzLnNrcml2Ym9raW1hZ2VzLFxuICAgICAgICAgICAgbiA9IGkuY2F0aW1hZ2VzcmMsXG4gICAgICAgICAgICByID0gZS5maW5kKG4sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGUuY2F0aWQgPT0gdDtcbiAgICAgICAgfSk7cmV0dXJuIHIgfHwgKHIgPSBlLmZpbmQobiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gMCA9PSB0LmNhdGlkO1xuICAgICAgICB9KSksIGkuY2F0aW1nYmFzZSArIHIuaW1nc3JjO1xuICAgICAgfSwgaHRtbGVuY29kZXJIZWxwZXI6IGZ1bmN0aW9uIGh0bWxlbmNvZGVySGVscGVyKHQpIHtcbiAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7cmV0dXJuIGUuaW5uZXJIVE1MID0gdCwgZS52YWx1ZTtcbiAgICAgIH0sIHJlbW92ZUNsYXNzU3RhcnRpbmdXaXRoOiBmdW5jdGlvbiByZW1vdmVDbGFzc1N0YXJ0aW5nV2l0aCh0LCBlKSB7XG4gICAgICAgIHQucmVtb3ZlQ2xhc3MoZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICByZXR1cm4gKGkubWF0Y2gobmV3IFJlZ0V4cChcIlxcXFxiXCIgKyBlICsgXCJcXFxcUytcIiwgXCJnXCIpKSB8fCBbXSkuam9pbihcIiBcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSB9O1xuICB9KS5jYWxsKHRoaXMsIG4oMikpO1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgdmFyIG4sIHMsIHI7XG4gIC8qISBqUXVlcnkgVUkgLSB2MS4xMi4xIC0gMjAxNi0wOS0xNFxuICAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAgKiBJbmNsdWRlczogd2lkZ2V0LmpzLCBwb3NpdGlvbi5qcywgZGF0YS5qcywgZGlzYWJsZS1zZWxlY3Rpb24uanMsIGVmZmVjdC5qcywgZWZmZWN0cy9lZmZlY3QtYmxpbmQuanMsIGVmZmVjdHMvZWZmZWN0LWJvdW5jZS5qcywgZWZmZWN0cy9lZmZlY3QtY2xpcC5qcywgZWZmZWN0cy9lZmZlY3QtZHJvcC5qcywgZWZmZWN0cy9lZmZlY3QtZXhwbG9kZS5qcywgZWZmZWN0cy9lZmZlY3QtZmFkZS5qcywgZWZmZWN0cy9lZmZlY3QtZm9sZC5qcywgZWZmZWN0cy9lZmZlY3QtaGlnaGxpZ2h0LmpzLCBlZmZlY3RzL2VmZmVjdC1wdWZmLmpzLCBlZmZlY3RzL2VmZmVjdC1wdWxzYXRlLmpzLCBlZmZlY3RzL2VmZmVjdC1zY2FsZS5qcywgZWZmZWN0cy9lZmZlY3Qtc2hha2UuanMsIGVmZmVjdHMvZWZmZWN0LXNpemUuanMsIGVmZmVjdHMvZWZmZWN0LXNsaWRlLmpzLCBlZmZlY3RzL2VmZmVjdC10cmFuc2Zlci5qcywgZm9jdXNhYmxlLmpzLCBmb3JtLXJlc2V0LW1peGluLmpzLCBqcXVlcnktMS03LmpzLCBrZXljb2RlLmpzLCBsYWJlbHMuanMsIHNjcm9sbC1wYXJlbnQuanMsIHRhYmJhYmxlLmpzLCB1bmlxdWUtaWQuanMsIHdpZGdldHMvYWNjb3JkaW9uLmpzLCB3aWRnZXRzL2F1dG9jb21wbGV0ZS5qcywgd2lkZ2V0cy9idXR0b24uanMsIHdpZGdldHMvY2hlY2tib3hyYWRpby5qcywgd2lkZ2V0cy9jb250cm9sZ3JvdXAuanMsIHdpZGdldHMvZGF0ZXBpY2tlci5qcywgd2lkZ2V0cy9kaWFsb2cuanMsIHdpZGdldHMvZHJhZ2dhYmxlLmpzLCB3aWRnZXRzL2Ryb3BwYWJsZS5qcywgd2lkZ2V0cy9tZW51LmpzLCB3aWRnZXRzL21vdXNlLmpzLCB3aWRnZXRzL3Byb2dyZXNzYmFyLmpzLCB3aWRnZXRzL3Jlc2l6YWJsZS5qcywgd2lkZ2V0cy9zZWxlY3RhYmxlLmpzLCB3aWRnZXRzL3NlbGVjdG1lbnUuanMsIHdpZGdldHMvc2xpZGVyLmpzLCB3aWRnZXRzL3NvcnRhYmxlLmpzLCB3aWRnZXRzL3NwaW5uZXIuanMsIHdpZGdldHMvdGFicy5qcywgd2lkZ2V0cy90b29sdGlwLmpzXG4gICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnM7IExpY2Vuc2VkIE1JVCAqL3MgPSBbaSgwKV0sIHZvaWQgMCA9PT0gKHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChuID0gZnVuY3Rpb24gbih0KSB7XG4gICAgdC51aSA9IHQudWkgfHwge30sIHQudWkudmVyc2lvbiA9IFwiMS4xMi4xXCI7dmFyIGUsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBuID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICAgIC8qIVxuICAgICAqIGpRdWVyeSBVSSBXaWRnZXQgMS4xMi4xXG4gICAgICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAgICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgICAqL3QuY2xlYW5EYXRhID0gKGUgPSB0LmNsZWFuRGF0YSwgZnVuY3Rpb24gKGkpIHtcbiAgICAgIHZhciBuLCBzLCByO2ZvciAociA9IDA7IG51bGwgIT0gKHMgPSBpW3JdKTsgcisrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgKG4gPSB0Ll9kYXRhKHMsIFwiZXZlbnRzXCIpKSAmJiBuLnJlbW92ZSAmJiB0KHMpLnRyaWdnZXJIYW5kbGVyKFwicmVtb3ZlXCIpO1xuICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgfWUoaSk7XG4gICAgfSksIHQud2lkZ2V0ID0gZnVuY3Rpb24gKGUsIGksIG4pIHtcbiAgICAgIHZhciBzLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgbyxcbiAgICAgICAgICBhID0ge30sXG4gICAgICAgICAgbCA9IGUuc3BsaXQoXCIuXCIpWzBdO2UgPSBlLnNwbGl0KFwiLlwiKVsxXTt2YXIgdSA9IGwgKyBcIi1cIiArIGU7cmV0dXJuIG4gfHwgKG4gPSBpLCBpID0gdC5XaWRnZXQpLCB0LmlzQXJyYXkobikgJiYgKG4gPSB0LmV4dGVuZC5hcHBseShudWxsLCBbe31dLmNvbmNhdChuKSkpLCB0LmV4cHJbXCI6XCJdW3UudG9Mb3dlckNhc2UoKV0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gISF0LmRhdGEoZSwgdSk7XG4gICAgICB9LCB0W2xdID0gdFtsXSB8fCB7fSwgcyA9IHRbbF1bZV0sIHIgPSB0W2xdW2VdID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jcmVhdGVXaWRnZXQpIHJldHVybiBuZXcgcih0LCBlKTthcmd1bWVudHMubGVuZ3RoICYmIHRoaXMuX2NyZWF0ZVdpZGdldCh0LCBlKTtcbiAgICAgIH0sIHQuZXh0ZW5kKHIsIHMsIHsgdmVyc2lvbjogbi52ZXJzaW9uLCBfcHJvdG86IHQuZXh0ZW5kKHt9LCBuKSwgX2NoaWxkQ29uc3RydWN0b3JzOiBbXSB9KSwgKG8gPSBuZXcgaSgpKS5vcHRpb25zID0gdC53aWRnZXQuZXh0ZW5kKHt9LCBvLm9wdGlvbnMpLCB0LmVhY2gobiwgZnVuY3Rpb24gKGUsIG4pIHtcbiAgICAgICAgdC5pc0Z1bmN0aW9uKG4pID8gYVtlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmdW5jdGlvbiB0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGkucHJvdG90eXBlW2VdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfWZ1bmN0aW9uIHModCkge1xuICAgICAgICAgICAgcmV0dXJuIGkucHJvdG90eXBlW2VdLmFwcGx5KHRoaXMsIHQpO1xuICAgICAgICAgIH1yZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgaSA9IHRoaXMuX3N1cGVyLFxuICAgICAgICAgICAgICAgIHIgPSB0aGlzLl9zdXBlckFwcGx5O3JldHVybiB0aGlzLl9zdXBlciA9IHQsIHRoaXMuX3N1cGVyQXBwbHkgPSBzLCBlID0gbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0aGlzLl9zdXBlciA9IGksIHRoaXMuX3N1cGVyQXBwbHkgPSByLCBlO1xuICAgICAgICAgIH07XG4gICAgICAgIH0oKSA6IGFbZV0gPSBuO1xuICAgICAgfSksIHIucHJvdG90eXBlID0gdC53aWRnZXQuZXh0ZW5kKG8sIHsgd2lkZ2V0RXZlbnRQcmVmaXg6IHMgJiYgby53aWRnZXRFdmVudFByZWZpeCB8fCBlIH0sIGEsIHsgY29uc3RydWN0b3I6IHIsIG5hbWVzcGFjZTogbCwgd2lkZ2V0TmFtZTogZSwgd2lkZ2V0RnVsbE5hbWU6IHUgfSksIHMgPyAodC5lYWNoKHMuX2NoaWxkQ29uc3RydWN0b3JzLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IGkucHJvdG90eXBlO3Qud2lkZ2V0KG4ubmFtZXNwYWNlICsgXCIuXCIgKyBuLndpZGdldE5hbWUsIHIsIGkuX3Byb3RvKTtcbiAgICAgIH0pLCBkZWxldGUgcy5fY2hpbGRDb25zdHJ1Y3RvcnMpIDogaS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaChyKSwgdC53aWRnZXQuYnJpZGdlKGUsIHIpLCByO1xuICAgIH0sIHQud2lkZ2V0LmV4dGVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBmb3IgKHZhciBpLCBzLCByID0gbi5jYWxsKGFyZ3VtZW50cywgMSksIG8gPSAwLCBhID0gci5sZW5ndGg7IG8gPCBhOyBvKyspIHtcbiAgICAgICAgZm9yIChpIGluIHJbb10pIHtcbiAgICAgICAgICBzID0gcltvXVtpXSwgcltvXS5oYXNPd25Qcm9wZXJ0eShpKSAmJiB2b2lkIDAgIT09IHMgJiYgKHQuaXNQbGFpbk9iamVjdChzKSA/IGVbaV0gPSB0LmlzUGxhaW5PYmplY3QoZVtpXSkgPyB0LndpZGdldC5leHRlbmQoe30sIGVbaV0sIHMpIDogdC53aWRnZXQuZXh0ZW5kKHt9LCBzKSA6IGVbaV0gPSBzKTtcbiAgICAgICAgfVxuICAgICAgfXJldHVybiBlO1xuICAgIH0sIHQud2lkZ2V0LmJyaWRnZSA9IGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICB2YXIgcyA9IGkucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lIHx8IGU7dC5mbltlXSA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHZhciBvID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgcixcbiAgICAgICAgICAgIGEgPSBuLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSB0aGlzO3JldHVybiBvID8gdGhpcy5sZW5ndGggfHwgXCJpbnN0YW5jZVwiICE9PSByID8gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgbiA9IHQuZGF0YSh0aGlzLCBzKTtyZXR1cm4gXCJpbnN0YW5jZVwiID09PSByID8gKGwgPSBuLCAhMSkgOiBuID8gdC5pc0Z1bmN0aW9uKG5bcl0pICYmIFwiX1wiICE9PSByLmNoYXJBdCgwKSA/IChpID0gbltyXS5hcHBseShuLCBhKSkgIT09IG4gJiYgdm9pZCAwICE9PSBpID8gKGwgPSBpICYmIGkuanF1ZXJ5ID8gbC5wdXNoU3RhY2soaS5nZXQoKSkgOiBpLCAhMSkgOiB2b2lkIDAgOiB0LmVycm9yKFwibm8gc3VjaCBtZXRob2QgJ1wiICsgciArIFwiJyBmb3IgXCIgKyBlICsgXCIgd2lkZ2V0IGluc3RhbmNlXCIpIDogdC5lcnJvcihcImNhbm5vdCBjYWxsIG1ldGhvZHMgb24gXCIgKyBlICsgXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IGF0dGVtcHRlZCB0byBjYWxsIG1ldGhvZCAnXCIgKyByICsgXCInXCIpO1xuICAgICAgICB9KSA6IGwgPSB2b2lkIDAgOiAoYS5sZW5ndGggJiYgKHIgPSB0LndpZGdldC5leHRlbmQuYXBwbHkobnVsbCwgW3JdLmNvbmNhdChhKSkpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdC5kYXRhKHRoaXMsIHMpO2UgPyAoZS5vcHRpb24ociB8fCB7fSksIGUuX2luaXQgJiYgZS5faW5pdCgpKSA6IHQuZGF0YSh0aGlzLCBzLCBuZXcgaShyLCB0aGlzKSk7XG4gICAgICAgIH0pKSwgbDtcbiAgICAgIH07XG4gICAgfSwgdC5XaWRnZXQgPSBmdW5jdGlvbiAoKSB7fSwgdC5XaWRnZXQuX2NoaWxkQ29uc3RydWN0b3JzID0gW10sIHQuV2lkZ2V0LnByb3RvdHlwZSA9IHsgd2lkZ2V0TmFtZTogXCJ3aWRnZXRcIiwgd2lkZ2V0RXZlbnRQcmVmaXg6IFwiXCIsIGRlZmF1bHRFbGVtZW50OiBcIjxkaXY+XCIsIG9wdGlvbnM6IHsgY2xhc3Nlczoge30sIGRpc2FibGVkOiAhMSwgY3JlYXRlOiBudWxsIH0sIF9jcmVhdGVXaWRnZXQ6IGZ1bmN0aW9uIF9jcmVhdGVXaWRnZXQoZSwgbikge1xuICAgICAgICBuID0gdChuIHx8IHRoaXMuZGVmYXVsdEVsZW1lbnQgfHwgdGhpcylbMF0sIHRoaXMuZWxlbWVudCA9IHQobiksIHRoaXMudXVpZCA9IGkrKywgdGhpcy5ldmVudE5hbWVzcGFjZSA9IFwiLlwiICsgdGhpcy53aWRnZXROYW1lICsgdGhpcy51dWlkLCB0aGlzLmJpbmRpbmdzID0gdCgpLCB0aGlzLmhvdmVyYWJsZSA9IHQoKSwgdGhpcy5mb2N1c2FibGUgPSB0KCksIHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAgPSB7fSwgbiAhPT0gdGhpcyAmJiAodC5kYXRhKG4sIHRoaXMud2lkZ2V0RnVsbE5hbWUsIHRoaXMpLCB0aGlzLl9vbighMCwgdGhpcy5lbGVtZW50LCB7IHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHQpIHtcbiAgICAgICAgICAgIHQudGFyZ2V0ID09PSBuICYmIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgIH0gfSksIHRoaXMuZG9jdW1lbnQgPSB0KG4uc3R5bGUgPyBuLm93bmVyRG9jdW1lbnQgOiBuLmRvY3VtZW50IHx8IG4pLCB0aGlzLndpbmRvdyA9IHQodGhpcy5kb2N1bWVudFswXS5kZWZhdWx0VmlldyB8fCB0aGlzLmRvY3VtZW50WzBdLnBhcmVudFdpbmRvdykpLCB0aGlzLm9wdGlvbnMgPSB0LndpZGdldC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgdGhpcy5fZ2V0Q3JlYXRlT3B0aW9ucygpLCBlKSwgdGhpcy5fY3JlYXRlKCksIHRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiB0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCh0aGlzLm9wdGlvbnMuZGlzYWJsZWQpLCB0aGlzLl90cmlnZ2VyKFwiY3JlYXRlXCIsIG51bGwsIHRoaXMuX2dldENyZWF0ZUV2ZW50RGF0YSgpKSwgdGhpcy5faW5pdCgpO1xuICAgICAgfSwgX2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uIF9nZXRDcmVhdGVPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9LCBfZ2V0Q3JlYXRlRXZlbnREYXRhOiB0Lm5vb3AsIF9jcmVhdGU6IHQubm9vcCwgX2luaXQ6IHQubm9vcCwgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO3RoaXMuX2Rlc3Ryb3koKSwgdC5lYWNoKHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAsIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgZS5fcmVtb3ZlQ2xhc3MoaSwgdCk7XG4gICAgICAgIH0pLCB0aGlzLmVsZW1lbnQub2ZmKHRoaXMuZXZlbnROYW1lc3BhY2UpLnJlbW92ZURhdGEodGhpcy53aWRnZXRGdWxsTmFtZSksIHRoaXMud2lkZ2V0KCkub2ZmKHRoaXMuZXZlbnROYW1lc3BhY2UpLnJlbW92ZUF0dHIoXCJhcmlhLWRpc2FibGVkXCIpLCB0aGlzLmJpbmRpbmdzLm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKTtcbiAgICAgIH0sIF9kZXN0cm95OiB0Lm5vb3AsIHdpZGdldDogZnVuY3Rpb24gd2lkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgICAgfSwgb3B0aW9uOiBmdW5jdGlvbiBvcHRpb24oZSwgaSkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyA9IGU7aWYgKDAgPT09IGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0LndpZGdldC5leHRlbmQoe30sIHRoaXMub3B0aW9ucyk7aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIGlmIChvID0ge30sIG4gPSBlLnNwbGl0KFwiLlwiKSwgZSA9IG4uc2hpZnQoKSwgbi5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKHMgPSBvW2VdID0gdC53aWRnZXQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnNbZV0pLCByID0gMDsgciA8IG4ubGVuZ3RoIC0gMTsgcisrKSB7XG4gICAgICAgICAgICBzW25bcl1dID0gc1tuW3JdXSB8fCB7fSwgcyA9IHNbbltyXV07XG4gICAgICAgICAgfWlmIChlID0gbi5wb3AoKSwgMSA9PT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZvaWQgMCA9PT0gc1tlXSA/IG51bGwgOiBzW2VdO3NbZV0gPSBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgxID09PSBhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdm9pZCAwID09PSB0aGlzLm9wdGlvbnNbZV0gPyBudWxsIDogdGhpcy5vcHRpb25zW2VdO29bZV0gPSBpO1xuICAgICAgICB9cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMobyksIHRoaXM7XG4gICAgICB9LCBfc2V0T3B0aW9uczogZnVuY3Rpb24gX3NldE9wdGlvbnModCkge1xuICAgICAgICB2YXIgZTtmb3IgKGUgaW4gdCkge1xuICAgICAgICAgIHRoaXMuX3NldE9wdGlvbihlLCB0W2VdKTtcbiAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIHJldHVybiBcImNsYXNzZXNcIiA9PT0gdCAmJiB0aGlzLl9zZXRPcHRpb25DbGFzc2VzKGUpLCB0aGlzLm9wdGlvbnNbdF0gPSBlLCBcImRpc2FibGVkXCIgPT09IHQgJiYgdGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoZSksIHRoaXM7XG4gICAgICB9LCBfc2V0T3B0aW9uQ2xhc3NlczogZnVuY3Rpb24gX3NldE9wdGlvbkNsYXNzZXMoZSkge1xuICAgICAgICB2YXIgaSwgbiwgcztmb3IgKGkgaW4gZSkge1xuICAgICAgICAgIHMgPSB0aGlzLmNsYXNzZXNFbGVtZW50TG9va3VwW2ldLCBlW2ldICE9PSB0aGlzLm9wdGlvbnMuY2xhc3Nlc1tpXSAmJiBzICYmIHMubGVuZ3RoICYmIChuID0gdChzLmdldCgpKSwgdGhpcy5fcmVtb3ZlQ2xhc3MocywgaSksIG4uYWRkQ2xhc3ModGhpcy5fY2xhc3Nlcyh7IGVsZW1lbnQ6IG4sIGtleXM6IGksIGNsYXNzZXM6IGUsIGFkZDogITAgfSkpKTtcbiAgICAgICAgfVxuICAgICAgfSwgX3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiBfc2V0T3B0aW9uRGlzYWJsZWQodCkge1xuICAgICAgICB0aGlzLl90b2dnbGVDbGFzcyh0aGlzLndpZGdldCgpLCB0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWRcIiwgbnVsbCwgISF0KSwgdCAmJiAodGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5ob3ZlcmFibGUsIG51bGwsIFwidWktc3RhdGUtaG92ZXJcIiksIHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuZm9jdXNhYmxlLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIpKTtcbiAgICAgIH0sIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0T3B0aW9ucyh7IGRpc2FibGVkOiAhMSB9KTtcbiAgICAgIH0sIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXRPcHRpb25zKHsgZGlzYWJsZWQ6ICEwIH0pO1xuICAgICAgfSwgX2NsYXNzZXM6IGZ1bmN0aW9uIF9jbGFzc2VzKGUpIHtcbiAgICAgICAgdmFyIGkgPSBbXSxcbiAgICAgICAgICAgIG4gPSB0aGlzO2Z1bmN0aW9uIHMocywgcikge1xuICAgICAgICAgIHZhciBvLCBhO2ZvciAoYSA9IDA7IGEgPCBzLmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICBvID0gbi5jbGFzc2VzRWxlbWVudExvb2t1cFtzW2FdXSB8fCB0KCksIG8gPSBlLmFkZCA/IHQodC51bmlxdWUoby5nZXQoKS5jb25jYXQoZS5lbGVtZW50LmdldCgpKSkpIDogdChvLm5vdChlLmVsZW1lbnQpLmdldCgpKSwgbi5jbGFzc2VzRWxlbWVudExvb2t1cFtzW2FdXSA9IG8sIGkucHVzaChzW2FdKSwgciAmJiBlLmNsYXNzZXNbc1thXV0gJiYgaS5wdXNoKGUuY2xhc3Nlc1tzW2FdXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIGUgPSB0LmV4dGVuZCh7IGVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgY2xhc3NlczogdGhpcy5vcHRpb25zLmNsYXNzZXMgfHwge30gfSwgZSksIHRoaXMuX29uKGUuZWxlbWVudCwgeyByZW1vdmU6IFwiX3VudHJhY2tDbGFzc2VzRWxlbWVudFwiIH0pLCBlLmtleXMgJiYgcyhlLmtleXMubWF0Y2goL1xcUysvZykgfHwgW10sICEwKSwgZS5leHRyYSAmJiBzKGUuZXh0cmEubWF0Y2goL1xcUysvZykgfHwgW10pLCBpLmpvaW4oXCIgXCIpO1xuICAgICAgfSwgX3VudHJhY2tDbGFzc2VzRWxlbWVudDogZnVuY3Rpb24gX3VudHJhY2tDbGFzc2VzRWxlbWVudChlKSB7XG4gICAgICAgIHZhciBpID0gdGhpczt0LmVhY2goaS5jbGFzc2VzRWxlbWVudExvb2t1cCwgZnVuY3Rpb24gKG4sIHMpIHtcbiAgICAgICAgICAtMSAhPT0gdC5pbkFycmF5KGUudGFyZ2V0LCBzKSAmJiAoaS5jbGFzc2VzRWxlbWVudExvb2t1cFtuXSA9IHQocy5ub3QoZS50YXJnZXQpLmdldCgpKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX3JlbW92ZUNsYXNzOiBmdW5jdGlvbiBfcmVtb3ZlQ2xhc3ModCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3ModCwgZSwgaSwgITEpO1xuICAgICAgfSwgX2FkZENsYXNzOiBmdW5jdGlvbiBfYWRkQ2xhc3ModCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3ModCwgZSwgaSwgITApO1xuICAgICAgfSwgX3RvZ2dsZUNsYXNzOiBmdW5jdGlvbiBfdG9nZ2xlQ2xhc3ModCwgZSwgaSwgbikge1xuICAgICAgICBuID0gXCJib29sZWFuXCIgPT0gdHlwZW9mIG4gPyBuIDogaTt2YXIgcyA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgfHwgbnVsbCA9PT0gdCxcbiAgICAgICAgICAgIHIgPSB7IGV4dHJhOiBzID8gZSA6IGksIGtleXM6IHMgPyB0IDogZSwgZWxlbWVudDogcyA/IHRoaXMuZWxlbWVudCA6IHQsIGFkZDogbiB9O3JldHVybiByLmVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5fY2xhc3NlcyhyKSwgbiksIHRoaXM7XG4gICAgICB9LCBfb246IGZ1bmN0aW9uIF9vbihlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzLFxuICAgICAgICAgICAgciA9IHRoaXM7XCJib29sZWFuXCIgIT0gdHlwZW9mIGUgJiYgKG4gPSBpLCBpID0gZSwgZSA9ICExKSwgbiA/IChpID0gcyA9IHQoaSksIHRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmFkZChpKSkgOiAobiA9IGksIGkgPSB0aGlzLmVsZW1lbnQsIHMgPSB0aGlzLndpZGdldCgpKSwgdC5lYWNoKG4sIGZ1bmN0aW9uIChuLCBvKSB7XG4gICAgICAgICAgZnVuY3Rpb24gYSgpIHtcbiAgICAgICAgICAgIGlmIChlIHx8ICEwICE9PSByLm9wdGlvbnMuZGlzYWJsZWQgJiYgIXQodGhpcykuaGFzQ2xhc3MoXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSkgcmV0dXJuIChcInN0cmluZ1wiID09IHR5cGVvZiBvID8gcltvXSA6IG8pLmFwcGx5KHIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfVwic3RyaW5nXCIgIT0gdHlwZW9mIG8gJiYgKGEuZ3VpZCA9IG8uZ3VpZCA9IG8uZ3VpZCB8fCBhLmd1aWQgfHwgdC5ndWlkKyspO3ZhciBsID0gbi5tYXRjaCgvXihbXFx3Oi1dKilcXHMqKC4qKSQvKSxcbiAgICAgICAgICAgICAgdSA9IGxbMV0gKyByLmV2ZW50TmFtZXNwYWNlLFxuICAgICAgICAgICAgICBjID0gbFsyXTtjID8gcy5vbih1LCBjLCBhKSA6IGkub24odSwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX29mZjogZnVuY3Rpb24gX29mZihlLCBpKSB7XG4gICAgICAgIGkgPSAoaSB8fCBcIlwiKS5zcGxpdChcIiBcIikuam9pbih0aGlzLmV2ZW50TmFtZXNwYWNlICsgXCIgXCIpICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgZS5vZmYoaSkub2ZmKGkpLCB0aGlzLmJpbmRpbmdzID0gdCh0aGlzLmJpbmRpbmdzLm5vdChlKS5nZXQoKSksIHRoaXMuZm9jdXNhYmxlID0gdCh0aGlzLmZvY3VzYWJsZS5ub3QoZSkuZ2V0KCkpLCB0aGlzLmhvdmVyYWJsZSA9IHQodGhpcy5ob3ZlcmFibGUubm90KGUpLmdldCgpKTtcbiAgICAgIH0sIF9kZWxheTogZnVuY3Rpb24gX2RlbGF5KHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzO3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyBpW3RdIDogdCkuYXBwbHkoaSwgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZSB8fCAwKTtcbiAgICAgIH0sIF9ob3ZlcmFibGU6IGZ1bmN0aW9uIF9ob3ZlcmFibGUoZSkge1xuICAgICAgICB0aGlzLmhvdmVyYWJsZSA9IHRoaXMuaG92ZXJhYmxlLmFkZChlKSwgdGhpcy5fb24oZSwgeyBtb3VzZWVudGVyOiBmdW5jdGlvbiBtb3VzZWVudGVyKGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZENsYXNzKHQoZS5jdXJyZW50VGFyZ2V0KSwgbnVsbCwgXCJ1aS1zdGF0ZS1ob3ZlclwiKTtcbiAgICAgICAgICB9LCBtb3VzZWxlYXZlOiBmdW5jdGlvbiBtb3VzZWxlYXZlKGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNsYXNzKHQoZS5jdXJyZW50VGFyZ2V0KSwgbnVsbCwgXCJ1aS1zdGF0ZS1ob3ZlclwiKTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgfSwgX2ZvY3VzYWJsZTogZnVuY3Rpb24gX2ZvY3VzYWJsZShlKSB7XG4gICAgICAgIHRoaXMuZm9jdXNhYmxlID0gdGhpcy5mb2N1c2FibGUuYWRkKGUpLCB0aGlzLl9vbihlLCB7IGZvY3VzaW46IGZ1bmN0aW9uIGZvY3VzaW4oZSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIpO1xuICAgICAgICAgIH0sIGZvY3Vzb3V0OiBmdW5jdGlvbiBmb2N1c291dChlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVDbGFzcyh0KGUuY3VycmVudFRhcmdldCksIG51bGwsIFwidWktc3RhdGUtZm9jdXNcIik7XG4gICAgICAgICAgfSB9KTtcbiAgICAgIH0sIF90cmlnZ2VyOiBmdW5jdGlvbiBfdHJpZ2dlcihlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8gPSB0aGlzLm9wdGlvbnNbZV07aWYgKG4gPSBuIHx8IHt9LCAoaSA9IHQuRXZlbnQoaSkpLnR5cGUgPSAoZSA9PT0gdGhpcy53aWRnZXRFdmVudFByZWZpeCA/IGUgOiB0aGlzLndpZGdldEV2ZW50UHJlZml4ICsgZSkudG9Mb3dlckNhc2UoKSwgaS50YXJnZXQgPSB0aGlzLmVsZW1lbnRbMF0sIHIgPSBpLm9yaWdpbmFsRXZlbnQpIGZvciAocyBpbiByKSB7XG4gICAgICAgICAgcyBpbiBpIHx8IChpW3NdID0gcltzXSk7XG4gICAgICAgIH1yZXR1cm4gdGhpcy5lbGVtZW50LnRyaWdnZXIoaSwgbiksICEodC5pc0Z1bmN0aW9uKG8pICYmICExID09PSBvLmFwcGx5KHRoaXMuZWxlbWVudFswXSwgW2ldLmNvbmNhdChuKSkgfHwgaS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSk7XG4gICAgICB9IH0sIHQuZWFjaCh7IHNob3c6IFwiZmFkZUluXCIsIGhpZGU6IFwiZmFkZU91dFwiIH0sIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICB0LldpZGdldC5wcm90b3R5cGVbXCJfXCIgKyBlXSA9IGZ1bmN0aW9uIChuLCBzLCByKSB7XG4gICAgICAgIHZhciBvO1wic3RyaW5nXCIgPT0gdHlwZW9mIHMgJiYgKHMgPSB7IGVmZmVjdDogcyB9KTt2YXIgYSA9IHMgPyAhMCA9PT0gcyB8fCBcIm51bWJlclwiID09IHR5cGVvZiBzID8gaSA6IHMuZWZmZWN0IHx8IGkgOiBlO1wibnVtYmVyXCIgPT0gdHlwZW9mIChzID0gcyB8fCB7fSkgJiYgKHMgPSB7IGR1cmF0aW9uOiBzIH0pLCBvID0gIXQuaXNFbXB0eU9iamVjdChzKSwgcy5jb21wbGV0ZSA9IHIsIHMuZGVsYXkgJiYgbi5kZWxheShzLmRlbGF5KSwgbyAmJiB0LmVmZmVjdHMgJiYgdC5lZmZlY3RzLmVmZmVjdFthXSA/IG5bZV0ocykgOiBhICE9PSBlICYmIG5bYV0gPyBuW2FdKHMuZHVyYXRpb24sIHMuZWFzaW5nLCByKSA6IG4ucXVldWUoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICB0KHRoaXMpW2VdKCksIHIgJiYgci5jYWxsKG5bMF0pLCBpKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSwgdC53aWRnZXQsXG4gICAgLyohXG4gICAgICogalF1ZXJ5IFVJIFBvc2l0aW9uIDEuMTIuMVxuICAgICAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAgICAgKlxuICAgICAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKlxuICAgICAqIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3Bvc2l0aW9uL1xuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlLFxuICAgICAgICAgIGkgPSBNYXRoLm1heCxcbiAgICAgICAgICBuID0gTWF0aC5hYnMsXG4gICAgICAgICAgcyA9IC9sZWZ0fGNlbnRlcnxyaWdodC8sXG4gICAgICAgICAgciA9IC90b3B8Y2VudGVyfGJvdHRvbS8sXG4gICAgICAgICAgbyA9IC9bXFwrXFwtXVxcZCsoXFwuW1xcZF0rKT8lPy8sXG4gICAgICAgICAgYSA9IC9eXFx3Ky8sXG4gICAgICAgICAgbCA9IC8lJC8sXG4gICAgICAgICAgdSA9IHQuZm4ucG9zaXRpb247ZnVuY3Rpb24gYyh0LCBlLCBpKSB7XG4gICAgICAgIHJldHVybiBbcGFyc2VGbG9hdCh0WzBdKSAqIChsLnRlc3QodFswXSkgPyBlIC8gMTAwIDogMSksIHBhcnNlRmxvYXQodFsxXSkgKiAobC50ZXN0KHRbMV0pID8gaSAvIDEwMCA6IDEpXTtcbiAgICAgIH1mdW5jdGlvbiBoKGUsIGkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHQuY3NzKGUsIGkpLCAxMCkgfHwgMDtcbiAgICAgIH10LnBvc2l0aW9uID0geyBzY3JvbGxiYXJXaWR0aDogZnVuY3Rpb24gc2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgcmV0dXJuIGU7dmFyIGksXG4gICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgIHMgPSB0KFwiPGRpdiBzdHlsZT0nZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O292ZXJmbG93OmhpZGRlbjsnPjxkaXYgc3R5bGU9J2hlaWdodDoxMDBweDt3aWR0aDphdXRvOyc+PC9kaXY+PC9kaXY+XCIpLFxuICAgICAgICAgICAgICByID0gcy5jaGlsZHJlbigpWzBdO3JldHVybiB0KFwiYm9keVwiKS5hcHBlbmQocyksIGkgPSByLm9mZnNldFdpZHRoLCBzLmNzcyhcIm92ZXJmbG93XCIsIFwic2Nyb2xsXCIpLCBuID0gci5vZmZzZXRXaWR0aCwgaSA9PT0gbiAmJiAobiA9IHNbMF0uY2xpZW50V2lkdGgpLCBzLnJlbW92ZSgpLCBlID0gaSAtIG47XG4gICAgICAgIH0sIGdldFNjcm9sbEluZm86IGZ1bmN0aW9uIGdldFNjcm9sbEluZm8oZSkge1xuICAgICAgICAgIHZhciBpID0gZS5pc1dpbmRvdyB8fCBlLmlzRG9jdW1lbnQgPyBcIlwiIDogZS5lbGVtZW50LmNzcyhcIm92ZXJmbG93LXhcIiksXG4gICAgICAgICAgICAgIG4gPSBlLmlzV2luZG93IHx8IGUuaXNEb2N1bWVudCA/IFwiXCIgOiBlLmVsZW1lbnQuY3NzKFwib3ZlcmZsb3cteVwiKSxcbiAgICAgICAgICAgICAgcyA9IFwic2Nyb2xsXCIgPT09IGkgfHwgXCJhdXRvXCIgPT09IGkgJiYgZS53aWR0aCA8IGUuZWxlbWVudFswXS5zY3JvbGxXaWR0aCxcbiAgICAgICAgICAgICAgciA9IFwic2Nyb2xsXCIgPT09IG4gfHwgXCJhdXRvXCIgPT09IG4gJiYgZS5oZWlnaHQgPCBlLmVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0O3JldHVybiB7IHdpZHRoOiByID8gdC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMCwgaGVpZ2h0OiBzID8gdC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpIDogMCB9O1xuICAgICAgICB9LCBnZXRXaXRoaW5JbmZvOiBmdW5jdGlvbiBnZXRXaXRoaW5JbmZvKGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHQoZSB8fCB3aW5kb3cpLFxuICAgICAgICAgICAgICBuID0gdC5pc1dpbmRvdyhpWzBdKSxcbiAgICAgICAgICAgICAgcyA9ICEhaVswXSAmJiA5ID09PSBpWzBdLm5vZGVUeXBlLFxuICAgICAgICAgICAgICByID0gIW4gJiYgIXM7cmV0dXJuIHsgZWxlbWVudDogaSwgaXNXaW5kb3c6IG4sIGlzRG9jdW1lbnQ6IHMsIG9mZnNldDogciA/IHQoZSkub2Zmc2V0KCkgOiB7IGxlZnQ6IDAsIHRvcDogMCB9LCBzY3JvbGxMZWZ0OiBpLnNjcm9sbExlZnQoKSwgc2Nyb2xsVG9wOiBpLnNjcm9sbFRvcCgpLCB3aWR0aDogaS5vdXRlcldpZHRoKCksIGhlaWdodDogaS5vdXRlckhlaWdodCgpIH07XG4gICAgICAgIH0gfSwgdC5mbi5wb3NpdGlvbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghZSB8fCAhZS5vZikgcmV0dXJuIHUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtlID0gdC5leHRlbmQoe30sIGUpO3ZhciBsLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIHAsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB2LFxuICAgICAgICAgICAgXyxcbiAgICAgICAgICAgIGIgPSB0KGUub2YpLFxuICAgICAgICAgICAgeSA9IHQucG9zaXRpb24uZ2V0V2l0aGluSW5mbyhlLndpdGhpbiksXG4gICAgICAgICAgICBrID0gdC5wb3NpdGlvbi5nZXRTY3JvbGxJbmZvKHkpLFxuICAgICAgICAgICAgdyA9IChlLmNvbGxpc2lvbiB8fCBcImZsaXBcIikuc3BsaXQoXCIgXCIpLFxuICAgICAgICAgICAgeCA9IHt9O3JldHVybiBfID0gKHYgPSBiKVswXSwgbSA9IDkgPT09IF8ubm9kZVR5cGUgPyB7IHdpZHRoOiB2LndpZHRoKCksIGhlaWdodDogdi5oZWlnaHQoKSwgb2Zmc2V0OiB7IHRvcDogMCwgbGVmdDogMCB9IH0gOiB0LmlzV2luZG93KF8pID8geyB3aWR0aDogdi53aWR0aCgpLCBoZWlnaHQ6IHYuaGVpZ2h0KCksIG9mZnNldDogeyB0b3A6IHYuc2Nyb2xsVG9wKCksIGxlZnQ6IHYuc2Nyb2xsTGVmdCgpIH0gfSA6IF8ucHJldmVudERlZmF1bHQgPyB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIG9mZnNldDogeyB0b3A6IF8ucGFnZVksIGxlZnQ6IF8ucGFnZVggfSB9IDogeyB3aWR0aDogdi5vdXRlcldpZHRoKCksIGhlaWdodDogdi5vdXRlckhlaWdodCgpLCBvZmZzZXQ6IHYub2Zmc2V0KCkgfSwgYlswXS5wcmV2ZW50RGVmYXVsdCAmJiAoZS5hdCA9IFwibGVmdCB0b3BcIiksIGQgPSBtLndpZHRoLCBwID0gbS5oZWlnaHQsIGYgPSBtLm9mZnNldCwgZyA9IHQuZXh0ZW5kKHt9LCBmKSwgdC5lYWNoKFtcIm15XCIsIFwiYXRcIl0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgbiA9IChlW3RoaXNdIHx8IFwiXCIpLnNwbGl0KFwiIFwiKTsxID09PSBuLmxlbmd0aCAmJiAobiA9IHMudGVzdChuWzBdKSA/IG4uY29uY2F0KFtcImNlbnRlclwiXSkgOiByLnRlc3QoblswXSkgPyBbXCJjZW50ZXJcIl0uY29uY2F0KG4pIDogW1wiY2VudGVyXCIsIFwiY2VudGVyXCJdKSwgblswXSA9IHMudGVzdChuWzBdKSA/IG5bMF0gOiBcImNlbnRlclwiLCBuWzFdID0gci50ZXN0KG5bMV0pID8gblsxXSA6IFwiY2VudGVyXCIsIHQgPSBvLmV4ZWMoblswXSksIGkgPSBvLmV4ZWMoblsxXSksIHhbdGhpc10gPSBbdCA/IHRbMF0gOiAwLCBpID8gaVswXSA6IDBdLCBlW3RoaXNdID0gW2EuZXhlYyhuWzBdKVswXSwgYS5leGVjKG5bMV0pWzBdXTtcbiAgICAgICAgfSksIDEgPT09IHcubGVuZ3RoICYmICh3WzFdID0gd1swXSksIFwicmlnaHRcIiA9PT0gZS5hdFswXSA/IGcubGVmdCArPSBkIDogXCJjZW50ZXJcIiA9PT0gZS5hdFswXSAmJiAoZy5sZWZ0ICs9IGQgLyAyKSwgXCJib3R0b21cIiA9PT0gZS5hdFsxXSA/IGcudG9wICs9IHAgOiBcImNlbnRlclwiID09PSBlLmF0WzFdICYmIChnLnRvcCArPSBwIC8gMiksIGwgPSBjKHguYXQsIGQsIHApLCBnLmxlZnQgKz0gbFswXSwgZy50b3AgKz0gbFsxXSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgbyA9IHQodGhpcyksXG4gICAgICAgICAgICAgIGEgPSBvLm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgICAgdSA9IG8ub3V0ZXJIZWlnaHQoKSxcbiAgICAgICAgICAgICAgbSA9IGgodGhpcywgXCJtYXJnaW5MZWZ0XCIpLFxuICAgICAgICAgICAgICB2ID0gaCh0aGlzLCBcIm1hcmdpblRvcFwiKSxcbiAgICAgICAgICAgICAgXyA9IGEgKyBtICsgaCh0aGlzLCBcIm1hcmdpblJpZ2h0XCIpICsgay53aWR0aCxcbiAgICAgICAgICAgICAgQyA9IHUgKyB2ICsgaCh0aGlzLCBcIm1hcmdpbkJvdHRvbVwiKSArIGsuaGVpZ2h0LFxuICAgICAgICAgICAgICBEID0gdC5leHRlbmQoe30sIGcpLFxuICAgICAgICAgICAgICBTID0gYyh4Lm15LCBvLm91dGVyV2lkdGgoKSwgby5vdXRlckhlaWdodCgpKTtcInJpZ2h0XCIgPT09IGUubXlbMF0gPyBELmxlZnQgLT0gYSA6IFwiY2VudGVyXCIgPT09IGUubXlbMF0gJiYgKEQubGVmdCAtPSBhIC8gMiksIFwiYm90dG9tXCIgPT09IGUubXlbMV0gPyBELnRvcCAtPSB1IDogXCJjZW50ZXJcIiA9PT0gZS5teVsxXSAmJiAoRC50b3AgLT0gdSAvIDIpLCBELmxlZnQgKz0gU1swXSwgRC50b3AgKz0gU1sxXSwgcyA9IHsgbWFyZ2luTGVmdDogbSwgbWFyZ2luVG9wOiB2IH0sIHQuZWFjaChbXCJsZWZ0XCIsIFwidG9wXCJdLCBmdW5jdGlvbiAoaSwgbikge1xuICAgICAgICAgICAgdC51aS5wb3NpdGlvblt3W2ldXSAmJiB0LnVpLnBvc2l0aW9uW3dbaV1dW25dKEQsIHsgdGFyZ2V0V2lkdGg6IGQsIHRhcmdldEhlaWdodDogcCwgZWxlbVdpZHRoOiBhLCBlbGVtSGVpZ2h0OiB1LCBjb2xsaXNpb25Qb3NpdGlvbjogcywgY29sbGlzaW9uV2lkdGg6IF8sIGNvbGxpc2lvbkhlaWdodDogQywgb2Zmc2V0OiBbbFswXSArIFNbMF0sIGxbMV0gKyBTWzFdXSwgbXk6IGUubXksIGF0OiBlLmF0LCB3aXRoaW46IHksIGVsZW06IG8gfSk7XG4gICAgICAgICAgfSksIGUudXNpbmcgJiYgKHIgPSBmdW5jdGlvbiByKHQpIHtcbiAgICAgICAgICAgIHZhciBzID0gZi5sZWZ0IC0gRC5sZWZ0LFxuICAgICAgICAgICAgICAgIHIgPSBzICsgZCAtIGEsXG4gICAgICAgICAgICAgICAgbCA9IGYudG9wIC0gRC50b3AsXG4gICAgICAgICAgICAgICAgYyA9IGwgKyBwIC0gdSxcbiAgICAgICAgICAgICAgICBoID0geyB0YXJnZXQ6IHsgZWxlbWVudDogYiwgbGVmdDogZi5sZWZ0LCB0b3A6IGYudG9wLCB3aWR0aDogZCwgaGVpZ2h0OiBwIH0sIGVsZW1lbnQ6IHsgZWxlbWVudDogbywgbGVmdDogRC5sZWZ0LCB0b3A6IEQudG9wLCB3aWR0aDogYSwgaGVpZ2h0OiB1IH0sIGhvcml6b250YWw6IHIgPCAwID8gXCJsZWZ0XCIgOiBzID4gMCA/IFwicmlnaHRcIiA6IFwiY2VudGVyXCIsIHZlcnRpY2FsOiBjIDwgMCA/IFwidG9wXCIgOiBsID4gMCA/IFwiYm90dG9tXCIgOiBcIm1pZGRsZVwiIH07ZCA8IGEgJiYgbihzICsgcikgPCBkICYmIChoLmhvcml6b250YWwgPSBcImNlbnRlclwiKSwgcCA8IHUgJiYgbihsICsgYykgPCBwICYmIChoLnZlcnRpY2FsID0gXCJtaWRkbGVcIiksIGkobihzKSwgbihyKSkgPiBpKG4obCksIG4oYykpID8gaC5pbXBvcnRhbnQgPSBcImhvcml6b250YWxcIiA6IGguaW1wb3J0YW50ID0gXCJ2ZXJ0aWNhbFwiLCBlLnVzaW5nLmNhbGwodGhpcywgdCwgaCk7XG4gICAgICAgICAgfSksIG8ub2Zmc2V0KHQuZXh0ZW5kKEQsIHsgdXNpbmc6IHIgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHQudWkucG9zaXRpb24gPSB7IGZpdDogeyBsZWZ0OiBmdW5jdGlvbiBsZWZ0KHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIHMgPSBlLndpdGhpbixcbiAgICAgICAgICAgICAgICByID0gcy5pc1dpbmRvdyA/IHMuc2Nyb2xsTGVmdCA6IHMub2Zmc2V0LmxlZnQsXG4gICAgICAgICAgICAgICAgbyA9IHMud2lkdGgsXG4gICAgICAgICAgICAgICAgYSA9IHQubGVmdCAtIGUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCxcbiAgICAgICAgICAgICAgICBsID0gciAtIGEsXG4gICAgICAgICAgICAgICAgdSA9IGEgKyBlLmNvbGxpc2lvbldpZHRoIC0gbyAtIHI7ZS5jb2xsaXNpb25XaWR0aCA+IG8gPyBsID4gMCAmJiB1IDw9IDAgPyAobiA9IHQubGVmdCArIGwgKyBlLmNvbGxpc2lvbldpZHRoIC0gbyAtIHIsIHQubGVmdCArPSBsIC0gbikgOiB0LmxlZnQgPSB1ID4gMCAmJiBsIDw9IDAgPyByIDogbCA+IHUgPyByICsgbyAtIGUuY29sbGlzaW9uV2lkdGggOiByIDogbCA+IDAgPyB0LmxlZnQgKz0gbCA6IHUgPiAwID8gdC5sZWZ0IC09IHUgOiB0LmxlZnQgPSBpKHQubGVmdCAtIGEsIHQubGVmdCk7XG4gICAgICAgICAgfSwgdG9wOiBmdW5jdGlvbiB0b3AodCwgZSkge1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgcyA9IGUud2l0aGluLFxuICAgICAgICAgICAgICAgIHIgPSBzLmlzV2luZG93ID8gcy5zY3JvbGxUb3AgOiBzLm9mZnNldC50b3AsXG4gICAgICAgICAgICAgICAgbyA9IGUud2l0aGluLmhlaWdodCxcbiAgICAgICAgICAgICAgICBhID0gdC50b3AgLSBlLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgICBsID0gciAtIGEsXG4gICAgICAgICAgICAgICAgdSA9IGEgKyBlLmNvbGxpc2lvbkhlaWdodCAtIG8gLSByO2UuY29sbGlzaW9uSGVpZ2h0ID4gbyA/IGwgPiAwICYmIHUgPD0gMCA/IChuID0gdC50b3AgKyBsICsgZS5jb2xsaXNpb25IZWlnaHQgLSBvIC0gciwgdC50b3AgKz0gbCAtIG4pIDogdC50b3AgPSB1ID4gMCAmJiBsIDw9IDAgPyByIDogbCA+IHUgPyByICsgbyAtIGUuY29sbGlzaW9uSGVpZ2h0IDogciA6IGwgPiAwID8gdC50b3AgKz0gbCA6IHUgPiAwID8gdC50b3AgLT0gdSA6IHQudG9wID0gaSh0LnRvcCAtIGEsIHQudG9wKTtcbiAgICAgICAgICB9IH0sIGZsaXA6IHsgbGVmdDogZnVuY3Rpb24gbGVmdCh0LCBlKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHIgPSBlLndpdGhpbixcbiAgICAgICAgICAgICAgICBvID0gci5vZmZzZXQubGVmdCArIHIuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgICAgICBhID0gci53aWR0aCxcbiAgICAgICAgICAgICAgICBsID0gci5pc1dpbmRvdyA/IHIuc2Nyb2xsTGVmdCA6IHIub2Zmc2V0LmxlZnQsXG4gICAgICAgICAgICAgICAgdSA9IHQubGVmdCAtIGUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCxcbiAgICAgICAgICAgICAgICBjID0gdSAtIGwsXG4gICAgICAgICAgICAgICAgaCA9IHUgKyBlLmNvbGxpc2lvbldpZHRoIC0gYSAtIGwsXG4gICAgICAgICAgICAgICAgZCA9IFwibGVmdFwiID09PSBlLm15WzBdID8gLWUuZWxlbVdpZHRoIDogXCJyaWdodFwiID09PSBlLm15WzBdID8gZS5lbGVtV2lkdGggOiAwLFxuICAgICAgICAgICAgICAgIHAgPSBcImxlZnRcIiA9PT0gZS5hdFswXSA/IGUudGFyZ2V0V2lkdGggOiBcInJpZ2h0XCIgPT09IGUuYXRbMF0gPyAtZS50YXJnZXRXaWR0aCA6IDAsXG4gICAgICAgICAgICAgICAgZiA9IC0yICogZS5vZmZzZXRbMF07YyA8IDAgPyAoKGkgPSB0LmxlZnQgKyBkICsgcCArIGYgKyBlLmNvbGxpc2lvbldpZHRoIC0gYSAtIG8pIDwgMCB8fCBpIDwgbihjKSkgJiYgKHQubGVmdCArPSBkICsgcCArIGYpIDogaCA+IDAgJiYgKChzID0gdC5sZWZ0IC0gZS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0ICsgZCArIHAgKyBmIC0gbCkgPiAwIHx8IG4ocykgPCBoKSAmJiAodC5sZWZ0ICs9IGQgKyBwICsgZik7XG4gICAgICAgICAgfSwgdG9wOiBmdW5jdGlvbiB0b3AodCwgZSkge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICByID0gZS53aXRoaW4sXG4gICAgICAgICAgICAgICAgbyA9IHIub2Zmc2V0LnRvcCArIHIuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgIGEgPSByLmhlaWdodCxcbiAgICAgICAgICAgICAgICBsID0gci5pc1dpbmRvdyA/IHIuc2Nyb2xsVG9wIDogci5vZmZzZXQudG9wLFxuICAgICAgICAgICAgICAgIHUgPSB0LnRvcCAtIGUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wLFxuICAgICAgICAgICAgICAgIGMgPSB1IC0gbCxcbiAgICAgICAgICAgICAgICBoID0gdSArIGUuY29sbGlzaW9uSGVpZ2h0IC0gYSAtIGwsXG4gICAgICAgICAgICAgICAgZCA9IFwidG9wXCIgPT09IGUubXlbMV0sXG4gICAgICAgICAgICAgICAgcCA9IGQgPyAtZS5lbGVtSGVpZ2h0IDogXCJib3R0b21cIiA9PT0gZS5teVsxXSA/IGUuZWxlbUhlaWdodCA6IDAsXG4gICAgICAgICAgICAgICAgZiA9IFwidG9wXCIgPT09IGUuYXRbMV0gPyBlLnRhcmdldEhlaWdodCA6IFwiYm90dG9tXCIgPT09IGUuYXRbMV0gPyAtZS50YXJnZXRIZWlnaHQgOiAwLFxuICAgICAgICAgICAgICAgIGcgPSAtMiAqIGUub2Zmc2V0WzFdO2MgPCAwID8gKChzID0gdC50b3AgKyBwICsgZiArIGcgKyBlLmNvbGxpc2lvbkhlaWdodCAtIGEgLSBvKSA8IDAgfHwgcyA8IG4oYykpICYmICh0LnRvcCArPSBwICsgZiArIGcpIDogaCA+IDAgJiYgKChpID0gdC50b3AgLSBlLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCArIHAgKyBmICsgZyAtIGwpID4gMCB8fCBuKGkpIDwgaCkgJiYgKHQudG9wICs9IHAgKyBmICsgZyk7XG4gICAgICAgICAgfSB9LCBmbGlwZml0OiB7IGxlZnQ6IGZ1bmN0aW9uIGxlZnQoKSB7XG4gICAgICAgICAgICB0LnVpLnBvc2l0aW9uLmZsaXAubGVmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0LnVpLnBvc2l0aW9uLmZpdC5sZWZ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfSwgdG9wOiBmdW5jdGlvbiB0b3AoKSB7XG4gICAgICAgICAgICB0LnVpLnBvc2l0aW9uLmZsaXAudG9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHQudWkucG9zaXRpb24uZml0LnRvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH0gfSB9O1xuICAgIH0oKSwgdC51aS5wb3NpdGlvbiwgdC5leHRlbmQodC5leHByW1wiOlwiXSwgeyBkYXRhOiB0LmV4cHIuY3JlYXRlUHNldWRvID8gdC5leHByLmNyZWF0ZVBzZXVkbyhmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gISF0LmRhdGEoaSwgZSk7XG4gICAgICAgIH07XG4gICAgICB9KSA6IGZ1bmN0aW9uIChlLCBpLCBuKSB7XG4gICAgICAgIHJldHVybiAhIXQuZGF0YShlLCBuWzNdKTtcbiAgICAgIH0gfSksIHQuZm4uZXh0ZW5kKHsgZGlzYWJsZVNlbGVjdGlvbjogKHMgPSBcIm9uc2VsZWN0c3RhcnRcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpID8gXCJzZWxlY3RzdGFydFwiIDogXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbihzICsgXCIudWktZGlzYWJsZVNlbGVjdGlvblwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSwgZW5hYmxlU2VsZWN0aW9uOiBmdW5jdGlvbiBlbmFibGVTZWxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZihcIi51aS1kaXNhYmxlU2VsZWN0aW9uXCIpO1xuICAgICAgfSB9KTt2YXIgcyxcbiAgICAgICAgcixcbiAgICAgICAgbyxcbiAgICAgICAgYSxcbiAgICAgICAgbCA9IFwidWktZWZmZWN0cy1hbmltYXRlZFwiLFxuICAgICAgICB1ID0gdDtcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgOmRhdGEgMS4xMi4xXG4gICAgICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAgICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgICAqL3QuZWZmZWN0cyA9IHsgZWZmZWN0OiB7fSB9LFxuICAgIC8qIVxuICAgICAqIGpRdWVyeSBDb2xvciBBbmltYXRpb25zIHYyLjEuMlxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LWNvbG9yXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKlxuICAgICAqIERhdGU6IFdlZCBKYW4gMTYgMDg6NDc6MDkgMjAxMyAtMDYwMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gL14oW1xcLStdKT1cXHMqKFxcZCtcXC4/XFxkKikvLFxuICAgICAgICAgIHMgPSBbeyByZTogL3JnYmE/XFwoXFxzKihcXGR7MSwzfSlcXHMqLFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KVxccyooPzosXFxzKihcXGQ/KD86XFwuXFxkKyk/KVxccyopP1xcKS8sIHBhcnNlOiBmdW5jdGlvbiBwYXJzZSh0KSB7XG4gICAgICAgICAgcmV0dXJuIFt0WzFdLCB0WzJdLCB0WzNdLCB0WzRdXTtcbiAgICAgICAgfSB9LCB7IHJlOiAvcmdiYT9cXChcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKig/OixcXHMqKFxcZD8oPzpcXC5cXGQrKT8pXFxzKik/XFwpLywgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHQpIHtcbiAgICAgICAgICByZXR1cm4gWzIuNTUgKiB0WzFdLCAyLjU1ICogdFsyXSwgMi41NSAqIHRbM10sIHRbNF1dO1xuICAgICAgICB9IH0sIHsgcmU6IC8jKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pLywgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHQpIHtcbiAgICAgICAgICByZXR1cm4gW3BhcnNlSW50KHRbMV0sIDE2KSwgcGFyc2VJbnQodFsyXSwgMTYpLCBwYXJzZUludCh0WzNdLCAxNildO1xuICAgICAgICB9IH0sIHsgcmU6IC8jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pLywgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHQpIHtcbiAgICAgICAgICByZXR1cm4gW3BhcnNlSW50KHRbMV0gKyB0WzFdLCAxNiksIHBhcnNlSW50KHRbMl0gKyB0WzJdLCAxNiksIHBhcnNlSW50KHRbM10gKyB0WzNdLCAxNildO1xuICAgICAgICB9IH0sIHsgcmU6IC9oc2xhP1xcKFxccyooXFxkKyg/OlxcLlxcZCspPylcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXCVcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXCVcXHMqKD86LFxccyooXFxkPyg/OlxcLlxcZCspPylcXHMqKT9cXCkvLCBzcGFjZTogXCJoc2xhXCIsIHBhcnNlOiBmdW5jdGlvbiBwYXJzZSh0KSB7XG4gICAgICAgICAgcmV0dXJuIFt0WzFdLCB0WzJdIC8gMTAwLCB0WzNdIC8gMTAwLCB0WzRdXTtcbiAgICAgICAgfSB9XSxcbiAgICAgICAgICByID0gdC5Db2xvciA9IGZ1bmN0aW9uIChlLCBpLCBuLCBzKSB7XG4gICAgICAgIHJldHVybiBuZXcgdC5Db2xvci5mbi5wYXJzZShlLCBpLCBuLCBzKTtcbiAgICAgIH0sXG4gICAgICAgICAgbyA9IHsgcmdiYTogeyBwcm9wczogeyByZWQ6IHsgaWR4OiAwLCB0eXBlOiBcImJ5dGVcIiB9LCBncmVlbjogeyBpZHg6IDEsIHR5cGU6IFwiYnl0ZVwiIH0sIGJsdWU6IHsgaWR4OiAyLCB0eXBlOiBcImJ5dGVcIiB9IH0gfSwgaHNsYTogeyBwcm9wczogeyBodWU6IHsgaWR4OiAwLCB0eXBlOiBcImRlZ3JlZXNcIiB9LCBzYXR1cmF0aW9uOiB7IGlkeDogMSwgdHlwZTogXCJwZXJjZW50XCIgfSwgbGlnaHRuZXNzOiB7IGlkeDogMiwgdHlwZTogXCJwZXJjZW50XCIgfSB9IH0gfSxcbiAgICAgICAgICBhID0geyBieXRlOiB7IGZsb29yOiAhMCwgbWF4OiAyNTUgfSwgcGVyY2VudDogeyBtYXg6IDEgfSwgZGVncmVlczogeyBtb2Q6IDM2MCwgZmxvb3I6ICEwIH0gfSxcbiAgICAgICAgICBsID0gci5zdXBwb3J0ID0ge30sXG4gICAgICAgICAgdSA9IHQoXCI8cD5cIilbMF0sXG4gICAgICAgICAgYyA9IHQuZWFjaDtmdW5jdGlvbiBoKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSBhW2UudHlwZV0gfHwge307cmV0dXJuIG51bGwgPT0gdCA/IGkgfHwgIWUuZGVmID8gbnVsbCA6IGUuZGVmIDogKHQgPSBuLmZsb29yID8gfn50IDogcGFyc2VGbG9hdCh0KSwgaXNOYU4odCkgPyBlLmRlZiA6IG4ubW9kID8gKHQgKyBuLm1vZCkgJSBuLm1vZCA6IDAgPiB0ID8gMCA6IG4ubWF4IDwgdCA/IG4ubWF4IDogdCk7XG4gICAgICB9ZnVuY3Rpb24gZChlKSB7XG4gICAgICAgIHZhciBuID0gcigpLFxuICAgICAgICAgICAgYSA9IG4uX3JnYmEgPSBbXTtyZXR1cm4gZSA9IGUudG9Mb3dlckNhc2UoKSwgYyhzLCBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgIHZhciBzLFxuICAgICAgICAgICAgICByID0gaS5yZS5leGVjKGUpLFxuICAgICAgICAgICAgICBsID0gciAmJiBpLnBhcnNlKHIpLFxuICAgICAgICAgICAgICB1ID0gaS5zcGFjZSB8fCBcInJnYmFcIjtpZiAobCkgcmV0dXJuIHMgPSBuW3VdKGwpLCBuW29bdV0uY2FjaGVdID0gc1tvW3VdLmNhY2hlXSwgYSA9IG4uX3JnYmEgPSBzLl9yZ2JhLCAhMTtcbiAgICAgICAgfSksIGEubGVuZ3RoID8gKFwiMCwwLDAsMFwiID09PSBhLmpvaW4oKSAmJiB0LmV4dGVuZChhLCBpLnRyYW5zcGFyZW50KSwgbikgOiBpW2VdO1xuICAgICAgfWZ1bmN0aW9uIHAodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gNiAqIChpID0gKGkgKyAxKSAlIDEpIDwgMSA/IHQgKyAoZSAtIHQpICogaSAqIDYgOiAyICogaSA8IDEgPyBlIDogMyAqIGkgPCAyID8gdCArIChlIC0gdCkgKiAoMiAvIDMgLSBpKSAqIDYgOiB0O1xuICAgICAgfXUuc3R5bGUuY3NzVGV4dCA9IFwiYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEsMSwxLC41KVwiLCBsLnJnYmEgPSB1LnN0eWxlLmJhY2tncm91bmRDb2xvci5pbmRleE9mKFwicmdiYVwiKSA+IC0xLCBjKG8sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgIGUuY2FjaGUgPSBcIl9cIiArIHQsIGUucHJvcHMuYWxwaGEgPSB7IGlkeDogMywgdHlwZTogXCJwZXJjZW50XCIsIGRlZjogMSB9O1xuICAgICAgfSksIHIuZm4gPSB0LmV4dGVuZChyLnByb3RvdHlwZSwgeyBwYXJzZTogZnVuY3Rpb24gcGFyc2UoZSwgbiwgcywgYSkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGUpIHJldHVybiB0aGlzLl9yZ2JhID0gW251bGwsIG51bGwsIG51bGwsIG51bGxdLCB0aGlzOyhlLmpxdWVyeSB8fCBlLm5vZGVUeXBlKSAmJiAoZSA9IHQoZSkuY3NzKG4pLCBuID0gdm9pZCAwKTt2YXIgbCA9IHRoaXMsXG4gICAgICAgICAgICAgIHUgPSB0LnR5cGUoZSksXG4gICAgICAgICAgICAgIHAgPSB0aGlzLl9yZ2JhID0gW107cmV0dXJuIHZvaWQgMCAhPT0gbiAmJiAoZSA9IFtlLCBuLCBzLCBhXSwgdSA9IFwiYXJyYXlcIiksIFwic3RyaW5nXCIgPT09IHUgPyB0aGlzLnBhcnNlKGQoZSkgfHwgaS5fZGVmYXVsdCkgOiBcImFycmF5XCIgPT09IHUgPyAoYyhvLnJnYmEucHJvcHMsIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICBwW2kuaWR4XSA9IGgoZVtpLmlkeF0sIGkpO1xuICAgICAgICAgIH0pLCB0aGlzKSA6IFwib2JqZWN0XCIgPT09IHUgPyAoYyhvLCBlIGluc3RhbmNlb2YgciA/IGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICBlW2kuY2FjaGVdICYmIChsW2kuY2FjaGVdID0gZVtpLmNhY2hlXS5zbGljZSgpKTtcbiAgICAgICAgICB9IDogZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgIHZhciBzID0gbi5jYWNoZTtjKG4ucHJvcHMsIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICAgIGlmICghbFtzXSAmJiBuLnRvKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiYWxwaGFcIiA9PT0gdCB8fCBudWxsID09IGVbdF0pIHJldHVybjtsW3NdID0gbi50byhsLl9yZ2JhKTtcbiAgICAgICAgICAgICAgfWxbc11baS5pZHhdID0gaChlW3RdLCBpLCAhMCk7XG4gICAgICAgICAgICB9KSwgbFtzXSAmJiB0LmluQXJyYXkobnVsbCwgbFtzXS5zbGljZSgwLCAzKSkgPCAwICYmIChsW3NdWzNdID0gMSwgbi5mcm9tICYmIChsLl9yZ2JhID0gbi5mcm9tKGxbc10pKSk7XG4gICAgICAgICAgfSksIHRoaXMpIDogdm9pZCAwO1xuICAgICAgICB9LCBpczogZnVuY3Rpb24gaXModCkge1xuICAgICAgICAgIHZhciBlID0gcih0KSxcbiAgICAgICAgICAgICAgaSA9ICEwLFxuICAgICAgICAgICAgICBuID0gdGhpcztyZXR1cm4gYyhvLCBmdW5jdGlvbiAodCwgcykge1xuICAgICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICAgICAgbyA9IGVbcy5jYWNoZV07cmV0dXJuIG8gJiYgKHIgPSBuW3MuY2FjaGVdIHx8IHMudG8gJiYgcy50byhuLl9yZ2JhKSB8fCBbXSwgYyhzLnByb3BzLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBvW2UuaWR4XSkgcmV0dXJuIGkgPSBvW2UuaWR4XSA9PT0gcltlLmlkeF07XG4gICAgICAgICAgICB9KSksIGk7XG4gICAgICAgICAgfSksIGk7XG4gICAgICAgIH0sIF9zcGFjZTogZnVuY3Rpb24gX3NwYWNlKCkge1xuICAgICAgICAgIHZhciB0ID0gW10sXG4gICAgICAgICAgICAgIGUgPSB0aGlzO3JldHVybiBjKG8sIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgICBlW24uY2FjaGVdICYmIHQucHVzaChpKTtcbiAgICAgICAgICB9KSwgdC5wb3AoKTtcbiAgICAgICAgfSwgdHJhbnNpdGlvbjogZnVuY3Rpb24gdHJhbnNpdGlvbih0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSByKHQpLFxuICAgICAgICAgICAgICBuID0gaS5fc3BhY2UoKSxcbiAgICAgICAgICAgICAgcyA9IG9bbl0sXG4gICAgICAgICAgICAgIGwgPSAwID09PSB0aGlzLmFscGhhKCkgPyByKFwidHJhbnNwYXJlbnRcIikgOiB0aGlzLFxuICAgICAgICAgICAgICB1ID0gbFtzLmNhY2hlXSB8fCBzLnRvKGwuX3JnYmEpLFxuICAgICAgICAgICAgICBkID0gdS5zbGljZSgpO3JldHVybiBpID0gaVtzLmNhY2hlXSwgYyhzLnByb3BzLCBmdW5jdGlvbiAodCwgbikge1xuICAgICAgICAgICAgdmFyIHMgPSBuLmlkeCxcbiAgICAgICAgICAgICAgICByID0gdVtzXSxcbiAgICAgICAgICAgICAgICBvID0gaVtzXSxcbiAgICAgICAgICAgICAgICBsID0gYVtuLnR5cGVdIHx8IHt9O251bGwgIT09IG8gJiYgKG51bGwgPT09IHIgPyBkW3NdID0gbyA6IChsLm1vZCAmJiAobyAtIHIgPiBsLm1vZCAvIDIgPyByICs9IGwubW9kIDogciAtIG8gPiBsLm1vZCAvIDIgJiYgKHIgLT0gbC5tb2QpKSwgZFtzXSA9IGgoKG8gLSByKSAqIGUgKyByLCBuKSkpO1xuICAgICAgICAgIH0pLCB0aGlzW25dKGQpO1xuICAgICAgICB9LCBibGVuZDogZnVuY3Rpb24gYmxlbmQoZSkge1xuICAgICAgICAgIGlmICgxID09PSB0aGlzLl9yZ2JhWzNdKSByZXR1cm4gdGhpczt2YXIgaSA9IHRoaXMuX3JnYmEuc2xpY2UoKSxcbiAgICAgICAgICAgICAgbiA9IGkucG9wKCksXG4gICAgICAgICAgICAgIHMgPSByKGUpLl9yZ2JhO3JldHVybiByKHQubWFwKGksIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gKDEgLSBuKSAqIHNbZV0gKyBuICogdDtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIHRvUmdiYVN0cmluZzogZnVuY3Rpb24gdG9SZ2JhU3RyaW5nKCkge1xuICAgICAgICAgIHZhciBlID0gXCJyZ2JhKFwiLFxuICAgICAgICAgICAgICBpID0gdC5tYXAodGhpcy5fcmdiYSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBlID4gMiA/IDEgOiAwIDogdDtcbiAgICAgICAgICB9KTtyZXR1cm4gMSA9PT0gaVszXSAmJiAoaS5wb3AoKSwgZSA9IFwicmdiKFwiKSwgZSArIGkuam9pbigpICsgXCIpXCI7XG4gICAgICAgIH0sIHRvSHNsYVN0cmluZzogZnVuY3Rpb24gdG9Ic2xhU3RyaW5nKCkge1xuICAgICAgICAgIHZhciBlID0gXCJoc2xhKFwiLFxuICAgICAgICAgICAgICBpID0gdC5tYXAodGhpcy5oc2xhKCksIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ICYmICh0ID0gZSA+IDIgPyAxIDogMCksIGUgJiYgZSA8IDMgJiYgKHQgPSBNYXRoLnJvdW5kKDEwMCAqIHQpICsgXCIlXCIpLCB0O1xuICAgICAgICAgIH0pO3JldHVybiAxID09PSBpWzNdICYmIChpLnBvcCgpLCBlID0gXCJoc2woXCIpLCBlICsgaS5qb2luKCkgKyBcIilcIjtcbiAgICAgICAgfSwgdG9IZXhTdHJpbmc6IGZ1bmN0aW9uIHRvSGV4U3RyaW5nKGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMuX3JnYmEuc2xpY2UoKSxcbiAgICAgICAgICAgICAgbiA9IGkucG9wKCk7cmV0dXJuIGUgJiYgaS5wdXNoKH5+KDI1NSAqIG4pKSwgXCIjXCIgKyB0Lm1hcChpLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgPT09ICh0ID0gKHQgfHwgMCkudG9TdHJpbmcoMTYpKS5sZW5ndGggPyBcIjBcIiArIHQgOiB0O1xuICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICByZXR1cm4gMCA9PT0gdGhpcy5fcmdiYVszXSA/IFwidHJhbnNwYXJlbnRcIiA6IHRoaXMudG9SZ2JhU3RyaW5nKCk7XG4gICAgICAgIH0gfSksIHIuZm4ucGFyc2UucHJvdG90eXBlID0gci5mbiwgby5oc2xhLnRvID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKG51bGwgPT0gdFswXSB8fCBudWxsID09IHRbMV0gfHwgbnVsbCA9PSB0WzJdKSByZXR1cm4gW251bGwsIG51bGwsIG51bGwsIHRbM11dO3ZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4gPSB0WzBdIC8gMjU1LFxuICAgICAgICAgICAgcyA9IHRbMV0gLyAyNTUsXG4gICAgICAgICAgICByID0gdFsyXSAvIDI1NSxcbiAgICAgICAgICAgIG8gPSB0WzNdLFxuICAgICAgICAgICAgYSA9IE1hdGgubWF4KG4sIHMsIHIpLFxuICAgICAgICAgICAgbCA9IE1hdGgubWluKG4sIHMsIHIpLFxuICAgICAgICAgICAgdSA9IGEgLSBsLFxuICAgICAgICAgICAgYyA9IGEgKyBsLFxuICAgICAgICAgICAgaCA9IC41ICogYztyZXR1cm4gZSA9IGwgPT09IGEgPyAwIDogbiA9PT0gYSA/IDYwICogKHMgLSByKSAvIHUgKyAzNjAgOiBzID09PSBhID8gNjAgKiAociAtIG4pIC8gdSArIDEyMCA6IDYwICogKG4gLSBzKSAvIHUgKyAyNDAsIGkgPSAwID09PSB1ID8gMCA6IGggPD0gLjUgPyB1IC8gYyA6IHUgLyAoMiAtIGMpLCBbTWF0aC5yb3VuZChlKSAlIDM2MCwgaSwgaCwgbnVsbCA9PSBvID8gMSA6IG9dO1xuICAgICAgfSwgby5oc2xhLmZyb20gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICBpZiAobnVsbCA9PSB0WzBdIHx8IG51bGwgPT0gdFsxXSB8fCBudWxsID09IHRbMl0pIHJldHVybiBbbnVsbCwgbnVsbCwgbnVsbCwgdFszXV07dmFyIGUgPSB0WzBdIC8gMzYwLFxuICAgICAgICAgICAgaSA9IHRbMV0sXG4gICAgICAgICAgICBuID0gdFsyXSxcbiAgICAgICAgICAgIHMgPSB0WzNdLFxuICAgICAgICAgICAgciA9IG4gPD0gLjUgPyBuICogKDEgKyBpKSA6IG4gKyBpIC0gbiAqIGksXG4gICAgICAgICAgICBvID0gMiAqIG4gLSByO3JldHVybiBbTWF0aC5yb3VuZCgyNTUgKiBwKG8sIHIsIGUgKyAxIC8gMykpLCBNYXRoLnJvdW5kKDI1NSAqIHAobywgciwgZSkpLCBNYXRoLnJvdW5kKDI1NSAqIHAobywgciwgZSAtIDEgLyAzKSksIHNdO1xuICAgICAgfSwgYyhvLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICB2YXIgcyA9IGkucHJvcHMsXG4gICAgICAgICAgICBvID0gaS5jYWNoZSxcbiAgICAgICAgICAgIGEgPSBpLnRvLFxuICAgICAgICAgICAgbCA9IGkuZnJvbTtyLmZuW2VdID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoYSAmJiAhdGhpc1tvXSAmJiAodGhpc1tvXSA9IGEodGhpcy5fcmdiYSkpLCB2b2lkIDAgPT09IGUpIHJldHVybiB0aGlzW29dLnNsaWNlKCk7dmFyIGksXG4gICAgICAgICAgICAgIG4gPSB0LnR5cGUoZSksXG4gICAgICAgICAgICAgIHUgPSBcImFycmF5XCIgPT09IG4gfHwgXCJvYmplY3RcIiA9PT0gbiA/IGUgOiBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGQgPSB0aGlzW29dLnNsaWNlKCk7cmV0dXJuIGMocywgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdVtcIm9iamVjdFwiID09PSBuID8gdCA6IGUuaWR4XTtudWxsID09IGkgJiYgKGkgPSBkW2UuaWR4XSksIGRbZS5pZHhdID0gaChpLCBlKTtcbiAgICAgICAgICB9KSwgbCA/ICgoaSA9IHIobChkKSkpW29dID0gZCwgaSkgOiByKGQpO1xuICAgICAgICB9LCBjKHMsIGZ1bmN0aW9uIChpLCBzKSB7XG4gICAgICAgICAgci5mbltpXSB8fCAoci5mbltpXSA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICBhID0gdC50eXBlKHIpLFxuICAgICAgICAgICAgICAgIGwgPSBcImFscGhhXCIgPT09IGkgPyB0aGlzLl9oc2xhID8gXCJoc2xhXCIgOiBcInJnYmFcIiA6IGUsXG4gICAgICAgICAgICAgICAgdSA9IHRoaXNbbF0oKSxcbiAgICAgICAgICAgICAgICBjID0gdVtzLmlkeF07cmV0dXJuIFwidW5kZWZpbmVkXCIgPT09IGEgPyBjIDogKFwiZnVuY3Rpb25cIiA9PT0gYSAmJiAociA9IHIuY2FsbCh0aGlzLCBjKSwgYSA9IHQudHlwZShyKSksIG51bGwgPT0gciAmJiBzLmVtcHR5ID8gdGhpcyA6IChcInN0cmluZ1wiID09PSBhICYmIChvID0gbi5leGVjKHIpKSAmJiAociA9IGMgKyBwYXJzZUZsb2F0KG9bMl0pICogKFwiK1wiID09PSBvWzFdID8gMSA6IC0xKSksIHVbcy5pZHhdID0gciwgdGhpc1tsXSh1KSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pLCByLmhvb2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgaSA9IGUuc3BsaXQoXCIgXCIpO2MoaSwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICB0LmNzc0hvb2tzW2ldID0geyBzZXQ6IGZ1bmN0aW9uIHNldChlLCBuKSB7XG4gICAgICAgICAgICAgIHZhciBzLFxuICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgIGEgPSBcIlwiO2lmIChcInRyYW5zcGFyZW50XCIgIT09IG4gJiYgKFwic3RyaW5nXCIgIT09IHQudHlwZShuKSB8fCAocyA9IGQobikpKSkge1xuICAgICAgICAgICAgICAgIGlmIChuID0gcihzIHx8IG4pLCAhbC5yZ2JhICYmIDEgIT09IG4uX3JnYmFbM10pIHtcbiAgICAgICAgICAgICAgICAgIGZvciAobyA9IFwiYmFja2dyb3VuZENvbG9yXCIgPT09IGkgPyBlLnBhcmVudE5vZGUgOiBlOyAoXCJcIiA9PT0gYSB8fCBcInRyYW5zcGFyZW50XCIgPT09IGEpICYmIG8gJiYgby5zdHlsZTspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBhID0gdC5jc3MobywgXCJiYWNrZ3JvdW5kQ29sb3JcIiksIG8gPSBvLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHt9XG4gICAgICAgICAgICAgICAgICB9biA9IG4uYmxlbmQoYSAmJiBcInRyYW5zcGFyZW50XCIgIT09IGEgPyBhIDogXCJfZGVmYXVsdFwiKTtcbiAgICAgICAgICAgICAgICB9biA9IG4udG9SZ2JhU3RyaW5nKCk7XG4gICAgICAgICAgICAgIH10cnkge1xuICAgICAgICAgICAgICAgIGUuc3R5bGVbaV0gPSBuO1xuICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICAgICAgfSB9LCB0LmZ4LnN0ZXBbaV0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5jb2xvckluaXQgfHwgKGUuc3RhcnQgPSByKGUuZWxlbSwgaSksIGUuZW5kID0gcihlLmVuZCksIGUuY29sb3JJbml0ID0gITApLCB0LmNzc0hvb2tzW2ldLnNldChlLmVsZW0sIGUuc3RhcnQudHJhbnNpdGlvbihlLmVuZCwgZS5wb3MpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0sIHIuaG9vayhcImJhY2tncm91bmRDb2xvciBib3JkZXJCb3R0b21Db2xvciBib3JkZXJMZWZ0Q29sb3IgYm9yZGVyUmlnaHRDb2xvciBib3JkZXJUb3BDb2xvciBjb2xvciBjb2x1bW5SdWxlQ29sb3Igb3V0bGluZUNvbG9yIHRleHREZWNvcmF0aW9uQ29sb3IgdGV4dEVtcGhhc2lzQ29sb3JcIiksIHQuY3NzSG9va3MuYm9yZGVyQ29sb3IgPSB7IGV4cGFuZDogZnVuY3Rpb24gZXhwYW5kKHQpIHtcbiAgICAgICAgICB2YXIgZSA9IHt9O3JldHVybiBjKFtcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiXSwgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICAgIGVbXCJib3JkZXJcIiArIG4gKyBcIkNvbG9yXCJdID0gdDtcbiAgICAgICAgICB9KSwgZTtcbiAgICAgICAgfSB9LCBpID0gdC5Db2xvci5uYW1lcyA9IHsgYXF1YTogXCIjMDBmZmZmXCIsIGJsYWNrOiBcIiMwMDAwMDBcIiwgYmx1ZTogXCIjMDAwMGZmXCIsIGZ1Y2hzaWE6IFwiI2ZmMDBmZlwiLCBncmF5OiBcIiM4MDgwODBcIiwgZ3JlZW46IFwiIzAwODAwMFwiLCBsaW1lOiBcIiMwMGZmMDBcIiwgbWFyb29uOiBcIiM4MDAwMDBcIiwgbmF2eTogXCIjMDAwMDgwXCIsIG9saXZlOiBcIiM4MDgwMDBcIiwgcHVycGxlOiBcIiM4MDAwODBcIiwgcmVkOiBcIiNmZjAwMDBcIiwgc2lsdmVyOiBcIiNjMGMwYzBcIiwgdGVhbDogXCIjMDA4MDgwXCIsIHdoaXRlOiBcIiNmZmZmZmZcIiwgeWVsbG93OiBcIiNmZmZmMDBcIiwgdHJhbnNwYXJlbnQ6IFtudWxsLCBudWxsLCBudWxsLCAwXSwgX2RlZmF1bHQ6IFwiI2ZmZmZmZlwiIH07XG4gICAgfSh1KSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGUsXG4gICAgICAgICAgaSA9IFtcImFkZFwiLCBcInJlbW92ZVwiLCBcInRvZ2dsZVwiXSxcbiAgICAgICAgICBuID0geyBib3JkZXI6IDEsIGJvcmRlckJvdHRvbTogMSwgYm9yZGVyQ29sb3I6IDEsIGJvcmRlckxlZnQ6IDEsIGJvcmRlclJpZ2h0OiAxLCBib3JkZXJUb3A6IDEsIGJvcmRlcldpZHRoOiAxLCBtYXJnaW46IDEsIHBhZGRpbmc6IDEgfTtmdW5jdGlvbiBzKGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyA9IGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA/IGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpIDogZS5jdXJyZW50U3R5bGUsXG4gICAgICAgICAgICByID0ge307aWYgKHMgJiYgcy5sZW5ndGggJiYgc1swXSAmJiBzW3NbMF1dKSBmb3IgKG4gPSBzLmxlbmd0aDsgbi0tOykge1xuICAgICAgICAgIGkgPSBzW25dLCBcInN0cmluZ1wiID09IHR5cGVvZiBzW2ldICYmIChyW3QuY2FtZWxDYXNlKGkpXSA9IHNbaV0pO1xuICAgICAgICB9IGVsc2UgZm9yIChpIGluIHMpIHtcbiAgICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBzW2ldICYmIChyW2ldID0gc1tpXSk7XG4gICAgICAgIH1yZXR1cm4gcjtcbiAgICAgIH10LmVhY2goW1wiYm9yZGVyTGVmdFN0eWxlXCIsIFwiYm9yZGVyUmlnaHRTdHlsZVwiLCBcImJvcmRlckJvdHRvbVN0eWxlXCIsIFwiYm9yZGVyVG9wU3R5bGVcIl0sIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgIHQuZnguc3RlcFtpXSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgKFwibm9uZVwiICE9PSB0LmVuZCAmJiAhdC5zZXRBdHRyIHx8IDEgPT09IHQucG9zICYmICF0LnNldEF0dHIpICYmICh1LnN0eWxlKHQuZWxlbSwgaSwgdC5lbmQpLCB0LnNldEF0dHIgPSAhMCk7XG4gICAgICAgIH07XG4gICAgICB9KSwgdC5mbi5hZGRCYWNrIHx8ICh0LmZuLmFkZEJhY2sgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQobnVsbCA9PSB0ID8gdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcih0KSk7XG4gICAgICB9KSwgdC5lZmZlY3RzLmFuaW1hdGVDbGFzcyA9IGZ1bmN0aW9uIChlLCByLCBvLCBhKSB7XG4gICAgICAgIHZhciBsID0gdC5zcGVlZChyLCBvLCBhKTtyZXR1cm4gdGhpcy5xdWV1ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICAgIG8gPSB0KHRoaXMpLFxuICAgICAgICAgICAgICBhID0gby5hdHRyKFwiY2xhc3NcIikgfHwgXCJcIixcbiAgICAgICAgICAgICAgdSA9IGwuY2hpbGRyZW4gPyBvLmZpbmQoXCIqXCIpLmFkZEJhY2soKSA6IG87dSA9IHUubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gdCh0aGlzKTtyZXR1cm4geyBlbDogZSwgc3RhcnQ6IHModGhpcykgfTtcbiAgICAgICAgICB9KSwgKHIgPSBmdW5jdGlvbiByKCkge1xuICAgICAgICAgICAgdC5lYWNoKGksIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgICAgIGVbaV0gJiYgb1tpICsgXCJDbGFzc1wiXShlW2ldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKCksIHUgPSB1Lm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmQgPSBzKHRoaXMuZWxbMF0pLCB0aGlzLmRpZmYgPSBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICBvID0ge307Zm9yIChzIGluIGkpIHtcbiAgICAgICAgICAgICAgICByID0gaVtzXSwgZVtzXSAhPT0gciAmJiAobltzXSB8fCAhdC5meC5zdGVwW3NdICYmIGlzTmFOKHBhcnNlRmxvYXQocikpIHx8IChvW3NdID0gcikpO1xuICAgICAgICAgICAgICB9cmV0dXJuIG87XG4gICAgICAgICAgICB9KHRoaXMuc3RhcnQsIHRoaXMuZW5kKSwgdGhpcztcbiAgICAgICAgICB9KSwgby5hdHRyKFwiY2xhc3NcIiwgYSksIHUgPSB1Lm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgaSA9IHQuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICBuID0gdC5leHRlbmQoe30sIGwsIHsgcXVldWU6ICExLCBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICAgaS5yZXNvbHZlKGUpO1xuICAgICAgICAgICAgICB9IH0pO3JldHVybiB0aGlzLmVsLmFuaW1hdGUodGhpcy5kaWZmLCBuKSwgaS5wcm9taXNlKCk7XG4gICAgICAgICAgfSksIHQud2hlbi5hcHBseSh0LCB1LmdldCgpKS5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHIoKSwgdC5lYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuZWw7dC5lYWNoKHRoaXMuZGlmZiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICBlLmNzcyh0LCBcIlwiKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSwgbC5jb21wbGV0ZS5jYWxsKG9bMF0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHQuZm4uZXh0ZW5kKHsgYWRkQ2xhc3M6IChlID0gdC5mbi5hZGRDbGFzcywgZnVuY3Rpb24gKGksIG4sIHMsIHIpIHtcbiAgICAgICAgICByZXR1cm4gbiA/IHQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLCB7IGFkZDogaSB9LCBuLCBzLCByKSA6IGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSksIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaSwgbiwgcywgcikge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gdC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMsIHsgcmVtb3ZlOiBpIH0sIG4sIHMsIHIpIDogZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0odC5mbi5yZW1vdmVDbGFzcyksIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaSwgbiwgcywgciwgbykge1xuICAgICAgICAgICAgcmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiBuIHx8IHZvaWQgMCA9PT0gbiA/IHMgPyB0LmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwodGhpcywgbiA/IHsgYWRkOiBpIH0gOiB7IHJlbW92ZTogaSB9LCBzLCByLCBvKSA6IGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLCB7IHRvZ2dsZTogaSB9LCBuLCBzLCByKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KHQuZm4udG9nZ2xlQ2xhc3MpLCBzd2l0Y2hDbGFzczogZnVuY3Rpb24gc3dpdGNoQ2xhc3MoZSwgaSwgbiwgcywgcikge1xuICAgICAgICAgIHJldHVybiB0LmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwodGhpcywgeyBhZGQ6IGksIHJlbW92ZTogZSB9LCBuLCBzLCByKTtcbiAgICAgICAgfSB9KTtcbiAgICB9KCksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlO2Z1bmN0aW9uIGkoZSwgaSwgbiwgcykge1xuICAgICAgICByZXR1cm4gdC5pc1BsYWluT2JqZWN0KGUpICYmIChpID0gZSwgZSA9IGUuZWZmZWN0KSwgZSA9IHsgZWZmZWN0OiBlIH0sIG51bGwgPT0gaSAmJiAoaSA9IHt9KSwgdC5pc0Z1bmN0aW9uKGkpICYmIChzID0gaSwgbiA9IG51bGwsIGkgPSB7fSksIChcIm51bWJlclwiID09IHR5cGVvZiBpIHx8IHQuZnguc3BlZWRzW2ldKSAmJiAocyA9IG4sIG4gPSBpLCBpID0ge30pLCB0LmlzRnVuY3Rpb24obikgJiYgKHMgPSBuLCBuID0gbnVsbCksIGkgJiYgdC5leHRlbmQoZSwgaSksIG4gPSBuIHx8IGkuZHVyYXRpb24sIGUuZHVyYXRpb24gPSB0LmZ4Lm9mZiA/IDAgOiBcIm51bWJlclwiID09IHR5cGVvZiBuID8gbiA6IG4gaW4gdC5meC5zcGVlZHMgPyB0LmZ4LnNwZWVkc1tuXSA6IHQuZnguc3BlZWRzLl9kZWZhdWx0LCBlLmNvbXBsZXRlID0gcyB8fCBpLmNvbXBsZXRlLCBlO1xuICAgICAgfWZ1bmN0aW9uIG4oZSkge1xuICAgICAgICByZXR1cm4gIShlICYmIFwibnVtYmVyXCIgIT0gdHlwZW9mIGUgJiYgIXQuZnguc3BlZWRzW2VdKSB8fCBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmICF0LmVmZmVjdHMuZWZmZWN0W2VdIHx8ICEhdC5pc0Z1bmN0aW9uKGUpIHx8IFwib2JqZWN0XCIgPT0gKHR5cGVvZiBlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZSkpICYmICFlLmVmZmVjdDtcbiAgICAgIH1mdW5jdGlvbiBzKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSBlLm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgIG4gPSBlLm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICBzID0gL15yZWN0XFwoKC0/XFxkKlxcLj9cXGQqcHh8LT9cXGQrJXxhdXRvKSw/XFxzKigtP1xcZCpcXC4/XFxkKnB4fC0/XFxkKyV8YXV0byksP1xccyooLT9cXGQqXFwuP1xcZCpweHwtP1xcZCslfGF1dG8pLD9cXHMqKC0/XFxkKlxcLj9cXGQqcHh8LT9cXGQrJXxhdXRvKVxcKSQvLmV4ZWModCkgfHwgW1wiXCIsIDAsIGksIG4sIDBdO3JldHVybiB7IHRvcDogcGFyc2VGbG9hdChzWzFdKSB8fCAwLCByaWdodDogXCJhdXRvXCIgPT09IHNbMl0gPyBpIDogcGFyc2VGbG9hdChzWzJdKSwgYm90dG9tOiBcImF1dG9cIiA9PT0gc1szXSA/IG4gOiBwYXJzZUZsb2F0KHNbM10pLCBsZWZ0OiBwYXJzZUZsb2F0KHNbNF0pIHx8IDAgfTtcbiAgICAgIH10LmV4cHIgJiYgdC5leHByLmZpbHRlcnMgJiYgdC5leHByLmZpbHRlcnMuYW5pbWF0ZWQgJiYgKHQuZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gKGUgPSB0LmV4cHIuZmlsdGVycy5hbmltYXRlZCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICEhdChpKS5kYXRhKGwpIHx8IGUoaSk7XG4gICAgICB9KSksICExICE9PSB0LnVpQmFja0NvbXBhdCAmJiB0LmV4dGVuZCh0LmVmZmVjdHMsIHsgc2F2ZTogZnVuY3Rpb24gc2F2ZSh0LCBlKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBlLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgbnVsbCAhPT0gZVtpXSAmJiB0LmRhdGEoXCJ1aS1lZmZlY3RzLVwiICsgZVtpXSwgdFswXS5zdHlsZVtlW2ldXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCByZXN0b3JlOiBmdW5jdGlvbiByZXN0b3JlKHQsIGUpIHtcbiAgICAgICAgICBmb3IgKHZhciBpLCBuID0gMCwgcyA9IGUubGVuZ3RoOyBuIDwgczsgbisrKSB7XG4gICAgICAgICAgICBudWxsICE9PSBlW25dICYmIChpID0gdC5kYXRhKFwidWktZWZmZWN0cy1cIiArIGVbbl0pLCB0LmNzcyhlW25dLCBpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzZXRNb2RlOiBmdW5jdGlvbiBzZXRNb2RlKHQsIGUpIHtcbiAgICAgICAgICByZXR1cm4gXCJ0b2dnbGVcIiA9PT0gZSAmJiAoZSA9IHQuaXMoXCI6aGlkZGVuXCIpID8gXCJzaG93XCIgOiBcImhpZGVcIiksIGU7XG4gICAgICAgIH0sIGNyZWF0ZVdyYXBwZXI6IGZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIoZSkge1xuICAgICAgICAgIGlmIChlLnBhcmVudCgpLmlzKFwiLnVpLWVmZmVjdHMtd3JhcHBlclwiKSkgcmV0dXJuIGUucGFyZW50KCk7dmFyIGkgPSB7IHdpZHRoOiBlLm91dGVyV2lkdGgoITApLCBoZWlnaHQ6IGUub3V0ZXJIZWlnaHQoITApLCBmbG9hdDogZS5jc3MoXCJmbG9hdFwiKSB9LFxuICAgICAgICAgICAgICBuID0gdChcIjxkaXY+PC9kaXY+XCIpLmFkZENsYXNzKFwidWktZWZmZWN0cy13cmFwcGVyXCIpLmNzcyh7IGZvbnRTaXplOiBcIjEwMCVcIiwgYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLCBib3JkZXI6IFwibm9uZVwiLCBtYXJnaW46IDAsIHBhZGRpbmc6IDAgfSksXG4gICAgICAgICAgICAgIHMgPSB7IHdpZHRoOiBlLndpZHRoKCksIGhlaWdodDogZS5oZWlnaHQoKSB9LFxuICAgICAgICAgICAgICByID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDt0cnkge1xuICAgICAgICAgICAgci5pZDtcbiAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICByID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICB9cmV0dXJuIGUud3JhcChuKSwgKGVbMF0gPT09IHIgfHwgdC5jb250YWlucyhlWzBdLCByKSkgJiYgdChyKS50cmlnZ2VyKFwiZm9jdXNcIiksIG4gPSBlLnBhcmVudCgpLCBcInN0YXRpY1wiID09PSBlLmNzcyhcInBvc2l0aW9uXCIpID8gKG4uY3NzKHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9KSwgZS5jc3MoeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH0pKSA6ICh0LmV4dGVuZChpLCB7IHBvc2l0aW9uOiBlLmNzcyhcInBvc2l0aW9uXCIpLCB6SW5kZXg6IGUuY3NzKFwiei1pbmRleFwiKSB9KSwgdC5lYWNoKFtcInRvcFwiLCBcImxlZnRcIiwgXCJib3R0b21cIiwgXCJyaWdodFwiXSwgZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgICAgIGlbbl0gPSBlLmNzcyhuKSwgaXNOYU4ocGFyc2VJbnQoaVtuXSwgMTApKSAmJiAoaVtuXSA9IFwiYXV0b1wiKTtcbiAgICAgICAgICB9KSwgZS5jc3MoeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLCB0b3A6IDAsIGxlZnQ6IDAsIHJpZ2h0OiBcImF1dG9cIiwgYm90dG9tOiBcImF1dG9cIiB9KSksIGUuY3NzKHMpLCBuLmNzcyhpKS5zaG93KCk7XG4gICAgICAgIH0sIHJlbW92ZVdyYXBwZXI6IGZ1bmN0aW9uIHJlbW92ZVdyYXBwZXIoZSkge1xuICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtyZXR1cm4gZS5wYXJlbnQoKS5pcyhcIi51aS1lZmZlY3RzLXdyYXBwZXJcIikgJiYgKGUucGFyZW50KCkucmVwbGFjZVdpdGgoZSksIChlWzBdID09PSBpIHx8IHQuY29udGFpbnMoZVswXSwgaSkpICYmIHQoaSkudHJpZ2dlcihcImZvY3VzXCIpKSwgZTtcbiAgICAgICAgfSB9KSwgdC5leHRlbmQodC5lZmZlY3RzLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIGRlZmluZTogZnVuY3Rpb24gZGVmaW5lKGUsIGksIG4pIHtcbiAgICAgICAgICByZXR1cm4gbiB8fCAobiA9IGksIGkgPSBcImVmZmVjdFwiKSwgdC5lZmZlY3RzLmVmZmVjdFtlXSA9IG4sIHQuZWZmZWN0cy5lZmZlY3RbZV0ubW9kZSA9IGksIG47XG4gICAgICAgIH0sIHNjYWxlZERpbWVuc2lvbnM6IGZ1bmN0aW9uIHNjYWxlZERpbWVuc2lvbnModCwgZSwgaSkge1xuICAgICAgICAgIGlmICgwID09PSBlKSByZXR1cm4geyBoZWlnaHQ6IDAsIHdpZHRoOiAwLCBvdXRlckhlaWdodDogMCwgb3V0ZXJXaWR0aDogMCB9O3ZhciBuID0gXCJob3Jpem9udGFsXCIgIT09IGkgPyAoZSB8fCAxMDApIC8gMTAwIDogMSxcbiAgICAgICAgICAgICAgcyA9IFwidmVydGljYWxcIiAhPT0gaSA/IChlIHx8IDEwMCkgLyAxMDAgOiAxO3JldHVybiB7IGhlaWdodDogdC5oZWlnaHQoKSAqIHMsIHdpZHRoOiB0LndpZHRoKCkgKiBuLCBvdXRlckhlaWdodDogdC5vdXRlckhlaWdodCgpICogcywgb3V0ZXJXaWR0aDogdC5vdXRlcldpZHRoKCkgKiBuIH07XG4gICAgICAgIH0sIGNsaXBUb0JveDogZnVuY3Rpb24gY2xpcFRvQm94KHQpIHtcbiAgICAgICAgICByZXR1cm4geyB3aWR0aDogdC5jbGlwLnJpZ2h0IC0gdC5jbGlwLmxlZnQsIGhlaWdodDogdC5jbGlwLmJvdHRvbSAtIHQuY2xpcC50b3AsIGxlZnQ6IHQuY2xpcC5sZWZ0LCB0b3A6IHQuY2xpcC50b3AgfTtcbiAgICAgICAgfSwgdW5zaGlmdDogZnVuY3Rpb24gdW5zaGlmdCh0LCBlLCBpKSB7XG4gICAgICAgICAgdmFyIG4gPSB0LnF1ZXVlKCk7ZSA+IDEgJiYgbi5zcGxpY2UuYXBwbHkobiwgWzEsIDBdLmNvbmNhdChuLnNwbGljZShlLCBpKSkpLCB0LmRlcXVldWUoKTtcbiAgICAgICAgfSwgc2F2ZVN0eWxlOiBmdW5jdGlvbiBzYXZlU3R5bGUodCkge1xuICAgICAgICAgIHQuZGF0YShcInVpLWVmZmVjdHMtc3R5bGVcIiwgdFswXS5zdHlsZS5jc3NUZXh0KTtcbiAgICAgICAgfSwgcmVzdG9yZVN0eWxlOiBmdW5jdGlvbiByZXN0b3JlU3R5bGUodCkge1xuICAgICAgICAgIHRbMF0uc3R5bGUuY3NzVGV4dCA9IHQuZGF0YShcInVpLWVmZmVjdHMtc3R5bGVcIikgfHwgXCJcIiwgdC5yZW1vdmVEYXRhKFwidWktZWZmZWN0cy1zdHlsZVwiKTtcbiAgICAgICAgfSwgbW9kZTogZnVuY3Rpb24gbW9kZSh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSB0LmlzKFwiOmhpZGRlblwiKTtyZXR1cm4gXCJ0b2dnbGVcIiA9PT0gZSAmJiAoZSA9IGkgPyBcInNob3dcIiA6IFwiaGlkZVwiKSwgKGkgPyBcImhpZGVcIiA9PT0gZSA6IFwic2hvd1wiID09PSBlKSAmJiAoZSA9IFwibm9uZVwiKSwgZTtcbiAgICAgICAgfSwgZ2V0QmFzZWxpbmU6IGZ1bmN0aW9uIGdldEJhc2VsaW5lKHQsIGUpIHtcbiAgICAgICAgICB2YXIgaSwgbjtzd2l0Y2ggKHRbMF0pIHtjYXNlIFwidG9wXCI6XG4gICAgICAgICAgICAgIGkgPSAwO2JyZWFrO2Nhc2UgXCJtaWRkbGVcIjpcbiAgICAgICAgICAgICAgaSA9IC41O2JyZWFrO2Nhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgICAgaSA9IDE7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgaSA9IHRbMF0gLyBlLmhlaWdodDt9c3dpdGNoICh0WzFdKSB7Y2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgbiA9IDA7YnJlYWs7Y2FzZSBcImNlbnRlclwiOlxuICAgICAgICAgICAgICBuID0gLjU7YnJlYWs7Y2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgIG4gPSAxO2JyZWFrO2RlZmF1bHQ6XG4gICAgICAgICAgICAgIG4gPSB0WzFdIC8gZS53aWR0aDt9cmV0dXJuIHsgeDogbiwgeTogaSB9O1xuICAgICAgICB9LCBjcmVhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24gY3JlYXRlUGxhY2Vob2xkZXIoZSkge1xuICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICBuID0gZS5jc3MoXCJwb3NpdGlvblwiKSxcbiAgICAgICAgICAgICAgcyA9IGUucG9zaXRpb24oKTtyZXR1cm4gZS5jc3MoeyBtYXJnaW5Ub3A6IGUuY3NzKFwibWFyZ2luVG9wXCIpLCBtYXJnaW5Cb3R0b206IGUuY3NzKFwibWFyZ2luQm90dG9tXCIpLCBtYXJnaW5MZWZ0OiBlLmNzcyhcIm1hcmdpbkxlZnRcIiksIG1hcmdpblJpZ2h0OiBlLmNzcyhcIm1hcmdpblJpZ2h0XCIpIH0pLm91dGVyV2lkdGgoZS5vdXRlcldpZHRoKCkpLm91dGVySGVpZ2h0KGUub3V0ZXJIZWlnaHQoKSksIC9eKHN0YXRpY3xyZWxhdGl2ZSkvLnRlc3QobikgJiYgKG4gPSBcImFic29sdXRlXCIsIGkgPSB0KFwiPFwiICsgZVswXS5ub2RlTmFtZSArIFwiPlwiKS5pbnNlcnRBZnRlcihlKS5jc3MoeyBkaXNwbGF5OiAvXihpbmxpbmV8cnVieSkvLnRlc3QoZS5jc3MoXCJkaXNwbGF5XCIpKSA/IFwiaW5saW5lLWJsb2NrXCIgOiBcImJsb2NrXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIG1hcmdpblRvcDogZS5jc3MoXCJtYXJnaW5Ub3BcIiksIG1hcmdpbkJvdHRvbTogZS5jc3MoXCJtYXJnaW5Cb3R0b21cIiksIG1hcmdpbkxlZnQ6IGUuY3NzKFwibWFyZ2luTGVmdFwiKSwgbWFyZ2luUmlnaHQ6IGUuY3NzKFwibWFyZ2luUmlnaHRcIiksIGZsb2F0OiBlLmNzcyhcImZsb2F0XCIpIH0pLm91dGVyV2lkdGgoZS5vdXRlcldpZHRoKCkpLm91dGVySGVpZ2h0KGUub3V0ZXJIZWlnaHQoKSkuYWRkQ2xhc3MoXCJ1aS1lZmZlY3RzLXBsYWNlaG9sZGVyXCIpLCBlLmRhdGEoXCJ1aS1lZmZlY3RzLXBsYWNlaG9sZGVyXCIsIGkpKSwgZS5jc3MoeyBwb3NpdGlvbjogbiwgbGVmdDogcy5sZWZ0LCB0b3A6IHMudG9wIH0pLCBpO1xuICAgICAgICB9LCByZW1vdmVQbGFjZWhvbGRlcjogZnVuY3Rpb24gcmVtb3ZlUGxhY2Vob2xkZXIodCkge1xuICAgICAgICAgIHZhciBlID0gXCJ1aS1lZmZlY3RzLXBsYWNlaG9sZGVyXCIsXG4gICAgICAgICAgICAgIGkgPSB0LmRhdGEoZSk7aSAmJiAoaS5yZW1vdmUoKSwgdC5yZW1vdmVEYXRhKGUpKTtcbiAgICAgICAgfSwgY2xlYW5VcDogZnVuY3Rpb24gY2xlYW5VcChlKSB7XG4gICAgICAgICAgdC5lZmZlY3RzLnJlc3RvcmVTdHlsZShlKSwgdC5lZmZlY3RzLnJlbW92ZVBsYWNlaG9sZGVyKGUpO1xuICAgICAgICB9LCBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGUsIGksIG4sIHMpIHtcbiAgICAgICAgICByZXR1cm4gcyA9IHMgfHwge30sIHQuZWFjaChpLCBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgICAgdmFyIHIgPSBlLmNzc1VuaXQoaSk7clswXSA+IDAgJiYgKHNbaV0gPSByWzBdICogbiArIHJbMV0pO1xuICAgICAgICAgIH0pLCBzO1xuICAgICAgICB9IH0pLCB0LmZuLmV4dGVuZCh7IGVmZmVjdDogZnVuY3Rpb24gZWZmZWN0KCkge1xuICAgICAgICAgIHZhciBlID0gaS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICBuID0gdC5lZmZlY3RzLmVmZmVjdFtlLmVmZmVjdF0sXG4gICAgICAgICAgICAgIHMgPSBuLm1vZGUsXG4gICAgICAgICAgICAgIHIgPSBlLnF1ZXVlLFxuICAgICAgICAgICAgICBvID0gciB8fCBcImZ4XCIsXG4gICAgICAgICAgICAgIGEgPSBlLmNvbXBsZXRlLFxuICAgICAgICAgICAgICB1ID0gZS5tb2RlLFxuICAgICAgICAgICAgICBjID0gW10sXG4gICAgICAgICAgICAgIGggPSBmdW5jdGlvbiBoKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdCh0aGlzKSxcbiAgICAgICAgICAgICAgICBuID0gdC5lZmZlY3RzLm1vZGUoaSwgdSkgfHwgcztpLmRhdGEobCwgITApLCBjLnB1c2gobiksIHMgJiYgKFwic2hvd1wiID09PSBuIHx8IG4gPT09IHMgJiYgXCJoaWRlXCIgPT09IG4pICYmIGkuc2hvdygpLCBzICYmIFwibm9uZVwiID09PSBuIHx8IHQuZWZmZWN0cy5zYXZlU3R5bGUoaSksIHQuaXNGdW5jdGlvbihlKSAmJiBlKCk7XG4gICAgICAgICAgfTtpZiAodC5meC5vZmYgfHwgIW4pIHJldHVybiB1ID8gdGhpc1t1XShlLmR1cmF0aW9uLCBhKSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhICYmIGEuY2FsbCh0aGlzKTtcbiAgICAgICAgICB9KTtmdW5jdGlvbiBkKGkpIHtcbiAgICAgICAgICAgIHZhciByID0gdCh0aGlzKTtmdW5jdGlvbiBvKCkge1xuICAgICAgICAgICAgICB0LmlzRnVuY3Rpb24oYSkgJiYgYS5jYWxsKHJbMF0pLCB0LmlzRnVuY3Rpb24oaSkgJiYgaSgpO1xuICAgICAgICAgICAgfWUubW9kZSA9IGMuc2hpZnQoKSwgITEgPT09IHQudWlCYWNrQ29tcGF0IHx8IHMgPyBcIm5vbmVcIiA9PT0gZS5tb2RlID8gKHJbdV0oKSwgbygpKSA6IG4uY2FsbChyWzBdLCBlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHIucmVtb3ZlRGF0YShsKSwgdC5lZmZlY3RzLmNsZWFuVXAociksIFwiaGlkZVwiID09PSBlLm1vZGUgJiYgci5oaWRlKCksIG8oKTtcbiAgICAgICAgICAgIH0pIDogKHIuaXMoXCI6aGlkZGVuXCIpID8gXCJoaWRlXCIgPT09IHUgOiBcInNob3dcIiA9PT0gdSkgPyAoclt1XSgpLCBvKCkpIDogbi5jYWxsKHJbMF0sIGUsIG8pO1xuICAgICAgICAgIH1yZXR1cm4gITEgPT09IHIgPyB0aGlzLmVhY2goaCkuZWFjaChkKSA6IHRoaXMucXVldWUobywgaCkucXVldWUobywgZCk7XG4gICAgICAgIH0sIHNob3c6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAobihlKSkgcmV0dXJuIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTt2YXIgcyA9IGkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtyZXR1cm4gcy5tb2RlID0gXCJzaG93XCIsIHRoaXMuZWZmZWN0LmNhbGwodGhpcywgcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSh0LmZuLnNob3cpLCBoaWRlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKG4oZSkpIHJldHVybiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7dmFyIHMgPSBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7cmV0dXJuIHMubW9kZSA9IFwiaGlkZVwiLCB0aGlzLmVmZmVjdC5jYWxsKHRoaXMsIHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0odC5mbi5oaWRlKSwgdG9nZ2xlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKG4oZSkgfHwgXCJib29sZWFuXCIgPT0gdHlwZW9mIGUpIHJldHVybiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7dmFyIHMgPSBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7cmV0dXJuIHMubW9kZSA9IFwidG9nZ2xlXCIsIHRoaXMuZWZmZWN0LmNhbGwodGhpcywgcyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSh0LmZuLnRvZ2dsZSksIGNzc1VuaXQ6IGZ1bmN0aW9uIGNzc1VuaXQoZSkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5jc3MoZSksXG4gICAgICAgICAgICAgIG4gPSBbXTtyZXR1cm4gdC5lYWNoKFtcImVtXCIsIFwicHhcIiwgXCIlXCIsIFwicHRcIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICBpLmluZGV4T2YoZSkgPiAwICYmIChuID0gW3BhcnNlRmxvYXQoaSksIGVdKTtcbiAgICAgICAgICB9KSwgbjtcbiAgICAgICAgfSwgY3NzQ2xpcDogZnVuY3Rpb24gY3NzQ2xpcCh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQgPyB0aGlzLmNzcyhcImNsaXBcIiwgXCJyZWN0KFwiICsgdC50b3AgKyBcInB4IFwiICsgdC5yaWdodCArIFwicHggXCIgKyB0LmJvdHRvbSArIFwicHggXCIgKyB0LmxlZnQgKyBcInB4KVwiKSA6IHModGhpcy5jc3MoXCJjbGlwXCIpLCB0aGlzKTtcbiAgICAgICAgfSwgdHJhbnNmZXI6IGZ1bmN0aW9uIHRyYW5zZmVyKGUsIGkpIHtcbiAgICAgICAgICB2YXIgbiA9IHQodGhpcyksXG4gICAgICAgICAgICAgIHMgPSB0KGUudG8pLFxuICAgICAgICAgICAgICByID0gXCJmaXhlZFwiID09PSBzLmNzcyhcInBvc2l0aW9uXCIpLFxuICAgICAgICAgICAgICBvID0gdChcImJvZHlcIiksXG4gICAgICAgICAgICAgIGEgPSByID8gby5zY3JvbGxUb3AoKSA6IDAsXG4gICAgICAgICAgICAgIGwgPSByID8gby5zY3JvbGxMZWZ0KCkgOiAwLFxuICAgICAgICAgICAgICB1ID0gcy5vZmZzZXQoKSxcbiAgICAgICAgICAgICAgYyA9IHsgdG9wOiB1LnRvcCAtIGEsIGxlZnQ6IHUubGVmdCAtIGwsIGhlaWdodDogcy5pbm5lckhlaWdodCgpLCB3aWR0aDogcy5pbm5lcldpZHRoKCkgfSxcbiAgICAgICAgICAgICAgaCA9IG4ub2Zmc2V0KCksXG4gICAgICAgICAgICAgIGQgPSB0KFwiPGRpdiBjbGFzcz0ndWktZWZmZWN0cy10cmFuc2Zlcic+PC9kaXY+XCIpLmFwcGVuZFRvKFwiYm9keVwiKS5hZGRDbGFzcyhlLmNsYXNzTmFtZSkuY3NzKHsgdG9wOiBoLnRvcCAtIGEsIGxlZnQ6IGgubGVmdCAtIGwsIGhlaWdodDogbi5pbm5lckhlaWdodCgpLCB3aWR0aDogbi5pbm5lcldpZHRoKCksIHBvc2l0aW9uOiByID8gXCJmaXhlZFwiIDogXCJhYnNvbHV0ZVwiIH0pLmFuaW1hdGUoYywgZS5kdXJhdGlvbiwgZS5lYXNpbmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGQucmVtb3ZlKCksIHQuaXNGdW5jdGlvbihpKSAmJiBpKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gfSksIHQuZnguc3RlcC5jbGlwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5jbGlwSW5pdCB8fCAoZS5zdGFydCA9IHQoZS5lbGVtKS5jc3NDbGlwKCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuZW5kICYmIChlLmVuZCA9IHMoZS5lbmQsIGUuZWxlbSkpLCBlLmNsaXBJbml0ID0gITApLCB0KGUuZWxlbSkuY3NzQ2xpcCh7IHRvcDogZS5wb3MgKiAoZS5lbmQudG9wIC0gZS5zdGFydC50b3ApICsgZS5zdGFydC50b3AsIHJpZ2h0OiBlLnBvcyAqIChlLmVuZC5yaWdodCAtIGUuc3RhcnQucmlnaHQpICsgZS5zdGFydC5yaWdodCwgYm90dG9tOiBlLnBvcyAqIChlLmVuZC5ib3R0b20gLSBlLnN0YXJ0LmJvdHRvbSkgKyBlLnN0YXJ0LmJvdHRvbSwgbGVmdDogZS5wb3MgKiAoZS5lbmQubGVmdCAtIGUuc3RhcnQubGVmdCkgKyBlLnN0YXJ0LmxlZnQgfSk7XG4gICAgICB9O1xuICAgIH0oKSwgciA9IHt9LCB0LmVhY2goW1wiUXVhZFwiLCBcIkN1YmljXCIsIFwiUXVhcnRcIiwgXCJRdWludFwiLCBcIkV4cG9cIl0sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICByW2VdID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KGUsIHQgKyAyKTtcbiAgICAgIH07XG4gICAgfSksIHQuZXh0ZW5kKHIsIHsgU2luZTogZnVuY3Rpb24gU2luZSh0KSB7XG4gICAgICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIE1hdGguUEkgLyAyKTtcbiAgICAgIH0sIENpcmM6IGZ1bmN0aW9uIENpcmModCkge1xuICAgICAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xuICAgICAgfSwgRWxhc3RpYzogZnVuY3Rpb24gRWxhc3RpYyh0KSB7XG4gICAgICAgIHJldHVybiAwID09PSB0IHx8IDEgPT09IHQgPyB0IDogLU1hdGgucG93KDIsIDggKiAodCAtIDEpKSAqIE1hdGguc2luKCg4MCAqICh0IC0gMSkgLSA3LjUpICogTWF0aC5QSSAvIDE1KTtcbiAgICAgIH0sIEJhY2s6IGZ1bmN0aW9uIEJhY2sodCkge1xuICAgICAgICByZXR1cm4gdCAqIHQgKiAoMyAqIHQgLSAyKTtcbiAgICAgIH0sIEJvdW5jZTogZnVuY3Rpb24gQm91bmNlKHQpIHtcbiAgICAgICAgZm9yICh2YXIgZSwgaSA9IDQ7IHQgPCAoKGUgPSBNYXRoLnBvdygyLCAtLWkpKSAtIDEpIC8gMTE7KSB7fXJldHVybiAxIC8gTWF0aC5wb3coNCwgMyAtIGkpIC0gNy41NjI1ICogTWF0aC5wb3coKDMgKiBlIC0gMikgLyAyMiAtIHQsIDIpO1xuICAgICAgfSB9KSwgdC5lYWNoKHIsIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICB0LmVhc2luZ1tcImVhc2VJblwiICsgZV0gPSBpLCB0LmVhc2luZ1tcImVhc2VPdXRcIiArIGVdID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIDEgLSBpKDEgLSB0KTtcbiAgICAgIH0sIHQuZWFzaW5nW1wiZWFzZUluT3V0XCIgKyBlXSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0IDwgLjUgPyBpKDIgKiB0KSAvIDIgOiAxIC0gaSgtMiAqIHQgKyAyKSAvIDI7XG4gICAgICB9O1xuICAgIH0pLCB0LmVmZmVjdHMsIHQuZWZmZWN0cy5kZWZpbmUoXCJibGluZFwiLCBcImhpZGVcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0geyB1cDogW1wiYm90dG9tXCIsIFwidG9wXCJdLCB2ZXJ0aWNhbDogW1wiYm90dG9tXCIsIFwidG9wXCJdLCBkb3duOiBbXCJ0b3BcIiwgXCJib3R0b21cIl0sIGxlZnQ6IFtcInJpZ2h0XCIsIFwibGVmdFwiXSwgaG9yaXpvbnRhbDogW1wicmlnaHRcIiwgXCJsZWZ0XCJdLCByaWdodDogW1wibGVmdFwiLCBcInJpZ2h0XCJdIH0sXG4gICAgICAgICAgcyA9IHQodGhpcyksXG4gICAgICAgICAgciA9IGUuZGlyZWN0aW9uIHx8IFwidXBcIixcbiAgICAgICAgICBvID0gcy5jc3NDbGlwKCksXG4gICAgICAgICAgYSA9IHsgY2xpcDogdC5leHRlbmQoe30sIG8pIH0sXG4gICAgICAgICAgbCA9IHQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlcihzKTthLmNsaXBbbltyXVswXV0gPSBhLmNsaXBbbltyXVsxXV0sIFwic2hvd1wiID09PSBlLm1vZGUgJiYgKHMuY3NzQ2xpcChhLmNsaXApLCBsICYmIGwuY3NzKHQuZWZmZWN0cy5jbGlwVG9Cb3goYSkpLCBhLmNsaXAgPSBvKSwgbCAmJiBsLmFuaW1hdGUodC5lZmZlY3RzLmNsaXBUb0JveChhKSwgZS5kdXJhdGlvbiwgZS5lYXNpbmcpLCBzLmFuaW1hdGUoYSwgeyBxdWV1ZTogITEsIGR1cmF0aW9uOiBlLmR1cmF0aW9uLCBlYXNpbmc6IGUuZWFzaW5nLCBjb21wbGV0ZTogaSB9KTtcbiAgICB9KSwgdC5lZmZlY3RzLmRlZmluZShcImJvdW5jZVwiLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgdmFyIG4sXG4gICAgICAgICAgcyxcbiAgICAgICAgICByLFxuICAgICAgICAgIG8gPSB0KHRoaXMpLFxuICAgICAgICAgIGEgPSBlLm1vZGUsXG4gICAgICAgICAgbCA9IFwiaGlkZVwiID09PSBhLFxuICAgICAgICAgIHUgPSBcInNob3dcIiA9PT0gYSxcbiAgICAgICAgICBjID0gZS5kaXJlY3Rpb24gfHwgXCJ1cFwiLFxuICAgICAgICAgIGggPSBlLmRpc3RhbmNlLFxuICAgICAgICAgIGQgPSBlLnRpbWVzIHx8IDUsXG4gICAgICAgICAgcCA9IDIgKiBkICsgKHUgfHwgbCA/IDEgOiAwKSxcbiAgICAgICAgICBmID0gZS5kdXJhdGlvbiAvIHAsXG4gICAgICAgICAgZyA9IGUuZWFzaW5nLFxuICAgICAgICAgIG0gPSBcInVwXCIgPT09IGMgfHwgXCJkb3duXCIgPT09IGMgPyBcInRvcFwiIDogXCJsZWZ0XCIsXG4gICAgICAgICAgdiA9IFwidXBcIiA9PT0gYyB8fCBcImxlZnRcIiA9PT0gYyxcbiAgICAgICAgICBfID0gMCxcbiAgICAgICAgICBiID0gby5xdWV1ZSgpLmxlbmd0aDtmb3IgKHQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlcihvKSwgciA9IG8uY3NzKG0pLCBoIHx8IChoID0gb1tcInRvcFwiID09PSBtID8gXCJvdXRlckhlaWdodFwiIDogXCJvdXRlcldpZHRoXCJdKCkgLyAzKSwgdSAmJiAoKHMgPSB7IG9wYWNpdHk6IDEgfSlbbV0gPSByLCBvLmNzcyhcIm9wYWNpdHlcIiwgMCkuY3NzKG0sIHYgPyAyICogLWggOiAyICogaCkuYW5pbWF0ZShzLCBmLCBnKSksIGwgJiYgKGggLz0gTWF0aC5wb3coMiwgZCAtIDEpKSwgKHMgPSB7fSlbbV0gPSByOyBfIDwgZDsgXysrKSB7XG4gICAgICAgIChuID0ge30pW21dID0gKHYgPyBcIi09XCIgOiBcIis9XCIpICsgaCwgby5hbmltYXRlKG4sIGYsIGcpLmFuaW1hdGUocywgZiwgZyksIGggPSBsID8gMiAqIGggOiBoIC8gMjtcbiAgICAgIH1sICYmICgobiA9IHsgb3BhY2l0eTogMCB9KVttXSA9ICh2ID8gXCItPVwiIDogXCIrPVwiKSArIGgsIG8uYW5pbWF0ZShuLCBmLCBnKSksIG8ucXVldWUoaSksIHQuZWZmZWN0cy51bnNoaWZ0KG8sIGIsIHAgKyAxKTtcbiAgICB9KSwgdC5lZmZlY3RzLmRlZmluZShcImNsaXBcIiwgXCJoaWRlXCIsIGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICB2YXIgbixcbiAgICAgICAgICBzID0ge30sXG4gICAgICAgICAgciA9IHQodGhpcyksXG4gICAgICAgICAgbyA9IGUuZGlyZWN0aW9uIHx8IFwidmVydGljYWxcIixcbiAgICAgICAgICBhID0gXCJib3RoXCIgPT09IG8sXG4gICAgICAgICAgbCA9IGEgfHwgXCJob3Jpem9udGFsXCIgPT09IG8sXG4gICAgICAgICAgdSA9IGEgfHwgXCJ2ZXJ0aWNhbFwiID09PSBvO24gPSByLmNzc0NsaXAoKSwgcy5jbGlwID0geyB0b3A6IHUgPyAobi5ib3R0b20gLSBuLnRvcCkgLyAyIDogbi50b3AsIHJpZ2h0OiBsID8gKG4ucmlnaHQgLSBuLmxlZnQpIC8gMiA6IG4ucmlnaHQsIGJvdHRvbTogdSA/IChuLmJvdHRvbSAtIG4udG9wKSAvIDIgOiBuLmJvdHRvbSwgbGVmdDogbCA/IChuLnJpZ2h0IC0gbi5sZWZ0KSAvIDIgOiBuLmxlZnQgfSwgdC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKHIpLCBcInNob3dcIiA9PT0gZS5tb2RlICYmIChyLmNzc0NsaXAocy5jbGlwKSwgcy5jbGlwID0gbiksIHIuYW5pbWF0ZShzLCB7IHF1ZXVlOiAhMSwgZHVyYXRpb246IGUuZHVyYXRpb24sIGVhc2luZzogZS5lYXNpbmcsIGNvbXBsZXRlOiBpIH0pO1xuICAgIH0pLCB0LmVmZmVjdHMuZGVmaW5lKFwiZHJvcFwiLCBcImhpZGVcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuLFxuICAgICAgICAgIHMgPSB0KHRoaXMpLFxuICAgICAgICAgIHIgPSBlLm1vZGUsXG4gICAgICAgICAgbyA9IFwic2hvd1wiID09PSByLFxuICAgICAgICAgIGEgPSBlLmRpcmVjdGlvbiB8fCBcImxlZnRcIixcbiAgICAgICAgICBsID0gXCJ1cFwiID09PSBhIHx8IFwiZG93blwiID09PSBhID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuICAgICAgICAgIHUgPSBcInVwXCIgPT09IGEgfHwgXCJsZWZ0XCIgPT09IGEgPyBcIi09XCIgOiBcIis9XCIsXG4gICAgICAgICAgYyA9IFwiKz1cIiA9PT0gdSA/IFwiLT1cIiA6IFwiKz1cIixcbiAgICAgICAgICBoID0geyBvcGFjaXR5OiAwIH07dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKHMpLCBuID0gZS5kaXN0YW5jZSB8fCBzW1widG9wXCIgPT09IGwgPyBcIm91dGVySGVpZ2h0XCIgOiBcIm91dGVyV2lkdGhcIl0oITApIC8gMiwgaFtsXSA9IHUgKyBuLCBvICYmIChzLmNzcyhoKSwgaFtsXSA9IGMgKyBuLCBoLm9wYWNpdHkgPSAxKSwgcy5hbmltYXRlKGgsIHsgcXVldWU6ICExLCBkdXJhdGlvbjogZS5kdXJhdGlvbiwgZWFzaW5nOiBlLmVhc2luZywgY29tcGxldGU6IGkgfSk7XG4gICAgfSksIHQuZWZmZWN0cy5kZWZpbmUoXCJleHBsb2RlXCIsIFwiaGlkZVwiLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgdmFyIG4sXG4gICAgICAgICAgcyxcbiAgICAgICAgICByLFxuICAgICAgICAgIG8sXG4gICAgICAgICAgYSxcbiAgICAgICAgICBsLFxuICAgICAgICAgIHUgPSBlLnBpZWNlcyA/IE1hdGgucm91bmQoTWF0aC5zcXJ0KGUucGllY2VzKSkgOiAzLFxuICAgICAgICAgIGMgPSB1LFxuICAgICAgICAgIGggPSB0KHRoaXMpLFxuICAgICAgICAgIGQgPSBlLm1vZGUsXG4gICAgICAgICAgcCA9IFwic2hvd1wiID09PSBkLFxuICAgICAgICAgIGYgPSBoLnNob3coKS5jc3MoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLm9mZnNldCgpLFxuICAgICAgICAgIGcgPSBNYXRoLmNlaWwoaC5vdXRlcldpZHRoKCkgLyBjKSxcbiAgICAgICAgICBtID0gTWF0aC5jZWlsKGgub3V0ZXJIZWlnaHQoKSAvIHUpLFxuICAgICAgICAgIHYgPSBbXTtmdW5jdGlvbiBfKCkge1xuICAgICAgICB2LnB1c2godGhpcyksIHYubGVuZ3RoID09PSB1ICogYyAmJiAoaC5jc3MoeyB2aXNpYmlsaXR5OiBcInZpc2libGVcIiB9KSwgdCh2KS5yZW1vdmUoKSwgaSgpKTtcbiAgICAgIH1mb3IgKG4gPSAwOyBuIDwgdTsgbisrKSB7XG4gICAgICAgIGZvciAobyA9IGYudG9wICsgbiAqIG0sIGwgPSBuIC0gKHUgLSAxKSAvIDIsIHMgPSAwOyBzIDwgYzsgcysrKSB7XG4gICAgICAgICAgciA9IGYubGVmdCArIHMgKiBnLCBhID0gcyAtIChjIC0gMSkgLyAyLCBoLmNsb25lKCkuYXBwZW5kVG8oXCJib2R5XCIpLndyYXAoXCI8ZGl2PjwvZGl2PlwiKS5jc3MoeyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcInZpc2libGVcIiwgbGVmdDogLXMgKiBnLCB0b3A6IC1uICogbSB9KS5wYXJlbnQoKS5hZGRDbGFzcyhcInVpLWVmZmVjdHMtZXhwbG9kZVwiKS5jc3MoeyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBvdmVyZmxvdzogXCJoaWRkZW5cIiwgd2lkdGg6IGcsIGhlaWdodDogbSwgbGVmdDogciArIChwID8gYSAqIGcgOiAwKSwgdG9wOiBvICsgKHAgPyBsICogbSA6IDApLCBvcGFjaXR5OiBwID8gMCA6IDEgfSkuYW5pbWF0ZSh7IGxlZnQ6IHIgKyAocCA/IDAgOiBhICogZyksIHRvcDogbyArIChwID8gMCA6IGwgKiBtKSwgb3BhY2l0eTogcCA/IDEgOiAwIH0sIGUuZHVyYXRpb24gfHwgNTAwLCBlLmVhc2luZywgXyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSwgdC5lZmZlY3RzLmRlZmluZShcImZhZGVcIiwgXCJ0b2dnbGVcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0gXCJzaG93XCIgPT09IGUubW9kZTt0KHRoaXMpLmNzcyhcIm9wYWNpdHlcIiwgbiA/IDAgOiAxKS5hbmltYXRlKHsgb3BhY2l0eTogbiA/IDEgOiAwIH0sIHsgcXVldWU6ICExLCBkdXJhdGlvbjogZS5kdXJhdGlvbiwgZWFzaW5nOiBlLmVhc2luZywgY29tcGxldGU6IGkgfSk7XG4gICAgfSksIHQuZWZmZWN0cy5kZWZpbmUoXCJmb2xkXCIsIFwiaGlkZVwiLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgdmFyIG4gPSB0KHRoaXMpLFxuICAgICAgICAgIHMgPSBlLm1vZGUsXG4gICAgICAgICAgciA9IFwic2hvd1wiID09PSBzLFxuICAgICAgICAgIG8gPSBcImhpZGVcIiA9PT0gcyxcbiAgICAgICAgICBhID0gZS5zaXplIHx8IDE1LFxuICAgICAgICAgIGwgPSAvKFswLTldKyklLy5leGVjKGEpLFxuICAgICAgICAgIHUgPSAhIWUuaG9yaXpGaXJzdCxcbiAgICAgICAgICBjID0gdSA/IFtcInJpZ2h0XCIsIFwiYm90dG9tXCJdIDogW1wiYm90dG9tXCIsIFwicmlnaHRcIl0sXG4gICAgICAgICAgaCA9IGUuZHVyYXRpb24gLyAyLFxuICAgICAgICAgIGQgPSB0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIobiksXG4gICAgICAgICAgcCA9IG4uY3NzQ2xpcCgpLFxuICAgICAgICAgIGYgPSB7IGNsaXA6IHQuZXh0ZW5kKHt9LCBwKSB9LFxuICAgICAgICAgIGcgPSB7IGNsaXA6IHQuZXh0ZW5kKHt9LCBwKSB9LFxuICAgICAgICAgIG0gPSBbcFtjWzBdXSwgcFtjWzFdXV0sXG4gICAgICAgICAgdiA9IG4ucXVldWUoKS5sZW5ndGg7bCAmJiAoYSA9IHBhcnNlSW50KGxbMV0sIDEwKSAvIDEwMCAqIG1bbyA/IDAgOiAxXSksIGYuY2xpcFtjWzBdXSA9IGEsIGcuY2xpcFtjWzBdXSA9IGEsIGcuY2xpcFtjWzFdXSA9IDAsIHIgJiYgKG4uY3NzQ2xpcChnLmNsaXApLCBkICYmIGQuY3NzKHQuZWZmZWN0cy5jbGlwVG9Cb3goZykpLCBnLmNsaXAgPSBwKSwgbi5xdWV1ZShmdW5jdGlvbiAoaSkge1xuICAgICAgICBkICYmIGQuYW5pbWF0ZSh0LmVmZmVjdHMuY2xpcFRvQm94KGYpLCBoLCBlLmVhc2luZykuYW5pbWF0ZSh0LmVmZmVjdHMuY2xpcFRvQm94KGcpLCBoLCBlLmVhc2luZyksIGkoKTtcbiAgICAgIH0pLmFuaW1hdGUoZiwgaCwgZS5lYXNpbmcpLmFuaW1hdGUoZywgaCwgZS5lYXNpbmcpLnF1ZXVlKGkpLCB0LmVmZmVjdHMudW5zaGlmdChuLCB2LCA0KTtcbiAgICB9KSwgdC5lZmZlY3RzLmRlZmluZShcImhpZ2hsaWdodFwiLCBcInNob3dcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0gdCh0aGlzKSxcbiAgICAgICAgICBzID0geyBiYWNrZ3JvdW5kQ29sb3I6IG4uY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpIH07XCJoaWRlXCIgPT09IGUubW9kZSAmJiAocy5vcGFjaXR5ID0gMCksIHQuZWZmZWN0cy5zYXZlU3R5bGUobiksIG4uY3NzKHsgYmFja2dyb3VuZEltYWdlOiBcIm5vbmVcIiwgYmFja2dyb3VuZENvbG9yOiBlLmNvbG9yIHx8IFwiI2ZmZmY5OVwiIH0pLmFuaW1hdGUocywgeyBxdWV1ZTogITEsIGR1cmF0aW9uOiBlLmR1cmF0aW9uLCBlYXNpbmc6IGUuZWFzaW5nLCBjb21wbGV0ZTogaSB9KTtcbiAgICB9KSwgdC5lZmZlY3RzLmRlZmluZShcInNpemVcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuLFxuICAgICAgICAgIHMsXG4gICAgICAgICAgcixcbiAgICAgICAgICBvID0gdCh0aGlzKSxcbiAgICAgICAgICBhID0gW1wiZm9udFNpemVcIl0sXG4gICAgICAgICAgbCA9IFtcImJvcmRlclRvcFdpZHRoXCIsIFwiYm9yZGVyQm90dG9tV2lkdGhcIiwgXCJwYWRkaW5nVG9wXCIsIFwicGFkZGluZ0JvdHRvbVwiXSxcbiAgICAgICAgICB1ID0gW1wiYm9yZGVyTGVmdFdpZHRoXCIsIFwiYm9yZGVyUmlnaHRXaWR0aFwiLCBcInBhZGRpbmdMZWZ0XCIsIFwicGFkZGluZ1JpZ2h0XCJdLFxuICAgICAgICAgIGMgPSBlLm1vZGUsXG4gICAgICAgICAgaCA9IFwiZWZmZWN0XCIgIT09IGMsXG4gICAgICAgICAgZCA9IGUuc2NhbGUgfHwgXCJib3RoXCIsXG4gICAgICAgICAgcCA9IGUub3JpZ2luIHx8IFtcIm1pZGRsZVwiLCBcImNlbnRlclwiXSxcbiAgICAgICAgICBmID0gby5jc3MoXCJwb3NpdGlvblwiKSxcbiAgICAgICAgICBnID0gby5wb3NpdGlvbigpLFxuICAgICAgICAgIG0gPSB0LmVmZmVjdHMuc2NhbGVkRGltZW5zaW9ucyhvKSxcbiAgICAgICAgICB2ID0gZS5mcm9tIHx8IG0sXG4gICAgICAgICAgXyA9IGUudG8gfHwgdC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMobywgMCk7dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKG8pLCBcInNob3dcIiA9PT0gYyAmJiAociA9IHYsIHYgPSBfLCBfID0gciksIHMgPSB7IGZyb206IHsgeTogdi5oZWlnaHQgLyBtLmhlaWdodCwgeDogdi53aWR0aCAvIG0ud2lkdGggfSwgdG86IHsgeTogXy5oZWlnaHQgLyBtLmhlaWdodCwgeDogXy53aWR0aCAvIG0ud2lkdGggfSB9LCBcImJveFwiICE9PSBkICYmIFwiYm90aFwiICE9PSBkIHx8IChzLmZyb20ueSAhPT0gcy50by55ICYmICh2ID0gdC5lZmZlY3RzLnNldFRyYW5zaXRpb24obywgbCwgcy5mcm9tLnksIHYpLCBfID0gdC5lZmZlY3RzLnNldFRyYW5zaXRpb24obywgbCwgcy50by55LCBfKSksIHMuZnJvbS54ICE9PSBzLnRvLnggJiYgKHYgPSB0LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihvLCB1LCBzLmZyb20ueCwgdiksIF8gPSB0LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihvLCB1LCBzLnRvLngsIF8pKSksIFwiY29udGVudFwiICE9PSBkICYmIFwiYm90aFwiICE9PSBkIHx8IHMuZnJvbS55ICE9PSBzLnRvLnkgJiYgKHYgPSB0LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihvLCBhLCBzLmZyb20ueSwgdiksIF8gPSB0LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihvLCBhLCBzLnRvLnksIF8pKSwgcCAmJiAobiA9IHQuZWZmZWN0cy5nZXRCYXNlbGluZShwLCBtKSwgdi50b3AgPSAobS5vdXRlckhlaWdodCAtIHYub3V0ZXJIZWlnaHQpICogbi55ICsgZy50b3AsIHYubGVmdCA9IChtLm91dGVyV2lkdGggLSB2Lm91dGVyV2lkdGgpICogbi54ICsgZy5sZWZ0LCBfLnRvcCA9IChtLm91dGVySGVpZ2h0IC0gXy5vdXRlckhlaWdodCkgKiBuLnkgKyBnLnRvcCwgXy5sZWZ0ID0gKG0ub3V0ZXJXaWR0aCAtIF8ub3V0ZXJXaWR0aCkgKiBuLnggKyBnLmxlZnQpLCBvLmNzcyh2KSwgXCJjb250ZW50XCIgIT09IGQgJiYgXCJib3RoXCIgIT09IGQgfHwgKGwgPSBsLmNvbmNhdChbXCJtYXJnaW5Ub3BcIiwgXCJtYXJnaW5Cb3R0b21cIl0pLmNvbmNhdChhKSwgdSA9IHUuY29uY2F0KFtcIm1hcmdpbkxlZnRcIiwgXCJtYXJnaW5SaWdodFwiXSksIG8uZmluZChcIipbd2lkdGhdXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaSA9IHQodGhpcyksXG4gICAgICAgICAgICBuID0gdC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMoaSksXG4gICAgICAgICAgICByID0geyBoZWlnaHQ6IG4uaGVpZ2h0ICogcy5mcm9tLnksIHdpZHRoOiBuLndpZHRoICogcy5mcm9tLngsIG91dGVySGVpZ2h0OiBuLm91dGVySGVpZ2h0ICogcy5mcm9tLnksIG91dGVyV2lkdGg6IG4ub3V0ZXJXaWR0aCAqIHMuZnJvbS54IH0sXG4gICAgICAgICAgICBvID0geyBoZWlnaHQ6IG4uaGVpZ2h0ICogcy50by55LCB3aWR0aDogbi53aWR0aCAqIHMudG8ueCwgb3V0ZXJIZWlnaHQ6IG4uaGVpZ2h0ICogcy50by55LCBvdXRlcldpZHRoOiBuLndpZHRoICogcy50by54IH07cy5mcm9tLnkgIT09IHMudG8ueSAmJiAociA9IHQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKGksIGwsIHMuZnJvbS55LCByKSwgbyA9IHQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKGksIGwsIHMudG8ueSwgbykpLCBzLmZyb20ueCAhPT0gcy50by54ICYmIChyID0gdC5lZmZlY3RzLnNldFRyYW5zaXRpb24oaSwgdSwgcy5mcm9tLngsIHIpLCBvID0gdC5lZmZlY3RzLnNldFRyYW5zaXRpb24oaSwgdSwgcy50by54LCBvKSksIGggJiYgdC5lZmZlY3RzLnNhdmVTdHlsZShpKSwgaS5jc3MociksIGkuYW5pbWF0ZShvLCBlLmR1cmF0aW9uLCBlLmVhc2luZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGggJiYgdC5lZmZlY3RzLnJlc3RvcmVTdHlsZShpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSksIG8uYW5pbWF0ZShfLCB7IHF1ZXVlOiAhMSwgZHVyYXRpb246IGUuZHVyYXRpb24sIGVhc2luZzogZS5lYXNpbmcsIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICB2YXIgZSA9IG8ub2Zmc2V0KCk7MCA9PT0gXy5vcGFjaXR5ICYmIG8uY3NzKFwib3BhY2l0eVwiLCB2Lm9wYWNpdHkpLCBoIHx8IChvLmNzcyhcInBvc2l0aW9uXCIsIFwic3RhdGljXCIgPT09IGYgPyBcInJlbGF0aXZlXCIgOiBmKS5vZmZzZXQoZSksIHQuZWZmZWN0cy5zYXZlU3R5bGUobykpLCBpKCk7XG4gICAgICAgIH0gfSk7XG4gICAgfSksIHQuZWZmZWN0cy5kZWZpbmUoXCJzY2FsZVwiLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgdmFyIG4gPSB0KHRoaXMpLFxuICAgICAgICAgIHMgPSBlLm1vZGUsXG4gICAgICAgICAgciA9IHBhcnNlSW50KGUucGVyY2VudCwgMTApIHx8ICgwID09PSBwYXJzZUludChlLnBlcmNlbnQsIDEwKSA/IDAgOiBcImVmZmVjdFwiICE9PSBzID8gMCA6IDEwMCksXG4gICAgICAgICAgbyA9IHQuZXh0ZW5kKCEwLCB7IGZyb206IHQuZWZmZWN0cy5zY2FsZWREaW1lbnNpb25zKG4pLCB0bzogdC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMobiwgciwgZS5kaXJlY3Rpb24gfHwgXCJib3RoXCIpLCBvcmlnaW46IGUub3JpZ2luIHx8IFtcIm1pZGRsZVwiLCBcImNlbnRlclwiXSB9LCBlKTtlLmZhZGUgJiYgKG8uZnJvbS5vcGFjaXR5ID0gMSwgby50by5vcGFjaXR5ID0gMCksIHQuZWZmZWN0cy5lZmZlY3Quc2l6ZS5jYWxsKHRoaXMsIG8sIGkpO1xuICAgIH0pLCB0LmVmZmVjdHMuZGVmaW5lKFwicHVmZlwiLCBcImhpZGVcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0gdC5leHRlbmQoITAsIHt9LCBlLCB7IGZhZGU6ICEwLCBwZXJjZW50OiBwYXJzZUludChlLnBlcmNlbnQsIDEwKSB8fCAxNTAgfSk7dC5lZmZlY3RzLmVmZmVjdC5zY2FsZS5jYWxsKHRoaXMsIG4sIGkpO1xuICAgIH0pLCB0LmVmZmVjdHMuZGVmaW5lKFwicHVsc2F0ZVwiLCBcInNob3dcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0gdCh0aGlzKSxcbiAgICAgICAgICBzID0gZS5tb2RlLFxuICAgICAgICAgIHIgPSBcInNob3dcIiA9PT0gcyxcbiAgICAgICAgICBvID0gXCJoaWRlXCIgPT09IHMsXG4gICAgICAgICAgYSA9IHIgfHwgbyxcbiAgICAgICAgICBsID0gMiAqIChlLnRpbWVzIHx8IDUpICsgKGEgPyAxIDogMCksXG4gICAgICAgICAgdSA9IGUuZHVyYXRpb24gLyBsLFxuICAgICAgICAgIGMgPSAwLFxuICAgICAgICAgIGggPSAxLFxuICAgICAgICAgIGQgPSBuLnF1ZXVlKCkubGVuZ3RoO2ZvciAoIXIgJiYgbi5pcyhcIjp2aXNpYmxlXCIpIHx8IChuLmNzcyhcIm9wYWNpdHlcIiwgMCkuc2hvdygpLCBjID0gMSk7IGggPCBsOyBoKyspIHtcbiAgICAgICAgbi5hbmltYXRlKHsgb3BhY2l0eTogYyB9LCB1LCBlLmVhc2luZyksIGMgPSAxIC0gYztcbiAgICAgIH1uLmFuaW1hdGUoeyBvcGFjaXR5OiBjIH0sIHUsIGUuZWFzaW5nKSwgbi5xdWV1ZShpKSwgdC5lZmZlY3RzLnVuc2hpZnQobiwgZCwgbCArIDEpO1xuICAgIH0pLCB0LmVmZmVjdHMuZGVmaW5lKFwic2hha2VcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0gMSxcbiAgICAgICAgICBzID0gdCh0aGlzKSxcbiAgICAgICAgICByID0gZS5kaXJlY3Rpb24gfHwgXCJsZWZ0XCIsXG4gICAgICAgICAgbyA9IGUuZGlzdGFuY2UgfHwgMjAsXG4gICAgICAgICAgYSA9IGUudGltZXMgfHwgMyxcbiAgICAgICAgICBsID0gMiAqIGEgKyAxLFxuICAgICAgICAgIHUgPSBNYXRoLnJvdW5kKGUuZHVyYXRpb24gLyBsKSxcbiAgICAgICAgICBjID0gXCJ1cFwiID09PSByIHx8IFwiZG93blwiID09PSByID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuICAgICAgICAgIGggPSBcInVwXCIgPT09IHIgfHwgXCJsZWZ0XCIgPT09IHIsXG4gICAgICAgICAgZCA9IHt9LFxuICAgICAgICAgIHAgPSB7fSxcbiAgICAgICAgICBmID0ge30sXG4gICAgICAgICAgZyA9IHMucXVldWUoKS5sZW5ndGg7Zm9yICh0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIocyksIGRbY10gPSAoaCA/IFwiLT1cIiA6IFwiKz1cIikgKyBvLCBwW2NdID0gKGggPyBcIis9XCIgOiBcIi09XCIpICsgMiAqIG8sIGZbY10gPSAoaCA/IFwiLT1cIiA6IFwiKz1cIikgKyAyICogbywgcy5hbmltYXRlKGQsIHUsIGUuZWFzaW5nKTsgbiA8IGE7IG4rKykge1xuICAgICAgICBzLmFuaW1hdGUocCwgdSwgZS5lYXNpbmcpLmFuaW1hdGUoZiwgdSwgZS5lYXNpbmcpO1xuICAgICAgfXMuYW5pbWF0ZShwLCB1LCBlLmVhc2luZykuYW5pbWF0ZShkLCB1IC8gMiwgZS5lYXNpbmcpLnF1ZXVlKGkpLCB0LmVmZmVjdHMudW5zaGlmdChzLCBnLCBsICsgMSk7XG4gICAgfSksIHQuZWZmZWN0cy5kZWZpbmUoXCJzbGlkZVwiLCBcInNob3dcIiwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuLFxuICAgICAgICAgIHMsXG4gICAgICAgICAgciA9IHQodGhpcyksXG4gICAgICAgICAgbyA9IHsgdXA6IFtcImJvdHRvbVwiLCBcInRvcFwiXSwgZG93bjogW1widG9wXCIsIFwiYm90dG9tXCJdLCBsZWZ0OiBbXCJyaWdodFwiLCBcImxlZnRcIl0sIHJpZ2h0OiBbXCJsZWZ0XCIsIFwicmlnaHRcIl0gfSxcbiAgICAgICAgICBhID0gZS5tb2RlLFxuICAgICAgICAgIGwgPSBlLmRpcmVjdGlvbiB8fCBcImxlZnRcIixcbiAgICAgICAgICB1ID0gXCJ1cFwiID09PSBsIHx8IFwiZG93blwiID09PSBsID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuICAgICAgICAgIGMgPSBcInVwXCIgPT09IGwgfHwgXCJsZWZ0XCIgPT09IGwsXG4gICAgICAgICAgaCA9IGUuZGlzdGFuY2UgfHwgcltcInRvcFwiID09PSB1ID8gXCJvdXRlckhlaWdodFwiIDogXCJvdXRlcldpZHRoXCJdKCEwKSxcbiAgICAgICAgICBkID0ge307dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKHIpLCBuID0gci5jc3NDbGlwKCksIHMgPSByLnBvc2l0aW9uKClbdV0sIGRbdV0gPSAoYyA/IC0xIDogMSkgKiBoICsgcywgZC5jbGlwID0gci5jc3NDbGlwKCksIGQuY2xpcFtvW2xdWzFdXSA9IGQuY2xpcFtvW2xdWzBdXSwgXCJzaG93XCIgPT09IGEgJiYgKHIuY3NzQ2xpcChkLmNsaXApLCByLmNzcyh1LCBkW3VdKSwgZC5jbGlwID0gbiwgZFt1XSA9IHMpLCByLmFuaW1hdGUoZCwgeyBxdWV1ZTogITEsIGR1cmF0aW9uOiBlLmR1cmF0aW9uLCBlYXNpbmc6IGUuZWFzaW5nLCBjb21wbGV0ZTogaSB9KTtcbiAgICB9KSwgITEgIT09IHQudWlCYWNrQ29tcGF0ICYmIHQuZWZmZWN0cy5kZWZpbmUoXCJ0cmFuc2ZlclwiLCBmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgdCh0aGlzKS50cmFuc2ZlcihlLCBpKTtcbiAgICB9KSxcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgRm9jdXNhYmxlIDEuMTIuMVxuICAgICAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAgICAgKlxuICAgICAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB0LnVpLmZvY3VzYWJsZSA9IGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICB2YXIgbixcbiAgICAgICAgICBzLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgbyxcbiAgICAgICAgICBhLFxuICAgICAgICAgIGwgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIFwiYXJlYVwiID09PSBsID8gKG4gPSBlLnBhcmVudE5vZGUsIHMgPSBuLm5hbWUsICEoIWUuaHJlZiB8fCAhcyB8fCBcIm1hcFwiICE9PSBuLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpICYmIChyID0gdChcImltZ1t1c2VtYXA9JyNcIiArIHMgKyBcIiddXCIpKS5sZW5ndGggPiAwICYmIHIuaXMoXCI6dmlzaWJsZVwiKSkgOiAoL14oaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QpJC8udGVzdChsKSA/IChvID0gIWUuZGlzYWJsZWQpICYmIChhID0gdChlKS5jbG9zZXN0KFwiZmllbGRzZXRcIilbMF0pICYmIChvID0gIWEuZGlzYWJsZWQpIDogbyA9IFwiYVwiID09PSBsICYmIGUuaHJlZiB8fCBpLCBvICYmIHQoZSkuaXMoXCI6dmlzaWJsZVwiKSAmJiBmdW5jdGlvbiAodCkge1xuICAgICAgICBmb3IgKHZhciBlID0gdC5jc3MoXCJ2aXNpYmlsaXR5XCIpOyBcImluaGVyaXRcIiA9PT0gZTspIHtcbiAgICAgICAgICB0ID0gdC5wYXJlbnQoKSwgZSA9IHQuY3NzKFwidmlzaWJpbGl0eVwiKTtcbiAgICAgICAgfXJldHVybiBcImhpZGRlblwiICE9PSBlO1xuICAgICAgfSh0KGUpKSk7XG4gICAgfSwgdC5leHRlbmQodC5leHByW1wiOlwiXSwgeyBmb2N1c2FibGU6IGZ1bmN0aW9uIGZvY3VzYWJsZShlKSB7XG4gICAgICAgIHJldHVybiB0LnVpLmZvY3VzYWJsZShlLCBudWxsICE9IHQuYXR0cihlLCBcInRhYmluZGV4XCIpKTtcbiAgICAgIH0gfSksIHQudWkuZm9jdXNhYmxlLCB0LmZuLmZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdGhpc1swXS5mb3JtID8gdGhpcy5jbG9zZXN0KFwiZm9ybVwiKSA6IHQodGhpc1swXS5mb3JtKTtcbiAgICB9LCB0LnVpLmZvcm1SZXNldE1peGluID0geyBfZm9ybVJlc2V0SGFuZGxlcjogZnVuY3Rpb24gX2Zvcm1SZXNldEhhbmRsZXIoKSB7XG4gICAgICAgIHZhciBlID0gdCh0aGlzKTtzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaSA9IGUuZGF0YShcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIpO3QuZWFjaChpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfYmluZEZvcm1SZXNldEhhbmRsZXI6IGZ1bmN0aW9uIF9iaW5kRm9ybVJlc2V0SGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybSA9IHRoaXMuZWxlbWVudC5mb3JtKCksIHRoaXMuZm9ybS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdCA9IHRoaXMuZm9ybS5kYXRhKFwidWktZm9ybS1yZXNldC1pbnN0YW5jZXNcIikgfHwgW107dC5sZW5ndGggfHwgdGhpcy5mb3JtLm9uKFwicmVzZXQudWktZm9ybS1yZXNldFwiLCB0aGlzLl9mb3JtUmVzZXRIYW5kbGVyKSwgdC5wdXNoKHRoaXMpLCB0aGlzLmZvcm0uZGF0YShcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIsIHQpO1xuICAgICAgICB9XG4gICAgICB9LCBfdW5iaW5kRm9ybVJlc2V0SGFuZGxlcjogZnVuY3Rpb24gX3VuYmluZEZvcm1SZXNldEhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmZvcm0ubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0aGlzLmZvcm0uZGF0YShcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIpO2Uuc3BsaWNlKHQuaW5BcnJheSh0aGlzLCBlKSwgMSksIGUubGVuZ3RoID8gdGhpcy5mb3JtLmRhdGEoXCJ1aS1mb3JtLXJlc2V0LWluc3RhbmNlc1wiLCBlKSA6IHRoaXMuZm9ybS5yZW1vdmVEYXRhKFwidWktZm9ybS1yZXNldC1pbnN0YW5jZXNcIikub2ZmKFwicmVzZXQudWktZm9ybS1yZXNldFwiKTtcbiAgICAgICAgfVxuICAgICAgfSB9LFxuICAgIC8qIVxuICAgICAqIGpRdWVyeSBVSSBTdXBwb3J0IGZvciBqUXVlcnkgY29yZSAxLjcueCAxLjEyLjFcbiAgICAgKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAgICAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICAgICpcbiAgICAgKi9cbiAgICBcIjEuN1wiID09PSB0LmZuLmpxdWVyeS5zdWJzdHJpbmcoMCwgMykgJiYgKHQuZWFjaChbXCJXaWR0aFwiLCBcIkhlaWdodFwiXSwgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgIHZhciBuID0gXCJXaWR0aFwiID09PSBpID8gW1wiTGVmdFwiLCBcIlJpZ2h0XCJdIDogW1wiVG9wXCIsIFwiQm90dG9tXCJdLFxuICAgICAgICAgIHMgPSBpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgciA9IHsgaW5uZXJXaWR0aDogdC5mbi5pbm5lcldpZHRoLCBpbm5lckhlaWdodDogdC5mbi5pbm5lckhlaWdodCwgb3V0ZXJXaWR0aDogdC5mbi5vdXRlcldpZHRoLCBvdXRlckhlaWdodDogdC5mbi5vdXRlckhlaWdodCB9O2Z1bmN0aW9uIG8oZSwgaSwgcywgcikge1xuICAgICAgICByZXR1cm4gdC5lYWNoKG4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpIC09IHBhcnNlRmxvYXQodC5jc3MoZSwgXCJwYWRkaW5nXCIgKyB0aGlzKSkgfHwgMCwgcyAmJiAoaSAtPSBwYXJzZUZsb2F0KHQuY3NzKGUsIFwiYm9yZGVyXCIgKyB0aGlzICsgXCJXaWR0aFwiKSkgfHwgMCksIHIgJiYgKGkgLT0gcGFyc2VGbG9hdCh0LmNzcyhlLCBcIm1hcmdpblwiICsgdGhpcykpIHx8IDApO1xuICAgICAgICB9KSwgaTtcbiAgICAgIH10LmZuW1wiaW5uZXJcIiArIGldID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSA/IHJbXCJpbm5lclwiICsgaV0uY2FsbCh0aGlzKSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdCh0aGlzKS5jc3Mocywgbyh0aGlzLCBlKSArIFwicHhcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSwgdC5mbltcIm91dGVyXCIgKyBpXSA9IGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgIHJldHVybiBcIm51bWJlclwiICE9IHR5cGVvZiBlID8gcltcIm91dGVyXCIgKyBpXS5jYWxsKHRoaXMsIGUpIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0KHRoaXMpLmNzcyhzLCBvKHRoaXMsIGUsICEwLCBuKSArIFwicHhcIik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSwgdC5mbi5hZGRCYWNrID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkZChudWxsID09IHQgPyB0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHQpKTtcbiAgICB9KSwgdC51aS5rZXlDb2RlID0geyBCQUNLU1BBQ0U6IDgsIENPTU1BOiAxODgsIERFTEVURTogNDYsIERPV046IDQwLCBFTkQ6IDM1LCBFTlRFUjogMTMsIEVTQ0FQRTogMjcsIEhPTUU6IDM2LCBMRUZUOiAzNywgUEFHRV9ET1dOOiAzNCwgUEFHRV9VUDogMzMsIFBFUklPRDogMTkwLCBSSUdIVDogMzksIFNQQUNFOiAzMiwgVEFCOiA5LCBVUDogMzggfSwgdC51aS5lc2NhcGVTZWxlY3RvciA9IChhID0gLyhbIVwiIyQlJicoKSorLC5cXC86Ozw9Pj9AW1xcXV5ge3x9fl0pL2csIGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC5yZXBsYWNlKGEsIFwiXFxcXCQxXCIpO1xuICAgIH0pLCB0LmZuLmxhYmVscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlLCBpLCBuLCBzLCByO3JldHVybiB0aGlzWzBdLmxhYmVscyAmJiB0aGlzWzBdLmxhYmVscy5sZW5ndGggPyB0aGlzLnB1c2hTdGFjayh0aGlzWzBdLmxhYmVscykgOiAocyA9IHRoaXMuZXEoMCkucGFyZW50cyhcImxhYmVsXCIpLCAobiA9IHRoaXMuYXR0cihcImlkXCIpKSAmJiAoZSA9IHRoaXMuZXEoMCkucGFyZW50cygpLmxhc3QoKSwgciA9IGUuYWRkKGUubGVuZ3RoID8gZS5zaWJsaW5ncygpIDogdGhpcy5zaWJsaW5ncygpKSwgaSA9IFwibGFiZWxbZm9yPSdcIiArIHQudWkuZXNjYXBlU2VsZWN0b3IobikgKyBcIiddXCIsIHMgPSBzLmFkZChyLmZpbmQoaSkuYWRkQmFjayhpKSkpLCB0aGlzLnB1c2hTdGFjayhzKSk7XG4gICAgfSwgdC5mbi5zY3JvbGxQYXJlbnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGkgPSB0aGlzLmNzcyhcInBvc2l0aW9uXCIpLFxuICAgICAgICAgIG4gPSBcImFic29sdXRlXCIgPT09IGksXG4gICAgICAgICAgcyA9IGUgPyAvKGF1dG98c2Nyb2xsfGhpZGRlbikvIDogLyhhdXRvfHNjcm9sbCkvLFxuICAgICAgICAgIHIgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHQodGhpcyk7cmV0dXJuICghbiB8fCBcInN0YXRpY1wiICE9PSBlLmNzcyhcInBvc2l0aW9uXCIpKSAmJiBzLnRlc3QoZS5jc3MoXCJvdmVyZmxvd1wiKSArIGUuY3NzKFwib3ZlcmZsb3cteVwiKSArIGUuY3NzKFwib3ZlcmZsb3cteFwiKSk7XG4gICAgICB9KS5lcSgwKTtyZXR1cm4gXCJmaXhlZFwiICE9PSBpICYmIHIubGVuZ3RoID8gciA6IHQodGhpc1swXS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KTtcbiAgICB9LCB0LmV4dGVuZCh0LmV4cHJbXCI6XCJdLCB7IHRhYmJhYmxlOiBmdW5jdGlvbiB0YWJiYWJsZShlKSB7XG4gICAgICAgIHZhciBpID0gdC5hdHRyKGUsIFwidGFiaW5kZXhcIiksXG4gICAgICAgICAgICBuID0gbnVsbCAhPSBpO3JldHVybiAoIW4gfHwgaSA+PSAwKSAmJiB0LnVpLmZvY3VzYWJsZShlLCBuKTtcbiAgICAgIH0gfSksIHQuZm4uZXh0ZW5kKHsgdW5pcXVlSWQ6IChvID0gMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmlkIHx8ICh0aGlzLmlkID0gXCJ1aS1pZC1cIiArICsrbyk7XG4gICAgICAgIH0pO1xuICAgICAgfSksIHJlbW92ZVVuaXF1ZUlkOiBmdW5jdGlvbiByZW1vdmVVbmlxdWVJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgL151aS1pZC1cXGQrJC8udGVzdCh0aGlzLmlkKSAmJiB0KHRoaXMpLnJlbW92ZUF0dHIoXCJpZFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9IH0pLCB0LndpZGdldChcInVpLmFjY29yZGlvblwiLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIG9wdGlvbnM6IHsgYWN0aXZlOiAwLCBhbmltYXRlOiB7fSwgY2xhc3NlczogeyBcInVpLWFjY29yZGlvbi1oZWFkZXJcIjogXCJ1aS1jb3JuZXItdG9wXCIsIFwidWktYWNjb3JkaW9uLWhlYWRlci1jb2xsYXBzZWRcIjogXCJ1aS1jb3JuZXItYWxsXCIsIFwidWktYWNjb3JkaW9uLWNvbnRlbnRcIjogXCJ1aS1jb3JuZXItYm90dG9tXCIgfSwgY29sbGFwc2libGU6ICExLCBldmVudDogXCJjbGlja1wiLCBoZWFkZXI6IFwiPiBsaSA+IDpmaXJzdC1jaGlsZCwgPiA6bm90KGxpKTpldmVuXCIsIGhlaWdodFN0eWxlOiBcImF1dG9cIiwgaWNvbnM6IHsgYWN0aXZlSGVhZGVyOiBcInVpLWljb24tdHJpYW5nbGUtMS1zXCIsIGhlYWRlcjogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtZVwiIH0sIGFjdGl2YXRlOiBudWxsLCBiZWZvcmVBY3RpdmF0ZTogbnVsbCB9LCBoaWRlUHJvcHM6IHsgYm9yZGVyVG9wV2lkdGg6IFwiaGlkZVwiLCBib3JkZXJCb3R0b21XaWR0aDogXCJoaWRlXCIsIHBhZGRpbmdUb3A6IFwiaGlkZVwiLCBwYWRkaW5nQm90dG9tOiBcImhpZGVcIiwgaGVpZ2h0OiBcImhpZGVcIiB9LCBzaG93UHJvcHM6IHsgYm9yZGVyVG9wV2lkdGg6IFwic2hvd1wiLCBib3JkZXJCb3R0b21XaWR0aDogXCJzaG93XCIsIHBhZGRpbmdUb3A6IFwic2hvd1wiLCBwYWRkaW5nQm90dG9tOiBcInNob3dcIiwgaGVpZ2h0OiBcInNob3dcIiB9LCBfY3JlYXRlOiBmdW5jdGlvbiBfY3JlYXRlKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMub3B0aW9uczt0aGlzLnByZXZTaG93ID0gdGhpcy5wcmV2SGlkZSA9IHQoKSwgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1hY2NvcmRpb25cIiwgXCJ1aS13aWRnZXQgdWktaGVscGVyLXJlc2V0XCIpLCB0aGlzLmVsZW1lbnQuYXR0cihcInJvbGVcIiwgXCJ0YWJsaXN0XCIpLCBlLmNvbGxhcHNpYmxlIHx8ICExICE9PSBlLmFjdGl2ZSAmJiBudWxsICE9IGUuYWN0aXZlIHx8IChlLmFjdGl2ZSA9IDApLCB0aGlzLl9wcm9jZXNzUGFuZWxzKCksIGUuYWN0aXZlIDwgMCAmJiAoZS5hY3RpdmUgKz0gdGhpcy5oZWFkZXJzLmxlbmd0aCksIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgIH0sIF9nZXRDcmVhdGVFdmVudERhdGE6IGZ1bmN0aW9uIF9nZXRDcmVhdGVFdmVudERhdGEoKSB7XG4gICAgICAgIHJldHVybiB7IGhlYWRlcjogdGhpcy5hY3RpdmUsIHBhbmVsOiB0aGlzLmFjdGl2ZS5sZW5ndGggPyB0aGlzLmFjdGl2ZS5uZXh0KCkgOiB0KCkgfTtcbiAgICAgIH0sIF9jcmVhdGVJY29uczogZnVuY3Rpb24gX2NyZWF0ZUljb25zKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gdGhpcy5vcHRpb25zLmljb25zO24gJiYgKGUgPSB0KFwiPHNwYW4+XCIpLCB0aGlzLl9hZGRDbGFzcyhlLCBcInVpLWFjY29yZGlvbi1oZWFkZXItaWNvblwiLCBcInVpLWljb24gXCIgKyBuLmhlYWRlciksIGUucHJlcGVuZFRvKHRoaXMuaGVhZGVycyksIGkgPSB0aGlzLmFjdGl2ZS5jaGlsZHJlbihcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiksIHRoaXMuX3JlbW92ZUNsYXNzKGksIG4uaGVhZGVyKS5fYWRkQ2xhc3MoaSwgbnVsbCwgbi5hY3RpdmVIZWFkZXIpLl9hZGRDbGFzcyh0aGlzLmhlYWRlcnMsIFwidWktYWNjb3JkaW9uLWljb25zXCIpKTtcbiAgICAgIH0sIF9kZXN0cm95SWNvbnM6IGZ1bmN0aW9uIF9kZXN0cm95SWNvbnMoKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaGVhZGVycywgXCJ1aS1hY2NvcmRpb24taWNvbnNcIiksIHRoaXMuaGVhZGVycy5jaGlsZHJlbihcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIikucmVtb3ZlKCk7XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHZhciB0O3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZVwiKSwgdGhpcy5oZWFkZXJzLnJlbW92ZUF0dHIoXCJyb2xlIGFyaWEtZXhwYW5kZWQgYXJpYS1zZWxlY3RlZCBhcmlhLWNvbnRyb2xzIHRhYkluZGV4XCIpLnJlbW92ZVVuaXF1ZUlkKCksIHRoaXMuX2Rlc3Ryb3lJY29ucygpLCB0ID0gdGhpcy5oZWFkZXJzLm5leHQoKS5jc3MoXCJkaXNwbGF5XCIsIFwiXCIpLnJlbW92ZUF0dHIoXCJyb2xlIGFyaWEtaGlkZGVuIGFyaWEtbGFiZWxsZWRieVwiKS5yZW1vdmVVbmlxdWVJZCgpLCBcImNvbnRlbnRcIiAhPT0gdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICYmIHQuY3NzKFwiaGVpZ2h0XCIsIFwiXCIpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIFwiYWN0aXZlXCIgIT09IHQgPyAoXCJldmVudFwiID09PSB0ICYmICh0aGlzLm9wdGlvbnMuZXZlbnQgJiYgdGhpcy5fb2ZmKHRoaXMuaGVhZGVycywgdGhpcy5vcHRpb25zLmV2ZW50KSwgdGhpcy5fc2V0dXBFdmVudHMoZSkpLCB0aGlzLl9zdXBlcih0LCBlKSwgXCJjb2xsYXBzaWJsZVwiICE9PSB0IHx8IGUgfHwgITEgIT09IHRoaXMub3B0aW9ucy5hY3RpdmUgfHwgdGhpcy5fYWN0aXZhdGUoMCksIFwiaWNvbnNcIiA9PT0gdCAmJiAodGhpcy5fZGVzdHJveUljb25zKCksIGUgJiYgdGhpcy5fY3JlYXRlSWNvbnMoKSkpIDogdGhpcy5fYWN0aXZhdGUoZSk7XG4gICAgICB9LCBfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uIF9zZXRPcHRpb25EaXNhYmxlZCh0KSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKHQpLCB0aGlzLmVsZW1lbnQuYXR0cihcImFyaWEtZGlzYWJsZWRcIiwgdCksIHRoaXMuX3RvZ2dsZUNsYXNzKG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiwgISF0KSwgdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5oZWFkZXJzLmFkZCh0aGlzLmhlYWRlcnMubmV4dCgpKSwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXQpO1xuICAgICAgfSwgX2tleWRvd246IGZ1bmN0aW9uIF9rZXlkb3duKGUpIHtcbiAgICAgICAgaWYgKCFlLmFsdEtleSAmJiAhZS5jdHJsS2V5KSB7XG4gICAgICAgICAgdmFyIGkgPSB0LnVpLmtleUNvZGUsXG4gICAgICAgICAgICAgIG4gPSB0aGlzLmhlYWRlcnMubGVuZ3RoLFxuICAgICAgICAgICAgICBzID0gdGhpcy5oZWFkZXJzLmluZGV4KGUudGFyZ2V0KSxcbiAgICAgICAgICAgICAgciA9ICExO3N3aXRjaCAoZS5rZXlDb2RlKSB7Y2FzZSBpLlJJR0hUOmNhc2UgaS5ET1dOOlxuICAgICAgICAgICAgICByID0gdGhpcy5oZWFkZXJzWyhzICsgMSkgJSBuXTticmVhaztjYXNlIGkuTEVGVDpjYXNlIGkuVVA6XG4gICAgICAgICAgICAgIHIgPSB0aGlzLmhlYWRlcnNbKHMgLSAxICsgbikgJSBuXTticmVhaztjYXNlIGkuU1BBQ0U6Y2FzZSBpLkVOVEVSOlxuICAgICAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXIoZSk7YnJlYWs7Y2FzZSBpLkhPTUU6XG4gICAgICAgICAgICAgIHIgPSB0aGlzLmhlYWRlcnNbMF07YnJlYWs7Y2FzZSBpLkVORDpcbiAgICAgICAgICAgICAgciA9IHRoaXMuaGVhZGVyc1tuIC0gMV07fXIgJiYgKHQoZS50YXJnZXQpLmF0dHIoXCJ0YWJJbmRleFwiLCAtMSksIHQocikuYXR0cihcInRhYkluZGV4XCIsIDApLCB0KHIpLnRyaWdnZXIoXCJmb2N1c1wiKSwgZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgfVxuICAgICAgfSwgX3BhbmVsS2V5RG93bjogZnVuY3Rpb24gX3BhbmVsS2V5RG93bihlKSB7XG4gICAgICAgIGUua2V5Q29kZSA9PT0gdC51aS5rZXlDb2RlLlVQICYmIGUuY3RybEtleSAmJiB0KGUuY3VycmVudFRhcmdldCkucHJldigpLnRyaWdnZXIoXCJmb2N1c1wiKTtcbiAgICAgIH0sIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5vcHRpb25zO3RoaXMuX3Byb2Nlc3NQYW5lbHMoKSwgITEgPT09IGUuYWN0aXZlICYmICEwID09PSBlLmNvbGxhcHNpYmxlIHx8ICF0aGlzLmhlYWRlcnMubGVuZ3RoID8gKGUuYWN0aXZlID0gITEsIHRoaXMuYWN0aXZlID0gdCgpKSA6ICExID09PSBlLmFjdGl2ZSA/IHRoaXMuX2FjdGl2YXRlKDApIDogdGhpcy5hY3RpdmUubGVuZ3RoICYmICF0LmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSwgdGhpcy5hY3RpdmVbMF0pID8gdGhpcy5oZWFkZXJzLmxlbmd0aCA9PT0gdGhpcy5oZWFkZXJzLmZpbmQoXCIudWktc3RhdGUtZGlzYWJsZWRcIikubGVuZ3RoID8gKGUuYWN0aXZlID0gITEsIHRoaXMuYWN0aXZlID0gdCgpKSA6IHRoaXMuX2FjdGl2YXRlKE1hdGgubWF4KDAsIGUuYWN0aXZlIC0gMSkpIDogZS5hY3RpdmUgPSB0aGlzLmhlYWRlcnMuaW5kZXgodGhpcy5hY3RpdmUpLCB0aGlzLl9kZXN0cm95SWNvbnMoKSwgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgfSwgX3Byb2Nlc3NQYW5lbHM6IGZ1bmN0aW9uIF9wcm9jZXNzUGFuZWxzKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIGUgPSB0aGlzLnBhbmVsczt0aGlzLmhlYWRlcnMgPSB0aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaGVhZGVyKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWFkZXJzLCBcInVpLWFjY29yZGlvbi1oZWFkZXIgdWktYWNjb3JkaW9uLWhlYWRlci1jb2xsYXBzZWRcIiwgXCJ1aS1zdGF0ZS1kZWZhdWx0XCIpLCB0aGlzLnBhbmVscyA9IHRoaXMuaGVhZGVycy5uZXh0KCkuZmlsdGVyKFwiOm5vdCgudWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlKVwiKS5oaWRlKCksIHRoaXMuX2FkZENsYXNzKHRoaXMucGFuZWxzLCBcInVpLWFjY29yZGlvbi1jb250ZW50XCIsIFwidWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50XCIpLCBlICYmICh0aGlzLl9vZmYodC5ub3QodGhpcy5oZWFkZXJzKSksIHRoaXMuX29mZihlLm5vdCh0aGlzLnBhbmVscykpKTtcbiAgICAgIH0sIF9yZWZyZXNoOiBmdW5jdGlvbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgbiA9IGkuaGVpZ2h0U3R5bGUsXG4gICAgICAgICAgICBzID0gdGhpcy5lbGVtZW50LnBhcmVudCgpO3RoaXMuYWN0aXZlID0gdGhpcy5fZmluZEFjdGl2ZShpLmFjdGl2ZSksIHRoaXMuX2FkZENsYXNzKHRoaXMuYWN0aXZlLCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIpLl9yZW1vdmVDbGFzcyh0aGlzLmFjdGl2ZSwgXCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZFwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5hY3RpdmUubmV4dCgpLCBcInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZVwiKSwgdGhpcy5hY3RpdmUubmV4dCgpLnNob3coKSwgdGhpcy5oZWFkZXJzLmF0dHIoXCJyb2xlXCIsIFwidGFiXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdCh0aGlzKSxcbiAgICAgICAgICAgICAgaSA9IGUudW5pcXVlSWQoKS5hdHRyKFwiaWRcIiksXG4gICAgICAgICAgICAgIG4gPSBlLm5leHQoKSxcbiAgICAgICAgICAgICAgcyA9IG4udW5pcXVlSWQoKS5hdHRyKFwiaWRcIik7ZS5hdHRyKFwiYXJpYS1jb250cm9sc1wiLCBzKSwgbi5hdHRyKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGkpO1xuICAgICAgICB9KS5uZXh0KCkuYXR0cihcInJvbGVcIiwgXCJ0YWJwYW5lbFwiKSwgdGhpcy5oZWFkZXJzLm5vdCh0aGlzLmFjdGl2ZSkuYXR0cih7IFwiYXJpYS1zZWxlY3RlZFwiOiBcImZhbHNlXCIsIFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsIHRhYkluZGV4OiAtMSB9KS5uZXh0KCkuYXR0cih7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfSkuaGlkZSgpLCB0aGlzLmFjdGl2ZS5sZW5ndGggPyB0aGlzLmFjdGl2ZS5hdHRyKHsgXCJhcmlhLXNlbGVjdGVkXCI6IFwidHJ1ZVwiLCBcImFyaWEtZXhwYW5kZWRcIjogXCJ0cnVlXCIsIHRhYkluZGV4OiAwIH0pLm5leHQoKS5hdHRyKHsgXCJhcmlhLWhpZGRlblwiOiBcImZhbHNlXCIgfSkgOiB0aGlzLmhlYWRlcnMuZXEoMCkuYXR0cihcInRhYkluZGV4XCIsIDApLCB0aGlzLl9jcmVhdGVJY29ucygpLCB0aGlzLl9zZXR1cEV2ZW50cyhpLmV2ZW50KSwgXCJmaWxsXCIgPT09IG4gPyAoZSA9IHMuaGVpZ2h0KCksIHRoaXMuZWxlbWVudC5zaWJsaW5ncyhcIjp2aXNpYmxlXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpID0gdCh0aGlzKSxcbiAgICAgICAgICAgICAgbiA9IGkuY3NzKFwicG9zaXRpb25cIik7XCJhYnNvbHV0ZVwiICE9PSBuICYmIFwiZml4ZWRcIiAhPT0gbiAmJiAoZSAtPSBpLm91dGVySGVpZ2h0KCEwKSk7XG4gICAgICAgIH0pLCB0aGlzLmhlYWRlcnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZSAtPSB0KHRoaXMpLm91dGVySGVpZ2h0KCEwKTtcbiAgICAgICAgfSksIHRoaXMuaGVhZGVycy5uZXh0KCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdCh0aGlzKS5oZWlnaHQoTWF0aC5tYXgoMCwgZSAtIHQodGhpcykuaW5uZXJIZWlnaHQoKSArIHQodGhpcykuaGVpZ2h0KCkpKTtcbiAgICAgICAgfSkuY3NzKFwib3ZlcmZsb3dcIiwgXCJhdXRvXCIpKSA6IFwiYXV0b1wiID09PSBuICYmIChlID0gMCwgdGhpcy5oZWFkZXJzLm5leHQoKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaSA9IHQodGhpcykuaXMoXCI6dmlzaWJsZVwiKTtpIHx8IHQodGhpcykuc2hvdygpLCBlID0gTWF0aC5tYXgoZSwgdCh0aGlzKS5jc3MoXCJoZWlnaHRcIiwgXCJcIikuaGVpZ2h0KCkpLCBpIHx8IHQodGhpcykuaGlkZSgpO1xuICAgICAgICB9KS5oZWlnaHQoZSkpO1xuICAgICAgfSwgX2FjdGl2YXRlOiBmdW5jdGlvbiBfYWN0aXZhdGUoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuX2ZpbmRBY3RpdmUoZSlbMF07aSAhPT0gdGhpcy5hY3RpdmVbMF0gJiYgKGkgPSBpIHx8IHRoaXMuYWN0aXZlWzBdLCB0aGlzLl9ldmVudEhhbmRsZXIoeyB0YXJnZXQ6IGksIGN1cnJlbnRUYXJnZXQ6IGksIHByZXZlbnREZWZhdWx0OiB0Lm5vb3AgfSkpO1xuICAgICAgfSwgX2ZpbmRBY3RpdmU6IGZ1bmN0aW9uIF9maW5kQWN0aXZlKGUpIHtcbiAgICAgICAgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIGUgPyB0aGlzLmhlYWRlcnMuZXEoZSkgOiB0KCk7XG4gICAgICB9LCBfc2V0dXBFdmVudHM6IGZ1bmN0aW9uIF9zZXR1cEV2ZW50cyhlKSB7XG4gICAgICAgIHZhciBpID0geyBrZXlkb3duOiBcIl9rZXlkb3duXCIgfTtlICYmIHQuZWFjaChlLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBpW2VdID0gXCJfZXZlbnRIYW5kbGVyXCI7XG4gICAgICAgIH0pLCB0aGlzLl9vZmYodGhpcy5oZWFkZXJzLmFkZCh0aGlzLmhlYWRlcnMubmV4dCgpKSksIHRoaXMuX29uKHRoaXMuaGVhZGVycywgaSksIHRoaXMuX29uKHRoaXMuaGVhZGVycy5uZXh0KCksIHsga2V5ZG93bjogXCJfcGFuZWxLZXlEb3duXCIgfSksIHRoaXMuX2hvdmVyYWJsZSh0aGlzLmhlYWRlcnMpLCB0aGlzLl9mb2N1c2FibGUodGhpcy5oZWFkZXJzKTtcbiAgICAgIH0sIF9ldmVudEhhbmRsZXI6IGZ1bmN0aW9uIF9ldmVudEhhbmRsZXIoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgciA9IHRoaXMuYWN0aXZlLFxuICAgICAgICAgICAgbyA9IHQoZS5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGEgPSBvWzBdID09PSByWzBdLFxuICAgICAgICAgICAgbCA9IGEgJiYgcy5jb2xsYXBzaWJsZSxcbiAgICAgICAgICAgIHUgPSBsID8gdCgpIDogby5uZXh0KCksXG4gICAgICAgICAgICBjID0gci5uZXh0KCksXG4gICAgICAgICAgICBoID0geyBvbGRIZWFkZXI6IHIsIG9sZFBhbmVsOiBjLCBuZXdIZWFkZXI6IGwgPyB0KCkgOiBvLCBuZXdQYW5lbDogdSB9O2UucHJldmVudERlZmF1bHQoKSwgYSAmJiAhcy5jb2xsYXBzaWJsZSB8fCAhMSA9PT0gdGhpcy5fdHJpZ2dlcihcImJlZm9yZUFjdGl2YXRlXCIsIGUsIGgpIHx8IChzLmFjdGl2ZSA9ICFsICYmIHRoaXMuaGVhZGVycy5pbmRleChvKSwgdGhpcy5hY3RpdmUgPSBhID8gdCgpIDogbywgdGhpcy5fdG9nZ2xlKGgpLCB0aGlzLl9yZW1vdmVDbGFzcyhyLCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIpLCBzLmljb25zICYmIChpID0gci5jaGlsZHJlbihcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiksIHRoaXMuX3JlbW92ZUNsYXNzKGksIG51bGwsIHMuaWNvbnMuYWN0aXZlSGVhZGVyKS5fYWRkQ2xhc3MoaSwgbnVsbCwgcy5pY29ucy5oZWFkZXIpKSwgYSB8fCAodGhpcy5fcmVtb3ZlQ2xhc3MobywgXCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZFwiKS5fYWRkQ2xhc3MobywgXCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZVwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiKSwgcy5pY29ucyAmJiAobiA9IG8uY2hpbGRyZW4oXCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uXCIpLCB0aGlzLl9yZW1vdmVDbGFzcyhuLCBudWxsLCBzLmljb25zLmhlYWRlcikuX2FkZENsYXNzKG4sIG51bGwsIHMuaWNvbnMuYWN0aXZlSGVhZGVyKSksIHRoaXMuX2FkZENsYXNzKG8ubmV4dCgpLCBcInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZVwiKSkpO1xuICAgICAgfSwgX3RvZ2dsZTogZnVuY3Rpb24gX3RvZ2dsZShlKSB7XG4gICAgICAgIHZhciBpID0gZS5uZXdQYW5lbCxcbiAgICAgICAgICAgIG4gPSB0aGlzLnByZXZTaG93Lmxlbmd0aCA/IHRoaXMucHJldlNob3cgOiBlLm9sZFBhbmVsO3RoaXMucHJldlNob3cuYWRkKHRoaXMucHJldkhpZGUpLnN0b3AoITAsICEwKSwgdGhpcy5wcmV2U2hvdyA9IGksIHRoaXMucHJldkhpZGUgPSBuLCB0aGlzLm9wdGlvbnMuYW5pbWF0ZSA/IHRoaXMuX2FuaW1hdGUoaSwgbiwgZSkgOiAobi5oaWRlKCksIGkuc2hvdygpLCB0aGlzLl90b2dnbGVDb21wbGV0ZShlKSksIG4uYXR0cih7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfSksIG4ucHJldigpLmF0dHIoeyBcImFyaWEtc2VsZWN0ZWRcIjogXCJmYWxzZVwiLCBcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiIH0pLCBpLmxlbmd0aCAmJiBuLmxlbmd0aCA/IG4ucHJldigpLmF0dHIoeyB0YWJJbmRleDogLTEsIFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIgfSkgOiBpLmxlbmd0aCAmJiB0aGlzLmhlYWRlcnMuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gMCA9PT0gcGFyc2VJbnQodCh0aGlzKS5hdHRyKFwidGFiSW5kZXhcIiksIDEwKTtcbiAgICAgICAgfSkuYXR0cihcInRhYkluZGV4XCIsIC0xKSwgaS5hdHRyKFwiYXJpYS1oaWRkZW5cIiwgXCJmYWxzZVwiKS5wcmV2KCkuYXR0cih7IFwiYXJpYS1zZWxlY3RlZFwiOiBcInRydWVcIiwgXCJhcmlhLWV4cGFuZGVkXCI6IFwidHJ1ZVwiLCB0YWJJbmRleDogMCB9KTtcbiAgICAgIH0sIF9hbmltYXRlOiBmdW5jdGlvbiBfYW5pbWF0ZSh0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvID0gdGhpcyxcbiAgICAgICAgICAgIGEgPSAwLFxuICAgICAgICAgICAgbCA9IHQuY3NzKFwiYm94LXNpemluZ1wiKSxcbiAgICAgICAgICAgIHUgPSB0Lmxlbmd0aCAmJiAoIWUubGVuZ3RoIHx8IHQuaW5kZXgoKSA8IGUuaW5kZXgoKSksXG4gICAgICAgICAgICBjID0gdGhpcy5vcHRpb25zLmFuaW1hdGUgfHwge30sXG4gICAgICAgICAgICBoID0gdSAmJiBjLmRvd24gfHwgYyxcbiAgICAgICAgICAgIGQgPSBmdW5jdGlvbiBkKCkge1xuICAgICAgICAgIG8uX3RvZ2dsZUNvbXBsZXRlKGkpO1xuICAgICAgICB9O3JldHVybiBcIm51bWJlclwiID09IHR5cGVvZiBoICYmIChyID0gaCksIFwic3RyaW5nXCIgPT0gdHlwZW9mIGggJiYgKHMgPSBoKSwgcyA9IHMgfHwgaC5lYXNpbmcgfHwgYy5lYXNpbmcsIHIgPSByIHx8IGguZHVyYXRpb24gfHwgYy5kdXJhdGlvbiwgZS5sZW5ndGggPyB0Lmxlbmd0aCA/IChuID0gdC5zaG93KCkub3V0ZXJIZWlnaHQoKSwgZS5hbmltYXRlKHRoaXMuaGlkZVByb3BzLCB7IGR1cmF0aW9uOiByLCBlYXNpbmc6IHMsIHN0ZXA6IGZ1bmN0aW9uIHN0ZXAodCwgZSkge1xuICAgICAgICAgICAgZS5ub3cgPSBNYXRoLnJvdW5kKHQpO1xuICAgICAgICAgIH0gfSksIHZvaWQgdC5oaWRlKCkuYW5pbWF0ZSh0aGlzLnNob3dQcm9wcywgeyBkdXJhdGlvbjogciwgZWFzaW5nOiBzLCBjb21wbGV0ZTogZCwgc3RlcDogZnVuY3Rpb24gc3RlcCh0LCBpKSB7XG4gICAgICAgICAgICBpLm5vdyA9IE1hdGgucm91bmQodCksIFwiaGVpZ2h0XCIgIT09IGkucHJvcCA/IFwiY29udGVudC1ib3hcIiA9PT0gbCAmJiAoYSArPSBpLm5vdykgOiBcImNvbnRlbnRcIiAhPT0gby5vcHRpb25zLmhlaWdodFN0eWxlICYmIChpLm5vdyA9IE1hdGgucm91bmQobiAtIGUub3V0ZXJIZWlnaHQoKSAtIGEpLCBhID0gMCk7XG4gICAgICAgICAgfSB9KSkgOiBlLmFuaW1hdGUodGhpcy5oaWRlUHJvcHMsIHIsIHMsIGQpIDogdC5hbmltYXRlKHRoaXMuc2hvd1Byb3BzLCByLCBzLCBkKTtcbiAgICAgIH0sIF90b2dnbGVDb21wbGV0ZTogZnVuY3Rpb24gX3RvZ2dsZUNvbXBsZXRlKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0Lm9sZFBhbmVsLFxuICAgICAgICAgICAgaSA9IGUucHJldigpO3RoaXMuX3JlbW92ZUNsYXNzKGUsIFwidWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlXCIpLCB0aGlzLl9yZW1vdmVDbGFzcyhpLCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlXCIpLl9hZGRDbGFzcyhpLCBcInVpLWFjY29yZGlvbi1oZWFkZXItY29sbGFwc2VkXCIpLCBlLmxlbmd0aCAmJiAoZS5wYXJlbnQoKVswXS5jbGFzc05hbWUgPSBlLnBhcmVudCgpWzBdLmNsYXNzTmFtZSksIHRoaXMuX3RyaWdnZXIoXCJhY3RpdmF0ZVwiLCBudWxsLCB0KTtcbiAgICAgIH0gfSksIHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGU7dHJ5IHtcbiAgICAgICAgZSA9IHQuYWN0aXZlRWxlbWVudDtcbiAgICAgIH0gY2F0Y2ggKGkpIHtcbiAgICAgICAgZSA9IHQuYm9keTtcbiAgICAgIH1yZXR1cm4gZSB8fCAoZSA9IHQuYm9keSksIGUubm9kZU5hbWUgfHwgKGUgPSB0LmJvZHkpLCBlO1xuICAgIH0sIHQud2lkZ2V0KFwidWkubWVudVwiLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIGRlZmF1bHRFbGVtZW50OiBcIjx1bD5cIiwgZGVsYXk6IDMwMCwgb3B0aW9uczogeyBpY29uczogeyBzdWJtZW51OiBcInVpLWljb24tY2FyZXQtMS1lXCIgfSwgaXRlbXM6IFwiPiAqXCIsIG1lbnVzOiBcInVsXCIsIHBvc2l0aW9uOiB7IG15OiBcImxlZnQgdG9wXCIsIGF0OiBcInJpZ2h0IHRvcFwiIH0sIHJvbGU6IFwibWVudVwiLCBibHVyOiBudWxsLCBmb2N1czogbnVsbCwgc2VsZWN0OiBudWxsIH0sIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlTWVudSA9IHRoaXMuZWxlbWVudCwgdGhpcy5tb3VzZUhhbmRsZWQgPSAhMSwgdGhpcy5lbGVtZW50LnVuaXF1ZUlkKCkuYXR0cih7IHJvbGU6IHRoaXMub3B0aW9ucy5yb2xlLCB0YWJJbmRleDogMCB9KSwgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1tZW51XCIsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIpLCB0aGlzLl9vbih7IFwibW91c2Vkb3duIC51aS1tZW51LWl0ZW1cIjogZnVuY3Rpb24gbW91c2Vkb3duVWlNZW51SXRlbSh0KSB7XG4gICAgICAgICAgICB0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSwgXCJjbGljayAudWktbWVudS1pdGVtXCI6IGZ1bmN0aW9uIGNsaWNrVWlNZW51SXRlbShlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHQoZS50YXJnZXQpLFxuICAgICAgICAgICAgICAgIG4gPSB0KHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkpOyF0aGlzLm1vdXNlSGFuZGxlZCAmJiBpLm5vdChcIi51aS1zdGF0ZS1kaXNhYmxlZFwiKS5sZW5ndGggJiYgKHRoaXMuc2VsZWN0KGUpLCBlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgfHwgKHRoaXMubW91c2VIYW5kbGVkID0gITApLCBpLmhhcyhcIi51aS1tZW51XCIpLmxlbmd0aCA/IHRoaXMuZXhwYW5kKGUpIDogIXRoaXMuZWxlbWVudC5pcyhcIjpmb2N1c1wiKSAmJiBuLmNsb3Nlc3QoXCIudWktbWVudVwiKS5sZW5ndGggJiYgKHRoaXMuZWxlbWVudC50cmlnZ2VyKFwiZm9jdXNcIiwgWyEwXSksIHRoaXMuYWN0aXZlICYmIDEgPT09IHRoaXMuYWN0aXZlLnBhcmVudHMoXCIudWktbWVudVwiKS5sZW5ndGggJiYgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpKSk7XG4gICAgICAgICAgfSwgXCJtb3VzZWVudGVyIC51aS1tZW51LWl0ZW1cIjogZnVuY3Rpb24gbW91c2VlbnRlclVpTWVudUl0ZW0oZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByZXZpb3VzRmlsdGVyKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gdChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1tZW51LWl0ZW1cIiksXG4gICAgICAgICAgICAgICAgICBuID0gdChlLmN1cnJlbnRUYXJnZXQpO2lbMF0gPT09IG5bMF0gJiYgKHRoaXMuX3JlbW92ZUNsYXNzKG4uc2libGluZ3MoKS5jaGlsZHJlbihcIi51aS1zdGF0ZS1hY3RpdmVcIiksIG51bGwsIFwidWktc3RhdGUtYWN0aXZlXCIpLCB0aGlzLmZvY3VzKGUsIG4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBtb3VzZWxlYXZlOiBcImNvbGxhcHNlQWxsXCIsIFwibW91c2VsZWF2ZSAudWktbWVudVwiOiBcImNvbGxhcHNlQWxsXCIsIGZvY3VzOiBmdW5jdGlvbiBmb2N1cyh0LCBlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuYWN0aXZlIHx8IHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5pdGVtcykuZXEoMCk7ZSB8fCB0aGlzLmZvY3VzKHQsIGkpO1xuICAgICAgICAgIH0sIGJsdXI6IGZ1bmN0aW9uIGJsdXIoZSkge1xuICAgICAgICAgICAgdGhpcy5fZGVsYXkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgaSA9ICF0LmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSwgdC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSk7aSAmJiB0aGlzLmNvbGxhcHNlQWxsKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwga2V5ZG93bjogXCJfa2V5ZG93blwiIH0pLCB0aGlzLnJlZnJlc2goKSwgdGhpcy5fb24odGhpcy5kb2N1bWVudCwgeyBjbGljazogZnVuY3Rpb24gY2xpY2sodCkge1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VPbkRvY3VtZW50Q2xpY2sodCkgJiYgdGhpcy5jb2xsYXBzZUFsbCh0KSwgdGhpcy5tb3VzZUhhbmRsZWQgPSAhMTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgfSwgX2Rlc3Ryb3k6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZWxlbWVudC5maW5kKFwiLnVpLW1lbnUtaXRlbVwiKS5yZW1vdmVBdHRyKFwicm9sZSBhcmlhLWRpc2FibGVkXCIpLFxuICAgICAgICAgICAgaSA9IGUuY2hpbGRyZW4oXCIudWktbWVudS1pdGVtLXdyYXBwZXJcIikucmVtb3ZlVW5pcXVlSWQoKS5yZW1vdmVBdHRyKFwidGFiSW5kZXggcm9sZSBhcmlhLWhhc3BvcHVwXCIpO3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIpLmZpbmQoXCIudWktbWVudVwiKS5hZGRCYWNrKCkucmVtb3ZlQXR0cihcInJvbGUgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtZXhwYW5kZWQgYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJJbmRleFwiKS5yZW1vdmVVbmlxdWVJZCgpLnNob3coKSwgaS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdCh0aGlzKTtlLmRhdGEoXCJ1aS1tZW51LXN1Ym1lbnUtY2FyZXRcIikgJiYgZS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfa2V5ZG93bjogZnVuY3Rpb24gX2tleWRvd24oZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8gPSAhMDtzd2l0Y2ggKGUua2V5Q29kZSkge2Nhc2UgdC51aS5rZXlDb2RlLlBBR0VfVVA6XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzUGFnZShlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5QQUdFX0RPV046XG4gICAgICAgICAgICB0aGlzLm5leHRQYWdlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkhPTUU6XG4gICAgICAgICAgICB0aGlzLl9tb3ZlKFwiZmlyc3RcIiwgXCJmaXJzdFwiLCBlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6XG4gICAgICAgICAgICB0aGlzLl9tb3ZlKFwibGFzdFwiLCBcImxhc3RcIiwgZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuVVA6XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkRPV046XG4gICAgICAgICAgICB0aGlzLm5leHQoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuTEVGVDpcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuUklHSFQ6XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUuaXMoXCIudWktc3RhdGUtZGlzYWJsZWRcIikgJiYgdGhpcy5leHBhbmQoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRU5URVI6Y2FzZSB0LnVpLmtleUNvZGUuU1BBQ0U6XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZShlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FU0NBUEU6XG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlKGUpO2JyZWFrO2RlZmF1bHQ6XG4gICAgICAgICAgICBvID0gITEsIG4gPSB0aGlzLnByZXZpb3VzRmlsdGVyIHx8IFwiXCIsIHIgPSAhMSwgcyA9IGUua2V5Q29kZSA+PSA5NiAmJiBlLmtleUNvZGUgPD0gMTA1ID8gKGUua2V5Q29kZSAtIDk2KS50b1N0cmluZygpIDogU3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUpLCBjbGVhclRpbWVvdXQodGhpcy5maWx0ZXJUaW1lciksIHMgPT09IG4gPyByID0gITAgOiBzID0gbiArIHMsIGkgPSB0aGlzLl9maWx0ZXJNZW51SXRlbXMocyksIChpID0gciAmJiAtMSAhPT0gaS5pbmRleCh0aGlzLmFjdGl2ZS5uZXh0KCkpID8gdGhpcy5hY3RpdmUubmV4dEFsbChcIi51aS1tZW51LWl0ZW1cIikgOiBpKS5sZW5ndGggfHwgKHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSksIGkgPSB0aGlzLl9maWx0ZXJNZW51SXRlbXMocykpLCBpLmxlbmd0aCA/ICh0aGlzLmZvY3VzKGUsIGkpLCB0aGlzLnByZXZpb3VzRmlsdGVyID0gcywgdGhpcy5maWx0ZXJUaW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXI7XG4gICAgICAgICAgICB9LCAxZTMpKSA6IGRlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyO31vICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sIF9hY3RpdmF0ZTogZnVuY3Rpb24gX2FjdGl2YXRlKHQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLmlzKFwiLnVpLXN0YXRlLWRpc2FibGVkXCIpICYmICh0aGlzLmFjdGl2ZS5jaGlsZHJlbihcIlthcmlhLWhhc3BvcHVwPSd0cnVlJ11cIikubGVuZ3RoID8gdGhpcy5leHBhbmQodCkgOiB0aGlzLnNlbGVjdCh0KSk7XG4gICAgICB9LCByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvID0gdGhpcyxcbiAgICAgICAgICAgIGEgPSB0aGlzLm9wdGlvbnMuaWNvbnMuc3VibWVudSxcbiAgICAgICAgICAgIGwgPSB0aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMubWVudXMpO3RoaXMuX3RvZ2dsZUNsYXNzKFwidWktbWVudS1pY29uc1wiLCBudWxsLCAhIXRoaXMuZWxlbWVudC5maW5kKFwiLnVpLWljb25cIikubGVuZ3RoKSwgbiA9IGwuZmlsdGVyKFwiOm5vdCgudWktbWVudSlcIikuaGlkZSgpLmF0dHIoeyByb2xlOiB0aGlzLm9wdGlvbnMucm9sZSwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIiB9KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHQodGhpcyksXG4gICAgICAgICAgICAgIGkgPSBlLnByZXYoKSxcbiAgICAgICAgICAgICAgbiA9IHQoXCI8c3Bhbj5cIikuZGF0YShcInVpLW1lbnUtc3VibWVudS1jYXJldFwiLCAhMCk7by5fYWRkQ2xhc3MobiwgXCJ1aS1tZW51LWljb25cIiwgXCJ1aS1pY29uIFwiICsgYSksIGkuYXR0cihcImFyaWEtaGFzcG9wdXBcIiwgXCJ0cnVlXCIpLnByZXBlbmQobiksIGUuYXR0cihcImFyaWEtbGFiZWxsZWRieVwiLCBpLmF0dHIoXCJpZFwiKSk7XG4gICAgICAgIH0pLCB0aGlzLl9hZGRDbGFzcyhuLCBcInVpLW1lbnVcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnRcIiksIGUgPSBsLmFkZCh0aGlzLmVsZW1lbnQpLCAoaSA9IGUuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpKS5ub3QoXCIudWktbWVudS1pdGVtXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdCh0aGlzKTtvLl9pc0RpdmlkZXIoZSkgJiYgby5fYWRkQ2xhc3MoZSwgXCJ1aS1tZW51LWRpdmlkZXJcIiwgXCJ1aS13aWRnZXQtY29udGVudFwiKTtcbiAgICAgICAgfSksIHMgPSBpLm5vdChcIi51aS1tZW51LWl0ZW0sIC51aS1tZW51LWRpdmlkZXJcIiksIHIgPSBzLmNoaWxkcmVuKCkubm90KFwiLnVpLW1lbnVcIikudW5pcXVlSWQoKS5hdHRyKHsgdGFiSW5kZXg6IC0xLCByb2xlOiB0aGlzLl9pdGVtUm9sZSgpIH0pLCB0aGlzLl9hZGRDbGFzcyhzLCBcInVpLW1lbnUtaXRlbVwiKS5fYWRkQ2xhc3MociwgXCJ1aS1tZW51LWl0ZW0td3JhcHBlclwiKSwgaS5maWx0ZXIoXCIudWktc3RhdGUtZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIiwgXCJ0cnVlXCIpLCB0aGlzLmFjdGl2ZSAmJiAhdC5jb250YWlucyh0aGlzLmVsZW1lbnRbMF0sIHRoaXMuYWN0aXZlWzBdKSAmJiB0aGlzLmJsdXIoKTtcbiAgICAgIH0sIF9pdGVtUm9sZTogZnVuY3Rpb24gX2l0ZW1Sb2xlKCkge1xuICAgICAgICByZXR1cm4geyBtZW51OiBcIm1lbnVpdGVtXCIsIGxpc3Rib3g6IFwib3B0aW9uXCIgfVt0aGlzLm9wdGlvbnMucm9sZV07XG4gICAgICB9LCBfc2V0T3B0aW9uOiBmdW5jdGlvbiBfc2V0T3B0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKFwiaWNvbnNcIiA9PT0gdCkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5lbGVtZW50LmZpbmQoXCIudWktbWVudS1pY29uXCIpO3RoaXMuX3JlbW92ZUNsYXNzKGksIG51bGwsIHRoaXMub3B0aW9ucy5pY29ucy5zdWJtZW51KS5fYWRkQ2xhc3MoaSwgbnVsbCwgZS5zdWJtZW51KTtcbiAgICAgICAgfXRoaXMuX3N1cGVyKHQsIGUpO1xuICAgICAgfSwgX3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiBfc2V0T3B0aW9uRGlzYWJsZWQodCkge1xuICAgICAgICB0aGlzLl9zdXBlcih0KSwgdGhpcy5lbGVtZW50LmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsIFN0cmluZyh0KSksIHRoaXMuX3RvZ2dsZUNsYXNzKG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiwgISF0KTtcbiAgICAgIH0sIGZvY3VzOiBmdW5jdGlvbiBmb2N1cyh0LCBlKSB7XG4gICAgICAgIHZhciBpLCBuLCBzO3RoaXMuYmx1cih0LCB0ICYmIFwiZm9jdXNcIiA9PT0gdC50eXBlKSwgdGhpcy5fc2Nyb2xsSW50b1ZpZXcoZSksIHRoaXMuYWN0aXZlID0gZS5maXJzdCgpLCBuID0gdGhpcy5hY3RpdmUuY2hpbGRyZW4oXCIudWktbWVudS1pdGVtLXdyYXBwZXJcIiksIHRoaXMuX2FkZENsYXNzKG4sIG51bGwsIFwidWktc3RhdGUtYWN0aXZlXCIpLCB0aGlzLm9wdGlvbnMucm9sZSAmJiB0aGlzLmVsZW1lbnQuYXR0cihcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLCBuLmF0dHIoXCJpZFwiKSksIHMgPSB0aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KFwiLnVpLW1lbnUtaXRlbVwiKS5jaGlsZHJlbihcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiKSwgdGhpcy5fYWRkQ2xhc3MocywgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiksIHQgJiYgXCJrZXlkb3duXCIgPT09IHQudHlwZSA/IHRoaXMuX2Nsb3NlKCkgOiB0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgICAgIH0sIHRoaXMuZGVsYXkpLCAoaSA9IGUuY2hpbGRyZW4oXCIudWktbWVudVwiKSkubGVuZ3RoICYmIHQgJiYgL15tb3VzZS8udGVzdCh0LnR5cGUpICYmIHRoaXMuX3N0YXJ0T3BlbmluZyhpKSwgdGhpcy5hY3RpdmVNZW51ID0gZS5wYXJlbnQoKSwgdGhpcy5fdHJpZ2dlcihcImZvY3VzXCIsIHQsIHsgaXRlbTogZSB9KTtcbiAgICAgIH0sIF9zY3JvbGxJbnRvVmlldzogZnVuY3Rpb24gX3Njcm9sbEludG9WaWV3KGUpIHtcbiAgICAgICAgdmFyIGksIG4sIHMsIHIsIG8sIGE7dGhpcy5faGFzU2Nyb2xsKCkgJiYgKGkgPSBwYXJzZUZsb2F0KHQuY3NzKHRoaXMuYWN0aXZlTWVudVswXSwgXCJib3JkZXJUb3BXaWR0aFwiKSkgfHwgMCwgbiA9IHBhcnNlRmxvYXQodC5jc3ModGhpcy5hY3RpdmVNZW51WzBdLCBcInBhZGRpbmdUb3BcIikpIHx8IDAsIHMgPSBlLm9mZnNldCgpLnRvcCAtIHRoaXMuYWN0aXZlTWVudS5vZmZzZXQoKS50b3AgLSBpIC0gbiwgciA9IHRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoKSwgbyA9IHRoaXMuYWN0aXZlTWVudS5oZWlnaHQoKSwgYSA9IGUub3V0ZXJIZWlnaHQoKSwgcyA8IDAgPyB0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKHIgKyBzKSA6IHMgKyBhID4gbyAmJiB0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKHIgKyBzIC0gbyArIGEpKTtcbiAgICAgIH0sIGJsdXI6IGZ1bmN0aW9uIGJsdXIodCwgZSkge1xuICAgICAgICBlIHx8IGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSwgdGhpcy5hY3RpdmUgJiYgKHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuYWN0aXZlLmNoaWxkcmVuKFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIpLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiKSwgdGhpcy5fdHJpZ2dlcihcImJsdXJcIiwgdCwgeyBpdGVtOiB0aGlzLmFjdGl2ZSB9KSwgdGhpcy5hY3RpdmUgPSBudWxsKTtcbiAgICAgIH0sIF9zdGFydE9wZW5pbmc6IGZ1bmN0aW9uIF9zdGFydE9wZW5pbmcodCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lciksIFwidHJ1ZVwiID09PSB0LmF0dHIoXCJhcmlhLWhpZGRlblwiKSAmJiAodGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLl9jbG9zZSgpLCB0aGlzLl9vcGVuKHQpO1xuICAgICAgICB9LCB0aGlzLmRlbGF5KSk7XG4gICAgICB9LCBfb3BlbjogZnVuY3Rpb24gX29wZW4oZSkge1xuICAgICAgICB2YXIgaSA9IHQuZXh0ZW5kKHsgb2Y6IHRoaXMuYWN0aXZlIH0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbik7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLCB0aGlzLmVsZW1lbnQuZmluZChcIi51aS1tZW51XCIpLm5vdChlLnBhcmVudHMoXCIudWktbWVudVwiKSkuaGlkZSgpLmF0dHIoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIiksIGUuc2hvdygpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlblwiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCBcInRydWVcIikucG9zaXRpb24oaSk7XG4gICAgICB9LCBjb2xsYXBzZUFsbDogZnVuY3Rpb24gY29sbGFwc2VBbGwoZSwgaSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lciksIHRoaXMudGltZXIgPSB0aGlzLl9kZWxheShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG4gPSBpID8gdGhpcy5lbGVtZW50IDogdChlICYmIGUudGFyZ2V0KS5jbG9zZXN0KHRoaXMuZWxlbWVudC5maW5kKFwiLnVpLW1lbnVcIikpO24ubGVuZ3RoIHx8IChuID0gdGhpcy5lbGVtZW50KSwgdGhpcy5fY2xvc2UobiksIHRoaXMuYmx1cihlKSwgdGhpcy5fcmVtb3ZlQ2xhc3Mobi5maW5kKFwiLnVpLXN0YXRlLWFjdGl2ZVwiKSwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiksIHRoaXMuYWN0aXZlTWVudSA9IG47XG4gICAgICAgIH0sIHRoaXMuZGVsYXkpO1xuICAgICAgfSwgX2Nsb3NlOiBmdW5jdGlvbiBfY2xvc2UodCkge1xuICAgICAgICB0IHx8ICh0ID0gdGhpcy5hY3RpdmUgPyB0aGlzLmFjdGl2ZS5wYXJlbnQoKSA6IHRoaXMuZWxlbWVudCksIHQuZmluZChcIi51aS1tZW51XCIpLmhpZGUoKS5hdHRyKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsIFwiZmFsc2VcIik7XG4gICAgICB9LCBfY2xvc2VPbkRvY3VtZW50Q2xpY2s6IGZ1bmN0aW9uIF9jbG9zZU9uRG9jdW1lbnRDbGljayhlKSB7XG4gICAgICAgIHJldHVybiAhdChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1tZW51XCIpLmxlbmd0aDtcbiAgICAgIH0sIF9pc0RpdmlkZXI6IGZ1bmN0aW9uIF9pc0RpdmlkZXIodCkge1xuICAgICAgICByZXR1cm4gIS9bXlxcLVxcdTIwMTRcXHUyMDEzXFxzXS8udGVzdCh0LnRleHQoKSk7XG4gICAgICB9LCBjb2xsYXBzZTogZnVuY3Rpb24gY29sbGFwc2UodCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuYWN0aXZlICYmIHRoaXMuYWN0aXZlLnBhcmVudCgpLmNsb3Nlc3QoXCIudWktbWVudS1pdGVtXCIsIHRoaXMuZWxlbWVudCk7ZSAmJiBlLmxlbmd0aCAmJiAodGhpcy5fY2xvc2UoKSwgdGhpcy5mb2N1cyh0LCBlKSk7XG4gICAgICB9LCBleHBhbmQ6IGZ1bmN0aW9uIGV4cGFuZCh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5hY3RpdmUgJiYgdGhpcy5hY3RpdmUuY2hpbGRyZW4oXCIudWktbWVudSBcIikuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpLmZpcnN0KCk7ZSAmJiBlLmxlbmd0aCAmJiAodGhpcy5fb3BlbihlLnBhcmVudCgpKSwgdGhpcy5fZGVsYXkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuZm9jdXModCwgZSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH0sIG5leHQ6IGZ1bmN0aW9uIG5leHQodCkge1xuICAgICAgICB0aGlzLl9tb3ZlKFwibmV4dFwiLCBcImZpcnN0XCIsIHQpO1xuICAgICAgfSwgcHJldmlvdXM6IGZ1bmN0aW9uIHByZXZpb3VzKHQpIHtcbiAgICAgICAgdGhpcy5fbW92ZShcInByZXZcIiwgXCJsYXN0XCIsIHQpO1xuICAgICAgfSwgaXNGaXJzdEl0ZW06IGZ1bmN0aW9uIGlzRmlyc3RJdGVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLnByZXZBbGwoXCIudWktbWVudS1pdGVtXCIpLmxlbmd0aDtcbiAgICAgIH0sIGlzTGFzdEl0ZW06IGZ1bmN0aW9uIGlzTGFzdEl0ZW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUubmV4dEFsbChcIi51aS1tZW51LWl0ZW1cIikubGVuZ3RoO1xuICAgICAgfSwgX21vdmU6IGZ1bmN0aW9uIF9tb3ZlKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG47dGhpcy5hY3RpdmUgJiYgKG4gPSBcImZpcnN0XCIgPT09IHQgfHwgXCJsYXN0XCIgPT09IHQgPyB0aGlzLmFjdGl2ZVtcImZpcnN0XCIgPT09IHQgPyBcInByZXZBbGxcIiA6IFwibmV4dEFsbFwiXShcIi51aS1tZW51LWl0ZW1cIikuZXEoLTEpIDogdGhpcy5hY3RpdmVbdCArIFwiQWxsXCJdKFwiLnVpLW1lbnUtaXRlbVwiKS5lcSgwKSksIG4gJiYgbi5sZW5ndGggJiYgdGhpcy5hY3RpdmUgfHwgKG4gPSB0aGlzLmFjdGl2ZU1lbnUuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpW2VdKCkpLCB0aGlzLmZvY3VzKGksIG4pO1xuICAgICAgfSwgbmV4dFBhZ2U6IGZ1bmN0aW9uIG5leHRQYWdlKGUpIHtcbiAgICAgICAgdmFyIGksIG4sIHM7dGhpcy5hY3RpdmUgPyB0aGlzLmlzTGFzdEl0ZW0oKSB8fCAodGhpcy5faGFzU2Nyb2xsKCkgPyAobiA9IHRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcCwgcyA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKSwgdGhpcy5hY3RpdmUubmV4dEFsbChcIi51aS1tZW51LWl0ZW1cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIChpID0gdCh0aGlzKSkub2Zmc2V0KCkudG9wIC0gbiAtIHMgPCAwO1xuICAgICAgICB9KSwgdGhpcy5mb2N1cyhlLCBpKSkgOiB0aGlzLmZvY3VzKGUsIHRoaXMuYWN0aXZlTWVudS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcylbdGhpcy5hY3RpdmUgPyBcImxhc3RcIiA6IFwiZmlyc3RcIl0oKSkpIDogdGhpcy5uZXh0KGUpO1xuICAgICAgfSwgcHJldmlvdXNQYWdlOiBmdW5jdGlvbiBwcmV2aW91c1BhZ2UoZSkge1xuICAgICAgICB2YXIgaSwgbiwgczt0aGlzLmFjdGl2ZSA/IHRoaXMuaXNGaXJzdEl0ZW0oKSB8fCAodGhpcy5faGFzU2Nyb2xsKCkgPyAobiA9IHRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcCwgcyA9IHRoaXMuZWxlbWVudC5oZWlnaHQoKSwgdGhpcy5hY3RpdmUucHJldkFsbChcIi51aS1tZW51LWl0ZW1cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIChpID0gdCh0aGlzKSkub2Zmc2V0KCkudG9wIC0gbiArIHMgPiAwO1xuICAgICAgICB9KSwgdGhpcy5mb2N1cyhlLCBpKSkgOiB0aGlzLmZvY3VzKGUsIHRoaXMuYWN0aXZlTWVudS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcykuZmlyc3QoKSkpIDogdGhpcy5uZXh0KGUpO1xuICAgICAgfSwgX2hhc1Njcm9sbDogZnVuY3Rpb24gX2hhc1Njcm9sbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIDwgdGhpcy5lbGVtZW50LnByb3AoXCJzY3JvbGxIZWlnaHRcIik7XG4gICAgICB9LCBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUgfHwgdChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1tZW51LWl0ZW1cIik7dmFyIGkgPSB7IGl0ZW06IHRoaXMuYWN0aXZlIH07dGhpcy5hY3RpdmUuaGFzKFwiLnVpLW1lbnVcIikubGVuZ3RoIHx8IHRoaXMuY29sbGFwc2VBbGwoZSwgITApLCB0aGlzLl90cmlnZ2VyKFwic2VsZWN0XCIsIGUsIGkpO1xuICAgICAgfSwgX2ZpbHRlck1lbnVJdGVtczogZnVuY3Rpb24gX2ZpbHRlck1lbnVJdGVtcyhlKSB7XG4gICAgICAgIHZhciBpID0gZS5yZXBsYWNlKC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgXCJcXFxcJCZcIiksXG4gICAgICAgICAgICBuID0gbmV3IFJlZ0V4cChcIl5cIiArIGksIFwiaVwiKTtyZXR1cm4gdGhpcy5hY3RpdmVNZW51LmZpbmQodGhpcy5vcHRpb25zLml0ZW1zKS5maWx0ZXIoXCIudWktbWVudS1pdGVtXCIpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG4udGVzdCh0LnRyaW0odCh0aGlzKS5jaGlsZHJlbihcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiKS50ZXh0KCkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IH0pLFxuICAgIC8qIVxuICAgICAqIGpRdWVyeSBVSSBBdXRvY29tcGxldGUgMS4xMi4xXG4gICAgICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAgICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgICAqL1xuICAgIHQud2lkZ2V0KFwidWkuYXV0b2NvbXBsZXRlXCIsIHsgdmVyc2lvbjogXCIxLjEyLjFcIiwgZGVmYXVsdEVsZW1lbnQ6IFwiPGlucHV0PlwiLCBvcHRpb25zOiB7IGFwcGVuZFRvOiBudWxsLCBhdXRvRm9jdXM6ICExLCBkZWxheTogMzAwLCBtaW5MZW5ndGg6IDEsIHBvc2l0aW9uOiB7IG15OiBcImxlZnQgdG9wXCIsIGF0OiBcImxlZnQgYm90dG9tXCIsIGNvbGxpc2lvbjogXCJub25lXCIgfSwgc291cmNlOiBudWxsLCBjaGFuZ2U6IG51bGwsIGNsb3NlOiBudWxsLCBmb2N1czogbnVsbCwgb3BlbjogbnVsbCwgcmVzcG9uc2U6IG51bGwsIHNlYXJjaDogbnVsbCwgc2VsZWN0OiBudWxsIH0sIHJlcXVlc3RJbmRleDogMCwgcGVuZGluZzogMCwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMgPSB0aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHIgPSBcInRleHRhcmVhXCIgPT09IHMsXG4gICAgICAgICAgICBvID0gXCJpbnB1dFwiID09PSBzO3RoaXMuaXNNdWx0aUxpbmUgPSByIHx8ICFvICYmIHRoaXMuX2lzQ29udGVudEVkaXRhYmxlKHRoaXMuZWxlbWVudCksIHRoaXMudmFsdWVNZXRob2QgPSB0aGlzLmVsZW1lbnRbciB8fCBvID8gXCJ2YWxcIiA6IFwidGV4dFwiXSwgdGhpcy5pc05ld01lbnUgPSAhMCwgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1hdXRvY29tcGxldGUtaW5wdXRcIiksIHRoaXMuZWxlbWVudC5hdHRyKFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIpLCB0aGlzLl9vbih0aGlzLmVsZW1lbnQsIHsga2V5ZG93bjogZnVuY3Rpb24ga2V5ZG93bihzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LnByb3AoXCJyZWFkT25seVwiKSkgcmV0dXJuIGUgPSAhMCwgbiA9ICEwLCB2b2lkIChpID0gITApO2UgPSAhMSwgbiA9ICExLCBpID0gITE7dmFyIHIgPSB0LnVpLmtleUNvZGU7c3dpdGNoIChzLmtleUNvZGUpIHtjYXNlIHIuUEFHRV9VUDpcbiAgICAgICAgICAgICAgICBlID0gITAsIHRoaXMuX21vdmUoXCJwcmV2aW91c1BhZ2VcIiwgcyk7YnJlYWs7Y2FzZSByLlBBR0VfRE9XTjpcbiAgICAgICAgICAgICAgICBlID0gITAsIHRoaXMuX21vdmUoXCJuZXh0UGFnZVwiLCBzKTticmVhaztjYXNlIHIuVVA6XG4gICAgICAgICAgICAgICAgZSA9ICEwLCB0aGlzLl9rZXlFdmVudChcInByZXZpb3VzXCIsIHMpO2JyZWFrO2Nhc2Ugci5ET1dOOlxuICAgICAgICAgICAgICAgIGUgPSAhMCwgdGhpcy5fa2V5RXZlbnQoXCJuZXh0XCIsIHMpO2JyZWFrO2Nhc2Ugci5FTlRFUjpcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUuYWN0aXZlICYmIChlID0gITAsIHMucHJldmVudERlZmF1bHQoKSwgdGhpcy5tZW51LnNlbGVjdChzKSk7YnJlYWs7Y2FzZSByLlRBQjpcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUuYWN0aXZlICYmIHRoaXMubWVudS5zZWxlY3Qocyk7YnJlYWs7Y2FzZSByLkVTQ0FQRTpcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUuZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpICYmICh0aGlzLmlzTXVsdGlMaW5lIHx8IHRoaXMuX3ZhbHVlKHRoaXMudGVybSksIHRoaXMuY2xvc2UocyksIHMucHJldmVudERlZmF1bHQoKSk7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpID0gITAsIHRoaXMuX3NlYXJjaFRpbWVvdXQocyk7fVxuICAgICAgICAgIH0sIGtleXByZXNzOiBmdW5jdGlvbiBrZXlwcmVzcyhuKSB7XG4gICAgICAgICAgICBpZiAoZSkgcmV0dXJuIGUgPSAhMSwgdm9pZCAodGhpcy5pc011bHRpTGluZSAmJiAhdGhpcy5tZW51LmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSB8fCBuLnByZXZlbnREZWZhdWx0KCkpO2lmICghaSkge1xuICAgICAgICAgICAgICB2YXIgcyA9IHQudWkua2V5Q29kZTtzd2l0Y2ggKG4ua2V5Q29kZSkge2Nhc2Ugcy5QQUdFX1VQOlxuICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZShcInByZXZpb3VzUGFnZVwiLCBuKTticmVhaztjYXNlIHMuUEFHRV9ET1dOOlxuICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZShcIm5leHRQYWdlXCIsIG4pO2JyZWFrO2Nhc2Ugcy5VUDpcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2tleUV2ZW50KFwicHJldmlvdXNcIiwgbik7YnJlYWs7Y2FzZSBzLkRPV046XG4gICAgICAgICAgICAgICAgICB0aGlzLl9rZXlFdmVudChcIm5leHRcIiwgbik7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGlucHV0OiBmdW5jdGlvbiBpbnB1dCh0KSB7XG4gICAgICAgICAgICBpZiAobikgcmV0dXJuIG4gPSAhMSwgdm9pZCB0LnByZXZlbnREZWZhdWx0KCk7dGhpcy5fc2VhcmNoVGltZW91dCh0KTtcbiAgICAgICAgICB9LCBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGwsIHRoaXMucHJldmlvdXMgPSB0aGlzLl92YWx1ZSgpO1xuICAgICAgICAgIH0sIGJsdXI6IGZ1bmN0aW9uIGJsdXIodCkge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxCbHVyID8gZGVsZXRlIHRoaXMuY2FuY2VsQmx1ciA6IChjbGVhclRpbWVvdXQodGhpcy5zZWFyY2hpbmcpLCB0aGlzLmNsb3NlKHQpLCB0aGlzLl9jaGFuZ2UodCkpO1xuICAgICAgICAgIH0gfSksIHRoaXMuX2luaXRTb3VyY2UoKSwgdGhpcy5tZW51ID0gdChcIjx1bD5cIikuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSkubWVudSh7IHJvbGU6IG51bGwgfSkuaGlkZSgpLm1lbnUoXCJpbnN0YW5jZVwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5tZW51LmVsZW1lbnQsIFwidWktYXV0b2NvbXBsZXRlXCIsIFwidWktZnJvbnRcIiksIHRoaXMuX29uKHRoaXMubWVudS5lbGVtZW50LCB7IG1vdXNlZG93bjogZnVuY3Rpb24gbW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5jYW5jZWxCbHVyID0gITAsIHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FuY2VsQmx1ciwgdGhpcy5lbGVtZW50WzBdICE9PSB0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pICYmIHRoaXMuZWxlbWVudC50cmlnZ2VyKFwiZm9jdXNcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBtZW51Zm9jdXM6IGZ1bmN0aW9uIG1lbnVmb2N1cyhlLCBpKSB7XG4gICAgICAgICAgICB2YXIgbiwgcztpZiAodGhpcy5pc05ld01lbnUgJiYgKHRoaXMuaXNOZXdNZW51ID0gITEsIGUub3JpZ2luYWxFdmVudCAmJiAvXm1vdXNlLy50ZXN0KGUub3JpZ2luYWxFdmVudC50eXBlKSkpIHJldHVybiB0aGlzLm1lbnUuYmx1cigpLCB2b2lkIHRoaXMuZG9jdW1lbnQub25lKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdChlLnRhcmdldCkudHJpZ2dlcihlLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgICAgICAgfSk7cyA9IGkuaXRlbS5kYXRhKFwidWktYXV0b2NvbXBsZXRlLWl0ZW1cIiksICExICE9PSB0aGlzLl90cmlnZ2VyKFwiZm9jdXNcIiwgZSwgeyBpdGVtOiBzIH0pICYmIGUub3JpZ2luYWxFdmVudCAmJiAvXmtleS8udGVzdChlLm9yaWdpbmFsRXZlbnQudHlwZSkgJiYgdGhpcy5fdmFsdWUocy52YWx1ZSksIChuID0gaS5pdGVtLmF0dHIoXCJhcmlhLWxhYmVsXCIpIHx8IHMudmFsdWUpICYmIHQudHJpbShuKS5sZW5ndGggJiYgKHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKSwgdChcIjxkaXY+XCIpLnRleHQobikuYXBwZW5kVG8odGhpcy5saXZlUmVnaW9uKSk7XG4gICAgICAgICAgfSwgbWVudXNlbGVjdDogZnVuY3Rpb24gbWVudXNlbGVjdChlLCBpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGkuaXRlbS5kYXRhKFwidWktYXV0b2NvbXBsZXRlLWl0ZW1cIiksXG4gICAgICAgICAgICAgICAgcyA9IHRoaXMucHJldmlvdXM7dGhpcy5lbGVtZW50WzBdICE9PSB0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pICYmICh0aGlzLmVsZW1lbnQudHJpZ2dlcihcImZvY3VzXCIpLCB0aGlzLnByZXZpb3VzID0gcywgdGhpcy5fZGVsYXkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzID0gcywgdGhpcy5zZWxlY3RlZEl0ZW0gPSBuO1xuICAgICAgICAgICAgfSkpLCAhMSAhPT0gdGhpcy5fdHJpZ2dlcihcInNlbGVjdFwiLCBlLCB7IGl0ZW06IG4gfSkgJiYgdGhpcy5fdmFsdWUobi52YWx1ZSksIHRoaXMudGVybSA9IHRoaXMuX3ZhbHVlKCksIHRoaXMuY2xvc2UoZSksIHRoaXMuc2VsZWN0ZWRJdGVtID0gbjtcbiAgICAgICAgICB9IH0pLCB0aGlzLmxpdmVSZWdpb24gPSB0KFwiPGRpdj5cIiwgeyByb2xlOiBcInN0YXR1c1wiLCBcImFyaWEtbGl2ZVwiOiBcImFzc2VydGl2ZVwiLCBcImFyaWEtcmVsZXZhbnRcIjogXCJhZGRpdGlvbnNcIiB9KS5hcHBlbmRUbyh0aGlzLmRvY3VtZW50WzBdLmJvZHkpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLmxpdmVSZWdpb24sIG51bGwsIFwidWktaGVscGVyLWhpZGRlbi1hY2Nlc3NpYmxlXCIpLCB0aGlzLl9vbih0aGlzLndpbmRvdywgeyBiZWZvcmV1bmxvYWQ6IGZ1bmN0aW9uIGJlZm9yZXVubG9hZCgpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwiYXV0b2NvbXBsZXRlXCIpO1xuICAgICAgICAgIH0gfSk7XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNlYXJjaGluZyksIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwiYXV0b2NvbXBsZXRlXCIpLCB0aGlzLm1lbnUuZWxlbWVudC5yZW1vdmUoKSwgdGhpcy5saXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKHQsIGUpLCBcInNvdXJjZVwiID09PSB0ICYmIHRoaXMuX2luaXRTb3VyY2UoKSwgXCJhcHBlbmRUb1wiID09PSB0ICYmIHRoaXMubWVudS5lbGVtZW50LmFwcGVuZFRvKHRoaXMuX2FwcGVuZFRvKCkpLCBcImRpc2FibGVkXCIgPT09IHQgJiYgZSAmJiB0aGlzLnhociAmJiB0aGlzLnhoci5hYm9ydCgpO1xuICAgICAgfSwgX2lzRXZlbnRUYXJnZXRJbldpZGdldDogZnVuY3Rpb24gX2lzRXZlbnRUYXJnZXRJbldpZGdldChlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5tZW51LmVsZW1lbnRbMF07cmV0dXJuIGUudGFyZ2V0ID09PSB0aGlzLmVsZW1lbnRbMF0gfHwgZS50YXJnZXQgPT09IGkgfHwgdC5jb250YWlucyhpLCBlLnRhcmdldCk7XG4gICAgICB9LCBfY2xvc2VPbkNsaWNrT3V0c2lkZTogZnVuY3Rpb24gX2Nsb3NlT25DbGlja091dHNpZGUodCkge1xuICAgICAgICB0aGlzLl9pc0V2ZW50VGFyZ2V0SW5XaWRnZXQodCkgfHwgdGhpcy5jbG9zZSgpO1xuICAgICAgfSwgX2FwcGVuZFRvOiBmdW5jdGlvbiBfYXBwZW5kVG8oKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5vcHRpb25zLmFwcGVuZFRvO3JldHVybiBlICYmIChlID0gZS5qcXVlcnkgfHwgZS5ub2RlVHlwZSA/IHQoZSkgOiB0aGlzLmRvY3VtZW50LmZpbmQoZSkuZXEoMCkpLCBlICYmIGVbMF0gfHwgKGUgPSB0aGlzLmVsZW1lbnQuY2xvc2VzdChcIi51aS1mcm9udCwgZGlhbG9nXCIpKSwgZS5sZW5ndGggfHwgKGUgPSB0aGlzLmRvY3VtZW50WzBdLmJvZHkpLCBlO1xuICAgICAgfSwgX2luaXRTb3VyY2U6IGZ1bmN0aW9uIF9pbml0U291cmNlKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gdGhpczt0LmlzQXJyYXkodGhpcy5vcHRpb25zLnNvdXJjZSkgPyAoZSA9IHRoaXMub3B0aW9ucy5zb3VyY2UsIHRoaXMuc291cmNlID0gZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICBuKHQudWkuYXV0b2NvbXBsZXRlLmZpbHRlcihlLCBpLnRlcm0pKTtcbiAgICAgICAgfSkgOiBcInN0cmluZ1wiID09IHR5cGVvZiB0aGlzLm9wdGlvbnMuc291cmNlID8gKGkgPSB0aGlzLm9wdGlvbnMuc291cmNlLCB0aGlzLnNvdXJjZSA9IGZ1bmN0aW9uIChlLCBzKSB7XG4gICAgICAgICAgbi54aHIgJiYgbi54aHIuYWJvcnQoKSwgbi54aHIgPSB0LmFqYXgoeyB1cmw6IGksIGRhdGE6IGUsIGRhdGFUeXBlOiBcImpzb25cIiwgc3VjY2VzczogZnVuY3Rpb24gc3VjY2Vzcyh0KSB7XG4gICAgICAgICAgICAgIHModCk7XG4gICAgICAgICAgICB9LCBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICAgICAgICAgIHMoW10pO1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgfSkgOiB0aGlzLnNvdXJjZSA9IHRoaXMub3B0aW9ucy5zb3VyY2U7XG4gICAgICB9LCBfc2VhcmNoVGltZW91dDogZnVuY3Rpb24gX3NlYXJjaFRpbWVvdXQodCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zZWFyY2hpbmcpLCB0aGlzLnNlYXJjaGluZyA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHRoaXMudGVybSA9PT0gdGhpcy5fdmFsdWUoKSxcbiAgICAgICAgICAgICAgaSA9IHRoaXMubWVudS5lbGVtZW50LmlzKFwiOnZpc2libGVcIiksXG4gICAgICAgICAgICAgIG4gPSB0LmFsdEtleSB8fCB0LmN0cmxLZXkgfHwgdC5tZXRhS2V5IHx8IHQuc2hpZnRLZXk7ZSAmJiAoIWUgfHwgaSB8fCBuKSB8fCAodGhpcy5zZWxlY3RlZEl0ZW0gPSBudWxsLCB0aGlzLnNlYXJjaChudWxsLCB0KSk7XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5kZWxheSk7XG4gICAgICB9LCBzZWFyY2g6IGZ1bmN0aW9uIHNlYXJjaCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0ID0gbnVsbCAhPSB0ID8gdCA6IHRoaXMuX3ZhbHVlKCksIHRoaXMudGVybSA9IHRoaXMuX3ZhbHVlKCksIHQubGVuZ3RoIDwgdGhpcy5vcHRpb25zLm1pbkxlbmd0aCA/IHRoaXMuY2xvc2UoZSkgOiAhMSAhPT0gdGhpcy5fdHJpZ2dlcihcInNlYXJjaFwiLCBlKSA/IHRoaXMuX3NlYXJjaCh0KSA6IHZvaWQgMDtcbiAgICAgIH0sIF9zZWFyY2g6IGZ1bmN0aW9uIF9zZWFyY2godCkge1xuICAgICAgICB0aGlzLnBlbmRpbmcrKywgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1hdXRvY29tcGxldGUtbG9hZGluZ1wiKSwgdGhpcy5jYW5jZWxTZWFyY2ggPSAhMSwgdGhpcy5zb3VyY2UoeyB0ZXJtOiB0IH0sIHRoaXMuX3Jlc3BvbnNlKCkpO1xuICAgICAgfSwgX3Jlc3BvbnNlOiBmdW5jdGlvbiBfcmVzcG9uc2UoKSB7XG4gICAgICAgIHZhciBlID0gKyt0aGlzLnJlcXVlc3RJbmRleDtyZXR1cm4gdC5wcm94eShmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGUgPT09IHRoaXMucmVxdWVzdEluZGV4ICYmIHRoaXMuX19yZXNwb25zZSh0KSwgdGhpcy5wZW5kaW5nLS0sIHRoaXMucGVuZGluZyB8fCB0aGlzLl9yZW1vdmVDbGFzcyhcInVpLWF1dG9jb21wbGV0ZS1sb2FkaW5nXCIpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH0sIF9fcmVzcG9uc2U6IGZ1bmN0aW9uIF9fcmVzcG9uc2UodCkge1xuICAgICAgICB0ICYmICh0ID0gdGhpcy5fbm9ybWFsaXplKHQpKSwgdGhpcy5fdHJpZ2dlcihcInJlc3BvbnNlXCIsIG51bGwsIHsgY29udGVudDogdCB9KSwgIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiB0ICYmIHQubGVuZ3RoICYmICF0aGlzLmNhbmNlbFNlYXJjaCA/ICh0aGlzLl9zdWdnZXN0KHQpLCB0aGlzLl90cmlnZ2VyKFwib3BlblwiKSkgOiB0aGlzLl9jbG9zZSgpO1xuICAgICAgfSwgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKHQpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxTZWFyY2ggPSAhMCwgdGhpcy5fY2xvc2UodCk7XG4gICAgICB9LCBfY2xvc2U6IGZ1bmN0aW9uIF9jbG9zZSh0KSB7XG4gICAgICAgIHRoaXMuX29mZih0aGlzLmRvY3VtZW50LCBcIm1vdXNlZG93blwiKSwgdGhpcy5tZW51LmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSAmJiAodGhpcy5tZW51LmVsZW1lbnQuaGlkZSgpLCB0aGlzLm1lbnUuYmx1cigpLCB0aGlzLmlzTmV3TWVudSA9ICEwLCB0aGlzLl90cmlnZ2VyKFwiY2xvc2VcIiwgdCkpO1xuICAgICAgfSwgX2NoYW5nZTogZnVuY3Rpb24gX2NoYW5nZSh0KSB7XG4gICAgICAgIHRoaXMucHJldmlvdXMgIT09IHRoaXMuX3ZhbHVlKCkgJiYgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCB0LCB7IGl0ZW06IHRoaXMuc2VsZWN0ZWRJdGVtIH0pO1xuICAgICAgfSwgX25vcm1hbGl6ZTogZnVuY3Rpb24gX25vcm1hbGl6ZShlKSB7XG4gICAgICAgIHJldHVybiBlLmxlbmd0aCAmJiBlWzBdLmxhYmVsICYmIGVbMF0udmFsdWUgPyBlIDogdC5tYXAoZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IHsgbGFiZWw6IGUsIHZhbHVlOiBlIH0gOiB0LmV4dGVuZCh7fSwgZSwgeyBsYWJlbDogZS5sYWJlbCB8fCBlLnZhbHVlLCB2YWx1ZTogZS52YWx1ZSB8fCBlLmxhYmVsIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIF9zdWdnZXN0OiBmdW5jdGlvbiBfc3VnZ2VzdChlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5tZW51LmVsZW1lbnQuZW1wdHkoKTt0aGlzLl9yZW5kZXJNZW51KGksIGUpLCB0aGlzLmlzTmV3TWVudSA9ICEwLCB0aGlzLm1lbnUucmVmcmVzaCgpLCBpLnNob3coKSwgdGhpcy5fcmVzaXplTWVudSgpLCBpLnBvc2l0aW9uKHQuZXh0ZW5kKHsgb2Y6IHRoaXMuZWxlbWVudCB9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24pKSwgdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyAmJiB0aGlzLm1lbnUubmV4dCgpLCB0aGlzLl9vbih0aGlzLmRvY3VtZW50LCB7IG1vdXNlZG93bjogXCJfY2xvc2VPbkNsaWNrT3V0c2lkZVwiIH0pO1xuICAgICAgfSwgX3Jlc2l6ZU1lbnU6IGZ1bmN0aW9uIF9yZXNpemVNZW51KCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMubWVudS5lbGVtZW50O3Qub3V0ZXJXaWR0aChNYXRoLm1heCh0LndpZHRoKFwiXCIpLm91dGVyV2lkdGgoKSArIDEsIHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCkpKTtcbiAgICAgIH0sIF9yZW5kZXJNZW51OiBmdW5jdGlvbiBfcmVuZGVyTWVudShlLCBpKSB7XG4gICAgICAgIHZhciBuID0gdGhpczt0LmVhY2goaSwgZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICBuLl9yZW5kZXJJdGVtRGF0YShlLCBpKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfcmVuZGVySXRlbURhdGE6IGZ1bmN0aW9uIF9yZW5kZXJJdGVtRGF0YSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJJdGVtKHQsIGUpLmRhdGEoXCJ1aS1hdXRvY29tcGxldGUtaXRlbVwiLCBlKTtcbiAgICAgIH0sIF9yZW5kZXJJdGVtOiBmdW5jdGlvbiBfcmVuZGVySXRlbShlLCBpKSB7XG4gICAgICAgIHJldHVybiB0KFwiPGxpPlwiKS5hcHBlbmQodChcIjxkaXY+XCIpLnRleHQoaS5sYWJlbCkpLmFwcGVuZFRvKGUpO1xuICAgICAgfSwgX21vdmU6IGZ1bmN0aW9uIF9tb3ZlKHQsIGUpIHtcbiAgICAgICAgaWYgKHRoaXMubWVudS5lbGVtZW50LmlzKFwiOnZpc2libGVcIikpIHJldHVybiB0aGlzLm1lbnUuaXNGaXJzdEl0ZW0oKSAmJiAvXnByZXZpb3VzLy50ZXN0KHQpIHx8IHRoaXMubWVudS5pc0xhc3RJdGVtKCkgJiYgL15uZXh0Ly50ZXN0KHQpID8gKHRoaXMuaXNNdWx0aUxpbmUgfHwgdGhpcy5fdmFsdWUodGhpcy50ZXJtKSwgdm9pZCB0aGlzLm1lbnUuYmx1cigpKSA6IHZvaWQgdGhpcy5tZW51W3RdKGUpO3RoaXMuc2VhcmNoKG51bGwsIGUpO1xuICAgICAgfSwgd2lkZ2V0OiBmdW5jdGlvbiB3aWRnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lbnUuZWxlbWVudDtcbiAgICAgIH0sIF92YWx1ZTogZnVuY3Rpb24gX3ZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU1ldGhvZC5hcHBseSh0aGlzLmVsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgICB9LCBfa2V5RXZlbnQ6IGZ1bmN0aW9uIF9rZXlFdmVudCh0LCBlKSB7XG4gICAgICAgIHRoaXMuaXNNdWx0aUxpbmUgJiYgIXRoaXMubWVudS5lbGVtZW50LmlzKFwiOnZpc2libGVcIikgfHwgKHRoaXMuX21vdmUodCwgZSksIGUucHJldmVudERlZmF1bHQoKSk7XG4gICAgICB9LCBfaXNDb250ZW50RWRpdGFibGU6IGZ1bmN0aW9uIF9pc0NvbnRlbnRFZGl0YWJsZSh0KSB7XG4gICAgICAgIGlmICghdC5sZW5ndGgpIHJldHVybiAhMTt2YXIgZSA9IHQucHJvcChcImNvbnRlbnRFZGl0YWJsZVwiKTtyZXR1cm4gXCJpbmhlcml0XCIgPT09IGUgPyB0aGlzLl9pc0NvbnRlbnRFZGl0YWJsZSh0LnBhcmVudCgpKSA6IFwidHJ1ZVwiID09PSBlO1xuICAgICAgfSB9KSwgdC5leHRlbmQodC51aS5hdXRvY29tcGxldGUsIHsgZXNjYXBlUmVnZXg6IGZ1bmN0aW9uIGVzY2FwZVJlZ2V4KHQpIHtcbiAgICAgICAgcmV0dXJuIHQucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgfSwgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IG5ldyBSZWdFeHAodC51aS5hdXRvY29tcGxldGUuZXNjYXBlUmVnZXgoaSksIFwiaVwiKTtyZXR1cm4gdC5ncmVwKGUsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIG4udGVzdCh0LmxhYmVsIHx8IHQudmFsdWUgfHwgdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSB9KSwgdC53aWRnZXQoXCJ1aS5hdXRvY29tcGxldGVcIiwgdC51aS5hdXRvY29tcGxldGUsIHsgb3B0aW9uczogeyBtZXNzYWdlczogeyBub1Jlc3VsdHM6IFwiTm8gc2VhcmNoIHJlc3VsdHMuXCIsIHJlc3VsdHM6IGZ1bmN0aW9uIHJlc3VsdHModCkge1xuICAgICAgICAgICAgcmV0dXJuIHQgKyAodCA+IDEgPyBcIiByZXN1bHRzIGFyZVwiIDogXCIgcmVzdWx0IGlzXCIpICsgXCIgYXZhaWxhYmxlLCB1c2UgdXAgYW5kIGRvd24gYXJyb3cga2V5cyB0byBuYXZpZ2F0ZS5cIjtcbiAgICAgICAgICB9IH0gfSwgX19yZXNwb25zZTogZnVuY3Rpb24gX19yZXNwb25zZShlKSB7XG4gICAgICAgIHZhciBpO3RoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKSwgdGhpcy5vcHRpb25zLmRpc2FibGVkIHx8IHRoaXMuY2FuY2VsU2VhcmNoIHx8IChpID0gZSAmJiBlLmxlbmd0aCA/IHRoaXMub3B0aW9ucy5tZXNzYWdlcy5yZXN1bHRzKGUubGVuZ3RoKSA6IHRoaXMub3B0aW9ucy5tZXNzYWdlcy5ub1Jlc3VsdHMsIHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKSwgdChcIjxkaXY+XCIpLnRleHQoaSkuYXBwZW5kVG8odGhpcy5saXZlUmVnaW9uKSk7XG4gICAgICB9IH0pLCB0LnVpLmF1dG9jb21wbGV0ZTt2YXIgYyxcbiAgICAgICAgaCA9IC91aS1jb3JuZXItKFthLXpdKXsyLDZ9L2c7XG4gICAgLyohXG4gICAgICogalF1ZXJ5IFVJIENvbnRyb2xncm91cCAxLjEyLjFcbiAgICAgKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAgICAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICAgICovZnVuY3Rpb24gZCgpIHtcbiAgICAgIHRoaXMuX2N1ckluc3QgPSBudWxsLCB0aGlzLl9rZXlFdmVudCA9ICExLCB0aGlzLl9kaXNhYmxlZElucHV0cyA9IFtdLCB0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9ICExLCB0aGlzLl9pbkRpYWxvZyA9ICExLCB0aGlzLl9tYWluRGl2SWQgPSBcInVpLWRhdGVwaWNrZXItZGl2XCIsIHRoaXMuX2lubGluZUNsYXNzID0gXCJ1aS1kYXRlcGlja2VyLWlubGluZVwiLCB0aGlzLl9hcHBlbmRDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1hcHBlbmRcIiwgdGhpcy5fdHJpZ2dlckNsYXNzID0gXCJ1aS1kYXRlcGlja2VyLXRyaWdnZXJcIiwgdGhpcy5fZGlhbG9nQ2xhc3MgPSBcInVpLWRhdGVwaWNrZXItZGlhbG9nXCIsIHRoaXMuX2Rpc2FibGVDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1kaXNhYmxlZFwiLCB0aGlzLl91bnNlbGVjdGFibGVDbGFzcyA9IFwidWktZGF0ZXBpY2tlci11bnNlbGVjdGFibGVcIiwgdGhpcy5fY3VycmVudENsYXNzID0gXCJ1aS1kYXRlcGlja2VyLWN1cnJlbnQtZGF5XCIsIHRoaXMuX2RheU92ZXJDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1kYXlzLWNlbGwtb3ZlclwiLCB0aGlzLnJlZ2lvbmFsID0gW10sIHRoaXMucmVnaW9uYWxbXCJcIl0gPSB7IGNsb3NlVGV4dDogXCJEb25lXCIsIHByZXZUZXh0OiBcIlByZXZcIiwgbmV4dFRleHQ6IFwiTmV4dFwiLCBjdXJyZW50VGV4dDogXCJUb2RheVwiLCBtb250aE5hbWVzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSwgbW9udGhOYW1lc1Nob3J0OiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl0sIGRheU5hbWVzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSwgZGF5TmFtZXNTaG9ydDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLCBkYXlOYW1lc01pbjogW1wiU3VcIiwgXCJNb1wiLCBcIlR1XCIsIFwiV2VcIiwgXCJUaFwiLCBcIkZyXCIsIFwiU2FcIl0sIHdlZWtIZWFkZXI6IFwiV2tcIiwgZGF0ZUZvcm1hdDogXCJtbS9kZC95eVwiLCBmaXJzdERheTogMCwgaXNSVEw6ICExLCBzaG93TW9udGhBZnRlclllYXI6ICExLCB5ZWFyU3VmZml4OiBcIlwiIH0sIHRoaXMuX2RlZmF1bHRzID0geyBzaG93T246IFwiZm9jdXNcIiwgc2hvd0FuaW06IFwiZmFkZUluXCIsIHNob3dPcHRpb25zOiB7fSwgZGVmYXVsdERhdGU6IG51bGwsIGFwcGVuZFRleHQ6IFwiXCIsIGJ1dHRvblRleHQ6IFwiLi4uXCIsIGJ1dHRvbkltYWdlOiBcIlwiLCBidXR0b25JbWFnZU9ubHk6ICExLCBoaWRlSWZOb1ByZXZOZXh0OiAhMSwgbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdDogITEsIGdvdG9DdXJyZW50OiAhMSwgY2hhbmdlTW9udGg6ICExLCBjaGFuZ2VZZWFyOiAhMSwgeWVhclJhbmdlOiBcImMtMTA6YysxMFwiLCBzaG93T3RoZXJNb250aHM6ICExLCBzZWxlY3RPdGhlck1vbnRoczogITEsIHNob3dXZWVrOiAhMSwgY2FsY3VsYXRlV2VlazogdGhpcy5pc284NjAxV2Vlaywgc2hvcnRZZWFyQ3V0b2ZmOiBcIisxMFwiLCBtaW5EYXRlOiBudWxsLCBtYXhEYXRlOiBudWxsLCBkdXJhdGlvbjogXCJmYXN0XCIsIGJlZm9yZVNob3dEYXk6IG51bGwsIGJlZm9yZVNob3c6IG51bGwsIG9uU2VsZWN0OiBudWxsLCBvbkNoYW5nZU1vbnRoWWVhcjogbnVsbCwgb25DbG9zZTogbnVsbCwgbnVtYmVyT2ZNb250aHM6IDEsIHNob3dDdXJyZW50QXRQb3M6IDAsIHN0ZXBNb250aHM6IDEsIHN0ZXBCaWdNb250aHM6IDEyLCBhbHRGaWVsZDogXCJcIiwgYWx0Rm9ybWF0OiBcIlwiLCBjb25zdHJhaW5JbnB1dDogITAsIHNob3dCdXR0b25QYW5lbDogITEsIGF1dG9TaXplOiAhMSwgZGlzYWJsZWQ6ICExIH0sIHQuZXh0ZW5kKHRoaXMuX2RlZmF1bHRzLCB0aGlzLnJlZ2lvbmFsW1wiXCJdKSwgdGhpcy5yZWdpb25hbC5lbiA9IHQuZXh0ZW5kKCEwLCB7fSwgdGhpcy5yZWdpb25hbFtcIlwiXSksIHRoaXMucmVnaW9uYWxbXCJlbi1VU1wiXSA9IHQuZXh0ZW5kKCEwLCB7fSwgdGhpcy5yZWdpb25hbC5lbiksIHRoaXMuZHBEaXYgPSBwKHQoXCI8ZGl2IGlkPSdcIiArIHRoaXMuX21haW5EaXZJZCArIFwiJyBjbGFzcz0ndWktZGF0ZXBpY2tlciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktaGVscGVyLWNsZWFyZml4IHVpLWNvcm5lci1hbGwnPjwvZGl2PlwiKSk7XG4gICAgfWZ1bmN0aW9uIHAoZSkge1xuICAgICAgdmFyIGkgPSBcImJ1dHRvbiwgLnVpLWRhdGVwaWNrZXItcHJldiwgLnVpLWRhdGVwaWNrZXItbmV4dCwgLnVpLWRhdGVwaWNrZXItY2FsZW5kYXIgdGQgYVwiO3JldHVybiBlLm9uKFwibW91c2VvdXRcIiwgaSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0KHRoaXMpLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIiksIC0xICE9PSB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKFwidWktZGF0ZXBpY2tlci1wcmV2XCIpICYmIHQodGhpcykucmVtb3ZlQ2xhc3MoXCJ1aS1kYXRlcGlja2VyLXByZXYtaG92ZXJcIiksIC0xICE9PSB0aGlzLmNsYXNzTmFtZS5pbmRleE9mKFwidWktZGF0ZXBpY2tlci1uZXh0XCIpICYmIHQodGhpcykucmVtb3ZlQ2xhc3MoXCJ1aS1kYXRlcGlja2VyLW5leHQtaG92ZXJcIik7XG4gICAgICB9KS5vbihcIm1vdXNlb3ZlclwiLCBpLCBmKTtcbiAgICB9ZnVuY3Rpb24gZigpIHtcbiAgICAgIHQuZGF0ZXBpY2tlci5faXNEaXNhYmxlZERhdGVwaWNrZXIoYy5pbmxpbmUgPyBjLmRwRGl2LnBhcmVudCgpWzBdIDogYy5pbnB1dFswXSkgfHwgKHQodGhpcykucGFyZW50cyhcIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyXCIpLmZpbmQoXCJhXCIpLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIiksIHQodGhpcykuYWRkQ2xhc3MoXCJ1aS1zdGF0ZS1ob3ZlclwiKSwgLTEgIT09IHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoXCJ1aS1kYXRlcGlja2VyLXByZXZcIikgJiYgdCh0aGlzKS5hZGRDbGFzcyhcInVpLWRhdGVwaWNrZXItcHJldi1ob3ZlclwiKSwgLTEgIT09IHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoXCJ1aS1kYXRlcGlja2VyLW5leHRcIikgJiYgdCh0aGlzKS5hZGRDbGFzcyhcInVpLWRhdGVwaWNrZXItbmV4dC1ob3ZlclwiKSk7XG4gICAgfWZ1bmN0aW9uIGcoZSwgaSkge1xuICAgICAgZm9yICh2YXIgbiBpbiB0LmV4dGVuZChlLCBpKSwgaSkge1xuICAgICAgICBudWxsID09IGlbbl0gJiYgKGVbbl0gPSBpW25dKTtcbiAgICAgIH1yZXR1cm4gZTtcbiAgICB9dC53aWRnZXQoXCJ1aS5jb250cm9sZ3JvdXBcIiwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCBkZWZhdWx0RWxlbWVudDogXCI8ZGl2PlwiLCBvcHRpb25zOiB7IGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsIGRpc2FibGVkOiBudWxsLCBvbmx5VmlzaWJsZTogITAsIGl0ZW1zOiB7IGJ1dHRvbjogXCJpbnB1dFt0eXBlPWJ1dHRvbl0sIGlucHV0W3R5cGU9c3VibWl0XSwgaW5wdXRbdHlwZT1yZXNldF0sIGJ1dHRvbiwgYVwiLCBjb250cm9sZ3JvdXBMYWJlbDogXCIudWktY29udHJvbGdyb3VwLWxhYmVsXCIsIGNoZWNrYm94cmFkaW86IFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXSwgaW5wdXRbdHlwZT0ncmFkaW8nXVwiLCBzZWxlY3RtZW51OiBcInNlbGVjdFwiLCBzcGlubmVyOiBcIi51aS1zcGlubmVyLWlucHV0XCIgfSB9LCBfY3JlYXRlOiBmdW5jdGlvbiBfY3JlYXRlKCkge1xuICAgICAgICB0aGlzLl9lbmhhbmNlKCk7XG4gICAgICB9LCBfZW5oYW5jZTogZnVuY3Rpb24gX2VuaGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKFwicm9sZVwiLCBcInRvb2xiYXJcIiksIHRoaXMucmVmcmVzaCgpO1xuICAgICAgfSwgX2Rlc3Ryb3k6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9jYWxsQ2hpbGRNZXRob2QoXCJkZXN0cm95XCIpLCB0aGlzLmNoaWxkV2lkZ2V0cy5yZW1vdmVEYXRhKFwidWktY29udHJvbGdyb3VwLWRhdGFcIiksIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZVwiKSwgdGhpcy5vcHRpb25zLml0ZW1zLmNvbnRyb2xncm91cExhYmVsICYmIHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5pdGVtcy5jb250cm9sZ3JvdXBMYWJlbCkuZmluZChcIi51aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHNcIikuY29udGVudHMoKS51bndyYXAoKTtcbiAgICAgIH0sIF9pbml0V2lkZ2V0czogZnVuY3Rpb24gX2luaXRXaWRnZXRzKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICBpID0gW107dC5lYWNoKHRoaXMub3B0aW9ucy5pdGVtcywgZnVuY3Rpb24gKG4sIHMpIHtcbiAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgbyA9IHt9O2lmIChzKSByZXR1cm4gXCJjb250cm9sZ3JvdXBMYWJlbFwiID09PSBuID8gKChyID0gZS5lbGVtZW50LmZpbmQocykpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0KHRoaXMpO2UuY2hpbGRyZW4oXCIudWktY29udHJvbGdyb3VwLWxhYmVsLWNvbnRlbnRzXCIpLmxlbmd0aCB8fCBlLmNvbnRlbnRzKCkud3JhcEFsbChcIjxzcGFuIGNsYXNzPSd1aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHMnPjwvc3Bhbj5cIik7XG4gICAgICAgICAgfSksIGUuX2FkZENsYXNzKHIsIG51bGwsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLXN0YXRlLWRlZmF1bHRcIiksIHZvaWQgKGkgPSBpLmNvbmNhdChyLmdldCgpKSkpIDogdm9pZCAodC5mbltuXSAmJiAobyA9IGVbXCJfXCIgKyBuICsgXCJPcHRpb25zXCJdID8gZVtcIl9cIiArIG4gKyBcIk9wdGlvbnNcIl0oXCJtaWRkbGVcIikgOiB7IGNsYXNzZXM6IHt9IH0sIGUuZWxlbWVudC5maW5kKHMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHMgPSB0KHRoaXMpLFxuICAgICAgICAgICAgICAgIHIgPSBzW25dKFwiaW5zdGFuY2VcIiksXG4gICAgICAgICAgICAgICAgYSA9IHQud2lkZ2V0LmV4dGVuZCh7fSwgbyk7aWYgKFwiYnV0dG9uXCIgIT09IG4gfHwgIXMucGFyZW50KFwiLnVpLXNwaW5uZXJcIikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHIgfHwgKHIgPSBzW25dKClbbl0oXCJpbnN0YW5jZVwiKSksIHIgJiYgKGEuY2xhc3NlcyA9IGUuX3Jlc29sdmVDbGFzc2VzVmFsdWVzKGEuY2xhc3NlcywgcikpLCBzW25dKGEpO3ZhciBsID0gc1tuXShcIndpZGdldFwiKTt0LmRhdGEobFswXSwgXCJ1aS1jb250cm9sZ3JvdXAtZGF0YVwiLCByIHx8IHNbbl0oXCJpbnN0YW5jZVwiKSksIGkucHVzaChsWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkpO1xuICAgICAgICB9KSwgdGhpcy5jaGlsZFdpZGdldHMgPSB0KHQudW5pcXVlKGkpKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5jaGlsZFdpZGdldHMsIFwidWktY29udHJvbGdyb3VwLWl0ZW1cIik7XG4gICAgICB9LCBfY2FsbENoaWxkTWV0aG9kOiBmdW5jdGlvbiBfY2FsbENoaWxkTWV0aG9kKGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZFdpZGdldHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGkgPSB0KHRoaXMpLFxuICAgICAgICAgICAgICBuID0gaS5kYXRhKFwidWktY29udHJvbGdyb3VwLWRhdGFcIik7biAmJiBuW2VdICYmIG5bZV0oKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfdXBkYXRlQ29ybmVyQ2xhc3M6IGZ1bmN0aW9uIF91cGRhdGVDb3JuZXJDbGFzcyh0LCBlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKGUsIFwibGFiZWxcIikuY2xhc3Nlcy5sYWJlbDt0aGlzLl9yZW1vdmVDbGFzcyh0LCBudWxsLCBcInVpLWNvcm5lci10b3AgdWktY29ybmVyLWJvdHRvbSB1aS1jb3JuZXItbGVmdCB1aS1jb3JuZXItcmlnaHQgdWktY29ybmVyLWFsbFwiKSwgdGhpcy5fYWRkQ2xhc3ModCwgbnVsbCwgaSk7XG4gICAgICB9LCBfYnVpbGRTaW1wbGVPcHRpb25zOiBmdW5jdGlvbiBfYnVpbGRTaW1wbGVPcHRpb25zKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSBcInZlcnRpY2FsXCIgPT09IHRoaXMub3B0aW9ucy5kaXJlY3Rpb24sXG4gICAgICAgICAgICBuID0geyBjbGFzc2VzOiB7fSB9O3JldHVybiBuLmNsYXNzZXNbZV0gPSB7IG1pZGRsZTogXCJcIiwgZmlyc3Q6IFwidWktY29ybmVyLVwiICsgKGkgPyBcInRvcFwiIDogXCJsZWZ0XCIpLCBsYXN0OiBcInVpLWNvcm5lci1cIiArIChpID8gXCJib3R0b21cIiA6IFwicmlnaHRcIiksIG9ubHk6IFwidWktY29ybmVyLWFsbFwiIH1bdF0sIG47XG4gICAgICB9LCBfc3Bpbm5lck9wdGlvbnM6IGZ1bmN0aW9uIF9zcGlubmVyT3B0aW9ucyh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKHQsIFwidWktc3Bpbm5lclwiKTtyZXR1cm4gZS5jbGFzc2VzW1widWktc3Bpbm5lci11cFwiXSA9IFwiXCIsIGUuY2xhc3Nlc1tcInVpLXNwaW5uZXItZG93blwiXSA9IFwiXCIsIGU7XG4gICAgICB9LCBfYnV0dG9uT3B0aW9uczogZnVuY3Rpb24gX2J1dHRvbk9wdGlvbnModCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKHQsIFwidWktYnV0dG9uXCIpO1xuICAgICAgfSwgX2NoZWNrYm94cmFkaW9PcHRpb25zOiBmdW5jdGlvbiBfY2hlY2tib3hyYWRpb09wdGlvbnModCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKHQsIFwidWktY2hlY2tib3hyYWRpby1sYWJlbFwiKTtcbiAgICAgIH0sIF9zZWxlY3RtZW51T3B0aW9uczogZnVuY3Rpb24gX3NlbGVjdG1lbnVPcHRpb25zKHQpIHtcbiAgICAgICAgdmFyIGUgPSBcInZlcnRpY2FsXCIgPT09IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247cmV0dXJuIHsgd2lkdGg6ICEhZSAmJiBcImF1dG9cIiwgY2xhc3NlczogeyBtaWRkbGU6IHsgXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1vcGVuXCI6IFwiXCIsIFwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkXCI6IFwiXCIgfSwgZmlyc3Q6IHsgXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1vcGVuXCI6IFwidWktY29ybmVyLVwiICsgKGUgPyBcInRvcFwiIDogXCJ0bFwiKSwgXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWRcIjogXCJ1aS1jb3JuZXItXCIgKyAoZSA/IFwidG9wXCIgOiBcImxlZnRcIikgfSwgbGFzdDogeyBcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjogZSA/IFwiXCIgOiBcInVpLWNvcm5lci10clwiLCBcInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZFwiOiBcInVpLWNvcm5lci1cIiArIChlID8gXCJib3R0b21cIiA6IFwicmlnaHRcIikgfSwgb25seTogeyBcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjogXCJ1aS1jb3JuZXItdG9wXCIsIFwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkXCI6IFwidWktY29ybmVyLWFsbFwiIH0gfVt0XSB9O1xuICAgICAgfSwgX3Jlc29sdmVDbGFzc2VzVmFsdWVzOiBmdW5jdGlvbiBfcmVzb2x2ZUNsYXNzZXNWYWx1ZXMoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHt9O3JldHVybiB0LmVhY2goZSwgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICB2YXIgciA9IGkub3B0aW9ucy5jbGFzc2VzW3NdIHx8IFwiXCI7ciA9IHQudHJpbShyLnJlcGxhY2UoaCwgXCJcIikpLCBuW3NdID0gKHIgKyBcIiBcIiArIGVbc10pLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuICAgICAgICB9KSwgbjtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24odCwgZSkge1xuICAgICAgICBcImRpcmVjdGlvblwiID09PSB0ICYmIHRoaXMuX3JlbW92ZUNsYXNzKFwidWktY29udHJvbGdyb3VwLVwiICsgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiksIHRoaXMuX3N1cGVyKHQsIGUpLCBcImRpc2FibGVkXCIgIT09IHQgPyB0aGlzLnJlZnJlc2goKSA6IHRoaXMuX2NhbGxDaGlsZE1ldGhvZChlID8gXCJkaXNhYmxlXCIgOiBcImVuYWJsZVwiKTtcbiAgICAgIH0sIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSA9IHRoaXM7dGhpcy5fYWRkQ2xhc3MoXCJ1aS1jb250cm9sZ3JvdXAgdWktY29udHJvbGdyb3VwLVwiICsgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiksIFwiaG9yaXpvbnRhbFwiID09PSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uICYmIHRoaXMuX2FkZENsYXNzKG51bGwsIFwidWktaGVscGVyLWNsZWFyZml4XCIpLCB0aGlzLl9pbml0V2lkZ2V0cygpLCBlID0gdGhpcy5jaGlsZFdpZGdldHMsIHRoaXMub3B0aW9ucy5vbmx5VmlzaWJsZSAmJiAoZSA9IGUuZmlsdGVyKFwiOnZpc2libGVcIikpLCBlLmxlbmd0aCAmJiAodC5lYWNoKFtcImZpcnN0XCIsIFwibGFzdFwiXSwgZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgICB2YXIgcyA9IGVbbl0oKS5kYXRhKFwidWktY29udHJvbGdyb3VwLWRhdGFcIik7aWYgKHMgJiYgaVtcIl9cIiArIHMud2lkZ2V0TmFtZSArIFwiT3B0aW9uc1wiXSkge1xuICAgICAgICAgICAgdmFyIHIgPSBpW1wiX1wiICsgcy53aWRnZXROYW1lICsgXCJPcHRpb25zXCJdKDEgPT09IGUubGVuZ3RoID8gXCJvbmx5XCIgOiBuKTtyLmNsYXNzZXMgPSBpLl9yZXNvbHZlQ2xhc3Nlc1ZhbHVlcyhyLmNsYXNzZXMsIHMpLCBzLmVsZW1lbnRbcy53aWRnZXROYW1lXShyKTtcbiAgICAgICAgICB9IGVsc2UgaS5fdXBkYXRlQ29ybmVyQ2xhc3MoZVtuXSgpLCBuKTtcbiAgICAgICAgfSksIHRoaXMuX2NhbGxDaGlsZE1ldGhvZChcInJlZnJlc2hcIikpO1xuICAgICAgfSB9KSxcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgQ2hlY2tib3hyYWRpbyAxLjEyLjFcbiAgICAgKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAgICAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICAgICovXG4gICAgdC53aWRnZXQoXCJ1aS5jaGVja2JveHJhZGlvXCIsIFt0LnVpLmZvcm1SZXNldE1peGluLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIG9wdGlvbnM6IHsgZGlzYWJsZWQ6IG51bGwsIGxhYmVsOiBudWxsLCBpY29uOiAhMCwgY2xhc3NlczogeyBcInVpLWNoZWNrYm94cmFkaW8tbGFiZWxcIjogXCJ1aS1jb3JuZXItYWxsXCIsIFwidWktY2hlY2tib3hyYWRpby1pY29uXCI6IFwidWktY29ybmVyLWFsbFwiIH0gfSwgX2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uIF9nZXRDcmVhdGVPcHRpb25zKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gdGhpcyxcbiAgICAgICAgICAgIHMgPSB0aGlzLl9zdXBlcigpIHx8IHt9O3JldHVybiB0aGlzLl9yZWFkVHlwZSgpLCBpID0gdGhpcy5lbGVtZW50LmxhYmVscygpLCB0aGlzLmxhYmVsID0gdChpW2kubGVuZ3RoIC0gMV0pLCB0aGlzLmxhYmVsLmxlbmd0aCB8fCB0LmVycm9yKFwiTm8gbGFiZWwgZm91bmQgZm9yIGNoZWNrYm94cmFkaW8gd2lkZ2V0XCIpLCB0aGlzLm9yaWdpbmFsTGFiZWwgPSBcIlwiLCB0aGlzLmxhYmVsLmNvbnRlbnRzKCkubm90KHRoaXMuZWxlbWVudFswXSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbi5vcmlnaW5hbExhYmVsICs9IDMgPT09IHRoaXMubm9kZVR5cGUgPyB0KHRoaXMpLnRleHQoKSA6IHRoaXMub3V0ZXJIVE1MO1xuICAgICAgICB9KSwgdGhpcy5vcmlnaW5hbExhYmVsICYmIChzLmxhYmVsID0gdGhpcy5vcmlnaW5hbExhYmVsKSwgbnVsbCAhPSAoZSA9IHRoaXMuZWxlbWVudFswXS5kaXNhYmxlZCkgJiYgKHMuZGlzYWJsZWQgPSBlKSwgcztcbiAgICAgIH0sIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5lbGVtZW50WzBdLmNoZWNrZWQ7dGhpcy5fYmluZEZvcm1SZXNldEhhbmRsZXIoKSwgbnVsbCA9PSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRoaXMuZWxlbWVudFswXS5kaXNhYmxlZCksIHRoaXMuX3NldE9wdGlvbihcImRpc2FibGVkXCIsIHRoaXMub3B0aW9ucy5kaXNhYmxlZCksIHRoaXMuX2FkZENsYXNzKFwidWktY2hlY2tib3hyYWRpb1wiLCBcInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZVwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5sYWJlbCwgXCJ1aS1jaGVja2JveHJhZGlvLWxhYmVsXCIsIFwidWktYnV0dG9uIHVpLXdpZGdldFwiKSwgXCJyYWRpb1wiID09PSB0aGlzLnR5cGUgJiYgdGhpcy5fYWRkQ2xhc3ModGhpcy5sYWJlbCwgXCJ1aS1jaGVja2JveHJhZGlvLXJhZGlvLWxhYmVsXCIpLCB0aGlzLm9wdGlvbnMubGFiZWwgJiYgdGhpcy5vcHRpb25zLmxhYmVsICE9PSB0aGlzLm9yaWdpbmFsTGFiZWwgPyB0aGlzLl91cGRhdGVMYWJlbCgpIDogdGhpcy5vcmlnaW5hbExhYmVsICYmICh0aGlzLm9wdGlvbnMubGFiZWwgPSB0aGlzLm9yaWdpbmFsTGFiZWwpLCB0aGlzLl9lbmhhbmNlKCksIHQgJiYgKHRoaXMuX2FkZENsYXNzKHRoaXMubGFiZWwsIFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsIFwidWktc3RhdGUtYWN0aXZlXCIpLCB0aGlzLmljb24gJiYgdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uLCBudWxsLCBcInVpLXN0YXRlLWhvdmVyXCIpKSwgdGhpcy5fb24oeyBjaGFuZ2U6IFwiX3RvZ2dsZUNsYXNzZXNcIiwgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgICAgICAgdGhpcy5fYWRkQ2xhc3ModGhpcy5sYWJlbCwgbnVsbCwgXCJ1aS1zdGF0ZS1mb2N1cyB1aS12aXN1YWwtZm9jdXNcIik7XG4gICAgICAgICAgfSwgYmx1cjogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMubGFiZWwsIG51bGwsIFwidWktc3RhdGUtZm9jdXMgdWktdmlzdWFsLWZvY3VzXCIpO1xuICAgICAgICAgIH0gfSk7XG4gICAgICB9LCBfcmVhZFR5cGU6IGZ1bmN0aW9uIF9yZWFkVHlwZSgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTt0aGlzLnR5cGUgPSB0aGlzLmVsZW1lbnRbMF0udHlwZSwgXCJpbnB1dFwiID09PSBlICYmIC9yYWRpb3xjaGVja2JveC8udGVzdCh0aGlzLnR5cGUpIHx8IHQuZXJyb3IoXCJDYW4ndCBjcmVhdGUgY2hlY2tib3hyYWRpbyBvbiBlbGVtZW50Lm5vZGVOYW1lPVwiICsgZSArIFwiIGFuZCBlbGVtZW50LnR5cGU9XCIgKyB0aGlzLnR5cGUpO1xuICAgICAgfSwgX2VuaGFuY2U6IGZ1bmN0aW9uIF9lbmhhbmNlKCkge1xuICAgICAgICB0aGlzLl91cGRhdGVJY29uKHRoaXMuZWxlbWVudFswXS5jaGVja2VkKTtcbiAgICAgIH0sIHdpZGdldDogZnVuY3Rpb24gd2lkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbDtcbiAgICAgIH0sIF9nZXRSYWRpb0dyb3VwOiBmdW5jdGlvbiBfZ2V0UmFkaW9Hcm91cCgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRbMF0ubmFtZSxcbiAgICAgICAgICAgIGkgPSBcImlucHV0W25hbWU9J1wiICsgdC51aS5lc2NhcGVTZWxlY3RvcihlKSArIFwiJ11cIjtyZXR1cm4gZSA/ICh0aGlzLmZvcm0ubGVuZ3RoID8gdCh0aGlzLmZvcm1bMF0uZWxlbWVudHMpLmZpbHRlcihpKSA6IHQoaSkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gMCA9PT0gdCh0aGlzKS5mb3JtKCkubGVuZ3RoO1xuICAgICAgICB9KSkubm90KHRoaXMuZWxlbWVudCkgOiB0KFtdKTtcbiAgICAgIH0sIF90b2dnbGVDbGFzc2VzOiBmdW5jdGlvbiBfdG9nZ2xlQ2xhc3NlcygpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmVsZW1lbnRbMF0uY2hlY2tlZDt0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmxhYmVsLCBcInVpLWNoZWNrYm94cmFkaW8tY2hlY2tlZFwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiLCBlKSwgdGhpcy5vcHRpb25zLmljb24gJiYgXCJjaGVja2JveFwiID09PSB0aGlzLnR5cGUgJiYgdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5pY29uLCBudWxsLCBcInVpLWljb24tY2hlY2sgdWktc3RhdGUtY2hlY2tlZFwiLCBlKS5fdG9nZ2xlQ2xhc3ModGhpcy5pY29uLCBudWxsLCBcInVpLWljb24tYmxhbmtcIiwgIWUpLCBcInJhZGlvXCIgPT09IHRoaXMudHlwZSAmJiB0aGlzLl9nZXRSYWRpb0dyb3VwKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0KHRoaXMpLmNoZWNrYm94cmFkaW8oXCJpbnN0YW5jZVwiKTtlICYmIGUuX3JlbW92ZUNsYXNzKGUubGFiZWwsIFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsIFwidWktc3RhdGUtYWN0aXZlXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIF9kZXN0cm95OiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fdW5iaW5kRm9ybVJlc2V0SGFuZGxlcigpLCB0aGlzLmljb24gJiYgKHRoaXMuaWNvbi5yZW1vdmUoKSwgdGhpcy5pY29uU3BhY2UucmVtb3ZlKCkpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIGlmIChcImxhYmVsXCIgIT09IHQgfHwgZSkge1xuICAgICAgICAgIGlmICh0aGlzLl9zdXBlcih0LCBlKSwgXCJkaXNhYmxlZFwiID09PSB0KSByZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5sYWJlbCwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCBlKSwgdm9pZCAodGhpcy5lbGVtZW50WzBdLmRpc2FibGVkID0gZSk7dGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIF91cGRhdGVJY29uOiBmdW5jdGlvbiBfdXBkYXRlSWNvbihlKSB7XG4gICAgICAgIHZhciBpID0gXCJ1aS1pY29uIHVpLWljb24tYmFja2dyb3VuZCBcIjt0aGlzLm9wdGlvbnMuaWNvbiA/ICh0aGlzLmljb24gfHwgKHRoaXMuaWNvbiA9IHQoXCI8c3Bhbj5cIiksIHRoaXMuaWNvblNwYWNlID0gdChcIjxzcGFuPiA8L3NwYW4+XCIpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLmljb25TcGFjZSwgXCJ1aS1jaGVja2JveHJhZGlvLWljb24tc3BhY2VcIikpLCBcImNoZWNrYm94XCIgPT09IHRoaXMudHlwZSA/IChpICs9IGUgPyBcInVpLWljb24tY2hlY2sgdWktc3RhdGUtY2hlY2tlZFwiIDogXCJ1aS1pY29uLWJsYW5rXCIsIHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaWNvbiwgbnVsbCwgZSA/IFwidWktaWNvbi1ibGFua1wiIDogXCJ1aS1pY29uLWNoZWNrXCIpKSA6IGkgKz0gXCJ1aS1pY29uLWJsYW5rXCIsIHRoaXMuX2FkZENsYXNzKHRoaXMuaWNvbiwgXCJ1aS1jaGVja2JveHJhZGlvLWljb25cIiwgaSksIGUgfHwgdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5pY29uLCBudWxsLCBcInVpLWljb24tY2hlY2sgdWktc3RhdGUtY2hlY2tlZFwiKSwgdGhpcy5pY29uLnByZXBlbmRUbyh0aGlzLmxhYmVsKS5hZnRlcih0aGlzLmljb25TcGFjZSkpIDogdm9pZCAwICE9PSB0aGlzLmljb24gJiYgKHRoaXMuaWNvbi5yZW1vdmUoKSwgdGhpcy5pY29uU3BhY2UucmVtb3ZlKCksIGRlbGV0ZSB0aGlzLmljb24pO1xuICAgICAgfSwgX3VwZGF0ZUxhYmVsOiBmdW5jdGlvbiBfdXBkYXRlTGFiZWwoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5sYWJlbC5jb250ZW50cygpLm5vdCh0aGlzLmVsZW1lbnRbMF0pO3RoaXMuaWNvbiAmJiAodCA9IHQubm90KHRoaXMuaWNvblswXSkpLCB0aGlzLmljb25TcGFjZSAmJiAodCA9IHQubm90KHRoaXMuaWNvblNwYWNlWzBdKSksIHQucmVtb3ZlKCksIHRoaXMubGFiZWwuYXBwZW5kKHRoaXMub3B0aW9ucy5sYWJlbCk7XG4gICAgICB9LCByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuZWxlbWVudFswXS5jaGVja2VkLFxuICAgICAgICAgICAgZSA9IHRoaXMuZWxlbWVudFswXS5kaXNhYmxlZDt0aGlzLl91cGRhdGVJY29uKHQpLCB0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmxhYmVsLCBcInVpLWNoZWNrYm94cmFkaW8tY2hlY2tlZFwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiLCB0KSwgbnVsbCAhPT0gdGhpcy5vcHRpb25zLmxhYmVsICYmIHRoaXMuX3VwZGF0ZUxhYmVsKCksIGUgIT09IHRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiB0aGlzLl9zZXRPcHRpb25zKHsgZGlzYWJsZWQ6IGUgfSk7XG4gICAgICB9IH1dKSwgdC51aS5jaGVja2JveHJhZGlvLFxuICAgIC8qIVxuICAgICAqIGpRdWVyeSBVSSBCdXR0b24gMS4xMi4xXG4gICAgICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAgICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgICAqL1xuICAgIHQud2lkZ2V0KFwidWkuYnV0dG9uXCIsIHsgdmVyc2lvbjogXCIxLjEyLjFcIiwgZGVmYXVsdEVsZW1lbnQ6IFwiPGJ1dHRvbj5cIiwgb3B0aW9uczogeyBjbGFzc2VzOiB7IFwidWktYnV0dG9uXCI6IFwidWktY29ybmVyLWFsbFwiIH0sIGRpc2FibGVkOiBudWxsLCBpY29uOiBudWxsLCBpY29uUG9zaXRpb246IFwiYmVnaW5uaW5nXCIsIGxhYmVsOiBudWxsLCBzaG93TGFiZWw6ICEwIH0sIF9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbiBfZ2V0Q3JlYXRlT3B0aW9ucygpIHtcbiAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICBlID0gdGhpcy5fc3VwZXIoKSB8fCB7fTtyZXR1cm4gdGhpcy5pc0lucHV0ID0gdGhpcy5lbGVtZW50LmlzKFwiaW5wdXRcIiksIG51bGwgIT0gKHQgPSB0aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQpICYmIChlLmRpc2FibGVkID0gdCksIHRoaXMub3JpZ2luYWxMYWJlbCA9IHRoaXMuaXNJbnB1dCA/IHRoaXMuZWxlbWVudC52YWwoKSA6IHRoaXMuZWxlbWVudC5odG1sKCksIHRoaXMub3JpZ2luYWxMYWJlbCAmJiAoZS5sYWJlbCA9IHRoaXMub3JpZ2luYWxMYWJlbCksIGU7XG4gICAgICB9LCBfY3JlYXRlOiBmdW5jdGlvbiBfY3JlYXRlKCkge1xuICAgICAgICAhdGhpcy5vcHRpb24uc2hvd0xhYmVsICYgIXRoaXMub3B0aW9ucy5pY29uICYmICh0aGlzLm9wdGlvbnMuc2hvd0xhYmVsID0gITApLCBudWxsID09IHRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiAodGhpcy5vcHRpb25zLmRpc2FibGVkID0gdGhpcy5lbGVtZW50WzBdLmRpc2FibGVkIHx8ICExKSwgdGhpcy5oYXNUaXRsZSA9ICEhdGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKSwgdGhpcy5vcHRpb25zLmxhYmVsICYmIHRoaXMub3B0aW9ucy5sYWJlbCAhPT0gdGhpcy5vcmlnaW5hbExhYmVsICYmICh0aGlzLmlzSW5wdXQgPyB0aGlzLmVsZW1lbnQudmFsKHRoaXMub3B0aW9ucy5sYWJlbCkgOiB0aGlzLmVsZW1lbnQuaHRtbCh0aGlzLm9wdGlvbnMubGFiZWwpKSwgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1idXR0b25cIiwgXCJ1aS13aWRnZXRcIiksIHRoaXMuX3NldE9wdGlvbihcImRpc2FibGVkXCIsIHRoaXMub3B0aW9ucy5kaXNhYmxlZCksIHRoaXMuX2VuaGFuY2UoKSwgdGhpcy5lbGVtZW50LmlzKFwiYVwiKSAmJiB0aGlzLl9vbih7IGtleXVwOiBmdW5jdGlvbiBrZXl1cChlKSB7XG4gICAgICAgICAgICBlLmtleUNvZGUgPT09IHQudWkua2V5Q29kZS5TUEFDRSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmVsZW1lbnRbMF0uY2xpY2sgPyB0aGlzLmVsZW1lbnRbMF0uY2xpY2soKSA6IHRoaXMuZWxlbWVudC50cmlnZ2VyKFwiY2xpY2tcIikpO1xuICAgICAgICAgIH0gfSk7XG4gICAgICB9LCBfZW5oYW5jZTogZnVuY3Rpb24gX2VuaGFuY2UoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5pcyhcImJ1dHRvblwiKSB8fCB0aGlzLmVsZW1lbnQuYXR0cihcInJvbGVcIiwgXCJidXR0b25cIiksIHRoaXMub3B0aW9ucy5pY29uICYmICh0aGlzLl91cGRhdGVJY29uKFwiaWNvblwiLCB0aGlzLm9wdGlvbnMuaWNvbiksIHRoaXMuX3VwZGF0ZVRvb2x0aXAoKSk7XG4gICAgICB9LCBfdXBkYXRlVG9vbHRpcDogZnVuY3Rpb24gX3VwZGF0ZVRvb2x0aXAoKSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmVsZW1lbnQuYXR0cihcInRpdGxlXCIpLCB0aGlzLm9wdGlvbnMuc2hvd0xhYmVsIHx8IHRoaXMudGl0bGUgfHwgdGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiLCB0aGlzLm9wdGlvbnMubGFiZWwpO1xuICAgICAgfSwgX3VwZGF0ZUljb246IGZ1bmN0aW9uIF91cGRhdGVJY29uKGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSBcImljb25Qb3NpdGlvblwiICE9PSBlLFxuICAgICAgICAgICAgcyA9IG4gPyB0aGlzLm9wdGlvbnMuaWNvblBvc2l0aW9uIDogaSxcbiAgICAgICAgICAgIHIgPSBcInRvcFwiID09PSBzIHx8IFwiYm90dG9tXCIgPT09IHM7dGhpcy5pY29uID8gbiAmJiB0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmljb24sIG51bGwsIHRoaXMub3B0aW9ucy5pY29uKSA6ICh0aGlzLmljb24gPSB0KFwiPHNwYW4+XCIpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLmljb24sIFwidWktYnV0dG9uLWljb25cIiwgXCJ1aS1pY29uXCIpLCB0aGlzLm9wdGlvbnMuc2hvd0xhYmVsIHx8IHRoaXMuX2FkZENsYXNzKFwidWktYnV0dG9uLWljb24tb25seVwiKSksIG4gJiYgdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uLCBudWxsLCBpKSwgdGhpcy5fYXR0YWNoSWNvbihzKSwgciA/ICh0aGlzLl9hZGRDbGFzcyh0aGlzLmljb24sIG51bGwsIFwidWktd2lkZ2V0LWljb24tYmxvY2tcIiksIHRoaXMuaWNvblNwYWNlICYmIHRoaXMuaWNvblNwYWNlLnJlbW92ZSgpKSA6ICh0aGlzLmljb25TcGFjZSB8fCAodGhpcy5pY29uU3BhY2UgPSB0KFwiPHNwYW4+IDwvc3Bhbj5cIiksIHRoaXMuX2FkZENsYXNzKHRoaXMuaWNvblNwYWNlLCBcInVpLWJ1dHRvbi1pY29uLXNwYWNlXCIpKSwgdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5pY29uLCBudWxsLCBcInVpLXdpZ2V0LWljb24tYmxvY2tcIiksIHRoaXMuX2F0dGFjaEljb25TcGFjZShzKSk7XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZVwiKSwgdGhpcy5pY29uICYmIHRoaXMuaWNvbi5yZW1vdmUoKSwgdGhpcy5pY29uU3BhY2UgJiYgdGhpcy5pY29uU3BhY2UucmVtb3ZlKCksIHRoaXMuaGFzVGl0bGUgfHwgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoXCJ0aXRsZVwiKTtcbiAgICAgIH0sIF9hdHRhY2hJY29uU3BhY2U6IGZ1bmN0aW9uIF9hdHRhY2hJY29uU3BhY2UodCkge1xuICAgICAgICB0aGlzLmljb25bL14oPzplbmR8Ym90dG9tKS8udGVzdCh0KSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCJdKHRoaXMuaWNvblNwYWNlKTtcbiAgICAgIH0sIF9hdHRhY2hJY29uOiBmdW5jdGlvbiBfYXR0YWNoSWNvbih0KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFsvXig/OmVuZHxib3R0b20pLy50ZXN0KHQpID8gXCJhcHBlbmRcIiA6IFwicHJlcGVuZFwiXSh0aGlzLmljb24pO1xuICAgICAgfSwgX3NldE9wdGlvbnM6IGZ1bmN0aW9uIF9zZXRPcHRpb25zKHQpIHtcbiAgICAgICAgdmFyIGUgPSB2b2lkIDAgPT09IHQuc2hvd0xhYmVsID8gdGhpcy5vcHRpb25zLnNob3dMYWJlbCA6IHQuc2hvd0xhYmVsLFxuICAgICAgICAgICAgaSA9IHZvaWQgMCA9PT0gdC5pY29uID8gdGhpcy5vcHRpb25zLmljb24gOiB0Lmljb247ZSB8fCBpIHx8ICh0LnNob3dMYWJlbCA9ICEwKSwgdGhpcy5fc3VwZXIodCk7XG4gICAgICB9LCBfc2V0T3B0aW9uOiBmdW5jdGlvbiBfc2V0T3B0aW9uKHQsIGUpIHtcbiAgICAgICAgXCJpY29uXCIgPT09IHQgJiYgKGUgPyB0aGlzLl91cGRhdGVJY29uKHQsIGUpIDogdGhpcy5pY29uICYmICh0aGlzLmljb24ucmVtb3ZlKCksIHRoaXMuaWNvblNwYWNlICYmIHRoaXMuaWNvblNwYWNlLnJlbW92ZSgpKSksIFwiaWNvblBvc2l0aW9uXCIgPT09IHQgJiYgdGhpcy5fdXBkYXRlSWNvbih0LCBlKSwgXCJzaG93TGFiZWxcIiA9PT0gdCAmJiAodGhpcy5fdG9nZ2xlQ2xhc3MoXCJ1aS1idXR0b24taWNvbi1vbmx5XCIsIG51bGwsICFlKSwgdGhpcy5fdXBkYXRlVG9vbHRpcCgpKSwgXCJsYWJlbFwiID09PSB0ICYmICh0aGlzLmlzSW5wdXQgPyB0aGlzLmVsZW1lbnQudmFsKGUpIDogKHRoaXMuZWxlbWVudC5odG1sKGUpLCB0aGlzLmljb24gJiYgKHRoaXMuX2F0dGFjaEljb24odGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiksIHRoaXMuX2F0dGFjaEljb25TcGFjZSh0aGlzLm9wdGlvbnMuaWNvblBvc2l0aW9uKSkpKSwgdGhpcy5fc3VwZXIodCwgZSksIFwiZGlzYWJsZWRcIiA9PT0gdCAmJiAodGhpcy5fdG9nZ2xlQ2xhc3MobnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCBlKSwgdGhpcy5lbGVtZW50WzBdLmRpc2FibGVkID0gZSwgZSAmJiB0aGlzLmVsZW1lbnQuYmx1cigpKTtcbiAgICAgIH0sIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5lbGVtZW50LmlzKFwiaW5wdXQsIGJ1dHRvblwiKSA/IHRoaXMuZWxlbWVudFswXS5kaXNhYmxlZCA6IHRoaXMuZWxlbWVudC5oYXNDbGFzcyhcInVpLWJ1dHRvbi1kaXNhYmxlZFwiKTt0ICE9PSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgdGhpcy5fc2V0T3B0aW9ucyh7IGRpc2FibGVkOiB0IH0pLCB0aGlzLl91cGRhdGVUb29sdGlwKCk7XG4gICAgICB9IH0pLCAhMSAhPT0gdC51aUJhY2tDb21wYXQgJiYgKHQud2lkZ2V0KFwidWkuYnV0dG9uXCIsIHQudWkuYnV0dG9uLCB7IG9wdGlvbnM6IHsgdGV4dDogITAsIGljb25zOiB7IHByaW1hcnk6IG51bGwsIHNlY29uZGFyeTogbnVsbCB9IH0sIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zaG93TGFiZWwgJiYgIXRoaXMub3B0aW9ucy50ZXh0ICYmICh0aGlzLm9wdGlvbnMuc2hvd0xhYmVsID0gdGhpcy5vcHRpb25zLnRleHQpLCAhdGhpcy5vcHRpb25zLnNob3dMYWJlbCAmJiB0aGlzLm9wdGlvbnMudGV4dCAmJiAodGhpcy5vcHRpb25zLnRleHQgPSB0aGlzLm9wdGlvbnMuc2hvd0xhYmVsKSwgdGhpcy5vcHRpb25zLmljb24gfHwgIXRoaXMub3B0aW9ucy5pY29ucy5wcmltYXJ5ICYmICF0aGlzLm9wdGlvbnMuaWNvbnMuc2Vjb25kYXJ5ID8gdGhpcy5vcHRpb25zLmljb24gJiYgKHRoaXMub3B0aW9ucy5pY29ucy5wcmltYXJ5ID0gdGhpcy5vcHRpb25zLmljb24pIDogdGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgPyB0aGlzLm9wdGlvbnMuaWNvbiA9IHRoaXMub3B0aW9ucy5pY29ucy5wcmltYXJ5IDogKHRoaXMub3B0aW9ucy5pY29uID0gdGhpcy5vcHRpb25zLmljb25zLnNlY29uZGFyeSwgdGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiA9IFwiZW5kXCIpLCB0aGlzLl9zdXBlcigpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIFwidGV4dFwiICE9PSB0ID8gKFwic2hvd0xhYmVsXCIgPT09IHQgJiYgKHRoaXMub3B0aW9ucy50ZXh0ID0gZSksIFwiaWNvblwiID09PSB0ICYmICh0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeSA9IGUpLCBcImljb25zXCIgPT09IHQgJiYgKGUucHJpbWFyeSA/ICh0aGlzLl9zdXBlcihcImljb25cIiwgZS5wcmltYXJ5KSwgdGhpcy5fc3VwZXIoXCJpY29uUG9zaXRpb25cIiwgXCJiZWdpbm5pbmdcIikpIDogZS5zZWNvbmRhcnkgJiYgKHRoaXMuX3N1cGVyKFwiaWNvblwiLCBlLnNlY29uZGFyeSksIHRoaXMuX3N1cGVyKFwiaWNvblBvc2l0aW9uXCIsIFwiZW5kXCIpKSksIHRoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKSkgOiB0aGlzLl9zdXBlcihcInNob3dMYWJlbFwiLCBlKTtcbiAgICAgIH0gfSksIHQuZm4uYnV0dG9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5sZW5ndGggfHwgdGhpcy5sZW5ndGggJiYgXCJJTlBVVFwiICE9PSB0aGlzWzBdLnRhZ05hbWUgfHwgdGhpcy5sZW5ndGggJiYgXCJJTlBVVFwiID09PSB0aGlzWzBdLnRhZ05hbWUgJiYgXCJjaGVja2JveFwiICE9PSB0aGlzLmF0dHIoXCJ0eXBlXCIpICYmIFwicmFkaW9cIiAhPT0gdGhpcy5hdHRyKFwidHlwZVwiKSA/IGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6ICh0LnVpLmNoZWNrYm94cmFkaW8gfHwgdC5lcnJvcihcIkNoZWNrYm94cmFkaW8gd2lkZ2V0IG1pc3NpbmdcIiksIDAgPT09IGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmNoZWNrYm94cmFkaW8oeyBpY29uOiAhMSB9KSA6IHRoaXMuY2hlY2tib3hyYWRpby5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH07XG4gICAgfSh0LmZuLmJ1dHRvbiksIHQuZm4uYnV0dG9uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHQudWkuY29udHJvbGdyb3VwIHx8IHQuZXJyb3IoXCJDb250cm9sZ3JvdXAgd2lkZ2V0IG1pc3NpbmdcIiksIFwib3B0aW9uXCIgPT09IGFyZ3VtZW50c1swXSAmJiBcIml0ZW1zXCIgPT09IGFyZ3VtZW50c1sxXSAmJiBhcmd1bWVudHNbMl0gPyB0aGlzLmNvbnRyb2xncm91cC5hcHBseSh0aGlzLCBbYXJndW1lbnRzWzBdLCBcIml0ZW1zLmJ1dHRvblwiLCBhcmd1bWVudHNbMl1dKSA6IFwib3B0aW9uXCIgPT09IGFyZ3VtZW50c1swXSAmJiBcIml0ZW1zXCIgPT09IGFyZ3VtZW50c1sxXSA/IHRoaXMuY29udHJvbGdyb3VwLmFwcGx5KHRoaXMsIFthcmd1bWVudHNbMF0sIFwiaXRlbXMuYnV0dG9uXCJdKSA6IChcIm9iamVjdFwiID09IF90eXBlb2YoYXJndW1lbnRzWzBdKSAmJiBhcmd1bWVudHNbMF0uaXRlbXMgJiYgKGFyZ3VtZW50c1swXS5pdGVtcyA9IHsgYnV0dG9uOiBhcmd1bWVudHNbMF0uaXRlbXMgfSksIHRoaXMuY29udHJvbGdyb3VwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH0pLCB0LnVpLmJ1dHRvbixcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgRGF0ZXBpY2tlciAxLjEyLjFcbiAgICAgKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAgICAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICAgICovXG4gICAgdC5leHRlbmQodC51aSwgeyBkYXRlcGlja2VyOiB7IHZlcnNpb246IFwiMS4xMi4xXCIgfSB9KSwgdC5leHRlbmQoZC5wcm90b3R5cGUsIHsgbWFya2VyQ2xhc3NOYW1lOiBcImhhc0RhdGVwaWNrZXJcIiwgbWF4Um93czogNCwgX3dpZGdldERhdGVwaWNrZXI6IGZ1bmN0aW9uIF93aWRnZXREYXRlcGlja2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kcERpdjtcbiAgICAgIH0sIHNldERlZmF1bHRzOiBmdW5jdGlvbiBzZXREZWZhdWx0cyh0KSB7XG4gICAgICAgIHJldHVybiBnKHRoaXMuX2RlZmF1bHRzLCB0IHx8IHt9KSwgdGhpcztcbiAgICAgIH0sIF9hdHRhY2hEYXRlcGlja2VyOiBmdW5jdGlvbiBfYXR0YWNoRGF0ZXBpY2tlcihlLCBpKSB7XG4gICAgICAgIHZhciBuLCBzLCByO24gPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIHMgPSBcImRpdlwiID09PSBuIHx8IFwic3BhblwiID09PSBuLCBlLmlkIHx8ICh0aGlzLnV1aWQgKz0gMSwgZS5pZCA9IFwiZHBcIiArIHRoaXMudXVpZCksIChyID0gdGhpcy5fbmV3SW5zdCh0KGUpLCBzKSkuc2V0dGluZ3MgPSB0LmV4dGVuZCh7fSwgaSB8fCB7fSksIFwiaW5wdXRcIiA9PT0gbiA/IHRoaXMuX2Nvbm5lY3REYXRlcGlja2VyKGUsIHIpIDogcyAmJiB0aGlzLl9pbmxpbmVEYXRlcGlja2VyKGUsIHIpO1xuICAgICAgfSwgX25ld0luc3Q6IGZ1bmN0aW9uIF9uZXdJbnN0KGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSBlWzBdLmlkLnJlcGxhY2UoLyhbXkEtWmEtejAtOV9cXC1dKS9nLCBcIlxcXFxcXFxcJDFcIik7cmV0dXJuIHsgaWQ6IG4sIGlucHV0OiBlLCBzZWxlY3RlZERheTogMCwgc2VsZWN0ZWRNb250aDogMCwgc2VsZWN0ZWRZZWFyOiAwLCBkcmF3TW9udGg6IDAsIGRyYXdZZWFyOiAwLCBpbmxpbmU6IGksIGRwRGl2OiBpID8gcCh0KFwiPGRpdiBjbGFzcz0nXCIgKyB0aGlzLl9pbmxpbmVDbGFzcyArIFwiIHVpLWRhdGVwaWNrZXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeCB1aS1jb3JuZXItYWxsJz48L2Rpdj5cIikpIDogdGhpcy5kcERpdiB9O1xuICAgICAgfSwgX2Nvbm5lY3REYXRlcGlja2VyOiBmdW5jdGlvbiBfY29ubmVjdERhdGVwaWNrZXIoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHQoZSk7aS5hcHBlbmQgPSB0KFtdKSwgaS50cmlnZ2VyID0gdChbXSksIG4uaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpIHx8ICh0aGlzLl9hdHRhY2htZW50cyhuLCBpKSwgbi5hZGRDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkub24oXCJrZXlkb3duXCIsIHRoaXMuX2RvS2V5RG93bikub24oXCJrZXlwcmVzc1wiLCB0aGlzLl9kb0tleVByZXNzKS5vbihcImtleXVwXCIsIHRoaXMuX2RvS2V5VXApLCB0aGlzLl9hdXRvU2l6ZShpKSwgdC5kYXRhKGUsIFwiZGF0ZXBpY2tlclwiLCBpKSwgaS5zZXR0aW5ncy5kaXNhYmxlZCAmJiB0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlcihlKSk7XG4gICAgICB9LCBfYXR0YWNobWVudHM6IGZ1bmN0aW9uIF9hdHRhY2htZW50cyhlLCBpKSB7XG4gICAgICAgIHZhciBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvID0gdGhpcy5fZ2V0KGksIFwiYXBwZW5kVGV4dFwiKSxcbiAgICAgICAgICAgIGEgPSB0aGlzLl9nZXQoaSwgXCJpc1JUTFwiKTtpLmFwcGVuZCAmJiBpLmFwcGVuZC5yZW1vdmUoKSwgbyAmJiAoaS5hcHBlbmQgPSB0KFwiPHNwYW4gY2xhc3M9J1wiICsgdGhpcy5fYXBwZW5kQ2xhc3MgKyBcIic+XCIgKyBvICsgXCI8L3NwYW4+XCIpLCBlW2EgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiXShpLmFwcGVuZCkpLCBlLm9mZihcImZvY3VzXCIsIHRoaXMuX3Nob3dEYXRlcGlja2VyKSwgaS50cmlnZ2VyICYmIGkudHJpZ2dlci5yZW1vdmUoKSwgXCJmb2N1c1wiICE9PSAobiA9IHRoaXMuX2dldChpLCBcInNob3dPblwiKSkgJiYgXCJib3RoXCIgIT09IG4gfHwgZS5vbihcImZvY3VzXCIsIHRoaXMuX3Nob3dEYXRlcGlja2VyKSwgXCJidXR0b25cIiAhPT0gbiAmJiBcImJvdGhcIiAhPT0gbiB8fCAocyA9IHRoaXMuX2dldChpLCBcImJ1dHRvblRleHRcIiksIHIgPSB0aGlzLl9nZXQoaSwgXCJidXR0b25JbWFnZVwiKSwgaS50cmlnZ2VyID0gdCh0aGlzLl9nZXQoaSwgXCJidXR0b25JbWFnZU9ubHlcIikgPyB0KFwiPGltZy8+XCIpLmFkZENsYXNzKHRoaXMuX3RyaWdnZXJDbGFzcykuYXR0cih7IHNyYzogciwgYWx0OiBzLCB0aXRsZTogcyB9KSA6IHQoXCI8YnV0dG9uIHR5cGU9J2J1dHRvbic+PC9idXR0b24+XCIpLmFkZENsYXNzKHRoaXMuX3RyaWdnZXJDbGFzcykuaHRtbChyID8gdChcIjxpbWcvPlwiKS5hdHRyKHsgc3JjOiByLCBhbHQ6IHMsIHRpdGxlOiBzIH0pIDogcykpLCBlW2EgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiXShpLnRyaWdnZXIpLCBpLnRyaWdnZXIub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiYgdC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgPT09IGVbMF0gPyB0LmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCkgOiB0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmIHQuZGF0ZXBpY2tlci5fbGFzdElucHV0ICE9PSBlWzBdID8gKHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSwgdC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlcihlWzBdKSkgOiB0LmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKGVbMF0pLCAhMTtcbiAgICAgICAgfSkpO1xuICAgICAgfSwgX2F1dG9TaXplOiBmdW5jdGlvbiBfYXV0b1NpemUodCkge1xuICAgICAgICBpZiAodGhpcy5fZ2V0KHQsIFwiYXV0b1NpemVcIikgJiYgIXQuaW5saW5lKSB7XG4gICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgIHIgPSBuZXcgRGF0ZSgyMDA5LCAxMSwgMjApLFxuICAgICAgICAgICAgICBvID0gdGhpcy5fZ2V0KHQsIFwiZGF0ZUZvcm1hdFwiKTtvLm1hdGNoKC9bRE1dLykgJiYgKGUgPSBmdW5jdGlvbiBlKHQpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSAwLCBzID0gMDsgcyA8IHQubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgdFtzXS5sZW5ndGggPiBpICYmIChpID0gdFtzXS5sZW5ndGgsIG4gPSBzKTtcbiAgICAgICAgICAgIH1yZXR1cm4gbjtcbiAgICAgICAgICB9LCByLnNldE1vbnRoKGUodGhpcy5fZ2V0KHQsIG8ubWF0Y2goL01NLykgPyBcIm1vbnRoTmFtZXNcIiA6IFwibW9udGhOYW1lc1Nob3J0XCIpKSksIHIuc2V0RGF0ZShlKHRoaXMuX2dldCh0LCBvLm1hdGNoKC9ERC8pID8gXCJkYXlOYW1lc1wiIDogXCJkYXlOYW1lc1Nob3J0XCIpKSArIDIwIC0gci5nZXREYXkoKSkpLCB0LmlucHV0LmF0dHIoXCJzaXplXCIsIHRoaXMuX2Zvcm1hdERhdGUodCwgcikubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfSwgX2lubGluZURhdGVwaWNrZXI6IGZ1bmN0aW9uIF9pbmxpbmVEYXRlcGlja2VyKGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSB0KGUpO24uaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpIHx8IChuLmFkZENsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5hcHBlbmQoaS5kcERpdiksIHQuZGF0YShlLCBcImRhdGVwaWNrZXJcIiwgaSksIHRoaXMuX3NldERhdGUoaSwgdGhpcy5fZ2V0RGVmYXVsdERhdGUoaSksICEwKSwgdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpKSwgdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKGkpLCBpLnNldHRpbmdzLmRpc2FibGVkICYmIHRoaXMuX2Rpc2FibGVEYXRlcGlja2VyKGUpLCBpLmRwRGl2LmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKSk7XG4gICAgICB9LCBfZGlhbG9nRGF0ZXBpY2tlcjogZnVuY3Rpb24gX2RpYWxvZ0RhdGVwaWNrZXIoZSwgaSwgbiwgcywgcikge1xuICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBoID0gdGhpcy5fZGlhbG9nSW5zdDtyZXR1cm4gaCB8fCAodGhpcy51dWlkICs9IDEsIG8gPSBcImRwXCIgKyB0aGlzLnV1aWQsIHRoaXMuX2RpYWxvZ0lucHV0ID0gdChcIjxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nXCIgKyBvICsgXCInIHN0eWxlPSdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMHB4OyB3aWR0aDogMHB4OycvPlwiKSwgdGhpcy5fZGlhbG9nSW5wdXQub24oXCJrZXlkb3duXCIsIHRoaXMuX2RvS2V5RG93biksIHQoXCJib2R5XCIpLmFwcGVuZCh0aGlzLl9kaWFsb2dJbnB1dCksIChoID0gdGhpcy5fZGlhbG9nSW5zdCA9IHRoaXMuX25ld0luc3QodGhpcy5fZGlhbG9nSW5wdXQsICExKSkuc2V0dGluZ3MgPSB7fSwgdC5kYXRhKHRoaXMuX2RpYWxvZ0lucHV0WzBdLCBcImRhdGVwaWNrZXJcIiwgaCkpLCBnKGguc2V0dGluZ3MsIHMgfHwge30pLCBpID0gaSAmJiBpLmNvbnN0cnVjdG9yID09PSBEYXRlID8gdGhpcy5fZm9ybWF0RGF0ZShoLCBpKSA6IGksIHRoaXMuX2RpYWxvZ0lucHV0LnZhbChpKSwgdGhpcy5fcG9zID0gciA/IHIubGVuZ3RoID8gciA6IFtyLnBhZ2VYLCByLnBhZ2VZXSA6IG51bGwsIHRoaXMuX3BvcyB8fCAoYSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsIGMgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLCB0aGlzLl9wb3MgPSBbYSAvIDIgLSAxMDAgKyB1LCBsIC8gMiAtIDE1MCArIGNdKSwgdGhpcy5fZGlhbG9nSW5wdXQuY3NzKFwibGVmdFwiLCB0aGlzLl9wb3NbMF0gKyAyMCArIFwicHhcIikuY3NzKFwidG9wXCIsIHRoaXMuX3Bvc1sxXSArIFwicHhcIiksIGguc2V0dGluZ3Mub25TZWxlY3QgPSBuLCB0aGlzLl9pbkRpYWxvZyA9ICEwLCB0aGlzLmRwRGl2LmFkZENsYXNzKHRoaXMuX2RpYWxvZ0NsYXNzKSwgdGhpcy5fc2hvd0RhdGVwaWNrZXIodGhpcy5fZGlhbG9nSW5wdXRbMF0pLCB0LmJsb2NrVUkgJiYgdC5ibG9ja1VJKHRoaXMuZHBEaXYpLCB0LmRhdGEodGhpcy5fZGlhbG9nSW5wdXRbMF0sIFwiZGF0ZXBpY2tlclwiLCBoKSwgdGhpcztcbiAgICAgIH0sIF9kZXN0cm95RGF0ZXBpY2tlcjogZnVuY3Rpb24gX2Rlc3Ryb3lEYXRlcGlja2VyKGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gdChlKSxcbiAgICAgICAgICAgIHMgPSB0LmRhdGEoZSwgXCJkYXRlcGlja2VyXCIpO24uaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpICYmIChpID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCB0LnJlbW92ZURhdGEoZSwgXCJkYXRlcGlja2VyXCIpLCBcImlucHV0XCIgPT09IGkgPyAocy5hcHBlbmQucmVtb3ZlKCksIHMudHJpZ2dlci5yZW1vdmUoKSwgbi5yZW1vdmVDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkub2ZmKFwiZm9jdXNcIiwgdGhpcy5fc2hvd0RhdGVwaWNrZXIpLm9mZihcImtleWRvd25cIiwgdGhpcy5fZG9LZXlEb3duKS5vZmYoXCJrZXlwcmVzc1wiLCB0aGlzLl9kb0tleVByZXNzKS5vZmYoXCJrZXl1cFwiLCB0aGlzLl9kb0tleVVwKSkgOiBcImRpdlwiICE9PSBpICYmIFwic3BhblwiICE9PSBpIHx8IG4ucmVtb3ZlQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmVtcHR5KCksIGMgPT09IHMgJiYgKGMgPSBudWxsKSk7XG4gICAgICB9LCBfZW5hYmxlRGF0ZXBpY2tlcjogZnVuY3Rpb24gX2VuYWJsZURhdGVwaWNrZXIoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzID0gdChlKSxcbiAgICAgICAgICAgIHIgPSB0LmRhdGEoZSwgXCJkYXRlcGlja2VyXCIpO3MuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpICYmIChcImlucHV0XCIgPT09IChpID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSA/IChlLmRpc2FibGVkID0gITEsIHIudHJpZ2dlci5maWx0ZXIoXCJidXR0b25cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5kaXNhYmxlZCA9ICExO1xuICAgICAgICB9KS5lbmQoKS5maWx0ZXIoXCJpbWdcIikuY3NzKHsgb3BhY2l0eTogXCIxLjBcIiwgY3Vyc29yOiBcIlwiIH0pKSA6IFwiZGl2XCIgIT09IGkgJiYgXCJzcGFuXCIgIT09IGkgfHwgKChuID0gcy5jaGlsZHJlbihcIi5cIiArIHRoaXMuX2lubGluZUNsYXNzKSkuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcyhcInVpLXN0YXRlLWRpc2FibGVkXCIpLCBuLmZpbmQoXCJzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhclwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgITEpKSwgdGhpcy5fZGlzYWJsZWRJbnB1dHMgPSB0Lm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdCA9PT0gZSA/IG51bGwgOiB0O1xuICAgICAgICB9KSk7XG4gICAgICB9LCBfZGlzYWJsZURhdGVwaWNrZXI6IGZ1bmN0aW9uIF9kaXNhYmxlRGF0ZXBpY2tlcihlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMgPSB0KGUpLFxuICAgICAgICAgICAgciA9IHQuZGF0YShlLCBcImRhdGVwaWNrZXJcIik7cy5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkgJiYgKFwiaW5wdXRcIiA9PT0gKGkgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpID8gKGUuZGlzYWJsZWQgPSAhMCwgci50cmlnZ2VyLmZpbHRlcihcImJ1dHRvblwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmRpc2FibGVkID0gITA7XG4gICAgICAgIH0pLmVuZCgpLmZpbHRlcihcImltZ1wiKS5jc3MoeyBvcGFjaXR5OiBcIjAuNVwiLCBjdXJzb3I6IFwiZGVmYXVsdFwiIH0pKSA6IFwiZGl2XCIgIT09IGkgJiYgXCJzcGFuXCIgIT09IGkgfHwgKChuID0gcy5jaGlsZHJlbihcIi5cIiArIHRoaXMuX2lubGluZUNsYXNzKSkuY2hpbGRyZW4oKS5hZGRDbGFzcyhcInVpLXN0YXRlLWRpc2FibGVkXCIpLCBuLmZpbmQoXCJzZWxlY3QudWktZGF0ZXBpY2tlci1tb250aCwgc2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhclwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgITApKSwgdGhpcy5fZGlzYWJsZWRJbnB1dHMgPSB0Lm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdCA9PT0gZSA/IG51bGwgOiB0O1xuICAgICAgICB9KSwgdGhpcy5fZGlzYWJsZWRJbnB1dHNbdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoXSA9IGUpO1xuICAgICAgfSwgX2lzRGlzYWJsZWREYXRlcGlja2VyOiBmdW5jdGlvbiBfaXNEaXNhYmxlZERhdGVwaWNrZXIodCkge1xuICAgICAgICBpZiAoIXQpIHJldHVybiAhMTtmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkSW5wdXRzW2VdID09PSB0KSByZXR1cm4gITA7XG4gICAgICAgIH1yZXR1cm4gITE7XG4gICAgICB9LCBfZ2V0SW5zdDogZnVuY3Rpb24gX2dldEluc3QoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiB0LmRhdGEoZSwgXCJkYXRlcGlja2VyXCIpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgdGhyb3cgXCJNaXNzaW5nIGluc3RhbmNlIGRhdGEgZm9yIHRoaXMgZGF0ZXBpY2tlclwiO1xuICAgICAgICB9XG4gICAgICB9LCBfb3B0aW9uRGF0ZXBpY2tlcjogZnVuY3Rpb24gX29wdGlvbkRhdGVwaWNrZXIoZSwgaSwgbikge1xuICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGwgPSB0aGlzLl9nZXRJbnN0KGUpO2lmICgyID09PSBhcmd1bWVudHMubGVuZ3RoICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGkpIHJldHVybiBcImRlZmF1bHRzXCIgPT09IGkgPyB0LmV4dGVuZCh7fSwgdC5kYXRlcGlja2VyLl9kZWZhdWx0cykgOiBsID8gXCJhbGxcIiA9PT0gaSA/IHQuZXh0ZW5kKHt9LCBsLnNldHRpbmdzKSA6IHRoaXMuX2dldChsLCBpKSA6IG51bGw7cyA9IGkgfHwge30sIFwic3RyaW5nXCIgPT0gdHlwZW9mIGkgJiYgKChzID0ge30pW2ldID0gbiksIGwgJiYgKHRoaXMuX2N1ckluc3QgPT09IGwgJiYgdGhpcy5faGlkZURhdGVwaWNrZXIoKSwgciA9IHRoaXMuX2dldERhdGVEYXRlcGlja2VyKGUsICEwKSwgbyA9IHRoaXMuX2dldE1pbk1heERhdGUobCwgXCJtaW5cIiksIGEgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKGwsIFwibWF4XCIpLCBnKGwuc2V0dGluZ3MsIHMpLCBudWxsICE9PSBvICYmIHZvaWQgMCAhPT0gcy5kYXRlRm9ybWF0ICYmIHZvaWQgMCA9PT0gcy5taW5EYXRlICYmIChsLnNldHRpbmdzLm1pbkRhdGUgPSB0aGlzLl9mb3JtYXREYXRlKGwsIG8pKSwgbnVsbCAhPT0gYSAmJiB2b2lkIDAgIT09IHMuZGF0ZUZvcm1hdCAmJiB2b2lkIDAgPT09IHMubWF4RGF0ZSAmJiAobC5zZXR0aW5ncy5tYXhEYXRlID0gdGhpcy5fZm9ybWF0RGF0ZShsLCBhKSksIFwiZGlzYWJsZWRcIiBpbiBzICYmIChzLmRpc2FibGVkID8gdGhpcy5fZGlzYWJsZURhdGVwaWNrZXIoZSkgOiB0aGlzLl9lbmFibGVEYXRlcGlja2VyKGUpKSwgdGhpcy5fYXR0YWNobWVudHModChlKSwgbCksIHRoaXMuX2F1dG9TaXplKGwpLCB0aGlzLl9zZXREYXRlKGwsIHIpLCB0aGlzLl91cGRhdGVBbHRlcm5hdGUobCksIHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIobCkpO1xuICAgICAgfSwgX2NoYW5nZURhdGVwaWNrZXI6IGZ1bmN0aW9uIF9jaGFuZ2VEYXRlcGlja2VyKHQsIGUsIGkpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9uRGF0ZXBpY2tlcih0LCBlLCBpKTtcbiAgICAgIH0sIF9yZWZyZXNoRGF0ZXBpY2tlcjogZnVuY3Rpb24gX3JlZnJlc2hEYXRlcGlja2VyKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLl9nZXRJbnN0KHQpO2UgJiYgdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihlKTtcbiAgICAgIH0sIF9zZXREYXRlRGF0ZXBpY2tlcjogZnVuY3Rpb24gX3NldERhdGVEYXRlcGlja2VyKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLl9nZXRJbnN0KHQpO2kgJiYgKHRoaXMuX3NldERhdGUoaSwgZSksIHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoaSksIHRoaXMuX3VwZGF0ZUFsdGVybmF0ZShpKSk7XG4gICAgICB9LCBfZ2V0RGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uIF9nZXREYXRlRGF0ZXBpY2tlcih0LCBlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5fZ2V0SW5zdCh0KTtyZXR1cm4gaSAmJiAhaS5pbmxpbmUgJiYgdGhpcy5fc2V0RGF0ZUZyb21GaWVsZChpLCBlKSwgaSA/IHRoaXMuX2dldERhdGUoaSkgOiBudWxsO1xuICAgICAgfSwgX2RvS2V5RG93bjogZnVuY3Rpb24gX2RvS2V5RG93bihlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByID0gdC5kYXRlcGlja2VyLl9nZXRJbnN0KGUudGFyZ2V0KSxcbiAgICAgICAgICAgIG8gPSAhMCxcbiAgICAgICAgICAgIGEgPSByLmRwRGl2LmlzKFwiLnVpLWRhdGVwaWNrZXItcnRsXCIpO2lmIChyLl9rZXlFdmVudCA9ICEwLCB0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nKSBzd2l0Y2ggKGUua2V5Q29kZSkge2Nhc2UgOTpcbiAgICAgICAgICAgIHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSwgbyA9ICExO2JyZWFrO2Nhc2UgMTM6XG4gICAgICAgICAgICByZXR1cm4gKHMgPSB0KFwidGQuXCIgKyB0LmRhdGVwaWNrZXIuX2RheU92ZXJDbGFzcyArIFwiOm5vdCguXCIgKyB0LmRhdGVwaWNrZXIuX2N1cnJlbnRDbGFzcyArIFwiKVwiLCByLmRwRGl2KSlbMF0gJiYgdC5kYXRlcGlja2VyLl9zZWxlY3REYXkoZS50YXJnZXQsIHIuc2VsZWN0ZWRNb250aCwgci5zZWxlY3RlZFllYXIsIHNbMF0pLCAoaSA9IHQuZGF0ZXBpY2tlci5fZ2V0KHIsIFwib25TZWxlY3RcIikpID8gKG4gPSB0LmRhdGVwaWNrZXIuX2Zvcm1hdERhdGUociksIGkuYXBwbHkoci5pbnB1dCA/IHIuaW5wdXRbMF0gOiBudWxsLCBbbiwgcl0pKSA6IHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSwgITE7Y2FzZSAyNzpcbiAgICAgICAgICAgIHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTticmVhaztjYXNlIDMzOlxuICAgICAgICAgICAgdC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LCBlLmN0cmxLZXkgPyAtdC5kYXRlcGlja2VyLl9nZXQociwgXCJzdGVwQmlnTW9udGhzXCIpIDogLXQuZGF0ZXBpY2tlci5fZ2V0KHIsIFwic3RlcE1vbnRoc1wiKSwgXCJNXCIpO2JyZWFrO2Nhc2UgMzQ6XG4gICAgICAgICAgICB0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsIGUuY3RybEtleSA/ICt0LmRhdGVwaWNrZXIuX2dldChyLCBcInN0ZXBCaWdNb250aHNcIikgOiArdC5kYXRlcGlja2VyLl9nZXQociwgXCJzdGVwTW9udGhzXCIpLCBcIk1cIik7YnJlYWs7Y2FzZSAzNTpcbiAgICAgICAgICAgIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiB0LmRhdGVwaWNrZXIuX2NsZWFyRGF0ZShlLnRhcmdldCksIG8gPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5O2JyZWFrO2Nhc2UgMzY6XG4gICAgICAgICAgICAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiYgdC5kYXRlcGlja2VyLl9nb3RvVG9kYXkoZS50YXJnZXQpLCBvID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleTticmVhaztjYXNlIDM3OlxuICAgICAgICAgICAgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmIHQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCwgYSA/IDEgOiAtMSwgXCJEXCIpLCBvID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleSwgZS5vcmlnaW5hbEV2ZW50LmFsdEtleSAmJiB0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsIGUuY3RybEtleSA/IC10LmRhdGVwaWNrZXIuX2dldChyLCBcInN0ZXBCaWdNb250aHNcIikgOiAtdC5kYXRlcGlja2VyLl9nZXQociwgXCJzdGVwTW9udGhzXCIpLCBcIk1cIik7YnJlYWs7Y2FzZSAzODpcbiAgICAgICAgICAgIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiB0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsIC03LCBcIkRcIiksIG8gPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5O2JyZWFrO2Nhc2UgMzk6XG4gICAgICAgICAgICAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiYgdC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LCBhID8gLTEgOiAxLCBcIkRcIiksIG8gPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5LCBlLm9yaWdpbmFsRXZlbnQuYWx0S2V5ICYmIHQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCwgZS5jdHJsS2V5ID8gK3QuZGF0ZXBpY2tlci5fZ2V0KHIsIFwic3RlcEJpZ01vbnRoc1wiKSA6ICt0LmRhdGVwaWNrZXIuX2dldChyLCBcInN0ZXBNb250aHNcIiksIFwiTVwiKTticmVhaztjYXNlIDQwOlxuICAgICAgICAgICAgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmIHQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCwgNywgXCJEXCIpLCBvID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleTticmVhaztkZWZhdWx0OlxuICAgICAgICAgICAgbyA9ICExO30gZWxzZSAzNiA9PT0gZS5rZXlDb2RlICYmIGUuY3RybEtleSA/IHQuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIodGhpcykgOiBvID0gITE7byAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpKTtcbiAgICAgIH0sIF9kb0tleVByZXNzOiBmdW5jdGlvbiBfZG9LZXlQcmVzcyhlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMgPSB0LmRhdGVwaWNrZXIuX2dldEluc3QoZS50YXJnZXQpO2lmICh0LmRhdGVwaWNrZXIuX2dldChzLCBcImNvbnN0cmFpbklucHV0XCIpKSByZXR1cm4gaSA9IHQuZGF0ZXBpY2tlci5fcG9zc2libGVDaGFycyh0LmRhdGVwaWNrZXIuX2dldChzLCBcImRhdGVGb3JtYXRcIikpLCBuID0gU3RyaW5nLmZyb21DaGFyQ29kZShudWxsID09IGUuY2hhckNvZGUgPyBlLmtleUNvZGUgOiBlLmNoYXJDb2RlKSwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBuIDwgXCIgXCIgfHwgIWkgfHwgaS5pbmRleE9mKG4pID4gLTE7XG4gICAgICB9LCBfZG9LZXlVcDogZnVuY3Rpb24gX2RvS2V5VXAoZSkge1xuICAgICAgICB2YXIgaSA9IHQuZGF0ZXBpY2tlci5fZ2V0SW5zdChlLnRhcmdldCk7aWYgKGkuaW5wdXQudmFsKCkgIT09IGkubGFzdFZhbCkgdHJ5IHtcbiAgICAgICAgICB0LmRhdGVwaWNrZXIucGFyc2VEYXRlKHQuZGF0ZXBpY2tlci5fZ2V0KGksIFwiZGF0ZUZvcm1hdFwiKSwgaS5pbnB1dCA/IGkuaW5wdXQudmFsKCkgOiBudWxsLCB0LmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyhpKSkgJiYgKHQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZChpKSwgdC5kYXRlcGlja2VyLl91cGRhdGVBbHRlcm5hdGUoaSksIHQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihpKSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHt9cmV0dXJuICEwO1xuICAgICAgfSwgX3Nob3dEYXRlcGlja2VyOiBmdW5jdGlvbiBfc2hvd0RhdGVwaWNrZXIoZSkge1xuICAgICAgICB2YXIgaSwgbiwgcywgciwgbywgYSwgbDtcImlucHV0XCIgIT09IChlID0gZS50YXJnZXQgfHwgZSkubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiAoZSA9IHQoXCJpbnB1dFwiLCBlLnBhcmVudE5vZGUpWzBdKSwgdC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcihlKSB8fCB0LmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9PT0gZSB8fCAoaSA9IHQuZGF0ZXBpY2tlci5fZ2V0SW5zdChlKSwgdC5kYXRlcGlja2VyLl9jdXJJbnN0ICYmIHQuZGF0ZXBpY2tlci5fY3VySW5zdCAhPT0gaSAmJiAodC5kYXRlcGlja2VyLl9jdXJJbnN0LmRwRGl2LnN0b3AoITAsICEwKSwgaSAmJiB0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmIHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIodC5kYXRlcGlja2VyLl9jdXJJbnN0LmlucHV0WzBdKSksIG4gPSB0LmRhdGVwaWNrZXIuX2dldChpLCBcImJlZm9yZVNob3dcIiksICExICE9PSAocyA9IG4gPyBuLmFwcGx5KGUsIFtlLCBpXSkgOiB7fSkgJiYgKGcoaS5zZXR0aW5ncywgcyksIGkubGFzdFZhbCA9IG51bGwsIHQuZGF0ZXBpY2tlci5fbGFzdElucHV0ID0gZSwgdC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKGkpLCB0LmRhdGVwaWNrZXIuX2luRGlhbG9nICYmIChlLnZhbHVlID0gXCJcIiksIHQuZGF0ZXBpY2tlci5fcG9zIHx8ICh0LmRhdGVwaWNrZXIuX3BvcyA9IHQuZGF0ZXBpY2tlci5fZmluZFBvcyhlKSwgdC5kYXRlcGlja2VyLl9wb3NbMV0gKz0gZS5vZmZzZXRIZWlnaHQpLCByID0gITEsIHQoZSkucGFyZW50cygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAhKHIgfD0gXCJmaXhlZFwiID09PSB0KHRoaXMpLmNzcyhcInBvc2l0aW9uXCIpKTtcbiAgICAgICAgfSksIG8gPSB7IGxlZnQ6IHQuZGF0ZXBpY2tlci5fcG9zWzBdLCB0b3A6IHQuZGF0ZXBpY2tlci5fcG9zWzFdIH0sIHQuZGF0ZXBpY2tlci5fcG9zID0gbnVsbCwgaS5kcERpdi5lbXB0eSgpLCBpLmRwRGl2LmNzcyh7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiwgdG9wOiBcIi0xMDAwcHhcIiB9KSwgdC5kYXRlcGlja2VyLl91cGRhdGVEYXRlcGlja2VyKGkpLCBvID0gdC5kYXRlcGlja2VyLl9jaGVja09mZnNldChpLCBvLCByKSwgaS5kcERpdi5jc3MoeyBwb3NpdGlvbjogdC5kYXRlcGlja2VyLl9pbkRpYWxvZyAmJiB0LmJsb2NrVUkgPyBcInN0YXRpY1wiIDogciA/IFwiZml4ZWRcIiA6IFwiYWJzb2x1dGVcIiwgZGlzcGxheTogXCJub25lXCIsIGxlZnQ6IG8ubGVmdCArIFwicHhcIiwgdG9wOiBvLnRvcCArIFwicHhcIiB9KSwgaS5pbmxpbmUgfHwgKGEgPSB0LmRhdGVwaWNrZXIuX2dldChpLCBcInNob3dBbmltXCIpLCBsID0gdC5kYXRlcGlja2VyLl9nZXQoaSwgXCJkdXJhdGlvblwiKSwgaS5kcERpdi5jc3MoXCJ6LWluZGV4XCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgZm9yICh2YXIgZSwgaTsgdC5sZW5ndGggJiYgdFswXSAhPT0gZG9jdW1lbnQ7KSB7XG4gICAgICAgICAgICBpZiAoKFwiYWJzb2x1dGVcIiA9PT0gKGUgPSB0LmNzcyhcInBvc2l0aW9uXCIpKSB8fCBcInJlbGF0aXZlXCIgPT09IGUgfHwgXCJmaXhlZFwiID09PSBlKSAmJiAoaSA9IHBhcnNlSW50KHQuY3NzKFwiekluZGV4XCIpLCAxMCksICFpc05hTihpKSAmJiAwICE9PSBpKSkgcmV0dXJuIGk7dCA9IHQucGFyZW50KCk7XG4gICAgICAgICAgfXJldHVybiAwO1xuICAgICAgICB9KHQoZSkpICsgMSksIHQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgPSAhMCwgdC5lZmZlY3RzICYmIHQuZWZmZWN0cy5lZmZlY3RbYV0gPyBpLmRwRGl2LnNob3coYSwgdC5kYXRlcGlja2VyLl9nZXQoaSwgXCJzaG93T3B0aW9uc1wiKSwgbCkgOiBpLmRwRGl2W2EgfHwgXCJzaG93XCJdKGEgPyBsIDogbnVsbCksIHQuZGF0ZXBpY2tlci5fc2hvdWxkRm9jdXNJbnB1dChpKSAmJiBpLmlucHV0LnRyaWdnZXIoXCJmb2N1c1wiKSwgdC5kYXRlcGlja2VyLl9jdXJJbnN0ID0gaSkpKTtcbiAgICAgIH0sIF91cGRhdGVEYXRlcGlja2VyOiBmdW5jdGlvbiBfdXBkYXRlRGF0ZXBpY2tlcihlKSB7XG4gICAgICAgIHRoaXMubWF4Um93cyA9IDQsIGMgPSBlLCBlLmRwRGl2LmVtcHR5KCkuYXBwZW5kKHRoaXMuX2dlbmVyYXRlSFRNTChlKSksIHRoaXMuX2F0dGFjaEhhbmRsZXJzKGUpO3ZhciBpLFxuICAgICAgICAgICAgbiA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKGUpLFxuICAgICAgICAgICAgcyA9IG5bMV0sXG4gICAgICAgICAgICByID0gZS5kcERpdi5maW5kKFwiLlwiICsgdGhpcy5fZGF5T3ZlckNsYXNzICsgXCIgYVwiKTtyLmxlbmd0aCA+IDAgJiYgZi5hcHBseShyLmdldCgwKSksIGUuZHBEaXYucmVtb3ZlQ2xhc3MoXCJ1aS1kYXRlcGlja2VyLW11bHRpLTIgdWktZGF0ZXBpY2tlci1tdWx0aS0zIHVpLWRhdGVwaWNrZXItbXVsdGktNFwiKS53aWR0aChcIlwiKSwgcyA+IDEgJiYgZS5kcERpdi5hZGRDbGFzcyhcInVpLWRhdGVwaWNrZXItbXVsdGktXCIgKyBzKS5jc3MoXCJ3aWR0aFwiLCAxNyAqIHMgKyBcImVtXCIpLCBlLmRwRGl2WygxICE9PSBuWzBdIHx8IDEgIT09IG5bMV0gPyBcImFkZFwiIDogXCJyZW1vdmVcIikgKyBcIkNsYXNzXCJdKFwidWktZGF0ZXBpY2tlci1tdWx0aVwiKSwgZS5kcERpdlsodGhpcy5fZ2V0KGUsIFwiaXNSVExcIikgPyBcImFkZFwiIDogXCJyZW1vdmVcIikgKyBcIkNsYXNzXCJdKFwidWktZGF0ZXBpY2tlci1ydGxcIiksIGUgPT09IHQuZGF0ZXBpY2tlci5fY3VySW5zdCAmJiB0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmIHQuZGF0ZXBpY2tlci5fc2hvdWxkRm9jdXNJbnB1dChlKSAmJiBlLmlucHV0LnRyaWdnZXIoXCJmb2N1c1wiKSwgZS55ZWFyc2h0bWwgJiYgKGkgPSBlLnllYXJzaHRtbCwgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaSA9PT0gZS55ZWFyc2h0bWwgJiYgZS55ZWFyc2h0bWwgJiYgZS5kcERpdi5maW5kKFwic2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhcjpmaXJzdFwiKS5yZXBsYWNlV2l0aChlLnllYXJzaHRtbCksIGkgPSBlLnllYXJzaHRtbCA9IG51bGw7XG4gICAgICAgIH0sIDApKTtcbiAgICAgIH0sIF9zaG91bGRGb2N1c0lucHV0OiBmdW5jdGlvbiBfc2hvdWxkRm9jdXNJbnB1dCh0KSB7XG4gICAgICAgIHJldHVybiB0LmlucHV0ICYmIHQuaW5wdXQuaXMoXCI6dmlzaWJsZVwiKSAmJiAhdC5pbnB1dC5pcyhcIjpkaXNhYmxlZFwiKSAmJiAhdC5pbnB1dC5pcyhcIjpmb2N1c1wiKTtcbiAgICAgIH0sIF9jaGVja09mZnNldDogZnVuY3Rpb24gX2NoZWNrT2Zmc2V0KGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSBlLmRwRGl2Lm91dGVyV2lkdGgoKSxcbiAgICAgICAgICAgIHIgPSBlLmRwRGl2Lm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICBvID0gZS5pbnB1dCA/IGUuaW5wdXQub3V0ZXJXaWR0aCgpIDogMCxcbiAgICAgICAgICAgIGEgPSBlLmlucHV0ID8gZS5pbnB1dC5vdXRlckhlaWdodCgpIDogMCxcbiAgICAgICAgICAgIGwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggKyAobiA/IDAgOiB0KGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpLFxuICAgICAgICAgICAgdSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgKyAobiA/IDAgOiB0KGRvY3VtZW50KS5zY3JvbGxUb3AoKSk7cmV0dXJuIGkubGVmdCAtPSB0aGlzLl9nZXQoZSwgXCJpc1JUTFwiKSA/IHMgLSBvIDogMCwgaS5sZWZ0IC09IG4gJiYgaS5sZWZ0ID09PSBlLmlucHV0Lm9mZnNldCgpLmxlZnQgPyB0KGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkgOiAwLCBpLnRvcCAtPSBuICYmIGkudG9wID09PSBlLmlucHV0Lm9mZnNldCgpLnRvcCArIGEgPyB0KGRvY3VtZW50KS5zY3JvbGxUb3AoKSA6IDAsIGkubGVmdCAtPSBNYXRoLm1pbihpLmxlZnQsIGkubGVmdCArIHMgPiBsICYmIGwgPiBzID8gTWF0aC5hYnMoaS5sZWZ0ICsgcyAtIGwpIDogMCksIGkudG9wIC09IE1hdGgubWluKGkudG9wLCBpLnRvcCArIHIgPiB1ICYmIHUgPiByID8gTWF0aC5hYnMociArIGEpIDogMCksIGk7XG4gICAgICB9LCBfZmluZFBvczogZnVuY3Rpb24gX2ZpbmRQb3MoZSkge1xuICAgICAgICBmb3IgKHZhciBpLCBuID0gdGhpcy5fZ2V0SW5zdChlKSwgcyA9IHRoaXMuX2dldChuLCBcImlzUlRMXCIpOyBlICYmIChcImhpZGRlblwiID09PSBlLnR5cGUgfHwgMSAhPT0gZS5ub2RlVHlwZSB8fCB0LmV4cHIuZmlsdGVycy5oaWRkZW4oZSkpOykge1xuICAgICAgICAgIGUgPSBlW3MgPyBcInByZXZpb3VzU2libGluZ1wiIDogXCJuZXh0U2libGluZ1wiXTtcbiAgICAgICAgfXJldHVybiBbKGkgPSB0KGUpLm9mZnNldCgpKS5sZWZ0LCBpLnRvcF07XG4gICAgICB9LCBfaGlkZURhdGVwaWNrZXI6IGZ1bmN0aW9uIF9oaWRlRGF0ZXBpY2tlcihlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyA9IHRoaXMuX2N1ckluc3Q7IW8gfHwgZSAmJiBvICE9PSB0LmRhdGEoZSwgXCJkYXRlcGlja2VyXCIpIHx8IHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nICYmIChpID0gdGhpcy5fZ2V0KG8sIFwic2hvd0FuaW1cIiksIG4gPSB0aGlzLl9nZXQobywgXCJkdXJhdGlvblwiKSwgcyA9IGZ1bmN0aW9uIHMoKSB7XG4gICAgICAgICAgdC5kYXRlcGlja2VyLl90aWR5RGlhbG9nKG8pO1xuICAgICAgICB9LCB0LmVmZmVjdHMgJiYgKHQuZWZmZWN0cy5lZmZlY3RbaV0gfHwgdC5lZmZlY3RzW2ldKSA/IG8uZHBEaXYuaGlkZShpLCB0LmRhdGVwaWNrZXIuX2dldChvLCBcInNob3dPcHRpb25zXCIpLCBuLCBzKSA6IG8uZHBEaXZbXCJzbGlkZURvd25cIiA9PT0gaSA/IFwic2xpZGVVcFwiIDogXCJmYWRlSW5cIiA9PT0gaSA/IFwiZmFkZU91dFwiIDogXCJoaWRlXCJdKGkgPyBuIDogbnVsbCwgcyksIGkgfHwgcygpLCB0aGlzLl9kYXRlcGlja2VyU2hvd2luZyA9ICExLCAociA9IHRoaXMuX2dldChvLCBcIm9uQ2xvc2VcIikpICYmIHIuYXBwbHkoby5pbnB1dCA/IG8uaW5wdXRbMF0gOiBudWxsLCBbby5pbnB1dCA/IG8uaW5wdXQudmFsKCkgOiBcIlwiLCBvXSksIHRoaXMuX2xhc3RJbnB1dCA9IG51bGwsIHRoaXMuX2luRGlhbG9nICYmICh0aGlzLl9kaWFsb2dJbnB1dC5jc3MoeyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBsZWZ0OiBcIjBcIiwgdG9wOiBcIi0xMDBweFwiIH0pLCB0LmJsb2NrVUkgJiYgKHQudW5ibG9ja1VJKCksIHQoXCJib2R5XCIpLmFwcGVuZCh0aGlzLmRwRGl2KSkpLCB0aGlzLl9pbkRpYWxvZyA9ICExKTtcbiAgICAgIH0sIF90aWR5RGlhbG9nOiBmdW5jdGlvbiBfdGlkeURpYWxvZyh0KSB7XG4gICAgICAgIHQuZHBEaXYucmVtb3ZlQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpLm9mZihcIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyXCIpO1xuICAgICAgfSwgX2NoZWNrRXh0ZXJuYWxDbGljazogZnVuY3Rpb24gX2NoZWNrRXh0ZXJuYWxDbGljayhlKSB7XG4gICAgICAgIGlmICh0LmRhdGVwaWNrZXIuX2N1ckluc3QpIHtcbiAgICAgICAgICB2YXIgaSA9IHQoZS50YXJnZXQpLFxuICAgICAgICAgICAgICBuID0gdC5kYXRlcGlja2VyLl9nZXRJbnN0KGlbMF0pOyhpWzBdLmlkID09PSB0LmRhdGVwaWNrZXIuX21haW5EaXZJZCB8fCAwICE9PSBpLnBhcmVudHMoXCIjXCIgKyB0LmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoIHx8IGkuaGFzQ2xhc3ModC5kYXRlcGlja2VyLm1hcmtlckNsYXNzTmFtZSkgfHwgaS5jbG9zZXN0KFwiLlwiICsgdC5kYXRlcGlja2VyLl90cmlnZ2VyQ2xhc3MpLmxlbmd0aCB8fCAhdC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyB8fCB0LmRhdGVwaWNrZXIuX2luRGlhbG9nICYmIHQuYmxvY2tVSSkgJiYgKCFpLmhhc0NsYXNzKHQuZGF0ZXBpY2tlci5tYXJrZXJDbGFzc05hbWUpIHx8IHQuZGF0ZXBpY2tlci5fY3VySW5zdCA9PT0gbikgfHwgdC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuICAgICAgICB9XG4gICAgICB9LCBfYWRqdXN0RGF0ZTogZnVuY3Rpb24gX2FkanVzdERhdGUoZSwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IHQoZSksXG4gICAgICAgICAgICByID0gdGhpcy5fZ2V0SW5zdChzWzBdKTt0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcihzWzBdKSB8fCAodGhpcy5fYWRqdXN0SW5zdERhdGUociwgaSArIChcIk1cIiA9PT0gbiA/IHRoaXMuX2dldChyLCBcInNob3dDdXJyZW50QXRQb3NcIikgOiAwKSwgbiksIHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIocikpO1xuICAgICAgfSwgX2dvdG9Ub2RheTogZnVuY3Rpb24gX2dvdG9Ub2RheShlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbiA9IHQoZSksXG4gICAgICAgICAgICBzID0gdGhpcy5fZ2V0SW5zdChuWzBdKTt0aGlzLl9nZXQocywgXCJnb3RvQ3VycmVudFwiKSAmJiBzLmN1cnJlbnREYXkgPyAocy5zZWxlY3RlZERheSA9IHMuY3VycmVudERheSwgcy5kcmF3TW9udGggPSBzLnNlbGVjdGVkTW9udGggPSBzLmN1cnJlbnRNb250aCwgcy5kcmF3WWVhciA9IHMuc2VsZWN0ZWRZZWFyID0gcy5jdXJyZW50WWVhcikgOiAoaSA9IG5ldyBEYXRlKCksIHMuc2VsZWN0ZWREYXkgPSBpLmdldERhdGUoKSwgcy5kcmF3TW9udGggPSBzLnNlbGVjdGVkTW9udGggPSBpLmdldE1vbnRoKCksIHMuZHJhd1llYXIgPSBzLnNlbGVjdGVkWWVhciA9IGkuZ2V0RnVsbFllYXIoKSksIHRoaXMuX25vdGlmeUNoYW5nZShzKSwgdGhpcy5fYWRqdXN0RGF0ZShuKTtcbiAgICAgIH0sIF9zZWxlY3RNb250aFllYXI6IGZ1bmN0aW9uIF9zZWxlY3RNb250aFllYXIoZSwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IHQoZSksXG4gICAgICAgICAgICByID0gdGhpcy5fZ2V0SW5zdChzWzBdKTtyW1wic2VsZWN0ZWRcIiArIChcIk1cIiA9PT0gbiA/IFwiTW9udGhcIiA6IFwiWWVhclwiKV0gPSByW1wiZHJhd1wiICsgKFwiTVwiID09PSBuID8gXCJNb250aFwiIDogXCJZZWFyXCIpXSA9IHBhcnNlSW50KGkub3B0aW9uc1tpLnNlbGVjdGVkSW5kZXhdLnZhbHVlLCAxMCksIHRoaXMuX25vdGlmeUNoYW5nZShyKSwgdGhpcy5fYWRqdXN0RGF0ZShzKTtcbiAgICAgIH0sIF9zZWxlY3REYXk6IGZ1bmN0aW9uIF9zZWxlY3REYXkoZSwgaSwgbiwgcykge1xuICAgICAgICB2YXIgcixcbiAgICAgICAgICAgIG8gPSB0KGUpO3QocykuaGFzQ2xhc3ModGhpcy5fdW5zZWxlY3RhYmxlQ2xhc3MpIHx8IHRoaXMuX2lzRGlzYWJsZWREYXRlcGlja2VyKG9bMF0pIHx8ICgociA9IHRoaXMuX2dldEluc3Qob1swXSkpLnNlbGVjdGVkRGF5ID0gci5jdXJyZW50RGF5ID0gdChcImFcIiwgcykuaHRtbCgpLCByLnNlbGVjdGVkTW9udGggPSByLmN1cnJlbnRNb250aCA9IGksIHIuc2VsZWN0ZWRZZWFyID0gci5jdXJyZW50WWVhciA9IG4sIHRoaXMuX3NlbGVjdERhdGUoZSwgdGhpcy5fZm9ybWF0RGF0ZShyLCByLmN1cnJlbnREYXksIHIuY3VycmVudE1vbnRoLCByLmN1cnJlbnRZZWFyKSkpO1xuICAgICAgfSwgX2NsZWFyRGF0ZTogZnVuY3Rpb24gX2NsZWFyRGF0ZShlKSB7XG4gICAgICAgIHZhciBpID0gdChlKTt0aGlzLl9zZWxlY3REYXRlKGksIFwiXCIpO1xuICAgICAgfSwgX3NlbGVjdERhdGU6IGZ1bmN0aW9uIF9zZWxlY3REYXRlKGUsIGkpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICBzID0gdChlKSxcbiAgICAgICAgICAgIHIgPSB0aGlzLl9nZXRJbnN0KHNbMF0pO2kgPSBudWxsICE9IGkgPyBpIDogdGhpcy5fZm9ybWF0RGF0ZShyKSwgci5pbnB1dCAmJiByLmlucHV0LnZhbChpKSwgdGhpcy5fdXBkYXRlQWx0ZXJuYXRlKHIpLCAobiA9IHRoaXMuX2dldChyLCBcIm9uU2VsZWN0XCIpKSA/IG4uYXBwbHkoci5pbnB1dCA/IHIuaW5wdXRbMF0gOiBudWxsLCBbaSwgcl0pIDogci5pbnB1dCAmJiByLmlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIiksIHIuaW5saW5lID8gdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihyKSA6ICh0aGlzLl9oaWRlRGF0ZXBpY2tlcigpLCB0aGlzLl9sYXN0SW5wdXQgPSByLmlucHV0WzBdLCBcIm9iamVjdFwiICE9IF90eXBlb2Yoci5pbnB1dFswXSkgJiYgci5pbnB1dC50cmlnZ2VyKFwiZm9jdXNcIiksIHRoaXMuX2xhc3RJbnB1dCA9IG51bGwpO1xuICAgICAgfSwgX3VwZGF0ZUFsdGVybmF0ZTogZnVuY3Rpb24gX3VwZGF0ZUFsdGVybmF0ZShlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByID0gdGhpcy5fZ2V0KGUsIFwiYWx0RmllbGRcIik7ciAmJiAoaSA9IHRoaXMuX2dldChlLCBcImFsdEZvcm1hdFwiKSB8fCB0aGlzLl9nZXQoZSwgXCJkYXRlRm9ybWF0XCIpLCBuID0gdGhpcy5fZ2V0RGF0ZShlKSwgcyA9IHRoaXMuZm9ybWF0RGF0ZShpLCBuLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoZSkpLCB0KHIpLnZhbChzKSk7XG4gICAgICB9LCBub1dlZWtlbmRzOiBmdW5jdGlvbiBub1dlZWtlbmRzKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LmdldERheSgpO3JldHVybiBbZSA+IDAgJiYgZSA8IDYsIFwiXCJdO1xuICAgICAgfSwgaXNvODYwMVdlZWs6IGZ1bmN0aW9uIGlzbzg2MDFXZWVrKHQpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpID0gbmV3IERhdGUodC5nZXRUaW1lKCkpO3JldHVybiBpLnNldERhdGUoaS5nZXREYXRlKCkgKyA0IC0gKGkuZ2V0RGF5KCkgfHwgNykpLCBlID0gaS5nZXRUaW1lKCksIGkuc2V0TW9udGgoMCksIGkuc2V0RGF0ZSgxKSwgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChlIC0gaSkgLyA4NjRlNSkgLyA3KSArIDE7XG4gICAgICB9LCBwYXJzZURhdGU6IGZ1bmN0aW9uIHBhcnNlRGF0ZShlLCBpLCBuKSB7XG4gICAgICAgIGlmIChudWxsID09IGUgfHwgbnVsbCA9PSBpKSB0aHJvdyBcIkludmFsaWQgYXJndW1lbnRzXCI7aWYgKFwiXCIgPT09IChpID0gXCJvYmplY3RcIiA9PSAodHlwZW9mIGkgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihpKSkgPyBpLnRvU3RyaW5nKCkgOiBpICsgXCJcIikpIHJldHVybiBudWxsO3ZhciBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCA9IDAsXG4gICAgICAgICAgICB1ID0gKG4gPyBuLnNob3J0WWVhckN1dG9mZiA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLnNob3J0WWVhckN1dG9mZixcbiAgICAgICAgICAgIGMgPSBcInN0cmluZ1wiICE9IHR5cGVvZiB1ID8gdSA6IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArIHBhcnNlSW50KHUsIDEwKSxcbiAgICAgICAgICAgIGggPSAobiA/IG4uZGF5TmFtZXNTaG9ydCA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsXG4gICAgICAgICAgICBkID0gKG4gPyBuLmRheU5hbWVzIDogbnVsbCkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXMsXG4gICAgICAgICAgICBwID0gKG4gPyBuLm1vbnRoTmFtZXNTaG9ydCA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCxcbiAgICAgICAgICAgIGYgPSAobiA/IG4ubW9udGhOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsXG4gICAgICAgICAgICBnID0gLTEsXG4gICAgICAgICAgICBtID0gLTEsXG4gICAgICAgICAgICB2ID0gLTEsXG4gICAgICAgICAgICBfID0gLTEsXG4gICAgICAgICAgICBiID0gITEsXG4gICAgICAgICAgICB5ID0gZnVuY3Rpb24geSh0KSB7XG4gICAgICAgICAgdmFyIGkgPSBzICsgMSA8IGUubGVuZ3RoICYmIGUuY2hhckF0KHMgKyAxKSA9PT0gdDtyZXR1cm4gaSAmJiBzKyssIGk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBrID0gZnVuY3Rpb24gayh0KSB7XG4gICAgICAgICAgdmFyIGUgPSB5KHQpLFxuICAgICAgICAgICAgICBuID0gXCJAXCIgPT09IHQgPyAxNCA6IFwiIVwiID09PSB0ID8gMjAgOiBcInlcIiA9PT0gdCAmJiBlID8gNCA6IFwib1wiID09PSB0ID8gMyA6IDIsXG4gICAgICAgICAgICAgIHMgPSBcInlcIiA9PT0gdCA/IG4gOiAxLFxuICAgICAgICAgICAgICByID0gbmV3IFJlZ0V4cChcIl5cXFxcZHtcIiArIHMgKyBcIixcIiArIG4gKyBcIn1cIiksXG4gICAgICAgICAgICAgIG8gPSBpLnN1YnN0cmluZyhsKS5tYXRjaChyKTtpZiAoIW8pIHRocm93IFwiTWlzc2luZyBudW1iZXIgYXQgcG9zaXRpb24gXCIgKyBsO3JldHVybiBsICs9IG9bMF0ubGVuZ3RoLCBwYXJzZUludChvWzBdLCAxMCk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICB3ID0gZnVuY3Rpb24gdyhlLCBuLCBzKSB7XG4gICAgICAgICAgdmFyIHIgPSAtMSxcbiAgICAgICAgICAgICAgbyA9IHQubWFwKHkoZSkgPyBzIDogbiwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbW2UsIHRdXTtcbiAgICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gLSh0WzFdLmxlbmd0aCAtIGVbMV0ubGVuZ3RoKTtcbiAgICAgICAgICB9KTtpZiAodC5lYWNoKG8sIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGVbMV07aWYgKGkuc3Vic3RyKGwsIG4ubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBuLnRvTG93ZXJDYXNlKCkpIHJldHVybiByID0gZVswXSwgbCArPSBuLmxlbmd0aCwgITE7XG4gICAgICAgICAgfSksIC0xICE9PSByKSByZXR1cm4gciArIDE7dGhyb3cgXCJVbmtub3duIG5hbWUgYXQgcG9zaXRpb24gXCIgKyBsO1xuICAgICAgICB9LFxuICAgICAgICAgICAgeCA9IGZ1bmN0aW9uIHgoKSB7XG4gICAgICAgICAgaWYgKGkuY2hhckF0KGwpICE9PSBlLmNoYXJBdChzKSkgdGhyb3cgXCJVbmV4cGVjdGVkIGxpdGVyYWwgYXQgcG9zaXRpb24gXCIgKyBsO2wrKztcbiAgICAgICAgfTtmb3IgKHMgPSAwOyBzIDwgZS5sZW5ndGg7IHMrKykge1xuICAgICAgICAgIGlmIChiKSBcIidcIiAhPT0gZS5jaGFyQXQocykgfHwgeShcIidcIikgPyB4KCkgOiBiID0gITE7ZWxzZSBzd2l0Y2ggKGUuY2hhckF0KHMpKSB7Y2FzZSBcImRcIjpcbiAgICAgICAgICAgICAgdiA9IGsoXCJkXCIpO2JyZWFrO2Nhc2UgXCJEXCI6XG4gICAgICAgICAgICAgIHcoXCJEXCIsIGgsIGQpO2JyZWFrO2Nhc2UgXCJvXCI6XG4gICAgICAgICAgICAgIF8gPSBrKFwib1wiKTticmVhaztjYXNlIFwibVwiOlxuICAgICAgICAgICAgICBtID0gayhcIm1cIik7YnJlYWs7Y2FzZSBcIk1cIjpcbiAgICAgICAgICAgICAgbSA9IHcoXCJNXCIsIHAsIGYpO2JyZWFrO2Nhc2UgXCJ5XCI6XG4gICAgICAgICAgICAgIGcgPSBrKFwieVwiKTticmVhaztjYXNlIFwiQFwiOlxuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoayhcIkBcIikpLCBnID0gYS5nZXRGdWxsWWVhcigpLCBtID0gYS5nZXRNb250aCgpICsgMSwgdiA9IGEuZ2V0RGF0ZSgpO2JyZWFrO2Nhc2UgXCIhXCI6XG4gICAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSgoayhcIiFcIikgLSB0aGlzLl90aWNrc1RvMTk3MCkgLyAxZTQpLCBnID0gYS5nZXRGdWxsWWVhcigpLCBtID0gYS5nZXRNb250aCgpICsgMSwgdiA9IGEuZ2V0RGF0ZSgpO2JyZWFrO2Nhc2UgXCInXCI6XG4gICAgICAgICAgICAgIHkoXCInXCIpID8geCgpIDogYiA9ICEwO2JyZWFrO2RlZmF1bHQ6XG4gICAgICAgICAgICAgIHgoKTt9XG4gICAgICAgIH1pZiAobCA8IGkubGVuZ3RoICYmIChvID0gaS5zdWJzdHIobCksICEvXlxccysvLnRlc3QobykpKSB0aHJvdyBcIkV4dHJhL3VucGFyc2VkIGNoYXJhY3RlcnMgZm91bmQgaW4gZGF0ZTogXCIgKyBvO2lmICgtMSA9PT0gZyA/IGcgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgOiBnIDwgMTAwICYmIChnICs9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAtIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArIChnIDw9IGMgPyAwIDogLTEwMCkpLCBfID4gLTEpIGZvciAobSA9IDEsIHYgPSBfOyByID0gdGhpcy5fZ2V0RGF5c0luTW9udGgoZywgbSAtIDEpLCAhKHYgPD0gcik7KSB7XG4gICAgICAgICAgbSsrLCB2IC09IHI7XG4gICAgICAgIH1pZiAoKGEgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShnLCBtIC0gMSwgdikpKS5nZXRGdWxsWWVhcigpICE9PSBnIHx8IGEuZ2V0TW9udGgoKSArIDEgIT09IG0gfHwgYS5nZXREYXRlKCkgIT09IHYpIHRocm93IFwiSW52YWxpZCBkYXRlXCI7cmV0dXJuIGE7XG4gICAgICB9LCBBVE9NOiBcInl5LW1tLWRkXCIsIENPT0tJRTogXCJELCBkZCBNIHl5XCIsIElTT184NjAxOiBcInl5LW1tLWRkXCIsIFJGQ184MjI6IFwiRCwgZCBNIHlcIiwgUkZDXzg1MDogXCJERCwgZGQtTS15XCIsIFJGQ18xMDM2OiBcIkQsIGQgTSB5XCIsIFJGQ18xMTIzOiBcIkQsIGQgTSB5eVwiLCBSRkNfMjgyMjogXCJELCBkIE0geXlcIiwgUlNTOiBcIkQsIGQgTSB5XCIsIFRJQ0tTOiBcIiFcIiwgVElNRVNUQU1QOiBcIkBcIiwgVzNDOiBcInl5LW1tLWRkXCIsIF90aWNrc1RvMTk3MDogMjQgKiAoNzE4Njg1ICsgTWF0aC5mbG9vcig0OTIuNSkgLSBNYXRoLmZsb29yKDE5LjcpICsgTWF0aC5mbG9vcig0LjkyNSkpICogNjAgKiA2MCAqIDFlNywgZm9ybWF0RGF0ZTogZnVuY3Rpb24gZm9ybWF0RGF0ZSh0LCBlLCBpKSB7XG4gICAgICAgIGlmICghZSkgcmV0dXJuIFwiXCI7dmFyIG4sXG4gICAgICAgICAgICBzID0gKGkgPyBpLmRheU5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LFxuICAgICAgICAgICAgciA9IChpID8gaS5kYXlOYW1lcyA6IG51bGwpIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzLFxuICAgICAgICAgICAgbyA9IChpID8gaS5tb250aE5hbWVzU2hvcnQgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzU2hvcnQsXG4gICAgICAgICAgICBhID0gKGkgPyBpLm1vbnRoTmFtZXMgOiBudWxsKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzLFxuICAgICAgICAgICAgbCA9IGZ1bmN0aW9uIGwoZSkge1xuICAgICAgICAgIHZhciBpID0gbiArIDEgPCB0Lmxlbmd0aCAmJiB0LmNoYXJBdChuICsgMSkgPT09IGU7cmV0dXJuIGkgJiYgbisrLCBpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgdSA9IGZ1bmN0aW9uIHUodCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gXCJcIiArIGU7aWYgKGwodCkpIGZvciAoOyBuLmxlbmd0aCA8IGk7KSB7XG4gICAgICAgICAgICBuID0gXCIwXCIgKyBuO1xuICAgICAgICAgIH1yZXR1cm4gbjtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIGMgPSBmdW5jdGlvbiBjKHQsIGUsIGksIG4pIHtcbiAgICAgICAgICByZXR1cm4gbCh0KSA/IG5bZV0gOiBpW2VdO1xuICAgICAgICB9LFxuICAgICAgICAgICAgaCA9IFwiXCIsXG4gICAgICAgICAgICBkID0gITE7aWYgKGUpIGZvciAobiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgaWYgKGQpIFwiJ1wiICE9PSB0LmNoYXJBdChuKSB8fCBsKFwiJ1wiKSA/IGggKz0gdC5jaGFyQXQobikgOiBkID0gITE7ZWxzZSBzd2l0Y2ggKHQuY2hhckF0KG4pKSB7Y2FzZSBcImRcIjpcbiAgICAgICAgICAgICAgaCArPSB1KFwiZFwiLCBlLmdldERhdGUoKSwgMik7YnJlYWs7Y2FzZSBcIkRcIjpcbiAgICAgICAgICAgICAgaCArPSBjKFwiRFwiLCBlLmdldERheSgpLCBzLCByKTticmVhaztjYXNlIFwib1wiOlxuICAgICAgICAgICAgICBoICs9IHUoXCJvXCIsIE1hdGgucm91bmQoKG5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSwgZS5nZXRNb250aCgpLCBlLmdldERhdGUoKSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLCAwLCAwKS5nZXRUaW1lKCkpIC8gODY0ZTUpLCAzKTticmVhaztjYXNlIFwibVwiOlxuICAgICAgICAgICAgICBoICs9IHUoXCJtXCIsIGUuZ2V0TW9udGgoKSArIDEsIDIpO2JyZWFrO2Nhc2UgXCJNXCI6XG4gICAgICAgICAgICAgIGggKz0gYyhcIk1cIiwgZS5nZXRNb250aCgpLCBvLCBhKTticmVhaztjYXNlIFwieVwiOlxuICAgICAgICAgICAgICBoICs9IGwoXCJ5XCIpID8gZS5nZXRGdWxsWWVhcigpIDogKGUuZ2V0RnVsbFllYXIoKSAlIDEwMCA8IDEwID8gXCIwXCIgOiBcIlwiKSArIGUuZ2V0RnVsbFllYXIoKSAlIDEwMDticmVhaztjYXNlIFwiQFwiOlxuICAgICAgICAgICAgICBoICs9IGUuZ2V0VGltZSgpO2JyZWFrO2Nhc2UgXCIhXCI6XG4gICAgICAgICAgICAgIGggKz0gMWU0ICogZS5nZXRUaW1lKCkgKyB0aGlzLl90aWNrc1RvMTk3MDticmVhaztjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICBsKFwiJ1wiKSA/IGggKz0gXCInXCIgOiBkID0gITA7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgaCArPSB0LmNoYXJBdChuKTt9XG4gICAgICAgIH1yZXR1cm4gaDtcbiAgICAgIH0sIF9wb3NzaWJsZUNoYXJzOiBmdW5jdGlvbiBfcG9zc2libGVDaGFycyh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSA9IFwiXCIsXG4gICAgICAgICAgICBuID0gITEsXG4gICAgICAgICAgICBzID0gZnVuY3Rpb24gcyhpKSB7XG4gICAgICAgICAgdmFyIG4gPSBlICsgMSA8IHQubGVuZ3RoICYmIHQuY2hhckF0KGUgKyAxKSA9PT0gaTtyZXR1cm4gbiAmJiBlKyssIG47XG4gICAgICAgIH07Zm9yIChlID0gMDsgZSA8IHQubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICBpZiAobikgXCInXCIgIT09IHQuY2hhckF0KGUpIHx8IHMoXCInXCIpID8gaSArPSB0LmNoYXJBdChlKSA6IG4gPSAhMTtlbHNlIHN3aXRjaCAodC5jaGFyQXQoZSkpIHtjYXNlIFwiZFwiOmNhc2UgXCJtXCI6Y2FzZSBcInlcIjpjYXNlIFwiQFwiOlxuICAgICAgICAgICAgICBpICs9IFwiMDEyMzQ1Njc4OVwiO2JyZWFrO2Nhc2UgXCJEXCI6Y2FzZSBcIk1cIjpcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7Y2FzZSBcIidcIjpcbiAgICAgICAgICAgICAgcyhcIidcIikgPyBpICs9IFwiJ1wiIDogbiA9ICEwO2JyZWFrO2RlZmF1bHQ6XG4gICAgICAgICAgICAgIGkgKz0gdC5jaGFyQXQoZSk7fVxuICAgICAgICB9cmV0dXJuIGk7XG4gICAgICB9LCBfZ2V0OiBmdW5jdGlvbiBfZ2V0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdC5zZXR0aW5nc1tlXSA/IHQuc2V0dGluZ3NbZV0gOiB0aGlzLl9kZWZhdWx0c1tlXTtcbiAgICAgIH0sIF9zZXREYXRlRnJvbUZpZWxkOiBmdW5jdGlvbiBfc2V0RGF0ZUZyb21GaWVsZCh0LCBlKSB7XG4gICAgICAgIGlmICh0LmlucHV0LnZhbCgpICE9PSB0Lmxhc3RWYWwpIHtcbiAgICAgICAgICB2YXIgaSA9IHRoaXMuX2dldCh0LCBcImRhdGVGb3JtYXRcIiksXG4gICAgICAgICAgICAgIG4gPSB0Lmxhc3RWYWwgPSB0LmlucHV0ID8gdC5pbnB1dC52YWwoKSA6IG51bGwsXG4gICAgICAgICAgICAgIHMgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZSh0KSxcbiAgICAgICAgICAgICAgciA9IHMsXG4gICAgICAgICAgICAgIG8gPSB0aGlzLl9nZXRGb3JtYXRDb25maWcodCk7dHJ5IHtcbiAgICAgICAgICAgIHIgPSB0aGlzLnBhcnNlRGF0ZShpLCBuLCBvKSB8fCBzO1xuICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgIG4gPSBlID8gXCJcIiA6IG47XG4gICAgICAgICAgfXQuc2VsZWN0ZWREYXkgPSByLmdldERhdGUoKSwgdC5kcmF3TW9udGggPSB0LnNlbGVjdGVkTW9udGggPSByLmdldE1vbnRoKCksIHQuZHJhd1llYXIgPSB0LnNlbGVjdGVkWWVhciA9IHIuZ2V0RnVsbFllYXIoKSwgdC5jdXJyZW50RGF5ID0gbiA/IHIuZ2V0RGF0ZSgpIDogMCwgdC5jdXJyZW50TW9udGggPSBuID8gci5nZXRNb250aCgpIDogMCwgdC5jdXJyZW50WWVhciA9IG4gPyByLmdldEZ1bGxZZWFyKCkgOiAwLCB0aGlzLl9hZGp1c3RJbnN0RGF0ZSh0KTtcbiAgICAgICAgfVxuICAgICAgfSwgX2dldERlZmF1bHREYXRlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdERhdGUodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdHJpY3RNaW5NYXgodCwgdGhpcy5fZGV0ZXJtaW5lRGF0ZSh0LCB0aGlzLl9nZXQodCwgXCJkZWZhdWx0RGF0ZVwiKSwgbmV3IERhdGUoKSkpO1xuICAgICAgfSwgX2RldGVybWluZURhdGU6IGZ1bmN0aW9uIF9kZXRlcm1pbmVEYXRlKGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSBudWxsID09IGkgfHwgXCJcIiA9PT0gaSA/IG4gOiBcInN0cmluZ1wiID09IHR5cGVvZiBpID8gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHQuZGF0ZXBpY2tlci5wYXJzZURhdGUodC5kYXRlcGlja2VyLl9nZXQoZSwgXCJkYXRlRm9ybWF0XCIpLCBpLCB0LmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyhlKSk7XG4gICAgICAgICAgfSBjYXRjaCAodCkge31mb3IgKHZhciBuID0gKGkudG9Mb3dlckNhc2UoKS5tYXRjaCgvXmMvKSA/IHQuZGF0ZXBpY2tlci5fZ2V0RGF0ZShlKSA6IG51bGwpIHx8IG5ldyBEYXRlKCksIHMgPSBuLmdldEZ1bGxZZWFyKCksIHIgPSBuLmdldE1vbnRoKCksIG8gPSBuLmdldERhdGUoKSwgYSA9IC8oWytcXC1dP1swLTldKylcXHMqKGR8RHx3fFd8bXxNfHl8WSk/L2csIGwgPSBhLmV4ZWMoaSk7IGw7KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxbMl0gfHwgXCJkXCIpIHtjYXNlIFwiZFwiOmNhc2UgXCJEXCI6XG4gICAgICAgICAgICAgICAgbyArPSBwYXJzZUludChsWzFdLCAxMCk7YnJlYWs7Y2FzZSBcIndcIjpjYXNlIFwiV1wiOlxuICAgICAgICAgICAgICAgIG8gKz0gNyAqIHBhcnNlSW50KGxbMV0sIDEwKTticmVhaztjYXNlIFwibVwiOmNhc2UgXCJNXCI6XG4gICAgICAgICAgICAgICAgciArPSBwYXJzZUludChsWzFdLCAxMCksIG8gPSBNYXRoLm1pbihvLCB0LmRhdGVwaWNrZXIuX2dldERheXNJbk1vbnRoKHMsIHIpKTticmVhaztjYXNlIFwieVwiOmNhc2UgXCJZXCI6XG4gICAgICAgICAgICAgICAgcyArPSBwYXJzZUludChsWzFdLCAxMCksIG8gPSBNYXRoLm1pbihvLCB0LmRhdGVwaWNrZXIuX2dldERheXNJbk1vbnRoKHMsIHIpKTt9bCA9IGEuZXhlYyhpKTtcbiAgICAgICAgICB9cmV0dXJuIG5ldyBEYXRlKHMsIHIsIG8pO1xuICAgICAgICB9KGkpIDogXCJudW1iZXJcIiA9PSB0eXBlb2YgaSA/IGlzTmFOKGkpID8gbiA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdmFyIGUgPSBuZXcgRGF0ZSgpO3JldHVybiBlLnNldERhdGUoZS5nZXREYXRlKCkgKyB0KSwgZTtcbiAgICAgICAgfShpKSA6IG5ldyBEYXRlKGkuZ2V0VGltZSgpKTtyZXR1cm4gKHMgPSBzICYmIFwiSW52YWxpZCBEYXRlXCIgPT09IHMudG9TdHJpbmcoKSA/IG4gOiBzKSAmJiAocy5zZXRIb3VycygwKSwgcy5zZXRNaW51dGVzKDApLCBzLnNldFNlY29uZHMoMCksIHMuc2V0TWlsbGlzZWNvbmRzKDApKSwgdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3Qocyk7XG4gICAgICB9LCBfZGF5bGlnaHRTYXZpbmdBZGp1c3Q6IGZ1bmN0aW9uIF9kYXlsaWdodFNhdmluZ0FkanVzdCh0KSB7XG4gICAgICAgIHJldHVybiB0ID8gKHQuc2V0SG91cnModC5nZXRIb3VycygpID4gMTIgPyB0LmdldEhvdXJzKCkgKyAyIDogMCksIHQpIDogbnVsbDtcbiAgICAgIH0sIF9zZXREYXRlOiBmdW5jdGlvbiBfc2V0RGF0ZSh0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuID0gIWUsXG4gICAgICAgICAgICBzID0gdC5zZWxlY3RlZE1vbnRoLFxuICAgICAgICAgICAgciA9IHQuc2VsZWN0ZWRZZWFyLFxuICAgICAgICAgICAgbyA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KHQsIHRoaXMuX2RldGVybWluZURhdGUodCwgZSwgbmV3IERhdGUoKSkpO3Quc2VsZWN0ZWREYXkgPSB0LmN1cnJlbnREYXkgPSBvLmdldERhdGUoKSwgdC5kcmF3TW9udGggPSB0LnNlbGVjdGVkTW9udGggPSB0LmN1cnJlbnRNb250aCA9IG8uZ2V0TW9udGgoKSwgdC5kcmF3WWVhciA9IHQuc2VsZWN0ZWRZZWFyID0gdC5jdXJyZW50WWVhciA9IG8uZ2V0RnVsbFllYXIoKSwgcyA9PT0gdC5zZWxlY3RlZE1vbnRoICYmIHIgPT09IHQuc2VsZWN0ZWRZZWFyIHx8IGkgfHwgdGhpcy5fbm90aWZ5Q2hhbmdlKHQpLCB0aGlzLl9hZGp1c3RJbnN0RGF0ZSh0KSwgdC5pbnB1dCAmJiB0LmlucHV0LnZhbChuID8gXCJcIiA6IHRoaXMuX2Zvcm1hdERhdGUodCkpO1xuICAgICAgfSwgX2dldERhdGU6IGZ1bmN0aW9uIF9nZXREYXRlKHQpIHtcbiAgICAgICAgdmFyIGUgPSAhdC5jdXJyZW50WWVhciB8fCB0LmlucHV0ICYmIFwiXCIgPT09IHQuaW5wdXQudmFsKCkgPyBudWxsIDogdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodC5jdXJyZW50WWVhciwgdC5jdXJyZW50TW9udGgsIHQuY3VycmVudERheSkpO3JldHVybiBlO1xuICAgICAgfSwgX2F0dGFjaEhhbmRsZXJzOiBmdW5jdGlvbiBfYXR0YWNoSGFuZGxlcnMoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuX2dldChlLCBcInN0ZXBNb250aHNcIiksXG4gICAgICAgICAgICBuID0gXCIjXCIgKyBlLmlkLnJlcGxhY2UoL1xcXFxcXFxcL2csIFwiXFxcXFwiKTtlLmRwRGl2LmZpbmQoXCJbZGF0YS1oYW5kbGVyXVwiKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0geyBwcmV2OiBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgICAgICAgICB0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUobiwgLWksIFwiTVwiKTtcbiAgICAgICAgICAgIH0sIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICAgIHQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShuLCAraSwgXCJNXCIpO1xuICAgICAgICAgICAgfSwgaGlkZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgICAgICAgICAgdC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuICAgICAgICAgICAgfSwgdG9kYXk6IGZ1bmN0aW9uIHRvZGF5KCkge1xuICAgICAgICAgICAgICB0LmRhdGVwaWNrZXIuX2dvdG9Ub2RheShuKTtcbiAgICAgICAgICAgIH0sIHNlbGVjdERheTogZnVuY3Rpb24gc2VsZWN0RGF5KCkge1xuICAgICAgICAgICAgICByZXR1cm4gdC5kYXRlcGlja2VyLl9zZWxlY3REYXkobiwgK3RoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1tb250aFwiKSwgK3RoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS15ZWFyXCIpLCB0aGlzKSwgITE7XG4gICAgICAgICAgICB9LCBzZWxlY3RNb250aDogZnVuY3Rpb24gc2VsZWN0TW9udGgoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0LmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhcihuLCB0aGlzLCBcIk1cIiksICExO1xuICAgICAgICAgICAgfSwgc2VsZWN0WWVhcjogZnVuY3Rpb24gc2VsZWN0WWVhcigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHQuZGF0ZXBpY2tlci5fc2VsZWN0TW9udGhZZWFyKG4sIHRoaXMsIFwiWVwiKSwgITE7XG4gICAgICAgICAgICB9IH07dCh0aGlzKS5vbih0aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtZXZlbnRcIiksIGVbdGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhhbmRsZXJcIildKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfZ2VuZXJhdGVIVE1MOiBmdW5jdGlvbiBfZ2VuZXJhdGVIVE1MKHQpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBoLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIHAsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB2LFxuICAgICAgICAgICAgXyxcbiAgICAgICAgICAgIGIsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIHcsXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgQyxcbiAgICAgICAgICAgIEQsXG4gICAgICAgICAgICBTLFxuICAgICAgICAgICAgVCxcbiAgICAgICAgICAgIEksXG4gICAgICAgICAgICBBLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIE0sXG4gICAgICAgICAgICBQLFxuICAgICAgICAgICAgRSxcbiAgICAgICAgICAgIE8sXG4gICAgICAgICAgICBILFxuICAgICAgICAgICAgTixcbiAgICAgICAgICAgIEIsXG4gICAgICAgICAgICBGLFxuICAgICAgICAgICAgTCxcbiAgICAgICAgICAgIHogPSBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgVyA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHouZ2V0RnVsbFllYXIoKSwgei5nZXRNb250aCgpLCB6LmdldERhdGUoKSkpLFxuICAgICAgICAgICAgUiA9IHRoaXMuX2dldCh0LCBcImlzUlRMXCIpLFxuICAgICAgICAgICAgJCA9IHRoaXMuX2dldCh0LCBcInNob3dCdXR0b25QYW5lbFwiKSxcbiAgICAgICAgICAgIHEgPSB0aGlzLl9nZXQodCwgXCJoaWRlSWZOb1ByZXZOZXh0XCIpLFxuICAgICAgICAgICAgVSA9IHRoaXMuX2dldCh0LCBcIm5hdmlnYXRpb25Bc0RhdGVGb3JtYXRcIiksXG4gICAgICAgICAgICBLID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHModCksXG4gICAgICAgICAgICBZID0gdGhpcy5fZ2V0KHQsIFwic2hvd0N1cnJlbnRBdFBvc1wiKSxcbiAgICAgICAgICAgIFYgPSB0aGlzLl9nZXQodCwgXCJzdGVwTW9udGhzXCIpLFxuICAgICAgICAgICAgRyA9IDEgIT09IEtbMF0gfHwgMSAhPT0gS1sxXSxcbiAgICAgICAgICAgIFggPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCh0LmN1cnJlbnREYXkgPyBuZXcgRGF0ZSh0LmN1cnJlbnRZZWFyLCB0LmN1cnJlbnRNb250aCwgdC5jdXJyZW50RGF5KSA6IG5ldyBEYXRlKDk5OTksIDksIDkpKSxcbiAgICAgICAgICAgIEogPSB0aGlzLl9nZXRNaW5NYXhEYXRlKHQsIFwibWluXCIpLFxuICAgICAgICAgICAgWiA9IHRoaXMuX2dldE1pbk1heERhdGUodCwgXCJtYXhcIiksXG4gICAgICAgICAgICBRID0gdC5kcmF3TW9udGggLSBZLFxuICAgICAgICAgICAgdHQgPSB0LmRyYXdZZWFyO2lmIChRIDwgMCAmJiAoUSArPSAxMiwgdHQtLSksIFopIGZvciAoZSA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKFouZ2V0RnVsbFllYXIoKSwgWi5nZXRNb250aCgpIC0gS1swXSAqIEtbMV0gKyAxLCBaLmdldERhdGUoKSkpLCBlID0gSiAmJiBlIDwgSiA/IEogOiBlOyB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0dCwgUSwgMSkpID4gZTspIHtcbiAgICAgICAgICAtLVEgPCAwICYmIChRID0gMTEsIHR0LS0pO1xuICAgICAgICB9Zm9yICh0LmRyYXdNb250aCA9IFEsIHQuZHJhd1llYXIgPSB0dCwgaSA9IHRoaXMuX2dldCh0LCBcInByZXZUZXh0XCIpLCBpID0gVSA/IHRoaXMuZm9ybWF0RGF0ZShpLCB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0dCwgUSAtIFYsIDEpKSwgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKHQpKSA6IGksIG4gPSB0aGlzLl9jYW5BZGp1c3RNb250aCh0LCAtMSwgdHQsIFEpID8gXCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwnIGRhdGEtaGFuZGxlcj0ncHJldicgZGF0YS1ldmVudD0nY2xpY2snIHRpdGxlPSdcIiArIGkgKyBcIic+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtXCIgKyAoUiA/IFwiZVwiIDogXCJ3XCIpICsgXCInPlwiICsgaSArIFwiPC9zcGFuPjwvYT5cIiA6IHEgPyBcIlwiIDogXCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSdcIiArIGkgKyBcIic+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtXCIgKyAoUiA/IFwiZVwiIDogXCJ3XCIpICsgXCInPlwiICsgaSArIFwiPC9zcGFuPjwvYT5cIiwgcyA9IHRoaXMuX2dldCh0LCBcIm5leHRUZXh0XCIpLCBzID0gVSA/IHRoaXMuZm9ybWF0RGF0ZShzLCB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0dCwgUSArIFYsIDEpKSwgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKHQpKSA6IHMsIHIgPSB0aGlzLl9jYW5BZGp1c3RNb250aCh0LCAxLCB0dCwgUSkgPyBcIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSduZXh0JyBkYXRhLWV2ZW50PSdjbGljaycgdGl0bGU9J1wiICsgcyArIFwiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIiArIChSID8gXCJ3XCIgOiBcImVcIikgKyBcIic+XCIgKyBzICsgXCI8L3NwYW4+PC9hPlwiIDogcSA/IFwiXCIgOiBcIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCB1aS1zdGF0ZS1kaXNhYmxlZCcgdGl0bGU9J1wiICsgcyArIFwiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIiArIChSID8gXCJ3XCIgOiBcImVcIikgKyBcIic+XCIgKyBzICsgXCI8L3NwYW4+PC9hPlwiLCBvID0gdGhpcy5fZ2V0KHQsIFwiY3VycmVudFRleHRcIiksIGEgPSB0aGlzLl9nZXQodCwgXCJnb3RvQ3VycmVudFwiKSAmJiB0LmN1cnJlbnREYXkgPyBYIDogVywgbyA9IFUgPyB0aGlzLmZvcm1hdERhdGUobywgYSwgdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKHQpKSA6IG8sIGwgPSB0LmlubGluZSA/IFwiXCIgOiBcIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ndWktZGF0ZXBpY2tlci1jbG9zZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLXByaW9yaXR5LXByaW1hcnkgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSdoaWRlJyBkYXRhLWV2ZW50PSdjbGljayc+XCIgKyB0aGlzLl9nZXQodCwgXCJjbG9zZVRleHRcIikgKyBcIjwvYnV0dG9uPlwiLCB1ID0gJCA/IFwiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci1idXR0b25wYW5lIHVpLXdpZGdldC1jb250ZW50Jz5cIiArIChSID8gbCA6IFwiXCIpICsgKHRoaXMuX2lzSW5SYW5nZSh0LCBhKSA/IFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSd1aS1kYXRlcGlja2VyLWN1cnJlbnQgdWktc3RhdGUtZGVmYXVsdCB1aS1wcmlvcml0eS1zZWNvbmRhcnkgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSd0b2RheScgZGF0YS1ldmVudD0nY2xpY2snPlwiICsgbyArIFwiPC9idXR0b24+XCIgOiBcIlwiKSArIChSID8gXCJcIiA6IGwpICsgXCI8L2Rpdj5cIiA6IFwiXCIsIGMgPSBwYXJzZUludCh0aGlzLl9nZXQodCwgXCJmaXJzdERheVwiKSwgMTApLCBjID0gaXNOYU4oYykgPyAwIDogYywgaCA9IHRoaXMuX2dldCh0LCBcInNob3dXZWVrXCIpLCBkID0gdGhpcy5fZ2V0KHQsIFwiZGF5TmFtZXNcIiksIHAgPSB0aGlzLl9nZXQodCwgXCJkYXlOYW1lc01pblwiKSwgZiA9IHRoaXMuX2dldCh0LCBcIm1vbnRoTmFtZXNcIiksIGcgPSB0aGlzLl9nZXQodCwgXCJtb250aE5hbWVzU2hvcnRcIiksIG0gPSB0aGlzLl9nZXQodCwgXCJiZWZvcmVTaG93RGF5XCIpLCB2ID0gdGhpcy5fZ2V0KHQsIFwic2hvd090aGVyTW9udGhzXCIpLCBfID0gdGhpcy5fZ2V0KHQsIFwic2VsZWN0T3RoZXJNb250aHNcIiksIGIgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZSh0KSwgeSA9IFwiXCIsIHcgPSAwOyB3IDwgS1swXTsgdysrKSB7XG4gICAgICAgICAgZm9yICh4ID0gXCJcIiwgdGhpcy5tYXhSb3dzID0gNCwgQyA9IDA7IEMgPCBLWzFdOyBDKyspIHtcbiAgICAgICAgICAgIGlmIChEID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodHQsIFEsIHQuc2VsZWN0ZWREYXkpKSwgUyA9IFwiIHVpLWNvcm5lci1hbGxcIiwgVCA9IFwiXCIsIEcpIHtcbiAgICAgICAgICAgICAgaWYgKFQgKz0gXCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWdyb3VwXCIsIEtbMV0gPiAxKSBzd2l0Y2ggKEMpIHtjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBUICs9IFwiIHVpLWRhdGVwaWNrZXItZ3JvdXAtZmlyc3RcIiwgUyA9IFwiIHVpLWNvcm5lci1cIiArIChSID8gXCJyaWdodFwiIDogXCJsZWZ0XCIpO2JyZWFrO2Nhc2UgS1sxXSAtIDE6XG4gICAgICAgICAgICAgICAgICBUICs9IFwiIHVpLWRhdGVwaWNrZXItZ3JvdXAtbGFzdFwiLCBTID0gXCIgdWktY29ybmVyLVwiICsgKFIgPyBcImxlZnRcIiA6IFwicmlnaHRcIik7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIFQgKz0gXCIgdWktZGF0ZXBpY2tlci1ncm91cC1taWRkbGVcIiwgUyA9IFwiXCI7fVQgKz0gXCInPlwiO1xuICAgICAgICAgICAgfWZvciAoVCArPSBcIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItaGVhZGVyIHVpLXdpZGdldC1oZWFkZXIgdWktaGVscGVyLWNsZWFyZml4XCIgKyBTICsgXCInPlwiICsgKC9hbGx8bGVmdC8udGVzdChTKSAmJiAwID09PSB3ID8gUiA/IHIgOiBuIDogXCJcIikgKyAoL2FsbHxyaWdodC8udGVzdChTKSAmJiAwID09PSB3ID8gUiA/IG4gOiByIDogXCJcIikgKyB0aGlzLl9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlcih0LCBRLCB0dCwgSiwgWiwgdyA+IDAgfHwgQyA+IDAsIGYsIGcpICsgXCI8L2Rpdj48dGFibGUgY2xhc3M9J3VpLWRhdGVwaWNrZXItY2FsZW5kYXInPjx0aGVhZD48dHI+XCIsIEkgPSBoID8gXCI8dGggY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPlwiICsgdGhpcy5fZ2V0KHQsIFwid2Vla0hlYWRlclwiKSArIFwiPC90aD5cIiA6IFwiXCIsIGsgPSAwOyBrIDwgNzsgaysrKSB7XG4gICAgICAgICAgICAgIEkgKz0gXCI8dGggc2NvcGU9J2NvbCdcIiArICgoayArIGMgKyA2KSAlIDcgPj0gNSA/IFwiIGNsYXNzPSd1aS1kYXRlcGlja2VyLXdlZWstZW5kJ1wiIDogXCJcIikgKyBcIj48c3BhbiB0aXRsZT0nXCIgKyBkW0EgPSAoayArIGMpICUgN10gKyBcIic+XCIgKyBwW0FdICsgXCI8L3NwYW4+PC90aD5cIjtcbiAgICAgICAgICAgIH1mb3IgKFQgKz0gSSArIFwiPC90cj48L3RoZWFkPjx0Ym9keT5cIiwgaiA9IHRoaXMuX2dldERheXNJbk1vbnRoKHR0LCBRKSwgdHQgPT09IHQuc2VsZWN0ZWRZZWFyICYmIFEgPT09IHQuc2VsZWN0ZWRNb250aCAmJiAodC5zZWxlY3RlZERheSA9IE1hdGgubWluKHQuc2VsZWN0ZWREYXksIGopKSwgTSA9ICh0aGlzLl9nZXRGaXJzdERheU9mTW9udGgodHQsIFEpIC0gYyArIDcpICUgNywgUCA9IE1hdGguY2VpbCgoTSArIGopIC8gNyksIEUgPSBHICYmIHRoaXMubWF4Um93cyA+IFAgPyB0aGlzLm1heFJvd3MgOiBQLCB0aGlzLm1heFJvd3MgPSBFLCBPID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodHQsIFEsIDEgLSBNKSksIEggPSAwOyBIIDwgRTsgSCsrKSB7XG4gICAgICAgICAgICAgIGZvciAoVCArPSBcIjx0cj5cIiwgTiA9IGggPyBcIjx0ZCBjbGFzcz0ndWktZGF0ZXBpY2tlci13ZWVrLWNvbCc+XCIgKyB0aGlzLl9nZXQodCwgXCJjYWxjdWxhdGVXZWVrXCIpKE8pICsgXCI8L3RkPlwiIDogXCJcIiwgayA9IDA7IGsgPCA3OyBrKyspIHtcbiAgICAgICAgICAgICAgICBCID0gbSA/IG0uYXBwbHkodC5pbnB1dCA/IHQuaW5wdXRbMF0gOiBudWxsLCBbT10pIDogWyEwLCBcIlwiXSwgRiA9IE8uZ2V0TW9udGgoKSAhPT0gUSwgTCA9IEYgJiYgIV8gfHwgIUJbMF0gfHwgSiAmJiBPIDwgSiB8fCBaICYmIE8gPiBaLCBOICs9IFwiPHRkIGNsYXNzPSdcIiArICgoayArIGMgKyA2KSAlIDcgPj0gNSA/IFwiIHVpLWRhdGVwaWNrZXItd2Vlay1lbmRcIiA6IFwiXCIpICsgKEYgPyBcIiB1aS1kYXRlcGlja2VyLW90aGVyLW1vbnRoXCIgOiBcIlwiKSArIChPLmdldFRpbWUoKSA9PT0gRC5nZXRUaW1lKCkgJiYgUSA9PT0gdC5zZWxlY3RlZE1vbnRoICYmIHQuX2tleUV2ZW50IHx8IGIuZ2V0VGltZSgpID09PSBPLmdldFRpbWUoKSAmJiBiLmdldFRpbWUoKSA9PT0gRC5nZXRUaW1lKCkgPyBcIiBcIiArIHRoaXMuX2RheU92ZXJDbGFzcyA6IFwiXCIpICsgKEwgPyBcIiBcIiArIHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzICsgXCIgdWktc3RhdGUtZGlzYWJsZWRcIiA6IFwiXCIpICsgKEYgJiYgIXYgPyBcIlwiIDogXCIgXCIgKyBCWzFdICsgKE8uZ2V0VGltZSgpID09PSBYLmdldFRpbWUoKSA/IFwiIFwiICsgdGhpcy5fY3VycmVudENsYXNzIDogXCJcIikgKyAoTy5nZXRUaW1lKCkgPT09IFcuZ2V0VGltZSgpID8gXCIgdWktZGF0ZXBpY2tlci10b2RheVwiIDogXCJcIikpICsgXCInXCIgKyAoRiAmJiAhdiB8fCAhQlsyXSA/IFwiXCIgOiBcIiB0aXRsZT0nXCIgKyBCWzJdLnJlcGxhY2UoLycvZywgXCImIzM5O1wiKSArIFwiJ1wiKSArIChMID8gXCJcIiA6IFwiIGRhdGEtaGFuZGxlcj0nc2VsZWN0RGF5JyBkYXRhLWV2ZW50PSdjbGljaycgZGF0YS1tb250aD0nXCIgKyBPLmdldE1vbnRoKCkgKyBcIicgZGF0YS15ZWFyPSdcIiArIE8uZ2V0RnVsbFllYXIoKSArIFwiJ1wiKSArIFwiPlwiICsgKEYgJiYgIXYgPyBcIiYjeGEwO1wiIDogTCA/IFwiPHNwYW4gY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHQnPlwiICsgTy5nZXREYXRlKCkgKyBcIjwvc3Bhbj5cIiA6IFwiPGEgY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHRcIiArIChPLmdldFRpbWUoKSA9PT0gVy5nZXRUaW1lKCkgPyBcIiB1aS1zdGF0ZS1oaWdobGlnaHRcIiA6IFwiXCIpICsgKE8uZ2V0VGltZSgpID09PSBYLmdldFRpbWUoKSA/IFwiIHVpLXN0YXRlLWFjdGl2ZVwiIDogXCJcIikgKyAoRiA/IFwiIHVpLXByaW9yaXR5LXNlY29uZGFyeVwiIDogXCJcIikgKyBcIicgaHJlZj0nIyc+XCIgKyBPLmdldERhdGUoKSArIFwiPC9hPlwiKSArIFwiPC90ZD5cIiwgTy5zZXREYXRlKE8uZ2V0RGF0ZSgpICsgMSksIE8gPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChPKTtcbiAgICAgICAgICAgICAgfVQgKz0gTiArIFwiPC90cj5cIjtcbiAgICAgICAgICAgIH0rK1EgPiAxMSAmJiAoUSA9IDAsIHR0KyspLCBUICs9IFwiPC90Ym9keT48L3RhYmxlPlwiICsgKEcgPyBcIjwvZGl2PlwiICsgKEtbMF0gPiAwICYmIEMgPT09IEtbMV0gLSAxID8gXCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLXJvdy1icmVhayc+PC9kaXY+XCIgOiBcIlwiKSA6IFwiXCIpLCB4ICs9IFQ7XG4gICAgICAgICAgfXkgKz0geDtcbiAgICAgICAgfXJldHVybiB5ICs9IHUsIHQuX2tleUV2ZW50ID0gITEsIHk7XG4gICAgICB9LCBfZ2VuZXJhdGVNb250aFllYXJIZWFkZXI6IGZ1bmN0aW9uIF9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlcih0LCBlLCBpLCBuLCBzLCByLCBvLCBhKSB7XG4gICAgICAgIHZhciBsLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBoLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIHAsXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIG0gPSB0aGlzLl9nZXQodCwgXCJjaGFuZ2VNb250aFwiKSxcbiAgICAgICAgICAgIHYgPSB0aGlzLl9nZXQodCwgXCJjaGFuZ2VZZWFyXCIpLFxuICAgICAgICAgICAgXyA9IHRoaXMuX2dldCh0LCBcInNob3dNb250aEFmdGVyWWVhclwiKSxcbiAgICAgICAgICAgIGIgPSBcIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItdGl0bGUnPlwiLFxuICAgICAgICAgICAgeSA9IFwiXCI7aWYgKHIgfHwgIW0pIHkgKz0gXCI8c3BhbiBjbGFzcz0ndWktZGF0ZXBpY2tlci1tb250aCc+XCIgKyBvW2VdICsgXCI8L3NwYW4+XCI7ZWxzZSB7XG4gICAgICAgICAgZm9yIChsID0gbiAmJiBuLmdldEZ1bGxZZWFyKCkgPT09IGksIHUgPSBzICYmIHMuZ2V0RnVsbFllYXIoKSA9PT0gaSwgeSArPSBcIjxzZWxlY3QgY2xhc3M9J3VpLWRhdGVwaWNrZXItbW9udGgnIGRhdGEtaGFuZGxlcj0nc2VsZWN0TW9udGgnIGRhdGEtZXZlbnQ9J2NoYW5nZSc+XCIsIGMgPSAwOyBjIDwgMTI7IGMrKykge1xuICAgICAgICAgICAgKCFsIHx8IGMgPj0gbi5nZXRNb250aCgpKSAmJiAoIXUgfHwgYyA8PSBzLmdldE1vbnRoKCkpICYmICh5ICs9IFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBjICsgXCInXCIgKyAoYyA9PT0gZSA/IFwiIHNlbGVjdGVkPSdzZWxlY3RlZCdcIiA6IFwiXCIpICsgXCI+XCIgKyBhW2NdICsgXCI8L29wdGlvbj5cIik7XG4gICAgICAgICAgfXkgKz0gXCI8L3NlbGVjdD5cIjtcbiAgICAgICAgfWlmIChfIHx8IChiICs9IHkgKyAoIXIgJiYgbSAmJiB2ID8gXCJcIiA6IFwiJiN4YTA7XCIpKSwgIXQueWVhcnNodG1sKSBpZiAodC55ZWFyc2h0bWwgPSBcIlwiLCByIHx8ICF2KSBiICs9IFwiPHNwYW4gY2xhc3M9J3VpLWRhdGVwaWNrZXIteWVhcic+XCIgKyBpICsgXCI8L3NwYW4+XCI7ZWxzZSB7XG4gICAgICAgICAgZm9yIChoID0gdGhpcy5fZ2V0KHQsIFwieWVhclJhbmdlXCIpLnNwbGl0KFwiOlwiKSwgZCA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSwgZiA9IChwID0gZnVuY3Rpb24gcCh0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQubWF0Y2goL2NbK1xcLV0uKi8pID8gaSArIHBhcnNlSW50KHQuc3Vic3RyaW5nKDEpLCAxMCkgOiB0Lm1hdGNoKC9bK1xcLV0uKi8pID8gZCArIHBhcnNlSW50KHQsIDEwKSA6IHBhcnNlSW50KHQsIDEwKTtyZXR1cm4gaXNOYU4oZSkgPyBkIDogZTtcbiAgICAgICAgICB9KShoWzBdKSwgZyA9IE1hdGgubWF4KGYsIHAoaFsxXSB8fCBcIlwiKSksIGYgPSBuID8gTWF0aC5tYXgoZiwgbi5nZXRGdWxsWWVhcigpKSA6IGYsIGcgPSBzID8gTWF0aC5taW4oZywgcy5nZXRGdWxsWWVhcigpKSA6IGcsIHQueWVhcnNodG1sICs9IFwiPHNlbGVjdCBjbGFzcz0ndWktZGF0ZXBpY2tlci15ZWFyJyBkYXRhLWhhbmRsZXI9J3NlbGVjdFllYXInIGRhdGEtZXZlbnQ9J2NoYW5nZSc+XCI7IGYgPD0gZzsgZisrKSB7XG4gICAgICAgICAgICB0LnllYXJzaHRtbCArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgZiArIFwiJ1wiICsgKGYgPT09IGkgPyBcIiBzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgOiBcIlwiKSArIFwiPlwiICsgZiArIFwiPC9vcHRpb24+XCI7XG4gICAgICAgICAgfXQueWVhcnNodG1sICs9IFwiPC9zZWxlY3Q+XCIsIGIgKz0gdC55ZWFyc2h0bWwsIHQueWVhcnNodG1sID0gbnVsbDtcbiAgICAgICAgfXJldHVybiBiICs9IHRoaXMuX2dldCh0LCBcInllYXJTdWZmaXhcIiksIF8gJiYgKGIgKz0gKCFyICYmIG0gJiYgdiA/IFwiXCIgOiBcIiYjeGEwO1wiKSArIHkpLCBiICs9IFwiPC9kaXY+XCI7XG4gICAgICB9LCBfYWRqdXN0SW5zdERhdGU6IGZ1bmN0aW9uIF9hZGp1c3RJbnN0RGF0ZSh0LCBlLCBpKSB7XG4gICAgICAgIHZhciBuID0gdC5zZWxlY3RlZFllYXIgKyAoXCJZXCIgPT09IGkgPyBlIDogMCksXG4gICAgICAgICAgICBzID0gdC5zZWxlY3RlZE1vbnRoICsgKFwiTVwiID09PSBpID8gZSA6IDApLFxuICAgICAgICAgICAgciA9IE1hdGgubWluKHQuc2VsZWN0ZWREYXksIHRoaXMuX2dldERheXNJbk1vbnRoKG4sIHMpKSArIChcIkRcIiA9PT0gaSA/IGUgOiAwKSxcbiAgICAgICAgICAgIG8gPSB0aGlzLl9yZXN0cmljdE1pbk1heCh0LCB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShuLCBzLCByKSkpO3Quc2VsZWN0ZWREYXkgPSBvLmdldERhdGUoKSwgdC5kcmF3TW9udGggPSB0LnNlbGVjdGVkTW9udGggPSBvLmdldE1vbnRoKCksIHQuZHJhd1llYXIgPSB0LnNlbGVjdGVkWWVhciA9IG8uZ2V0RnVsbFllYXIoKSwgXCJNXCIgIT09IGkgJiYgXCJZXCIgIT09IGkgfHwgdGhpcy5fbm90aWZ5Q2hhbmdlKHQpO1xuICAgICAgfSwgX3Jlc3RyaWN0TWluTWF4OiBmdW5jdGlvbiBfcmVzdHJpY3RNaW5NYXgodCwgZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMuX2dldE1pbk1heERhdGUodCwgXCJtaW5cIiksXG4gICAgICAgICAgICBuID0gdGhpcy5fZ2V0TWluTWF4RGF0ZSh0LCBcIm1heFwiKSxcbiAgICAgICAgICAgIHMgPSBpICYmIGUgPCBpID8gaSA6IGU7cmV0dXJuIG4gJiYgcyA+IG4gPyBuIDogcztcbiAgICAgIH0sIF9ub3RpZnlDaGFuZ2U6IGZ1bmN0aW9uIF9ub3RpZnlDaGFuZ2UodCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuX2dldCh0LCBcIm9uQ2hhbmdlTW9udGhZZWFyXCIpO2UgJiYgZS5hcHBseSh0LmlucHV0ID8gdC5pbnB1dFswXSA6IG51bGwsIFt0LnNlbGVjdGVkWWVhciwgdC5zZWxlY3RlZE1vbnRoICsgMSwgdF0pO1xuICAgICAgfSwgX2dldE51bWJlck9mTW9udGhzOiBmdW5jdGlvbiBfZ2V0TnVtYmVyT2ZNb250aHModCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuX2dldCh0LCBcIm51bWJlck9mTW9udGhzXCIpO3JldHVybiBudWxsID09IGUgPyBbMSwgMV0gOiBcIm51bWJlclwiID09IHR5cGVvZiBlID8gWzEsIGVdIDogZTtcbiAgICAgIH0sIF9nZXRNaW5NYXhEYXRlOiBmdW5jdGlvbiBfZ2V0TWluTWF4RGF0ZSh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXRlcm1pbmVEYXRlKHQsIHRoaXMuX2dldCh0LCBlICsgXCJEYXRlXCIpLCBudWxsKTtcbiAgICAgIH0sIF9nZXREYXlzSW5Nb250aDogZnVuY3Rpb24gX2dldERheXNJbk1vbnRoKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIDMyIC0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodCwgZSwgMzIpKS5nZXREYXRlKCk7XG4gICAgICB9LCBfZ2V0Rmlyc3REYXlPZk1vbnRoOiBmdW5jdGlvbiBfZ2V0Rmlyc3REYXlPZk1vbnRoKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHQsIGUsIDEpLmdldERheSgpO1xuICAgICAgfSwgX2NhbkFkanVzdE1vbnRoOiBmdW5jdGlvbiBfY2FuQWRqdXN0TW9udGgodCwgZSwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IHRoaXMuX2dldE51bWJlck9mTW9udGhzKHQpLFxuICAgICAgICAgICAgciA9IHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGksIG4gKyAoZSA8IDAgPyBlIDogc1swXSAqIHNbMV0pLCAxKSk7cmV0dXJuIGUgPCAwICYmIHIuc2V0RGF0ZSh0aGlzLl9nZXREYXlzSW5Nb250aChyLmdldEZ1bGxZZWFyKCksIHIuZ2V0TW9udGgoKSkpLCB0aGlzLl9pc0luUmFuZ2UodCwgcik7XG4gICAgICB9LCBfaXNJblJhbmdlOiBmdW5jdGlvbiBfaXNJblJhbmdlKHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyA9IHRoaXMuX2dldE1pbk1heERhdGUodCwgXCJtaW5cIiksXG4gICAgICAgICAgICByID0gdGhpcy5fZ2V0TWluTWF4RGF0ZSh0LCBcIm1heFwiKSxcbiAgICAgICAgICAgIG8gPSBudWxsLFxuICAgICAgICAgICAgYSA9IG51bGwsXG4gICAgICAgICAgICBsID0gdGhpcy5fZ2V0KHQsIFwieWVhclJhbmdlXCIpO3JldHVybiBsICYmIChpID0gbC5zcGxpdChcIjpcIiksIG4gPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksIG8gPSBwYXJzZUludChpWzBdLCAxMCksIGEgPSBwYXJzZUludChpWzFdLCAxMCksIGlbMF0ubWF0Y2goL1srXFwtXS4qLykgJiYgKG8gKz0gbiksIGlbMV0ubWF0Y2goL1srXFwtXS4qLykgJiYgKGEgKz0gbikpLCAoIXMgfHwgZS5nZXRUaW1lKCkgPj0gcy5nZXRUaW1lKCkpICYmICghciB8fCBlLmdldFRpbWUoKSA8PSByLmdldFRpbWUoKSkgJiYgKCFvIHx8IGUuZ2V0RnVsbFllYXIoKSA+PSBvKSAmJiAoIWEgfHwgZS5nZXRGdWxsWWVhcigpIDw9IGEpO1xuICAgICAgfSwgX2dldEZvcm1hdENvbmZpZzogZnVuY3Rpb24gX2dldEZvcm1hdENvbmZpZyh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5fZ2V0KHQsIFwic2hvcnRZZWFyQ3V0b2ZmXCIpO3JldHVybiB7IHNob3J0WWVhckN1dG9mZjogZSA9IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgPyBlIDogbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICUgMTAwICsgcGFyc2VJbnQoZSwgMTApLCBkYXlOYW1lc1Nob3J0OiB0aGlzLl9nZXQodCwgXCJkYXlOYW1lc1Nob3J0XCIpLCBkYXlOYW1lczogdGhpcy5fZ2V0KHQsIFwiZGF5TmFtZXNcIiksIG1vbnRoTmFtZXNTaG9ydDogdGhpcy5fZ2V0KHQsIFwibW9udGhOYW1lc1Nob3J0XCIpLCBtb250aE5hbWVzOiB0aGlzLl9nZXQodCwgXCJtb250aE5hbWVzXCIpIH07XG4gICAgICB9LCBfZm9ybWF0RGF0ZTogZnVuY3Rpb24gX2Zvcm1hdERhdGUodCwgZSwgaSwgbikge1xuICAgICAgICBlIHx8ICh0LmN1cnJlbnREYXkgPSB0LnNlbGVjdGVkRGF5LCB0LmN1cnJlbnRNb250aCA9IHQuc2VsZWN0ZWRNb250aCwgdC5jdXJyZW50WWVhciA9IHQuc2VsZWN0ZWRZZWFyKTt2YXIgcyA9IGUgPyBcIm9iamVjdFwiID09ICh0eXBlb2YgZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGUpKSA/IGUgOiB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShuLCBpLCBlKSkgOiB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0LmN1cnJlbnRZZWFyLCB0LmN1cnJlbnRNb250aCwgdC5jdXJyZW50RGF5KSk7cmV0dXJuIHRoaXMuZm9ybWF0RGF0ZSh0aGlzLl9nZXQodCwgXCJkYXRlRm9ybWF0XCIpLCBzLCB0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpO1xuICAgICAgfSB9KSwgdC5mbi5kYXRlcGlja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVybiB0aGlzO3QuZGF0ZXBpY2tlci5pbml0aWFsaXplZCB8fCAodChkb2N1bWVudCkub24oXCJtb3VzZWRvd25cIiwgdC5kYXRlcGlja2VyLl9jaGVja0V4dGVybmFsQ2xpY2spLCB0LmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQgPSAhMCksIDAgPT09IHQoXCIjXCIgKyB0LmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoICYmIHQoXCJib2R5XCIpLmFwcGVuZCh0LmRhdGVwaWNrZXIuZHBEaXYpO3ZhciBpID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtyZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSB8fCBcImlzRGlzYWJsZWRcIiAhPT0gZSAmJiBcImdldERhdGVcIiAhPT0gZSAmJiBcIndpZGdldFwiICE9PSBlID8gXCJvcHRpb25cIiA9PT0gZSAmJiAyID09PSBhcmd1bWVudHMubGVuZ3RoICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGFyZ3VtZW50c1sxXSA/IHQuZGF0ZXBpY2tlcltcIl9cIiArIGUgKyBcIkRhdGVwaWNrZXJcIl0uYXBwbHkodC5kYXRlcGlja2VyLCBbdGhpc1swXV0uY29uY2F0KGkpKSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyB0LmRhdGVwaWNrZXJbXCJfXCIgKyBlICsgXCJEYXRlcGlja2VyXCJdLmFwcGx5KHQuZGF0ZXBpY2tlciwgW3RoaXNdLmNvbmNhdChpKSkgOiB0LmRhdGVwaWNrZXIuX2F0dGFjaERhdGVwaWNrZXIodGhpcywgZSk7XG4gICAgICB9KSA6IHQuZGF0ZXBpY2tlcltcIl9cIiArIGUgKyBcIkRhdGVwaWNrZXJcIl0uYXBwbHkodC5kYXRlcGlja2VyLCBbdGhpc1swXV0uY29uY2F0KGkpKTtcbiAgICB9LCB0LmRhdGVwaWNrZXIgPSBuZXcgZCgpLCB0LmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQgPSAhMSwgdC5kYXRlcGlja2VyLnV1aWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgdC5kYXRlcGlja2VyLnZlcnNpb24gPSBcIjEuMTIuMVwiLCB0LmRhdGVwaWNrZXIsIHQudWkuaWUgPSAhIS9tc2llIFtcXHcuXSsvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTt2YXIgbSA9ICExO3QoZG9jdW1lbnQpLm9uKFwibW91c2V1cFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBtID0gITE7XG4gICAgfSksIHQud2lkZ2V0KFwidWkubW91c2VcIiwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCBvcHRpb25zOiB7IGNhbmNlbDogXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0LCBvcHRpb25cIiwgZGlzdGFuY2U6IDEsIGRlbGF5OiAwIH0sIF9tb3VzZUluaXQ6IGZ1bmN0aW9uIF9tb3VzZUluaXQoKSB7XG4gICAgICAgIHZhciBlID0gdGhpczt0aGlzLmVsZW1lbnQub24oXCJtb3VzZWRvd24uXCIgKyB0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGUuX21vdXNlRG93bih0KTtcbiAgICAgICAgfSkub24oXCJjbGljay5cIiArIHRoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAoITAgPT09IHQuZGF0YShpLnRhcmdldCwgZS53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIikpIHJldHVybiB0LnJlbW92ZURhdGEoaS50YXJnZXQsIGUud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIpLCBpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCAhMTtcbiAgICAgICAgfSksIHRoaXMuc3RhcnRlZCA9ICExO1xuICAgICAgfSwgX21vdXNlRGVzdHJveTogZnVuY3Rpb24gX21vdXNlRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9mZihcIi5cIiArIHRoaXMud2lkZ2V0TmFtZSksIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlICYmIHRoaXMuZG9jdW1lbnQub2ZmKFwibW91c2Vtb3ZlLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkub2ZmKFwibW91c2V1cC5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlKTtcbiAgICAgIH0sIF9tb3VzZURvd246IGZ1bmN0aW9uIF9tb3VzZURvd24oZSkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICB0aGlzLl9tb3VzZU1vdmVkID0gITEsIHRoaXMuX21vdXNlU3RhcnRlZCAmJiB0aGlzLl9tb3VzZVVwKGUpLCB0aGlzLl9tb3VzZURvd25FdmVudCA9IGU7dmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgICBuID0gMSA9PT0gZS53aGljaCxcbiAgICAgICAgICAgICAgcyA9ICEoXCJzdHJpbmdcIiAhPSB0eXBlb2YgdGhpcy5vcHRpb25zLmNhbmNlbCB8fCAhZS50YXJnZXQubm9kZU5hbWUpICYmIHQoZS50YXJnZXQpLmNsb3Nlc3QodGhpcy5vcHRpb25zLmNhbmNlbCkubGVuZ3RoO3JldHVybiAhKG4gJiYgIXMgJiYgdGhpcy5fbW91c2VDYXB0dXJlKGUpICYmICh0aGlzLm1vdXNlRGVsYXlNZXQgPSAhdGhpcy5vcHRpb25zLmRlbGF5LCB0aGlzLm1vdXNlRGVsYXlNZXQgfHwgKHRoaXMuX21vdXNlRGVsYXlUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaS5tb3VzZURlbGF5TWV0ID0gITA7XG4gICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmRlbGF5KSksIHRoaXMuX21vdXNlRGlzdGFuY2VNZXQoZSkgJiYgdGhpcy5fbW91c2VEZWxheU1ldChlKSAmJiAodGhpcy5fbW91c2VTdGFydGVkID0gITEgIT09IHRoaXMuX21vdXNlU3RhcnQoZSksICF0aGlzLl9tb3VzZVN0YXJ0ZWQpID8gKGUucHJldmVudERlZmF1bHQoKSwgMCkgOiAoITAgPT09IHQuZGF0YShlLnRhcmdldCwgdGhpcy53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIikgJiYgdC5yZW1vdmVEYXRhKGUudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiKSwgdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIGkuX21vdXNlTW92ZSh0KTtcbiAgICAgICAgICB9LCB0aGlzLl9tb3VzZVVwRGVsZWdhdGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIGkuX21vdXNlVXAodCk7XG4gICAgICAgICAgfSwgdGhpcy5kb2N1bWVudC5vbihcIm1vdXNlbW92ZS5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUpLm9uKFwibW91c2V1cC5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBtID0gITAsIDApKSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9tb3VzZU1vdmU6IGZ1bmN0aW9uIF9tb3VzZU1vdmUoZSkge1xuICAgICAgICBpZiAodGhpcy5fbW91c2VNb3ZlZCkge1xuICAgICAgICAgIGlmICh0LnVpLmllICYmICghZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA8IDkpICYmICFlLmJ1dHRvbikgcmV0dXJuIHRoaXMuX21vdXNlVXAoZSk7aWYgKCFlLndoaWNoKSBpZiAoZS5vcmlnaW5hbEV2ZW50LmFsdEtleSB8fCBlLm9yaWdpbmFsRXZlbnQuY3RybEtleSB8fCBlLm9yaWdpbmFsRXZlbnQubWV0YUtleSB8fCBlLm9yaWdpbmFsRXZlbnQuc2hpZnRLZXkpIHRoaXMuaWdub3JlTWlzc2luZ1doaWNoID0gITA7ZWxzZSBpZiAoIXRoaXMuaWdub3JlTWlzc2luZ1doaWNoKSByZXR1cm4gdGhpcy5fbW91c2VVcChlKTtcbiAgICAgICAgfXJldHVybiAoZS53aGljaCB8fCBlLmJ1dHRvbikgJiYgKHRoaXMuX21vdXNlTW92ZWQgPSAhMCksIHRoaXMuX21vdXNlU3RhcnRlZCA/ICh0aGlzLl9tb3VzZURyYWcoZSksIGUucHJldmVudERlZmF1bHQoKSkgOiAodGhpcy5fbW91c2VEaXN0YW5jZU1ldChlKSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KGUpICYmICh0aGlzLl9tb3VzZVN0YXJ0ZWQgPSAhMSAhPT0gdGhpcy5fbW91c2VTdGFydCh0aGlzLl9tb3VzZURvd25FdmVudCwgZSksIHRoaXMuX21vdXNlU3RhcnRlZCA/IHRoaXMuX21vdXNlRHJhZyhlKSA6IHRoaXMuX21vdXNlVXAoZSkpLCAhdGhpcy5fbW91c2VTdGFydGVkKTtcbiAgICAgIH0sIF9tb3VzZVVwOiBmdW5jdGlvbiBfbW91c2VVcChlKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQub2ZmKFwibW91c2Vtb3ZlLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkub2ZmKFwibW91c2V1cC5cIiArIHRoaXMud2lkZ2V0TmFtZSwgdGhpcy5fbW91c2VVcERlbGVnYXRlKSwgdGhpcy5fbW91c2VTdGFydGVkICYmICh0aGlzLl9tb3VzZVN0YXJ0ZWQgPSAhMSwgZS50YXJnZXQgPT09IHRoaXMuX21vdXNlRG93bkV2ZW50LnRhcmdldCAmJiB0LmRhdGEoZS50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIsICEwKSwgdGhpcy5fbW91c2VTdG9wKGUpKSwgdGhpcy5fbW91c2VEZWxheVRpbWVyICYmIChjbGVhclRpbWVvdXQodGhpcy5fbW91c2VEZWxheVRpbWVyKSwgZGVsZXRlIHRoaXMuX21vdXNlRGVsYXlUaW1lciksIHRoaXMuaWdub3JlTWlzc2luZ1doaWNoID0gITEsIG0gPSAhMSwgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgX21vdXNlRGlzdGFuY2VNZXQ6IGZ1bmN0aW9uIF9tb3VzZURpc3RhbmNlTWV0KHQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGguYWJzKHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VYIC0gdC5wYWdlWCksIE1hdGguYWJzKHRoaXMuX21vdXNlRG93bkV2ZW50LnBhZ2VZIC0gdC5wYWdlWSkpID49IHRoaXMub3B0aW9ucy5kaXN0YW5jZTtcbiAgICAgIH0sIF9tb3VzZURlbGF5TWV0OiBmdW5jdGlvbiBfbW91c2VEZWxheU1ldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW91c2VEZWxheU1ldDtcbiAgICAgIH0sIF9tb3VzZVN0YXJ0OiBmdW5jdGlvbiBfbW91c2VTdGFydCgpIHt9LCBfbW91c2VEcmFnOiBmdW5jdGlvbiBfbW91c2VEcmFnKCkge30sIF9tb3VzZVN0b3A6IGZ1bmN0aW9uIF9tb3VzZVN0b3AoKSB7fSwgX21vdXNlQ2FwdHVyZTogZnVuY3Rpb24gX21vdXNlQ2FwdHVyZSgpIHtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4gPSB7IGFkZDogZnVuY3Rpb24gYWRkKGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMsXG4gICAgICAgICAgICByID0gdC51aVtlXS5wcm90b3R5cGU7Zm9yIChzIGluIG4pIHtcbiAgICAgICAgICByLnBsdWdpbnNbc10gPSByLnBsdWdpbnNbc10gfHwgW10sIHIucGx1Z2luc1tzXS5wdXNoKFtpLCBuW3NdXSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGNhbGw6IGZ1bmN0aW9uIGNhbGwodCwgZSwgaSwgbikge1xuICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgIHIgPSB0LnBsdWdpbnNbZV07aWYgKHIgJiYgKG4gfHwgdC5lbGVtZW50WzBdLnBhcmVudE5vZGUgJiYgMTEgIT09IHQuZWxlbWVudFswXS5wYXJlbnROb2RlLm5vZGVUeXBlKSkgZm9yIChzID0gMDsgcyA8IHIubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICB0Lm9wdGlvbnNbcltzXVswXV0gJiYgcltzXVsxXS5hcHBseSh0LmVsZW1lbnQsIGkpO1xuICAgICAgICB9XG4gICAgICB9IH0sIHQudWkuc2FmZUJsdXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZSAmJiBcImJvZHlcIiAhPT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICYmIHQoZSkudHJpZ2dlcihcImJsdXJcIik7XG4gICAgfSxcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgRHJhZ2dhYmxlIDEuMTIuMVxuICAgICAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAgICAgKlxuICAgICAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB0LndpZGdldChcInVpLmRyYWdnYWJsZVwiLCB0LnVpLm1vdXNlLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIHdpZGdldEV2ZW50UHJlZml4OiBcImRyYWdcIiwgb3B0aW9uczogeyBhZGRDbGFzc2VzOiAhMCwgYXBwZW5kVG86IFwicGFyZW50XCIsIGF4aXM6ICExLCBjb25uZWN0VG9Tb3J0YWJsZTogITEsIGNvbnRhaW5tZW50OiAhMSwgY3Vyc29yOiBcImF1dG9cIiwgY3Vyc29yQXQ6ICExLCBncmlkOiAhMSwgaGFuZGxlOiAhMSwgaGVscGVyOiBcIm9yaWdpbmFsXCIsIGlmcmFtZUZpeDogITEsIG9wYWNpdHk6ICExLCByZWZyZXNoUG9zaXRpb25zOiAhMSwgcmV2ZXJ0OiAhMSwgcmV2ZXJ0RHVyYXRpb246IDUwMCwgc2NvcGU6IFwiZGVmYXVsdFwiLCBzY3JvbGw6ICEwLCBzY3JvbGxTZW5zaXRpdml0eTogMjAsIHNjcm9sbFNwZWVkOiAyMCwgc25hcDogITEsIHNuYXBNb2RlOiBcImJvdGhcIiwgc25hcFRvbGVyYW5jZTogMjAsIHN0YWNrOiAhMSwgekluZGV4OiAhMSwgZHJhZzogbnVsbCwgc3RhcnQ6IG51bGwsIHN0b3A6IG51bGwgfSwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgXCJvcmlnaW5hbFwiID09PSB0aGlzLm9wdGlvbnMuaGVscGVyICYmIHRoaXMuX3NldFBvc2l0aW9uUmVsYXRpdmUoKSwgdGhpcy5vcHRpb25zLmFkZENsYXNzZXMgJiYgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1kcmFnZ2FibGVcIiksIHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpLCB0aGlzLl9tb3VzZUluaXQoKTtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24odCwgZSkge1xuICAgICAgICB0aGlzLl9zdXBlcih0LCBlKSwgXCJoYW5kbGVcIiA9PT0gdCAmJiAodGhpcy5fcmVtb3ZlSGFuZGxlQ2xhc3NOYW1lKCksIHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpKTtcbiAgICAgIH0sIF9kZXN0cm95OiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgICAgKHRoaXMuaGVscGVyIHx8IHRoaXMuZWxlbWVudCkuaXMoXCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpID8gdGhpcy5kZXN0cm95T25DbGVhciA9ICEwIDogKHRoaXMuX3JlbW92ZUhhbmRsZUNsYXNzTmFtZSgpLCB0aGlzLl9tb3VzZURlc3Ryb3koKSk7XG4gICAgICB9LCBfbW91c2VDYXB0dXJlOiBmdW5jdGlvbiBfbW91c2VDYXB0dXJlKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLm9wdGlvbnM7cmV0dXJuICEodGhpcy5oZWxwZXIgfHwgaS5kaXNhYmxlZCB8fCB0KGUudGFyZ2V0KS5jbG9zZXN0KFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIikubGVuZ3RoID4gMCB8fCAodGhpcy5oYW5kbGUgPSB0aGlzLl9nZXRIYW5kbGUoZSksICF0aGlzLmhhbmRsZSB8fCAodGhpcy5fYmx1ckFjdGl2ZUVsZW1lbnQoZSksIHRoaXMuX2Jsb2NrRnJhbWVzKCEwID09PSBpLmlmcmFtZUZpeCA/IFwiaWZyYW1lXCIgOiBpLmlmcmFtZUZpeCksIDApKSk7XG4gICAgICB9LCBfYmxvY2tGcmFtZXM6IGZ1bmN0aW9uIF9ibG9ja0ZyYW1lcyhlKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lQmxvY2tzID0gdGhpcy5kb2N1bWVudC5maW5kKGUpLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0KHRoaXMpO3JldHVybiB0KFwiPGRpdj5cIikuY3NzKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKS5hcHBlbmRUbyhlLnBhcmVudCgpKS5vdXRlcldpZHRoKGUub3V0ZXJXaWR0aCgpKS5vdXRlckhlaWdodChlLm91dGVySGVpZ2h0KCkpLm9mZnNldChlLm9mZnNldCgpKVswXTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfdW5ibG9ja0ZyYW1lczogZnVuY3Rpb24gX3VuYmxvY2tGcmFtZXMoKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lQmxvY2tzICYmICh0aGlzLmlmcmFtZUJsb2Nrcy5yZW1vdmUoKSwgZGVsZXRlIHRoaXMuaWZyYW1lQmxvY2tzKTtcbiAgICAgIH0sIF9ibHVyQWN0aXZlRWxlbWVudDogZnVuY3Rpb24gX2JsdXJBY3RpdmVFbGVtZW50KGUpIHtcbiAgICAgICAgdmFyIGkgPSB0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pLFxuICAgICAgICAgICAgbiA9IHQoZS50YXJnZXQpO24uY2xvc2VzdChpKS5sZW5ndGggfHwgdC51aS5zYWZlQmx1cihpKTtcbiAgICAgIH0sIF9tb3VzZVN0YXJ0OiBmdW5jdGlvbiBfbW91c2VTdGFydChlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zO3JldHVybiB0aGlzLmhlbHBlciA9IHRoaXMuX2NyZWF0ZUhlbHBlcihlKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsIFwidWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpLCB0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksIHQudWkuZGRtYW5hZ2VyICYmICh0LnVpLmRkbWFuYWdlci5jdXJyZW50ID0gdGhpcyksIHRoaXMuX2NhY2hlTWFyZ2lucygpLCB0aGlzLmNzc1Bvc2l0aW9uID0gdGhpcy5oZWxwZXIuY3NzKFwicG9zaXRpb25cIiksIHRoaXMuc2Nyb2xsUGFyZW50ID0gdGhpcy5oZWxwZXIuc2Nyb2xsUGFyZW50KCEwKSwgdGhpcy5vZmZzZXRQYXJlbnQgPSB0aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKSwgdGhpcy5oYXNGaXhlZEFuY2VzdG9yID0gdGhpcy5oZWxwZXIucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZml4ZWRcIiA9PT0gdCh0aGlzKS5jc3MoXCJwb3NpdGlvblwiKTtcbiAgICAgICAgfSkubGVuZ3RoID4gMCwgdGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKSwgdGhpcy5fcmVmcmVzaE9mZnNldHMoZSksIHRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gPSB0aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKGUsICExKSwgdGhpcy5vcmlnaW5hbFBhZ2VYID0gZS5wYWdlWCwgdGhpcy5vcmlnaW5hbFBhZ2VZID0gZS5wYWdlWSwgaS5jdXJzb3JBdCAmJiB0aGlzLl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyKGkuY3Vyc29yQXQpLCB0aGlzLl9zZXRDb250YWlubWVudCgpLCAhMSA9PT0gdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsIGUpID8gKHRoaXMuX2NsZWFyKCksICExKSA6ICh0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksIHQudWkuZGRtYW5hZ2VyICYmICFpLmRyb3BCZWhhdmlvdXIgJiYgdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZSksIHRoaXMuX21vdXNlRHJhZyhlLCAhMCksIHQudWkuZGRtYW5hZ2VyICYmIHQudWkuZGRtYW5hZ2VyLmRyYWdTdGFydCh0aGlzLCBlKSwgITApO1xuICAgICAgfSwgX3JlZnJlc2hPZmZzZXRzOiBmdW5jdGlvbiBfcmVmcmVzaE9mZnNldHModCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IHsgdG9wOiB0aGlzLnBvc2l0aW9uQWJzLnRvcCAtIHRoaXMubWFyZ2lucy50b3AsIGxlZnQ6IHRoaXMucG9zaXRpb25BYnMubGVmdCAtIHRoaXMubWFyZ2lucy5sZWZ0LCBzY3JvbGw6ICExLCBwYXJlbnQ6IHRoaXMuX2dldFBhcmVudE9mZnNldCgpLCByZWxhdGl2ZTogdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKSB9LCB0aGlzLm9mZnNldC5jbGljayA9IHsgbGVmdDogdC5wYWdlWCAtIHRoaXMub2Zmc2V0LmxlZnQsIHRvcDogdC5wYWdlWSAtIHRoaXMub2Zmc2V0LnRvcCB9O1xuICAgICAgfSwgX21vdXNlRHJhZzogZnVuY3Rpb24gX21vdXNlRHJhZyhlLCBpKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0ZpeGVkQW5jZXN0b3IgJiYgKHRoaXMub2Zmc2V0LnBhcmVudCA9IHRoaXMuX2dldFBhcmVudE9mZnNldCgpKSwgdGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSwgITApLCB0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5fY29udmVydFBvc2l0aW9uVG8oXCJhYnNvbHV0ZVwiKSwgIWkpIHtcbiAgICAgICAgICB2YXIgbiA9IHRoaXMuX3VpSGFzaCgpO2lmICghMSA9PT0gdGhpcy5fdHJpZ2dlcihcImRyYWdcIiwgZSwgbikpIHJldHVybiB0aGlzLl9tb3VzZVVwKG5ldyB0LkV2ZW50KFwibW91c2V1cFwiLCBlKSksICExO3RoaXMucG9zaXRpb24gPSBuLnBvc2l0aW9uO1xuICAgICAgICB9cmV0dXJuIHRoaXMuaGVscGVyWzBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQgKyBcInB4XCIsIHRoaXMuaGVscGVyWzBdLnN0eWxlLnRvcCA9IHRoaXMucG9zaXRpb24udG9wICsgXCJweFwiLCB0LnVpLmRkbWFuYWdlciAmJiB0LnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsIGUpLCAhMTtcbiAgICAgIH0sIF9tb3VzZVN0b3A6IGZ1bmN0aW9uIF9tb3VzZVN0b3AoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICBuID0gITE7cmV0dXJuIHQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciAmJiAobiA9IHQudWkuZGRtYW5hZ2VyLmRyb3AodGhpcywgZSkpLCB0aGlzLmRyb3BwZWQgJiYgKG4gPSB0aGlzLmRyb3BwZWQsIHRoaXMuZHJvcHBlZCA9ICExKSwgXCJpbnZhbGlkXCIgPT09IHRoaXMub3B0aW9ucy5yZXZlcnQgJiYgIW4gfHwgXCJ2YWxpZFwiID09PSB0aGlzLm9wdGlvbnMucmV2ZXJ0ICYmIG4gfHwgITAgPT09IHRoaXMub3B0aW9ucy5yZXZlcnQgfHwgdC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5yZXZlcnQpICYmIHRoaXMub3B0aW9ucy5yZXZlcnQuY2FsbCh0aGlzLmVsZW1lbnQsIG4pID8gdCh0aGlzLmhlbHBlcikuYW5pbWF0ZSh0aGlzLm9yaWdpbmFsUG9zaXRpb24sIHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnREdXJhdGlvbiwgMTApLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgITEgIT09IGkuX3RyaWdnZXIoXCJzdG9wXCIsIGUpICYmIGkuX2NsZWFyKCk7XG4gICAgICAgIH0pIDogITEgIT09IHRoaXMuX3RyaWdnZXIoXCJzdG9wXCIsIGUpICYmIHRoaXMuX2NsZWFyKCksICExO1xuICAgICAgfSwgX21vdXNlVXA6IGZ1bmN0aW9uIF9tb3VzZVVwKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VuYmxvY2tGcmFtZXMoKSwgdC51aS5kZG1hbmFnZXIgJiYgdC51aS5kZG1hbmFnZXIuZHJhZ1N0b3AodGhpcywgZSksIHRoaXMuaGFuZGxlRWxlbWVudC5pcyhlLnRhcmdldCkgJiYgdGhpcy5lbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiKSwgdC51aS5tb3VzZS5wcm90b3R5cGUuX21vdXNlVXAuY2FsbCh0aGlzLCBlKTtcbiAgICAgIH0sIGNhbmNlbDogZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWxwZXIuaXMoXCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpID8gdGhpcy5fbW91c2VVcChuZXcgdC5FdmVudChcIm1vdXNldXBcIiwgeyB0YXJnZXQ6IHRoaXMuZWxlbWVudFswXSB9KSkgOiB0aGlzLl9jbGVhcigpLCB0aGlzO1xuICAgICAgfSwgX2dldEhhbmRsZTogZnVuY3Rpb24gX2dldEhhbmRsZShlKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5vcHRpb25zLmhhbmRsZSB8fCAhIXQoZS50YXJnZXQpLmNsb3Nlc3QodGhpcy5lbGVtZW50LmZpbmQodGhpcy5vcHRpb25zLmhhbmRsZSkpLmxlbmd0aDtcbiAgICAgIH0sIF9zZXRIYW5kbGVDbGFzc05hbWU6IGZ1bmN0aW9uIF9zZXRIYW5kbGVDbGFzc05hbWUoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRWxlbWVudCA9IHRoaXMub3B0aW9ucy5oYW5kbGUgPyB0aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaGFuZGxlKSA6IHRoaXMuZWxlbWVudCwgdGhpcy5fYWRkQ2xhc3ModGhpcy5oYW5kbGVFbGVtZW50LCBcInVpLWRyYWdnYWJsZS1oYW5kbGVcIik7XG4gICAgICB9LCBfcmVtb3ZlSGFuZGxlQ2xhc3NOYW1lOiBmdW5jdGlvbiBfcmVtb3ZlSGFuZGxlQ2xhc3NOYW1lKCkge1xuICAgICAgICB0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmhhbmRsZUVsZW1lbnQsIFwidWktZHJhZ2dhYmxlLWhhbmRsZVwiKTtcbiAgICAgIH0sIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIF9jcmVhdGVIZWxwZXIoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIG4gPSB0LmlzRnVuY3Rpb24oaS5oZWxwZXIpLFxuICAgICAgICAgICAgcyA9IG4gPyB0KGkuaGVscGVyLmFwcGx5KHRoaXMuZWxlbWVudFswXSwgW2VdKSkgOiBcImNsb25lXCIgPT09IGkuaGVscGVyID8gdGhpcy5lbGVtZW50LmNsb25lKCkucmVtb3ZlQXR0cihcImlkXCIpIDogdGhpcy5lbGVtZW50O3JldHVybiBzLnBhcmVudHMoXCJib2R5XCIpLmxlbmd0aCB8fCBzLmFwcGVuZFRvKFwicGFyZW50XCIgPT09IGkuYXBwZW5kVG8gPyB0aGlzLmVsZW1lbnRbMF0ucGFyZW50Tm9kZSA6IGkuYXBwZW5kVG8pLCBuICYmIHNbMF0gPT09IHRoaXMuZWxlbWVudFswXSAmJiB0aGlzLl9zZXRQb3NpdGlvblJlbGF0aXZlKCksIHNbMF0gPT09IHRoaXMuZWxlbWVudFswXSB8fCAvKGZpeGVkfGFic29sdXRlKS8udGVzdChzLmNzcyhcInBvc2l0aW9uXCIpKSB8fCBzLmNzcyhcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIiksIHM7XG4gICAgICB9LCBfc2V0UG9zaXRpb25SZWxhdGl2ZTogZnVuY3Rpb24gX3NldFBvc2l0aW9uUmVsYXRpdmUoKSB7XG4gICAgICAgIC9eKD86cnxhfGYpLy50ZXN0KHRoaXMuZWxlbWVudC5jc3MoXCJwb3NpdGlvblwiKSkgfHwgKHRoaXMuZWxlbWVudFswXS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIik7XG4gICAgICB9LCBfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24gX2FkanVzdE9mZnNldEZyb21IZWxwZXIoZSkge1xuICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChlID0gZS5zcGxpdChcIiBcIikpLCB0LmlzQXJyYXkoZSkgJiYgKGUgPSB7IGxlZnQ6ICtlWzBdLCB0b3A6ICtlWzFdIHx8IDAgfSksIFwibGVmdFwiIGluIGUgJiYgKHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSBlLmxlZnQgKyB0aGlzLm1hcmdpbnMubGVmdCksIFwicmlnaHRcIiBpbiBlICYmICh0aGlzLm9mZnNldC5jbGljay5sZWZ0ID0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIGUucmlnaHQgKyB0aGlzLm1hcmdpbnMubGVmdCksIFwidG9wXCIgaW4gZSAmJiAodGhpcy5vZmZzZXQuY2xpY2sudG9wID0gZS50b3AgKyB0aGlzLm1hcmdpbnMudG9wKSwgXCJib3R0b21cIiBpbiBlICYmICh0aGlzLm9mZnNldC5jbGljay50b3AgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIGUuYm90dG9tICsgdGhpcy5tYXJnaW5zLnRvcCk7XG4gICAgICB9LCBfaXNSb290Tm9kZTogZnVuY3Rpb24gX2lzUm9vdE5vZGUodCkge1xuICAgICAgICByZXR1cm4gKC8oaHRtbHxib2R5KS9pLnRlc3QodC50YWdOYW1lKSB8fCB0ID09PSB0aGlzLmRvY3VtZW50WzBdXG4gICAgICAgICk7XG4gICAgICB9LCBfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbiBfZ2V0UGFyZW50T2Zmc2V0KCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMub2Zmc2V0UGFyZW50Lm9mZnNldCgpLFxuICAgICAgICAgICAgaSA9IHRoaXMuZG9jdW1lbnRbMF07cmV0dXJuIFwiYWJzb2x1dGVcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiAmJiB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gaSAmJiB0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkgJiYgKGUubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCksIGUudG9wICs9IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpKSwgdGhpcy5faXNSb290Tm9kZSh0aGlzLm9mZnNldFBhcmVudFswXSkgJiYgKGUgPSB7IHRvcDogMCwgbGVmdDogMCB9KSwgeyB0b3A6IGUudG9wICsgKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLCAxMCkgfHwgMCksIGxlZnQ6IGUubGVmdCArIChwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksIDEwKSB8fCAwKSB9O1xuICAgICAgfSwgX2dldFJlbGF0aXZlT2Zmc2V0OiBmdW5jdGlvbiBfZ2V0UmVsYXRpdmVPZmZzZXQoKSB7XG4gICAgICAgIGlmIChcInJlbGF0aXZlXCIgIT09IHRoaXMuY3NzUG9zaXRpb24pIHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O3ZhciB0ID0gdGhpcy5lbGVtZW50LnBvc2l0aW9uKCksXG4gICAgICAgICAgICBlID0gdGhpcy5faXNSb290Tm9kZSh0aGlzLnNjcm9sbFBhcmVudFswXSk7cmV0dXJuIHsgdG9wOiB0LnRvcCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJ0b3BcIiksIDEwKSB8fCAwKSArIChlID8gMCA6IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpKSwgbGVmdDogdC5sZWZ0IC0gKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcyhcImxlZnRcIiksIDEwKSB8fCAwKSArIChlID8gMCA6IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSkgfTtcbiAgICAgIH0sIF9jYWNoZU1hcmdpbnM6IGZ1bmN0aW9uIF9jYWNoZU1hcmdpbnMoKSB7XG4gICAgICAgIHRoaXMubWFyZ2lucyA9IHsgbGVmdDogcGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcyhcIm1hcmdpbkxlZnRcIiksIDEwKSB8fCAwLCB0b3A6IHBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoXCJtYXJnaW5Ub3BcIiksIDEwKSB8fCAwLCByaWdodDogcGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcyhcIm1hcmdpblJpZ2h0XCIpLCAxMCkgfHwgMCwgYm90dG9tOiBwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKFwibWFyZ2luQm90dG9tXCIpLCAxMCkgfHwgMCB9O1xuICAgICAgfSwgX2NhY2hlSGVscGVyUHJvcG9ydGlvbnM6IGZ1bmN0aW9uIF9jYWNoZUhlbHBlclByb3BvcnRpb25zKCkge1xuICAgICAgICB0aGlzLmhlbHBlclByb3BvcnRpb25zID0geyB3aWR0aDogdGhpcy5oZWxwZXIub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCkgfTtcbiAgICAgIH0sIF9zZXRDb250YWlubWVudDogZnVuY3Rpb24gX3NldENvbnRhaW5tZW50KCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHIgPSB0aGlzLmRvY3VtZW50WzBdO3RoaXMucmVsYXRpdmVDb250YWluZXIgPSBudWxsLCBzLmNvbnRhaW5tZW50ID8gXCJ3aW5kb3dcIiAhPT0gcy5jb250YWlubWVudCA/IFwiZG9jdW1lbnRcIiAhPT0gcy5jb250YWlubWVudCA/IHMuY29udGFpbm1lbnQuY29uc3RydWN0b3IgIT09IEFycmF5ID8gKFwicGFyZW50XCIgPT09IHMuY29udGFpbm1lbnQgJiYgKHMuY29udGFpbm1lbnQgPSB0aGlzLmhlbHBlclswXS5wYXJlbnROb2RlKSwgaSA9IHQocy5jb250YWlubWVudCksIChuID0gaVswXSkgJiYgKGUgPSAvKHNjcm9sbHxhdXRvKS8udGVzdChpLmNzcyhcIm92ZXJmbG93XCIpKSwgdGhpcy5jb250YWlubWVudCA9IFsocGFyc2VJbnQoaS5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksIDEwKSB8fCAwKSArIChwYXJzZUludChpLmNzcyhcInBhZGRpbmdMZWZ0XCIpLCAxMCkgfHwgMCksIChwYXJzZUludChpLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLCAxMCkgfHwgMCkgKyAocGFyc2VJbnQoaS5jc3MoXCJwYWRkaW5nVG9wXCIpLCAxMCkgfHwgMCksIChlID8gTWF0aC5tYXgobi5zY3JvbGxXaWR0aCwgbi5vZmZzZXRXaWR0aCkgOiBuLm9mZnNldFdpZHRoKSAtIChwYXJzZUludChpLmNzcyhcImJvcmRlclJpZ2h0V2lkdGhcIiksIDEwKSB8fCAwKSAtIChwYXJzZUludChpLmNzcyhcInBhZGRpbmdSaWdodFwiKSwgMTApIHx8IDApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0IC0gdGhpcy5tYXJnaW5zLnJpZ2h0LCAoZSA/IE1hdGgubWF4KG4uc2Nyb2xsSGVpZ2h0LCBuLm9mZnNldEhlaWdodCkgOiBuLm9mZnNldEhlaWdodCkgLSAocGFyc2VJbnQoaS5jc3MoXCJib3JkZXJCb3R0b21XaWR0aFwiKSwgMTApIHx8IDApIC0gKHBhcnNlSW50KGkuY3NzKFwicGFkZGluZ0JvdHRvbVwiKSwgMTApIHx8IDApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wIC0gdGhpcy5tYXJnaW5zLmJvdHRvbV0sIHRoaXMucmVsYXRpdmVDb250YWluZXIgPSBpKSkgOiB0aGlzLmNvbnRhaW5tZW50ID0gcy5jb250YWlubWVudCA6IHRoaXMuY29udGFpbm1lbnQgPSBbMCwgMCwgdChyKS53aWR0aCgpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LCAodChyKS5oZWlnaHQoKSB8fCByLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wXSA6IHRoaXMuY29udGFpbm1lbnQgPSBbdCh3aW5kb3cpLnNjcm9sbExlZnQoKSAtIHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLSB0aGlzLm9mZnNldC5wYXJlbnQubGVmdCwgdCh3aW5kb3cpLnNjcm9sbFRvcCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCwgdCh3aW5kb3cpLnNjcm9sbExlZnQoKSArIHQod2luZG93KS53aWR0aCgpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LCB0KHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAodCh3aW5kb3cpLmhlaWdodCgpIHx8IHIuYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3BdIDogdGhpcy5jb250YWlubWVudCA9IG51bGw7XG4gICAgICB9LCBfY29udmVydFBvc2l0aW9uVG86IGZ1bmN0aW9uIF9jb252ZXJ0UG9zaXRpb25Ubyh0LCBlKSB7XG4gICAgICAgIGUgfHwgKGUgPSB0aGlzLnBvc2l0aW9uKTt2YXIgaSA9IFwiYWJzb2x1dGVcIiA9PT0gdCA/IDEgOiAtMSxcbiAgICAgICAgICAgIG4gPSB0aGlzLl9pc1Jvb3ROb2RlKHRoaXMuc2Nyb2xsUGFyZW50WzBdKTtyZXR1cm4geyB0b3A6IGUudG9wICsgdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogaSArIHRoaXMub2Zmc2V0LnBhcmVudC50b3AgKiBpIC0gKFwiZml4ZWRcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiA/IC10aGlzLm9mZnNldC5zY3JvbGwudG9wIDogbiA/IDAgOiB0aGlzLm9mZnNldC5zY3JvbGwudG9wKSAqIGksIGxlZnQ6IGUubGVmdCArIHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgKiBpICsgdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKiBpIC0gKFwiZml4ZWRcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiA/IC10aGlzLm9mZnNldC5zY3JvbGwubGVmdCA6IG4gPyAwIDogdGhpcy5vZmZzZXQuc2Nyb2xsLmxlZnQpICogaSB9O1xuICAgICAgfSwgX2dlbmVyYXRlUG9zaXRpb246IGZ1bmN0aW9uIF9nZW5lcmF0ZVBvc2l0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgYSA9IHRoaXMuX2lzUm9vdE5vZGUodGhpcy5zY3JvbGxQYXJlbnRbMF0pLFxuICAgICAgICAgICAgbCA9IHQucGFnZVgsXG4gICAgICAgICAgICB1ID0gdC5wYWdlWTtyZXR1cm4gYSAmJiB0aGlzLm9mZnNldC5zY3JvbGwgfHwgKHRoaXMub2Zmc2V0LnNjcm9sbCA9IHsgdG9wOiB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSwgbGVmdDogdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIH0pLCBlICYmICh0aGlzLmNvbnRhaW5tZW50ICYmICh0aGlzLnJlbGF0aXZlQ29udGFpbmVyID8gKG4gPSB0aGlzLnJlbGF0aXZlQ29udGFpbmVyLm9mZnNldCgpLCBpID0gW3RoaXMuY29udGFpbm1lbnRbMF0gKyBuLmxlZnQsIHRoaXMuY29udGFpbm1lbnRbMV0gKyBuLnRvcCwgdGhpcy5jb250YWlubWVudFsyXSArIG4ubGVmdCwgdGhpcy5jb250YWlubWVudFszXSArIG4udG9wXSkgOiBpID0gdGhpcy5jb250YWlubWVudCwgdC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPCBpWzBdICYmIChsID0gaVswXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLCB0LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgaVsxXSAmJiAodSA9IGlbMV0gKyB0aGlzLm9mZnNldC5jbGljay50b3ApLCB0LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+IGlbMl0gJiYgKGwgPSBpWzJdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCksIHQucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBpWzNdICYmICh1ID0gaVszXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCkpLCBvLmdyaWQgJiYgKHMgPSBvLmdyaWRbMV0gPyB0aGlzLm9yaWdpbmFsUGFnZVkgKyBNYXRoLnJvdW5kKCh1IC0gdGhpcy5vcmlnaW5hbFBhZ2VZKSAvIG8uZ3JpZFsxXSkgKiBvLmdyaWRbMV0gOiB0aGlzLm9yaWdpbmFsUGFnZVksIHUgPSBpID8gcyAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBpWzFdIHx8IHMgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiBpWzNdID8gcyA6IHMgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPj0gaVsxXSA/IHMgLSBvLmdyaWRbMV0gOiBzICsgby5ncmlkWzFdIDogcywgciA9IG8uZ3JpZFswXSA/IHRoaXMub3JpZ2luYWxQYWdlWCArIE1hdGgucm91bmQoKGwgLSB0aGlzLm9yaWdpbmFsUGFnZVgpIC8gby5ncmlkWzBdKSAqIG8uZ3JpZFswXSA6IHRoaXMub3JpZ2luYWxQYWdlWCwgbCA9IGkgPyByIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+PSBpWzBdIHx8IHIgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gaVsyXSA/IHIgOiByIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+PSBpWzBdID8gciAtIG8uZ3JpZFswXSA6IHIgKyBvLmdyaWRbMF0gOiByKSwgXCJ5XCIgPT09IG8uYXhpcyAmJiAobCA9IHRoaXMub3JpZ2luYWxQYWdlWCksIFwieFwiID09PSBvLmF4aXMgJiYgKHUgPSB0aGlzLm9yaWdpbmFsUGFnZVkpKSwgeyB0b3A6IHUgLSB0aGlzLm9mZnNldC5jbGljay50b3AgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgLSB0aGlzLm9mZnNldC5wYXJlbnQudG9wICsgKFwiZml4ZWRcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiA/IC10aGlzLm9mZnNldC5zY3JvbGwudG9wIDogYSA/IDAgOiB0aGlzLm9mZnNldC5zY3JvbGwudG9wKSwgbGVmdDogbCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgKyAoXCJmaXhlZFwiID09PSB0aGlzLmNzc1Bvc2l0aW9uID8gLXRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0IDogYSA/IDAgOiB0aGlzLm9mZnNldC5zY3JvbGwubGVmdCkgfTtcbiAgICAgIH0sIF9jbGVhcjogZnVuY3Rpb24gX2NsZWFyKCkge1xuICAgICAgICB0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmhlbHBlciwgXCJ1aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiksIHRoaXMuaGVscGVyWzBdID09PSB0aGlzLmVsZW1lbnRbMF0gfHwgdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsIHx8IHRoaXMuaGVscGVyLnJlbW92ZSgpLCB0aGlzLmhlbHBlciA9IG51bGwsIHRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCA9ICExLCB0aGlzLmRlc3Ryb3lPbkNsZWFyICYmIHRoaXMuZGVzdHJveSgpO1xuICAgICAgfSwgX3RyaWdnZXI6IGZ1bmN0aW9uIF90cmlnZ2VyKGUsIGksIG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPSBuIHx8IHRoaXMuX3VpSGFzaCgpLCB0LnVpLnBsdWdpbi5jYWxsKHRoaXMsIGUsIFtpLCBuLCB0aGlzXSwgITApLCAvXihkcmFnfHN0YXJ0fHN0b3ApLy50ZXN0KGUpICYmICh0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5fY29udmVydFBvc2l0aW9uVG8oXCJhYnNvbHV0ZVwiKSwgbi5vZmZzZXQgPSB0aGlzLnBvc2l0aW9uQWJzKSwgdC5XaWRnZXQucHJvdG90eXBlLl90cmlnZ2VyLmNhbGwodGhpcywgZSwgaSwgbik7XG4gICAgICB9LCBwbHVnaW5zOiB7fSwgX3VpSGFzaDogZnVuY3Rpb24gX3VpSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIHsgaGVscGVyOiB0aGlzLmhlbHBlciwgcG9zaXRpb246IHRoaXMucG9zaXRpb24sIG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbiwgb2Zmc2V0OiB0aGlzLnBvc2l0aW9uQWJzIH07XG4gICAgICB9IH0pLCB0LnVpLnBsdWdpbi5hZGQoXCJkcmFnZ2FibGVcIiwgXCJjb25uZWN0VG9Tb3J0YWJsZVwiLCB7IHN0YXJ0OiBmdW5jdGlvbiBzdGFydChlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzID0gdC5leHRlbmQoe30sIGksIHsgaXRlbTogbi5lbGVtZW50IH0pO24uc29ydGFibGVzID0gW10sIHQobi5vcHRpb25zLmNvbm5lY3RUb1NvcnRhYmxlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaSA9IHQodGhpcykuc29ydGFibGUoXCJpbnN0YW5jZVwiKTtpICYmICFpLm9wdGlvbnMuZGlzYWJsZWQgJiYgKG4uc29ydGFibGVzLnB1c2goaSksIGkucmVmcmVzaFBvc2l0aW9ucygpLCBpLl90cmlnZ2VyKFwiYWN0aXZhdGVcIiwgZSwgcykpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoZSwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IHQuZXh0ZW5kKHt9LCBpLCB7IGl0ZW06IG4uZWxlbWVudCB9KTtuLmNhbmNlbEhlbHBlclJlbW92YWwgPSAhMSwgdC5lYWNoKG4uc29ydGFibGVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5pc092ZXIgPyAodGhpcy5pc092ZXIgPSAwLCBuLmNhbmNlbEhlbHBlclJlbW92YWwgPSAhMCwgdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsID0gITEsIHRoaXMuX3N0b3JlZENTUyA9IHsgcG9zaXRpb246IHRoaXMucGxhY2Vob2xkZXIuY3NzKFwicG9zaXRpb25cIiksIHRvcDogdGhpcy5wbGFjZWhvbGRlci5jc3MoXCJ0b3BcIiksIGxlZnQ6IHRoaXMucGxhY2Vob2xkZXIuY3NzKFwibGVmdFwiKSB9LCB0aGlzLl9tb3VzZVN0b3AoZSksIHRoaXMub3B0aW9ucy5oZWxwZXIgPSB0aGlzLm9wdGlvbnMuX2hlbHBlcikgOiAodGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsID0gITAsIHRoaXMuX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsIGUsIHMpKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBkcmFnOiBmdW5jdGlvbiBkcmFnKGUsIGksIG4pIHtcbiAgICAgICAgdC5lYWNoKG4uc29ydGFibGVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHMgPSAhMSxcbiAgICAgICAgICAgICAgciA9IHRoaXM7ci5wb3NpdGlvbkFicyA9IG4ucG9zaXRpb25BYnMsIHIuaGVscGVyUHJvcG9ydGlvbnMgPSBuLmhlbHBlclByb3BvcnRpb25zLCByLm9mZnNldC5jbGljayA9IG4ub2Zmc2V0LmNsaWNrLCByLl9pbnRlcnNlY3RzV2l0aChyLmNvbnRhaW5lckNhY2hlKSAmJiAocyA9ICEwLCB0LmVhY2gobi5zb3J0YWJsZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uQWJzID0gbi5wb3NpdGlvbkFicywgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IG4uaGVscGVyUHJvcG9ydGlvbnMsIHRoaXMub2Zmc2V0LmNsaWNrID0gbi5vZmZzZXQuY2xpY2ssIHRoaXMgIT09IHIgJiYgdGhpcy5faW50ZXJzZWN0c1dpdGgodGhpcy5jb250YWluZXJDYWNoZSkgJiYgdC5jb250YWlucyhyLmVsZW1lbnRbMF0sIHRoaXMuZWxlbWVudFswXSkgJiYgKHMgPSAhMSksIHM7XG4gICAgICAgICAgfSkpLCBzID8gKHIuaXNPdmVyIHx8IChyLmlzT3ZlciA9IDEsIG4uX3BhcmVudCA9IGkuaGVscGVyLnBhcmVudCgpLCByLmN1cnJlbnRJdGVtID0gaS5oZWxwZXIuYXBwZW5kVG8oci5lbGVtZW50KS5kYXRhKFwidWktc29ydGFibGUtaXRlbVwiLCAhMCksIHIub3B0aW9ucy5faGVscGVyID0gci5vcHRpb25zLmhlbHBlciwgci5vcHRpb25zLmhlbHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpLmhlbHBlclswXTtcbiAgICAgICAgICB9LCBlLnRhcmdldCA9IHIuY3VycmVudEl0ZW1bMF0sIHIuX21vdXNlQ2FwdHVyZShlLCAhMCksIHIuX21vdXNlU3RhcnQoZSwgITAsICEwKSwgci5vZmZzZXQuY2xpY2sudG9wID0gbi5vZmZzZXQuY2xpY2sudG9wLCByLm9mZnNldC5jbGljay5sZWZ0ID0gbi5vZmZzZXQuY2xpY2subGVmdCwgci5vZmZzZXQucGFyZW50LmxlZnQgLT0gbi5vZmZzZXQucGFyZW50LmxlZnQgLSByLm9mZnNldC5wYXJlbnQubGVmdCwgci5vZmZzZXQucGFyZW50LnRvcCAtPSBuLm9mZnNldC5wYXJlbnQudG9wIC0gci5vZmZzZXQucGFyZW50LnRvcCwgbi5fdHJpZ2dlcihcInRvU29ydGFibGVcIiwgZSksIG4uZHJvcHBlZCA9IHIuZWxlbWVudCwgdC5lYWNoKG4uc29ydGFibGVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKTtcbiAgICAgICAgICB9KSwgbi5jdXJyZW50SXRlbSA9IG4uZWxlbWVudCwgci5mcm9tT3V0c2lkZSA9IG4pLCByLmN1cnJlbnRJdGVtICYmIChyLl9tb3VzZURyYWcoZSksIGkucG9zaXRpb24gPSByLnBvc2l0aW9uKSkgOiByLmlzT3ZlciAmJiAoci5pc092ZXIgPSAwLCByLmNhbmNlbEhlbHBlclJlbW92YWwgPSAhMCwgci5vcHRpb25zLl9yZXZlcnQgPSByLm9wdGlvbnMucmV2ZXJ0LCByLm9wdGlvbnMucmV2ZXJ0ID0gITEsIHIuX3RyaWdnZXIoXCJvdXRcIiwgZSwgci5fdWlIYXNoKHIpKSwgci5fbW91c2VTdG9wKGUsICEwKSwgci5vcHRpb25zLnJldmVydCA9IHIub3B0aW9ucy5fcmV2ZXJ0LCByLm9wdGlvbnMuaGVscGVyID0gci5vcHRpb25zLl9oZWxwZXIsIHIucGxhY2Vob2xkZXIgJiYgci5wbGFjZWhvbGRlci5yZW1vdmUoKSwgaS5oZWxwZXIuYXBwZW5kVG8obi5fcGFyZW50KSwgbi5fcmVmcmVzaE9mZnNldHMoZSksIGkucG9zaXRpb24gPSBuLl9nZW5lcmF0ZVBvc2l0aW9uKGUsICEwKSwgbi5fdHJpZ2dlcihcImZyb21Tb3J0YWJsZVwiLCBlKSwgbi5kcm9wcGVkID0gITEsIHQuZWFjaChuLnNvcnRhYmxlcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gfSksIHQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLCBcImN1cnNvclwiLCB7IHN0YXJ0OiBmdW5jdGlvbiBzdGFydChlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzID0gdChcImJvZHlcIiksXG4gICAgICAgICAgICByID0gbi5vcHRpb25zO3MuY3NzKFwiY3Vyc29yXCIpICYmIChyLl9jdXJzb3IgPSBzLmNzcyhcImN1cnNvclwiKSksIHMuY3NzKFwiY3Vyc29yXCIsIHIuY3Vyc29yKTtcbiAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoZSwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IG4ub3B0aW9ucztzLl9jdXJzb3IgJiYgdChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsIHMuX2N1cnNvcik7XG4gICAgICB9IH0pLCB0LnVpLnBsdWdpbi5hZGQoXCJkcmFnZ2FibGVcIiwgXCJvcGFjaXR5XCIsIHsgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSB0KGkuaGVscGVyKSxcbiAgICAgICAgICAgIHIgPSBuLm9wdGlvbnM7cy5jc3MoXCJvcGFjaXR5XCIpICYmIChyLl9vcGFjaXR5ID0gcy5jc3MoXCJvcGFjaXR5XCIpKSwgcy5jc3MoXCJvcGFjaXR5XCIsIHIub3BhY2l0eSk7XG4gICAgICB9LCBzdG9wOiBmdW5jdGlvbiBzdG9wKGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSBuLm9wdGlvbnM7cy5fb3BhY2l0eSAmJiB0KGkuaGVscGVyKS5jc3MoXCJvcGFjaXR5XCIsIHMuX29wYWNpdHkpO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwic2Nyb2xsXCIsIHsgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHQsIGUsIGkpIHtcbiAgICAgICAgaS5zY3JvbGxQYXJlbnROb3RIaWRkZW4gfHwgKGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuID0gaS5oZWxwZXIuc2Nyb2xsUGFyZW50KCExKSksIGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuWzBdICE9PSBpLmRvY3VtZW50WzBdICYmIFwiSFRNTFwiICE9PSBpLnNjcm9sbFBhcmVudE5vdEhpZGRlblswXS50YWdOYW1lICYmIChpLm92ZXJmbG93T2Zmc2V0ID0gaS5zY3JvbGxQYXJlbnROb3RIaWRkZW4ub2Zmc2V0KCkpO1xuICAgICAgfSwgZHJhZzogZnVuY3Rpb24gZHJhZyhlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzID0gbi5vcHRpb25zLFxuICAgICAgICAgICAgciA9ICExLFxuICAgICAgICAgICAgbyA9IG4uc2Nyb2xsUGFyZW50Tm90SGlkZGVuWzBdLFxuICAgICAgICAgICAgYSA9IG4uZG9jdW1lbnRbMF07byAhPT0gYSAmJiBcIkhUTUxcIiAhPT0gby50YWdOYW1lID8gKHMuYXhpcyAmJiBcInhcIiA9PT0gcy5heGlzIHx8IChuLm92ZXJmbG93T2Zmc2V0LnRvcCArIG8ub2Zmc2V0SGVpZ2h0IC0gZS5wYWdlWSA8IHMuc2Nyb2xsU2Vuc2l0aXZpdHkgPyBvLnNjcm9sbFRvcCA9IHIgPSBvLnNjcm9sbFRvcCArIHMuc2Nyb2xsU3BlZWQgOiBlLnBhZ2VZIC0gbi5vdmVyZmxvd09mZnNldC50b3AgPCBzLnNjcm9sbFNlbnNpdGl2aXR5ICYmIChvLnNjcm9sbFRvcCA9IHIgPSBvLnNjcm9sbFRvcCAtIHMuc2Nyb2xsU3BlZWQpKSwgcy5heGlzICYmIFwieVwiID09PSBzLmF4aXMgfHwgKG4ub3ZlcmZsb3dPZmZzZXQubGVmdCArIG8ub2Zmc2V0V2lkdGggLSBlLnBhZ2VYIDwgcy5zY3JvbGxTZW5zaXRpdml0eSA/IG8uc2Nyb2xsTGVmdCA9IHIgPSBvLnNjcm9sbExlZnQgKyBzLnNjcm9sbFNwZWVkIDogZS5wYWdlWCAtIG4ub3ZlcmZsb3dPZmZzZXQubGVmdCA8IHMuc2Nyb2xsU2Vuc2l0aXZpdHkgJiYgKG8uc2Nyb2xsTGVmdCA9IHIgPSBvLnNjcm9sbExlZnQgLSBzLnNjcm9sbFNwZWVkKSkpIDogKHMuYXhpcyAmJiBcInhcIiA9PT0gcy5heGlzIHx8IChlLnBhZ2VZIC0gdChhKS5zY3JvbGxUb3AoKSA8IHMuc2Nyb2xsU2Vuc2l0aXZpdHkgPyByID0gdChhKS5zY3JvbGxUb3AodChhKS5zY3JvbGxUb3AoKSAtIHMuc2Nyb2xsU3BlZWQpIDogdCh3aW5kb3cpLmhlaWdodCgpIC0gKGUucGFnZVkgLSB0KGEpLnNjcm9sbFRvcCgpKSA8IHMuc2Nyb2xsU2Vuc2l0aXZpdHkgJiYgKHIgPSB0KGEpLnNjcm9sbFRvcCh0KGEpLnNjcm9sbFRvcCgpICsgcy5zY3JvbGxTcGVlZCkpKSwgcy5heGlzICYmIFwieVwiID09PSBzLmF4aXMgfHwgKGUucGFnZVggLSB0KGEpLnNjcm9sbExlZnQoKSA8IHMuc2Nyb2xsU2Vuc2l0aXZpdHkgPyByID0gdChhKS5zY3JvbGxMZWZ0KHQoYSkuc2Nyb2xsTGVmdCgpIC0gcy5zY3JvbGxTcGVlZCkgOiB0KHdpbmRvdykud2lkdGgoKSAtIChlLnBhZ2VYIC0gdChhKS5zY3JvbGxMZWZ0KCkpIDwgcy5zY3JvbGxTZW5zaXRpdml0eSAmJiAociA9IHQoYSkuc2Nyb2xsTGVmdCh0KGEpLnNjcm9sbExlZnQoKSArIHMuc2Nyb2xsU3BlZWQpKSkpLCAhMSAhPT0gciAmJiB0LnVpLmRkbWFuYWdlciAmJiAhcy5kcm9wQmVoYXZpb3VyICYmIHQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKG4sIGUpO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwic25hcFwiLCB7IHN0YXJ0OiBmdW5jdGlvbiBzdGFydChlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzID0gbi5vcHRpb25zO24uc25hcEVsZW1lbnRzID0gW10sIHQocy5zbmFwLmNvbnN0cnVjdG9yICE9PSBTdHJpbmcgPyBzLnNuYXAuaXRlbXMgfHwgXCI6ZGF0YSh1aS1kcmFnZ2FibGUpXCIgOiBzLnNuYXApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdCh0aGlzKSxcbiAgICAgICAgICAgICAgaSA9IGUub2Zmc2V0KCk7dGhpcyAhPT0gbi5lbGVtZW50WzBdICYmIG4uc25hcEVsZW1lbnRzLnB1c2goeyBpdGVtOiB0aGlzLCB3aWR0aDogZS5vdXRlcldpZHRoKCksIGhlaWdodDogZS5vdXRlckhlaWdodCgpLCB0b3A6IGkudG9wLCBsZWZ0OiBpLmxlZnQgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZHJhZzogZnVuY3Rpb24gZHJhZyhlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBwLFxuICAgICAgICAgICAgZiA9IG4ub3B0aW9ucyxcbiAgICAgICAgICAgIGcgPSBmLnNuYXBUb2xlcmFuY2UsXG4gICAgICAgICAgICBtID0gaS5vZmZzZXQubGVmdCxcbiAgICAgICAgICAgIHYgPSBtICsgbi5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCxcbiAgICAgICAgICAgIF8gPSBpLm9mZnNldC50b3AsXG4gICAgICAgICAgICBiID0gXyArIG4uaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0O2ZvciAoZCA9IG4uc25hcEVsZW1lbnRzLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgbCA9IG4uc25hcEVsZW1lbnRzW2RdLmxlZnQgLSBuLm1hcmdpbnMubGVmdCwgdSA9IGwgKyBuLnNuYXBFbGVtZW50c1tkXS53aWR0aCwgYyA9IG4uc25hcEVsZW1lbnRzW2RdLnRvcCAtIG4ubWFyZ2lucy50b3AsIGggPSBjICsgbi5zbmFwRWxlbWVudHNbZF0uaGVpZ2h0LCB2IDwgbCAtIGcgfHwgbSA+IHUgKyBnIHx8IGIgPCBjIC0gZyB8fCBfID4gaCArIGcgfHwgIXQuY29udGFpbnMobi5zbmFwRWxlbWVudHNbZF0uaXRlbS5vd25lckRvY3VtZW50LCBuLnNuYXBFbGVtZW50c1tkXS5pdGVtKSA/IChuLnNuYXBFbGVtZW50c1tkXS5zbmFwcGluZyAmJiBuLm9wdGlvbnMuc25hcC5yZWxlYXNlICYmIG4ub3B0aW9ucy5zbmFwLnJlbGVhc2UuY2FsbChuLmVsZW1lbnQsIGUsIHQuZXh0ZW5kKG4uX3VpSGFzaCgpLCB7IHNuYXBJdGVtOiBuLnNuYXBFbGVtZW50c1tkXS5pdGVtIH0pKSwgbi5zbmFwRWxlbWVudHNbZF0uc25hcHBpbmcgPSAhMSkgOiAoXCJpbm5lclwiICE9PSBmLnNuYXBNb2RlICYmIChzID0gTWF0aC5hYnMoYyAtIGIpIDw9IGcsIHIgPSBNYXRoLmFicyhoIC0gXykgPD0gZywgbyA9IE1hdGguYWJzKGwgLSB2KSA8PSBnLCBhID0gTWF0aC5hYnModSAtIG0pIDw9IGcsIHMgJiYgKGkucG9zaXRpb24udG9wID0gbi5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLCB7IHRvcDogYyAtIG4uaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LCBsZWZ0OiAwIH0pLnRvcCksIHIgJiYgKGkucG9zaXRpb24udG9wID0gbi5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLCB7IHRvcDogaCwgbGVmdDogMCB9KS50b3ApLCBvICYmIChpLnBvc2l0aW9uLmxlZnQgPSBuLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiAwLCBsZWZ0OiBsIC0gbi5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCB9KS5sZWZ0KSwgYSAmJiAoaS5wb3NpdGlvbi5sZWZ0ID0gbi5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLCB7IHRvcDogMCwgbGVmdDogdSB9KS5sZWZ0KSksIHAgPSBzIHx8IHIgfHwgbyB8fCBhLCBcIm91dGVyXCIgIT09IGYuc25hcE1vZGUgJiYgKHMgPSBNYXRoLmFicyhjIC0gXykgPD0gZywgciA9IE1hdGguYWJzKGggLSBiKSA8PSBnLCBvID0gTWF0aC5hYnMobCAtIG0pIDw9IGcsIGEgPSBNYXRoLmFicyh1IC0gdikgPD0gZywgcyAmJiAoaS5wb3NpdGlvbi50b3AgPSBuLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIsIHsgdG9wOiBjLCBsZWZ0OiAwIH0pLnRvcCksIHIgJiYgKGkucG9zaXRpb24udG9wID0gbi5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLCB7IHRvcDogaCAtIG4uaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LCBsZWZ0OiAwIH0pLnRvcCksIG8gJiYgKGkucG9zaXRpb24ubGVmdCA9IG4uX2NvbnZlcnRQb3NpdGlvblRvKFwicmVsYXRpdmVcIiwgeyB0b3A6IDAsIGxlZnQ6IGwgfSkubGVmdCksIGEgJiYgKGkucG9zaXRpb24ubGVmdCA9IG4uX2NvbnZlcnRQb3NpdGlvblRvKFwicmVsYXRpdmVcIiwgeyB0b3A6IDAsIGxlZnQ6IHUgLSBuLmhlbHBlclByb3BvcnRpb25zLndpZHRoIH0pLmxlZnQpKSwgIW4uc25hcEVsZW1lbnRzW2RdLnNuYXBwaW5nICYmIChzIHx8IHIgfHwgbyB8fCBhIHx8IHApICYmIG4ub3B0aW9ucy5zbmFwLnNuYXAgJiYgbi5vcHRpb25zLnNuYXAuc25hcC5jYWxsKG4uZWxlbWVudCwgZSwgdC5leHRlbmQobi5fdWlIYXNoKCksIHsgc25hcEl0ZW06IG4uc25hcEVsZW1lbnRzW2RdLml0ZW0gfSkpLCBuLnNuYXBFbGVtZW50c1tkXS5zbmFwcGluZyA9IHMgfHwgciB8fCBvIHx8IGEgfHwgcCk7XG4gICAgICAgIH1cbiAgICAgIH0gfSksIHQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLCBcInN0YWNrXCIsIHsgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMsXG4gICAgICAgICAgICByID0gbi5vcHRpb25zLFxuICAgICAgICAgICAgbyA9IHQubWFrZUFycmF5KHQoci5zdGFjaykpLnNvcnQoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gKHBhcnNlSW50KHQoZSkuY3NzKFwiekluZGV4XCIpLCAxMCkgfHwgMCkgLSAocGFyc2VJbnQodChpKS5jc3MoXCJ6SW5kZXhcIiksIDEwKSB8fCAwKTtcbiAgICAgICAgfSk7by5sZW5ndGggJiYgKHMgPSBwYXJzZUludCh0KG9bMF0pLmNzcyhcInpJbmRleFwiKSwgMTApIHx8IDAsIHQobykuZWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHQodGhpcykuY3NzKFwiekluZGV4XCIsIHMgKyBlKTtcbiAgICAgICAgfSksIHRoaXMuY3NzKFwiekluZGV4XCIsIHMgKyBvLmxlbmd0aCkpO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsIFwiekluZGV4XCIsIHsgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSB0KGkuaGVscGVyKSxcbiAgICAgICAgICAgIHIgPSBuLm9wdGlvbnM7cy5jc3MoXCJ6SW5kZXhcIikgJiYgKHIuX3pJbmRleCA9IHMuY3NzKFwiekluZGV4XCIpKSwgcy5jc3MoXCJ6SW5kZXhcIiwgci56SW5kZXgpO1xuICAgICAgfSwgc3RvcDogZnVuY3Rpb24gc3RvcChlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzID0gbi5vcHRpb25zO3MuX3pJbmRleCAmJiB0KGkuaGVscGVyKS5jc3MoXCJ6SW5kZXhcIiwgcy5fekluZGV4KTtcbiAgICAgIH0gfSksIHQudWkuZHJhZ2dhYmxlLFxuICAgIC8qIVxuICAgICAqIGpRdWVyeSBVSSBSZXNpemFibGUgMS4xMi4xXG4gICAgICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAgICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgICAqL1xuICAgIHQud2lkZ2V0KFwidWkucmVzaXphYmxlXCIsIHQudWkubW91c2UsIHsgdmVyc2lvbjogXCIxLjEyLjFcIiwgd2lkZ2V0RXZlbnRQcmVmaXg6IFwicmVzaXplXCIsIG9wdGlvbnM6IHsgYWxzb1Jlc2l6ZTogITEsIGFuaW1hdGU6ICExLCBhbmltYXRlRHVyYXRpb246IFwic2xvd1wiLCBhbmltYXRlRWFzaW5nOiBcInN3aW5nXCIsIGFzcGVjdFJhdGlvOiAhMSwgYXV0b0hpZGU6ICExLCBjbGFzc2VzOiB7IFwidWktcmVzaXphYmxlLXNlXCI6IFwidWktaWNvbiB1aS1pY29uLWdyaXBzbWFsbC1kaWFnb25hbC1zZVwiIH0sIGNvbnRhaW5tZW50OiAhMSwgZ2hvc3Q6ICExLCBncmlkOiAhMSwgaGFuZGxlczogXCJlLHMsc2VcIiwgaGVscGVyOiAhMSwgbWF4SGVpZ2h0OiBudWxsLCBtYXhXaWR0aDogbnVsbCwgbWluSGVpZ2h0OiAxMCwgbWluV2lkdGg6IDEwLCB6SW5kZXg6IDkwLCByZXNpemU6IG51bGwsIHN0YXJ0OiBudWxsLCBzdG9wOiBudWxsIH0sIF9udW06IGZ1bmN0aW9uIF9udW0odCkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0KSB8fCAwO1xuICAgICAgfSwgX2lzTnVtYmVyOiBmdW5jdGlvbiBfaXNOdW1iZXIodCkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodCkpO1xuICAgICAgfSwgX2hhc1Njcm9sbDogZnVuY3Rpb24gX2hhc1Njcm9sbChlLCBpKSB7XG4gICAgICAgIGlmIChcImhpZGRlblwiID09PSB0KGUpLmNzcyhcIm92ZXJmbG93XCIpKSByZXR1cm4gITE7dmFyIG4gPSBpICYmIFwibGVmdFwiID09PSBpID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiLFxuICAgICAgICAgICAgcyA9ICExO3JldHVybiBlW25dID4gMCB8fCAoZVtuXSA9IDEsIHMgPSBlW25dID4gMCwgZVtuXSA9IDAsIHMpO1xuICAgICAgfSwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgbiA9IHRoaXM7dGhpcy5fYWRkQ2xhc3MoXCJ1aS1yZXNpemFibGVcIiksIHQuZXh0ZW5kKHRoaXMsIHsgX2FzcGVjdFJhdGlvOiAhIWkuYXNwZWN0UmF0aW8sIGFzcGVjdFJhdGlvOiBpLmFzcGVjdFJhdGlvLCBvcmlnaW5hbEVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHM6IFtdLCBfaGVscGVyOiBpLmhlbHBlciB8fCBpLmdob3N0IHx8IGkuYW5pbWF0ZSA/IGkuaGVscGVyIHx8IFwidWktcmVzaXphYmxlLWhlbHBlclwiIDogbnVsbCB9KSwgdGhpcy5lbGVtZW50WzBdLm5vZGVOYW1lLm1hdGNoKC9eKGNhbnZhc3x0ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9ufGltZykkL2kpICYmICh0aGlzLmVsZW1lbnQud3JhcCh0KFwiPGRpdiBjbGFzcz0ndWktd3JhcHBlcicgc3R5bGU9J292ZXJmbG93OiBoaWRkZW47Jz48L2Rpdj5cIikuY3NzKHsgcG9zaXRpb246IHRoaXMuZWxlbWVudC5jc3MoXCJwb3NpdGlvblwiKSwgd2lkdGg6IHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCksIGhlaWdodDogdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCksIHRvcDogdGhpcy5lbGVtZW50LmNzcyhcInRvcFwiKSwgbGVmdDogdGhpcy5lbGVtZW50LmNzcyhcImxlZnRcIikgfSkpLCB0aGlzLmVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50KCkuZGF0YShcInVpLXJlc2l6YWJsZVwiLCB0aGlzLmVsZW1lbnQucmVzaXphYmxlKFwiaW5zdGFuY2VcIikpLCB0aGlzLmVsZW1lbnRJc1dyYXBwZXIgPSAhMCwgZSA9IHsgbWFyZ2luVG9wOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJtYXJnaW5Ub3BcIiksIG1hcmdpblJpZ2h0OiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJtYXJnaW5SaWdodFwiKSwgbWFyZ2luQm90dG9tOiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJtYXJnaW5Cb3R0b21cIiksIG1hcmdpbkxlZnQ6IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhcIm1hcmdpbkxlZnRcIikgfSwgdGhpcy5lbGVtZW50LmNzcyhlKSwgdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwibWFyZ2luXCIsIDApLCB0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUgPSB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJyZXNpemVcIiksIHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhcInJlc2l6ZVwiLCBcIm5vbmVcIiksIHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMucHVzaCh0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoeyBwb3NpdGlvbjogXCJzdGF0aWNcIiwgem9vbTogMSwgZGlzcGxheTogXCJibG9ja1wiIH0pKSwgdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKGUpLCB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpKSwgdGhpcy5fc2V0dXBIYW5kbGVzKCksIGkuYXV0b0hpZGUgJiYgdCh0aGlzLmVsZW1lbnQpLm9uKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaS5kaXNhYmxlZCB8fCAobi5fcmVtb3ZlQ2xhc3MoXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIiksIG4uX2hhbmRsZXMuc2hvdygpKTtcbiAgICAgICAgfSkub24oXCJtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpLmRpc2FibGVkIHx8IG4ucmVzaXppbmcgfHwgKG4uX2FkZENsYXNzKFwidWktcmVzaXphYmxlLWF1dG9oaWRlXCIpLCBuLl9oYW5kbGVzLmhpZGUoKSk7XG4gICAgICAgIH0pLCB0aGlzLl9tb3VzZUluaXQoKTtcbiAgICAgIH0sIF9kZXN0cm95OiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fbW91c2VEZXN0cm95KCk7dmFyIGUsXG4gICAgICAgICAgICBpID0gZnVuY3Rpb24gaShlKSB7XG4gICAgICAgICAgdChlKS5yZW1vdmVEYXRhKFwicmVzaXphYmxlXCIpLnJlbW92ZURhdGEoXCJ1aS1yZXNpemFibGVcIikub2ZmKFwiLnJlc2l6YWJsZVwiKS5maW5kKFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIikucmVtb3ZlKCk7XG4gICAgICAgIH07cmV0dXJuIHRoaXMuZWxlbWVudElzV3JhcHBlciAmJiAoaSh0aGlzLmVsZW1lbnQpLCBlID0gdGhpcy5lbGVtZW50LCB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoeyBwb3NpdGlvbjogZS5jc3MoXCJwb3NpdGlvblwiKSwgd2lkdGg6IGUub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGUub3V0ZXJIZWlnaHQoKSwgdG9wOiBlLmNzcyhcInRvcFwiKSwgbGVmdDogZS5jc3MoXCJsZWZ0XCIpIH0pLmluc2VydEFmdGVyKGUpLCBlLnJlbW92ZSgpKSwgdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwicmVzaXplXCIsIHRoaXMub3JpZ2luYWxSZXNpemVTdHlsZSksIGkodGhpcy5vcmlnaW5hbEVsZW1lbnQpLCB0aGlzO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3VwZXIodCwgZSksIHQpIHtjYXNlIFwiaGFuZGxlc1wiOlxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlSGFuZGxlcygpLCB0aGlzLl9zZXR1cEhhbmRsZXMoKTt9XG4gICAgICB9LCBfc2V0dXBIYW5kbGVzOiBmdW5jdGlvbiBfc2V0dXBIYW5kbGVzKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgYSA9IHRoaXM7aWYgKHRoaXMuaGFuZGxlcyA9IG8uaGFuZGxlcyB8fCAodChcIi51aS1yZXNpemFibGUtaGFuZGxlXCIsIHRoaXMuZWxlbWVudCkubGVuZ3RoID8geyBuOiBcIi51aS1yZXNpemFibGUtblwiLCBlOiBcIi51aS1yZXNpemFibGUtZVwiLCBzOiBcIi51aS1yZXNpemFibGUtc1wiLCB3OiBcIi51aS1yZXNpemFibGUtd1wiLCBzZTogXCIudWktcmVzaXphYmxlLXNlXCIsIHN3OiBcIi51aS1yZXNpemFibGUtc3dcIiwgbmU6IFwiLnVpLXJlc2l6YWJsZS1uZVwiLCBudzogXCIudWktcmVzaXphYmxlLW53XCIgfSA6IFwiZSxzLHNlXCIpLCB0aGlzLl9oYW5kbGVzID0gdCgpLCB0aGlzLmhhbmRsZXMuY29uc3RydWN0b3IgPT09IFN0cmluZykgZm9yIChcImFsbFwiID09PSB0aGlzLmhhbmRsZXMgJiYgKHRoaXMuaGFuZGxlcyA9IFwibixlLHMsdyxzZSxzdyxuZSxud1wiKSwgbiA9IHRoaXMuaGFuZGxlcy5zcGxpdChcIixcIiksIHRoaXMuaGFuZGxlcyA9IHt9LCBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlID0gdC50cmltKG5baV0pLCBzID0gXCJ1aS1yZXNpemFibGUtXCIgKyBlLCByID0gdChcIjxkaXY+XCIpLCB0aGlzLl9hZGRDbGFzcyhyLCBcInVpLXJlc2l6YWJsZS1oYW5kbGUgXCIgKyBzKSwgci5jc3MoeyB6SW5kZXg6IG8uekluZGV4IH0pLCB0aGlzLmhhbmRsZXNbZV0gPSBcIi51aS1yZXNpemFibGUtXCIgKyBlLCB0aGlzLmVsZW1lbnQuYXBwZW5kKHIpO1xuICAgICAgICB9dGhpcy5fcmVuZGVyQXhpcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIGksIG4sIHMsIHI7Zm9yIChpIGluIGUgPSBlIHx8IHRoaXMuZWxlbWVudCwgdGhpcy5oYW5kbGVzKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZXNbaV0uY29uc3RydWN0b3IgPT09IFN0cmluZyA/IHRoaXMuaGFuZGxlc1tpXSA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbih0aGlzLmhhbmRsZXNbaV0pLmZpcnN0KCkuc2hvdygpIDogKHRoaXMuaGFuZGxlc1tpXS5qcXVlcnkgfHwgdGhpcy5oYW5kbGVzW2ldLm5vZGVUeXBlKSAmJiAodGhpcy5oYW5kbGVzW2ldID0gdCh0aGlzLmhhbmRsZXNbaV0pLCB0aGlzLl9vbih0aGlzLmhhbmRsZXNbaV0sIHsgbW91c2Vkb3duOiBhLl9tb3VzZURvd24gfSkpLCB0aGlzLmVsZW1lbnRJc1dyYXBwZXIgJiYgdGhpcy5vcmlnaW5hbEVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL14odGV4dGFyZWF8aW5wdXR8c2VsZWN0fGJ1dHRvbikkL2kpICYmIChuID0gdCh0aGlzLmhhbmRsZXNbaV0sIHRoaXMuZWxlbWVudCksIHIgPSAvc3d8bmV8bnd8c2V8bnxzLy50ZXN0KGkpID8gbi5vdXRlckhlaWdodCgpIDogbi5vdXRlcldpZHRoKCksIHMgPSBbXCJwYWRkaW5nXCIsIC9uZXxud3xuLy50ZXN0KGkpID8gXCJUb3BcIiA6IC9zZXxzd3xzLy50ZXN0KGkpID8gXCJCb3R0b21cIiA6IC9eZSQvLnRlc3QoaSkgPyBcIlJpZ2h0XCIgOiBcIkxlZnRcIl0uam9pbihcIlwiKSwgZS5jc3MocywgciksIHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCkpLCB0aGlzLl9oYW5kbGVzID0gdGhpcy5faGFuZGxlcy5hZGQodGhpcy5oYW5kbGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuX3JlbmRlckF4aXModGhpcy5lbGVtZW50KSwgdGhpcy5faGFuZGxlcyA9IHRoaXMuX2hhbmRsZXMuYWRkKHRoaXMuZWxlbWVudC5maW5kKFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIikpLCB0aGlzLl9oYW5kbGVzLmRpc2FibGVTZWxlY3Rpb24oKSwgdGhpcy5faGFuZGxlcy5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYS5yZXNpemluZyB8fCAodGhpcy5jbGFzc05hbWUgJiYgKHIgPSB0aGlzLmNsYXNzTmFtZS5tYXRjaCgvdWktcmVzaXphYmxlLShzZXxzd3xuZXxud3xufGV8c3x3KS9pKSksIGEuYXhpcyA9IHIgJiYgclsxXSA/IHJbMV0gOiBcInNlXCIpO1xuICAgICAgICB9KSwgby5hdXRvSGlkZSAmJiAodGhpcy5faGFuZGxlcy5oaWRlKCksIHRoaXMuX2FkZENsYXNzKFwidWktcmVzaXphYmxlLWF1dG9oaWRlXCIpKTtcbiAgICAgIH0sIF9yZW1vdmVIYW5kbGVzOiBmdW5jdGlvbiBfcmVtb3ZlSGFuZGxlcygpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlcy5yZW1vdmUoKTtcbiAgICAgIH0sIF9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uIF9tb3VzZUNhcHR1cmUoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzID0gITE7Zm9yIChpIGluIHRoaXMuaGFuZGxlcykge1xuICAgICAgICAgICgobiA9IHQodGhpcy5oYW5kbGVzW2ldKVswXSkgPT09IGUudGFyZ2V0IHx8IHQuY29udGFpbnMobiwgZS50YXJnZXQpKSAmJiAocyA9ICEwKTtcbiAgICAgICAgfXJldHVybiAhdGhpcy5vcHRpb25zLmRpc2FibGVkICYmIHM7XG4gICAgICB9LCBfbW91c2VTdGFydDogZnVuY3Rpb24gX21vdXNlU3RhcnQoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgciA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIG8gPSB0aGlzLmVsZW1lbnQ7cmV0dXJuIHRoaXMucmVzaXppbmcgPSAhMCwgdGhpcy5fcmVuZGVyUHJveHkoKSwgaSA9IHRoaXMuX251bSh0aGlzLmhlbHBlci5jc3MoXCJsZWZ0XCIpKSwgbiA9IHRoaXMuX251bSh0aGlzLmhlbHBlci5jc3MoXCJ0b3BcIikpLCByLmNvbnRhaW5tZW50ICYmIChpICs9IHQoci5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpIHx8IDAsIG4gKz0gdChyLmNvbnRhaW5tZW50KS5zY3JvbGxUb3AoKSB8fCAwKSwgdGhpcy5vZmZzZXQgPSB0aGlzLmhlbHBlci5vZmZzZXQoKSwgdGhpcy5wb3NpdGlvbiA9IHsgbGVmdDogaSwgdG9wOiBuIH0sIHRoaXMuc2l6ZSA9IHRoaXMuX2hlbHBlciA/IHsgd2lkdGg6IHRoaXMuaGVscGVyLndpZHRoKCksIGhlaWdodDogdGhpcy5oZWxwZXIuaGVpZ2h0KCkgfSA6IHsgd2lkdGg6IG8ud2lkdGgoKSwgaGVpZ2h0OiBvLmhlaWdodCgpIH0sIHRoaXMub3JpZ2luYWxTaXplID0gdGhpcy5faGVscGVyID8geyB3aWR0aDogby5vdXRlcldpZHRoKCksIGhlaWdodDogby5vdXRlckhlaWdodCgpIH0gOiB7IHdpZHRoOiBvLndpZHRoKCksIGhlaWdodDogby5oZWlnaHQoKSB9LCB0aGlzLnNpemVEaWZmID0geyB3aWR0aDogby5vdXRlcldpZHRoKCkgLSBvLndpZHRoKCksIGhlaWdodDogby5vdXRlckhlaWdodCgpIC0gby5oZWlnaHQoKSB9LCB0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB7IGxlZnQ6IGksIHRvcDogbiB9LCB0aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbiA9IHsgbGVmdDogZS5wYWdlWCwgdG9wOiBlLnBhZ2VZIH0sIHRoaXMuYXNwZWN0UmF0aW8gPSBcIm51bWJlclwiID09IHR5cGVvZiByLmFzcGVjdFJhdGlvID8gci5hc3BlY3RSYXRpbyA6IHRoaXMub3JpZ2luYWxTaXplLndpZHRoIC8gdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0IHx8IDEsIHMgPSB0KFwiLnVpLXJlc2l6YWJsZS1cIiArIHRoaXMuYXhpcykuY3NzKFwiY3Vyc29yXCIpLCB0KFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIiwgXCJhdXRvXCIgPT09IHMgPyB0aGlzLmF4aXMgKyBcIi1yZXNpemVcIiA6IHMpLCB0aGlzLl9hZGRDbGFzcyhcInVpLXJlc2l6YWJsZS1yZXNpemluZ1wiKSwgdGhpcy5fcHJvcGFnYXRlKFwic3RhcnRcIiwgZSksICEwO1xuICAgICAgfSwgX21vdXNlRHJhZzogZnVuY3Rpb24gX21vdXNlRHJhZyhlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMgPSB0aGlzLm9yaWdpbmFsTW91c2VQb3NpdGlvbixcbiAgICAgICAgICAgIHIgPSB0aGlzLmF4aXMsXG4gICAgICAgICAgICBvID0gZS5wYWdlWCAtIHMubGVmdCB8fCAwLFxuICAgICAgICAgICAgYSA9IGUucGFnZVkgLSBzLnRvcCB8fCAwLFxuICAgICAgICAgICAgbCA9IHRoaXMuX2NoYW5nZVtyXTtyZXR1cm4gdGhpcy5fdXBkYXRlUHJldlByb3BlcnRpZXMoKSwgISFsICYmIChpID0gbC5hcHBseSh0aGlzLCBbZSwgbywgYV0pLCB0aGlzLl91cGRhdGVWaXJ0dWFsQm91bmRhcmllcyhlLnNoaWZ0S2V5KSwgKHRoaXMuX2FzcGVjdFJhdGlvIHx8IGUuc2hpZnRLZXkpICYmIChpID0gdGhpcy5fdXBkYXRlUmF0aW8oaSwgZSkpLCBpID0gdGhpcy5fcmVzcGVjdFNpemUoaSwgZSksIHRoaXMuX3VwZGF0ZUNhY2hlKGkpLCB0aGlzLl9wcm9wYWdhdGUoXCJyZXNpemVcIiwgZSksIG4gPSB0aGlzLl9hcHBseUNoYW5nZXMoKSwgIXRoaXMuX2hlbHBlciAmJiB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aCAmJiB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpLCB0LmlzRW1wdHlPYmplY3QobikgfHwgKHRoaXMuX3VwZGF0ZVByZXZQcm9wZXJ0aWVzKCksIHRoaXMuX3RyaWdnZXIoXCJyZXNpemVcIiwgZSwgdGhpcy51aSgpKSwgdGhpcy5fYXBwbHlDaGFuZ2VzKCkpLCAhMSk7XG4gICAgICB9LCBfbW91c2VTdG9wOiBmdW5jdGlvbiBfbW91c2VTdG9wKGUpIHtcbiAgICAgICAgdGhpcy5yZXNpemluZyA9ICExO3ZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSA9IHRoaXMub3B0aW9ucztyZXR1cm4gdGhpcy5faGVscGVyICYmIChpID0gdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cywgbiA9IGkubGVuZ3RoICYmIC90ZXh0YXJlYS9pLnRlc3QoaVswXS5ub2RlTmFtZSksIHMgPSBuICYmIHRoaXMuX2hhc1Njcm9sbChpWzBdLCBcImxlZnRcIikgPyAwIDogdGhpcy5zaXplRGlmZi5oZWlnaHQsIHIgPSBuID8gMCA6IHRoaXMuc2l6ZURpZmYud2lkdGgsIG8gPSB7IHdpZHRoOiB0aGlzLmhlbHBlci53aWR0aCgpIC0gciwgaGVpZ2h0OiB0aGlzLmhlbHBlci5oZWlnaHQoKSAtIHMgfSwgYSA9IHBhcnNlRmxvYXQodGhpcy5lbGVtZW50LmNzcyhcImxlZnRcIikpICsgKHRoaXMucG9zaXRpb24ubGVmdCAtIHRoaXMub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KSB8fCBudWxsLCBsID0gcGFyc2VGbG9hdCh0aGlzLmVsZW1lbnQuY3NzKFwidG9wXCIpKSArICh0aGlzLnBvc2l0aW9uLnRvcCAtIHRoaXMub3JpZ2luYWxQb3NpdGlvbi50b3ApIHx8IG51bGwsIHUuYW5pbWF0ZSB8fCB0aGlzLmVsZW1lbnQuY3NzKHQuZXh0ZW5kKG8sIHsgdG9wOiBsLCBsZWZ0OiBhIH0pKSwgdGhpcy5oZWxwZXIuaGVpZ2h0KHRoaXMuc2l6ZS5oZWlnaHQpLCB0aGlzLmhlbHBlci53aWR0aCh0aGlzLnNpemUud2lkdGgpLCB0aGlzLl9oZWxwZXIgJiYgIXUuYW5pbWF0ZSAmJiB0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpKSwgdChcImJvZHlcIikuY3NzKFwiY3Vyc29yXCIsIFwiYXV0b1wiKSwgdGhpcy5fcmVtb3ZlQ2xhc3MoXCJ1aS1yZXNpemFibGUtcmVzaXppbmdcIiksIHRoaXMuX3Byb3BhZ2F0ZShcInN0b3BcIiwgZSksIHRoaXMuX2hlbHBlciAmJiB0aGlzLmhlbHBlci5yZW1vdmUoKSwgITE7XG4gICAgICB9LCBfdXBkYXRlUHJldlByb3BlcnRpZXM6IGZ1bmN0aW9uIF91cGRhdGVQcmV2UHJvcGVydGllcygpIHtcbiAgICAgICAgdGhpcy5wcmV2UG9zaXRpb24gPSB7IHRvcDogdGhpcy5wb3NpdGlvbi50b3AsIGxlZnQ6IHRoaXMucG9zaXRpb24ubGVmdCB9LCB0aGlzLnByZXZTaXplID0geyB3aWR0aDogdGhpcy5zaXplLndpZHRoLCBoZWlnaHQ6IHRoaXMuc2l6ZS5oZWlnaHQgfTtcbiAgICAgIH0sIF9hcHBseUNoYW5nZXM6IGZ1bmN0aW9uIF9hcHBseUNoYW5nZXMoKSB7XG4gICAgICAgIHZhciB0ID0ge307cmV0dXJuIHRoaXMucG9zaXRpb24udG9wICE9PSB0aGlzLnByZXZQb3NpdGlvbi50b3AgJiYgKHQudG9wID0gdGhpcy5wb3NpdGlvbi50b3AgKyBcInB4XCIpLCB0aGlzLnBvc2l0aW9uLmxlZnQgIT09IHRoaXMucHJldlBvc2l0aW9uLmxlZnQgJiYgKHQubGVmdCA9IHRoaXMucG9zaXRpb24ubGVmdCArIFwicHhcIiksIHRoaXMuc2l6ZS53aWR0aCAhPT0gdGhpcy5wcmV2U2l6ZS53aWR0aCAmJiAodC53aWR0aCA9IHRoaXMuc2l6ZS53aWR0aCArIFwicHhcIiksIHRoaXMuc2l6ZS5oZWlnaHQgIT09IHRoaXMucHJldlNpemUuaGVpZ2h0ICYmICh0LmhlaWdodCA9IHRoaXMuc2l6ZS5oZWlnaHQgKyBcInB4XCIpLCB0aGlzLmhlbHBlci5jc3ModCksIHQ7XG4gICAgICB9LCBfdXBkYXRlVmlydHVhbEJvdW5kYXJpZXM6IGZ1bmN0aW9uIF91cGRhdGVWaXJ0dWFsQm91bmRhcmllcyh0KSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8gPSB0aGlzLm9wdGlvbnM7ciA9IHsgbWluV2lkdGg6IHRoaXMuX2lzTnVtYmVyKG8ubWluV2lkdGgpID8gby5taW5XaWR0aCA6IDAsIG1heFdpZHRoOiB0aGlzLl9pc051bWJlcihvLm1heFdpZHRoKSA/IG8ubWF4V2lkdGggOiAxIC8gMCwgbWluSGVpZ2h0OiB0aGlzLl9pc051bWJlcihvLm1pbkhlaWdodCkgPyBvLm1pbkhlaWdodCA6IDAsIG1heEhlaWdodDogdGhpcy5faXNOdW1iZXIoby5tYXhIZWlnaHQpID8gby5tYXhIZWlnaHQgOiAxIC8gMCB9LCAodGhpcy5fYXNwZWN0UmF0aW8gfHwgdCkgJiYgKGUgPSByLm1pbkhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW8sIG4gPSByLm1pbldpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbywgaSA9IHIubWF4SGVpZ2h0ICogdGhpcy5hc3BlY3RSYXRpbywgcyA9IHIubWF4V2lkdGggLyB0aGlzLmFzcGVjdFJhdGlvLCBlID4gci5taW5XaWR0aCAmJiAoci5taW5XaWR0aCA9IGUpLCBuID4gci5taW5IZWlnaHQgJiYgKHIubWluSGVpZ2h0ID0gbiksIGkgPCByLm1heFdpZHRoICYmIChyLm1heFdpZHRoID0gaSksIHMgPCByLm1heEhlaWdodCAmJiAoci5tYXhIZWlnaHQgPSBzKSksIHRoaXMuX3ZCb3VuZGFyaWVzID0gcjtcbiAgICAgIH0sIF91cGRhdGVDYWNoZTogZnVuY3Rpb24gX3VwZGF0ZUNhY2hlKHQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmhlbHBlci5vZmZzZXQoKSwgdGhpcy5faXNOdW1iZXIodC5sZWZ0KSAmJiAodGhpcy5wb3NpdGlvbi5sZWZ0ID0gdC5sZWZ0KSwgdGhpcy5faXNOdW1iZXIodC50b3ApICYmICh0aGlzLnBvc2l0aW9uLnRvcCA9IHQudG9wKSwgdGhpcy5faXNOdW1iZXIodC5oZWlnaHQpICYmICh0aGlzLnNpemUuaGVpZ2h0ID0gdC5oZWlnaHQpLCB0aGlzLl9pc051bWJlcih0LndpZHRoKSAmJiAodGhpcy5zaXplLndpZHRoID0gdC53aWR0aCk7XG4gICAgICB9LCBfdXBkYXRlUmF0aW86IGZ1bmN0aW9uIF91cGRhdGVSYXRpbyh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wb3NpdGlvbixcbiAgICAgICAgICAgIGkgPSB0aGlzLnNpemUsXG4gICAgICAgICAgICBuID0gdGhpcy5heGlzO3JldHVybiB0aGlzLl9pc051bWJlcih0LmhlaWdodCkgPyB0LndpZHRoID0gdC5oZWlnaHQgKiB0aGlzLmFzcGVjdFJhdGlvIDogdGhpcy5faXNOdW1iZXIodC53aWR0aCkgJiYgKHQuaGVpZ2h0ID0gdC53aWR0aCAvIHRoaXMuYXNwZWN0UmF0aW8pLCBcInN3XCIgPT09IG4gJiYgKHQubGVmdCA9IGUubGVmdCArIChpLndpZHRoIC0gdC53aWR0aCksIHQudG9wID0gbnVsbCksIFwibndcIiA9PT0gbiAmJiAodC50b3AgPSBlLnRvcCArIChpLmhlaWdodCAtIHQuaGVpZ2h0KSwgdC5sZWZ0ID0gZS5sZWZ0ICsgKGkud2lkdGggLSB0LndpZHRoKSksIHQ7XG4gICAgICB9LCBfcmVzcGVjdFNpemU6IGZ1bmN0aW9uIF9yZXNwZWN0U2l6ZSh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5fdkJvdW5kYXJpZXMsXG4gICAgICAgICAgICBpID0gdGhpcy5heGlzLFxuICAgICAgICAgICAgbiA9IHRoaXMuX2lzTnVtYmVyKHQud2lkdGgpICYmIGUubWF4V2lkdGggJiYgZS5tYXhXaWR0aCA8IHQud2lkdGgsXG4gICAgICAgICAgICBzID0gdGhpcy5faXNOdW1iZXIodC5oZWlnaHQpICYmIGUubWF4SGVpZ2h0ICYmIGUubWF4SGVpZ2h0IDwgdC5oZWlnaHQsXG4gICAgICAgICAgICByID0gdGhpcy5faXNOdW1iZXIodC53aWR0aCkgJiYgZS5taW5XaWR0aCAmJiBlLm1pbldpZHRoID4gdC53aWR0aCxcbiAgICAgICAgICAgIG8gPSB0aGlzLl9pc051bWJlcih0LmhlaWdodCkgJiYgZS5taW5IZWlnaHQgJiYgZS5taW5IZWlnaHQgPiB0LmhlaWdodCxcbiAgICAgICAgICAgIGEgPSB0aGlzLm9yaWdpbmFsUG9zaXRpb24ubGVmdCArIHRoaXMub3JpZ2luYWxTaXplLndpZHRoLFxuICAgICAgICAgICAgbCA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbi50b3AgKyB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICB1ID0gL3N3fG53fHcvLnRlc3QoaSksXG4gICAgICAgICAgICBjID0gL253fG5lfG4vLnRlc3QoaSk7cmV0dXJuIHIgJiYgKHQud2lkdGggPSBlLm1pbldpZHRoKSwgbyAmJiAodC5oZWlnaHQgPSBlLm1pbkhlaWdodCksIG4gJiYgKHQud2lkdGggPSBlLm1heFdpZHRoKSwgcyAmJiAodC5oZWlnaHQgPSBlLm1heEhlaWdodCksIHIgJiYgdSAmJiAodC5sZWZ0ID0gYSAtIGUubWluV2lkdGgpLCBuICYmIHUgJiYgKHQubGVmdCA9IGEgLSBlLm1heFdpZHRoKSwgbyAmJiBjICYmICh0LnRvcCA9IGwgLSBlLm1pbkhlaWdodCksIHMgJiYgYyAmJiAodC50b3AgPSBsIC0gZS5tYXhIZWlnaHQpLCB0LndpZHRoIHx8IHQuaGVpZ2h0IHx8IHQubGVmdCB8fCAhdC50b3AgPyB0LndpZHRoIHx8IHQuaGVpZ2h0IHx8IHQudG9wIHx8ICF0LmxlZnQgfHwgKHQubGVmdCA9IG51bGwpIDogdC50b3AgPSBudWxsLCB0O1xuICAgICAgfSwgX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9uczogZnVuY3Rpb24gX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyh0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSAwLCBpID0gW10sIG4gPSBbdC5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwgdC5jc3MoXCJib3JkZXJSaWdodFdpZHRoXCIpLCB0LmNzcyhcImJvcmRlckJvdHRvbVdpZHRoXCIpLCB0LmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKV0sIHMgPSBbdC5jc3MoXCJwYWRkaW5nVG9wXCIpLCB0LmNzcyhcInBhZGRpbmdSaWdodFwiKSwgdC5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLCB0LmNzcyhcInBhZGRpbmdMZWZ0XCIpXTsgZSA8IDQ7IGUrKykge1xuICAgICAgICAgIGlbZV0gPSBwYXJzZUZsb2F0KG5bZV0pIHx8IDAsIGlbZV0gKz0gcGFyc2VGbG9hdChzW2VdKSB8fCAwO1xuICAgICAgICB9cmV0dXJuIHsgaGVpZ2h0OiBpWzBdICsgaVsyXSwgd2lkdGg6IGlbMV0gKyBpWzNdIH07XG4gICAgICB9LCBfcHJvcG9ydGlvbmFsbHlSZXNpemU6IGZ1bmN0aW9uIF9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoKSBmb3IgKHZhciB0LCBlID0gMCwgaSA9IHRoaXMuaGVscGVyIHx8IHRoaXMuZWxlbWVudDsgZSA8IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICB0ID0gdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50c1tlXSwgdGhpcy5vdXRlckRpbWVuc2lvbnMgfHwgKHRoaXMub3V0ZXJEaW1lbnNpb25zID0gdGhpcy5fZ2V0UGFkZGluZ1BsdXNCb3JkZXJEaW1lbnNpb25zKHQpKSwgdC5jc3MoeyBoZWlnaHQ6IGkuaGVpZ2h0KCkgLSB0aGlzLm91dGVyRGltZW5zaW9ucy5oZWlnaHQgfHwgMCwgd2lkdGg6IGkud2lkdGgoKSAtIHRoaXMub3V0ZXJEaW1lbnNpb25zLndpZHRoIHx8IDAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9yZW5kZXJQcm94eTogZnVuY3Rpb24gX3JlbmRlclByb3h5KCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIGkgPSB0aGlzLm9wdGlvbnM7dGhpcy5lbGVtZW50T2Zmc2V0ID0gZS5vZmZzZXQoKSwgdGhpcy5faGVscGVyID8gKHRoaXMuaGVscGVyID0gdGhpcy5oZWxwZXIgfHwgdChcIjxkaXYgc3R5bGU9J292ZXJmbG93OmhpZGRlbjsnPjwvZGl2PlwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsIHRoaXMuX2hlbHBlciksIHRoaXMuaGVscGVyLmNzcyh7IHdpZHRoOiB0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLCBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBsZWZ0OiB0aGlzLmVsZW1lbnRPZmZzZXQubGVmdCArIFwicHhcIiwgdG9wOiB0aGlzLmVsZW1lbnRPZmZzZXQudG9wICsgXCJweFwiLCB6SW5kZXg6ICsraS56SW5kZXggfSksIHRoaXMuaGVscGVyLmFwcGVuZFRvKFwiYm9keVwiKS5kaXNhYmxlU2VsZWN0aW9uKCkpIDogdGhpcy5oZWxwZXIgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICB9LCBfY2hhbmdlOiB7IGU6IGZ1bmN0aW9uIGUodCwgX2U0KSB7XG4gICAgICAgICAgcmV0dXJuIHsgd2lkdGg6IHRoaXMub3JpZ2luYWxTaXplLndpZHRoICsgX2U0IH07XG4gICAgICAgIH0sIHc6IGZ1bmN0aW9uIHcodCwgZSkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5vcmlnaW5hbFNpemUsXG4gICAgICAgICAgICAgIG4gPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247cmV0dXJuIHsgbGVmdDogbi5sZWZ0ICsgZSwgd2lkdGg6IGkud2lkdGggLSBlIH07XG4gICAgICAgIH0sIG46IGZ1bmN0aW9uIG4odCwgZSwgaSkge1xuICAgICAgICAgIHZhciBuID0gdGhpcy5vcmlnaW5hbFNpemUsXG4gICAgICAgICAgICAgIHMgPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247cmV0dXJuIHsgdG9wOiBzLnRvcCArIGksIGhlaWdodDogbi5oZWlnaHQgLSBpIH07XG4gICAgICAgIH0sIHM6IGZ1bmN0aW9uIHModCwgZSwgaSkge1xuICAgICAgICAgIHJldHVybiB7IGhlaWdodDogdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0ICsgaSB9O1xuICAgICAgICB9LCBzZTogZnVuY3Rpb24gc2UoZSwgaSwgbikge1xuICAgICAgICAgIHJldHVybiB0LmV4dGVuZCh0aGlzLl9jaGFuZ2Uucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0aGlzLl9jaGFuZ2UuZS5hcHBseSh0aGlzLCBbZSwgaSwgbl0pKTtcbiAgICAgICAgfSwgc3c6IGZ1bmN0aW9uIHN3KGUsIGksIG4pIHtcbiAgICAgICAgICByZXR1cm4gdC5leHRlbmQodGhpcy5fY2hhbmdlLnMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGhpcy5fY2hhbmdlLncuYXBwbHkodGhpcywgW2UsIGksIG5dKSk7XG4gICAgICAgIH0sIG5lOiBmdW5jdGlvbiBuZShlLCBpLCBuKSB7XG4gICAgICAgICAgcmV0dXJuIHQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX2NoYW5nZS5lLmFwcGx5KHRoaXMsIFtlLCBpLCBuXSkpO1xuICAgICAgICB9LCBudzogZnVuY3Rpb24gbncoZSwgaSwgbikge1xuICAgICAgICAgIHJldHVybiB0LmV4dGVuZCh0aGlzLl9jaGFuZ2Uubi5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0aGlzLl9jaGFuZ2Uudy5hcHBseSh0aGlzLCBbZSwgaSwgbl0pKTtcbiAgICAgICAgfSB9LCBfcHJvcGFnYXRlOiBmdW5jdGlvbiBfcHJvcGFnYXRlKGUsIGkpIHtcbiAgICAgICAgdC51aS5wbHVnaW4uY2FsbCh0aGlzLCBlLCBbaSwgdGhpcy51aSgpXSksIFwicmVzaXplXCIgIT09IGUgJiYgdGhpcy5fdHJpZ2dlcihlLCBpLCB0aGlzLnVpKCkpO1xuICAgICAgfSwgcGx1Z2luczoge30sIHVpOiBmdW5jdGlvbiB1aSgpIHtcbiAgICAgICAgcmV0dXJuIHsgb3JpZ2luYWxFbGVtZW50OiB0aGlzLm9yaWdpbmFsRWxlbWVudCwgZWxlbWVudDogdGhpcy5lbGVtZW50LCBoZWxwZXI6IHRoaXMuaGVscGVyLCBwb3NpdGlvbjogdGhpcy5wb3NpdGlvbiwgc2l6ZTogdGhpcy5zaXplLCBvcmlnaW5hbFNpemU6IHRoaXMub3JpZ2luYWxTaXplLCBvcmlnaW5hbFBvc2l0aW9uOiB0aGlzLm9yaWdpbmFsUG9zaXRpb24gfTtcbiAgICAgIH0gfSksIHQudWkucGx1Z2luLmFkZChcInJlc2l6YWJsZVwiLCBcImFuaW1hdGVcIiwgeyBzdG9wOiBmdW5jdGlvbiBzdG9wKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0KHRoaXMpLnJlc2l6YWJsZShcImluc3RhbmNlXCIpLFxuICAgICAgICAgICAgbiA9IGkub3B0aW9ucyxcbiAgICAgICAgICAgIHMgPSBpLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLFxuICAgICAgICAgICAgciA9IHMubGVuZ3RoICYmIC90ZXh0YXJlYS9pLnRlc3Qoc1swXS5ub2RlTmFtZSksXG4gICAgICAgICAgICBvID0gciAmJiBpLl9oYXNTY3JvbGwoc1swXSwgXCJsZWZ0XCIpID8gMCA6IGkuc2l6ZURpZmYuaGVpZ2h0LFxuICAgICAgICAgICAgYSA9IHIgPyAwIDogaS5zaXplRGlmZi53aWR0aCxcbiAgICAgICAgICAgIGwgPSB7IHdpZHRoOiBpLnNpemUud2lkdGggLSBhLCBoZWlnaHQ6IGkuc2l6ZS5oZWlnaHQgLSBvIH0sXG4gICAgICAgICAgICB1ID0gcGFyc2VGbG9hdChpLmVsZW1lbnQuY3NzKFwibGVmdFwiKSkgKyAoaS5wb3NpdGlvbi5sZWZ0IC0gaS5vcmlnaW5hbFBvc2l0aW9uLmxlZnQpIHx8IG51bGwsXG4gICAgICAgICAgICBjID0gcGFyc2VGbG9hdChpLmVsZW1lbnQuY3NzKFwidG9wXCIpKSArIChpLnBvc2l0aW9uLnRvcCAtIGkub3JpZ2luYWxQb3NpdGlvbi50b3ApIHx8IG51bGw7aS5lbGVtZW50LmFuaW1hdGUodC5leHRlbmQobCwgYyAmJiB1ID8geyB0b3A6IGMsIGxlZnQ6IHUgfSA6IHt9KSwgeyBkdXJhdGlvbjogbi5hbmltYXRlRHVyYXRpb24sIGVhc2luZzogbi5hbmltYXRlRWFzaW5nLCBzdGVwOiBmdW5jdGlvbiBzdGVwKCkge1xuICAgICAgICAgICAgdmFyIG4gPSB7IHdpZHRoOiBwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoXCJ3aWR0aFwiKSksIGhlaWdodDogcGFyc2VGbG9hdChpLmVsZW1lbnQuY3NzKFwiaGVpZ2h0XCIpKSwgdG9wOiBwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoXCJ0b3BcIikpLCBsZWZ0OiBwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoXCJsZWZ0XCIpKSB9O3MgJiYgcy5sZW5ndGggJiYgdChzWzBdKS5jc3MoeyB3aWR0aDogbi53aWR0aCwgaGVpZ2h0OiBuLmhlaWdodCB9KSwgaS5fdXBkYXRlQ2FjaGUobiksIGkuX3Byb3BhZ2F0ZShcInJlc2l6ZVwiLCBlKTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4uYWRkKFwicmVzaXphYmxlXCIsIFwiY29udGFpbm1lbnRcIiwgeyBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCA9IHQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIiksXG4gICAgICAgICAgICB1ID0gbC5vcHRpb25zLFxuICAgICAgICAgICAgYyA9IGwuZWxlbWVudCxcbiAgICAgICAgICAgIGggPSB1LmNvbnRhaW5tZW50LFxuICAgICAgICAgICAgZCA9IGggaW5zdGFuY2VvZiB0ID8gaC5nZXQoMCkgOiAvcGFyZW50Ly50ZXN0KGgpID8gYy5wYXJlbnQoKS5nZXQoMCkgOiBoO2QgJiYgKGwuY29udGFpbmVyRWxlbWVudCA9IHQoZCksIC9kb2N1bWVudC8udGVzdChoKSB8fCBoID09PSBkb2N1bWVudCA/IChsLmNvbnRhaW5lck9mZnNldCA9IHsgbGVmdDogMCwgdG9wOiAwIH0sIGwuY29udGFpbmVyUG9zaXRpb24gPSB7IGxlZnQ6IDAsIHRvcDogMCB9LCBsLnBhcmVudERhdGEgPSB7IGVsZW1lbnQ6IHQoZG9jdW1lbnQpLCBsZWZ0OiAwLCB0b3A6IDAsIHdpZHRoOiB0KGRvY3VtZW50KS53aWR0aCgpLCBoZWlnaHQ6IHQoZG9jdW1lbnQpLmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQgfSkgOiAoZSA9IHQoZCksIGkgPSBbXSwgdChbXCJUb3BcIiwgXCJSaWdodFwiLCBcIkxlZnRcIiwgXCJCb3R0b21cIl0pLmVhY2goZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgICBpW3RdID0gbC5fbnVtKGUuY3NzKFwicGFkZGluZ1wiICsgbikpO1xuICAgICAgICB9KSwgbC5jb250YWluZXJPZmZzZXQgPSBlLm9mZnNldCgpLCBsLmNvbnRhaW5lclBvc2l0aW9uID0gZS5wb3NpdGlvbigpLCBsLmNvbnRhaW5lclNpemUgPSB7IGhlaWdodDogZS5pbm5lckhlaWdodCgpIC0gaVszXSwgd2lkdGg6IGUuaW5uZXJXaWR0aCgpIC0gaVsxXSB9LCBuID0gbC5jb250YWluZXJPZmZzZXQsIHMgPSBsLmNvbnRhaW5lclNpemUuaGVpZ2h0LCByID0gbC5jb250YWluZXJTaXplLndpZHRoLCBvID0gbC5faGFzU2Nyb2xsKGQsIFwibGVmdFwiKSA/IGQuc2Nyb2xsV2lkdGggOiByLCBhID0gbC5faGFzU2Nyb2xsKGQpID8gZC5zY3JvbGxIZWlnaHQgOiBzLCBsLnBhcmVudERhdGEgPSB7IGVsZW1lbnQ6IGQsIGxlZnQ6IG4ubGVmdCwgdG9wOiBuLnRvcCwgd2lkdGg6IG8sIGhlaWdodDogYSB9KSk7XG4gICAgICB9LCByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZShlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyA9IHQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIiksXG4gICAgICAgICAgICBhID0gby5vcHRpb25zLFxuICAgICAgICAgICAgbCA9IG8uY29udGFpbmVyT2Zmc2V0LFxuICAgICAgICAgICAgdSA9IG8ucG9zaXRpb24sXG4gICAgICAgICAgICBjID0gby5fYXNwZWN0UmF0aW8gfHwgZS5zaGlmdEtleSxcbiAgICAgICAgICAgIGggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuICAgICAgICAgICAgZCA9IG8uY29udGFpbmVyRWxlbWVudCxcbiAgICAgICAgICAgIHAgPSAhMDtkWzBdICE9PSBkb2N1bWVudCAmJiAvc3RhdGljLy50ZXN0KGQuY3NzKFwicG9zaXRpb25cIikpICYmIChoID0gbCksIHUubGVmdCA8IChvLl9oZWxwZXIgPyBsLmxlZnQgOiAwKSAmJiAoby5zaXplLndpZHRoID0gby5zaXplLndpZHRoICsgKG8uX2hlbHBlciA/IG8ucG9zaXRpb24ubGVmdCAtIGwubGVmdCA6IG8ucG9zaXRpb24ubGVmdCAtIGgubGVmdCksIGMgJiYgKG8uc2l6ZS5oZWlnaHQgPSBvLnNpemUud2lkdGggLyBvLmFzcGVjdFJhdGlvLCBwID0gITEpLCBvLnBvc2l0aW9uLmxlZnQgPSBhLmhlbHBlciA/IGwubGVmdCA6IDApLCB1LnRvcCA8IChvLl9oZWxwZXIgPyBsLnRvcCA6IDApICYmIChvLnNpemUuaGVpZ2h0ID0gby5zaXplLmhlaWdodCArIChvLl9oZWxwZXIgPyBvLnBvc2l0aW9uLnRvcCAtIGwudG9wIDogby5wb3NpdGlvbi50b3ApLCBjICYmIChvLnNpemUud2lkdGggPSBvLnNpemUuaGVpZ2h0ICogby5hc3BlY3RSYXRpbywgcCA9ICExKSwgby5wb3NpdGlvbi50b3AgPSBvLl9oZWxwZXIgPyBsLnRvcCA6IDApLCBzID0gby5jb250YWluZXJFbGVtZW50LmdldCgwKSA9PT0gby5lbGVtZW50LnBhcmVudCgpLmdldCgwKSwgciA9IC9yZWxhdGl2ZXxhYnNvbHV0ZS8udGVzdChvLmNvbnRhaW5lckVsZW1lbnQuY3NzKFwicG9zaXRpb25cIikpLCBzICYmIHIgPyAoby5vZmZzZXQubGVmdCA9IG8ucGFyZW50RGF0YS5sZWZ0ICsgby5wb3NpdGlvbi5sZWZ0LCBvLm9mZnNldC50b3AgPSBvLnBhcmVudERhdGEudG9wICsgby5wb3NpdGlvbi50b3ApIDogKG8ub2Zmc2V0LmxlZnQgPSBvLmVsZW1lbnQub2Zmc2V0KCkubGVmdCwgby5vZmZzZXQudG9wID0gby5lbGVtZW50Lm9mZnNldCgpLnRvcCksIGkgPSBNYXRoLmFicyhvLnNpemVEaWZmLndpZHRoICsgKG8uX2hlbHBlciA/IG8ub2Zmc2V0LmxlZnQgLSBoLmxlZnQgOiBvLm9mZnNldC5sZWZ0IC0gbC5sZWZ0KSksIG4gPSBNYXRoLmFicyhvLnNpemVEaWZmLmhlaWdodCArIChvLl9oZWxwZXIgPyBvLm9mZnNldC50b3AgLSBoLnRvcCA6IG8ub2Zmc2V0LnRvcCAtIGwudG9wKSksIGkgKyBvLnNpemUud2lkdGggPj0gby5wYXJlbnREYXRhLndpZHRoICYmIChvLnNpemUud2lkdGggPSBvLnBhcmVudERhdGEud2lkdGggLSBpLCBjICYmIChvLnNpemUuaGVpZ2h0ID0gby5zaXplLndpZHRoIC8gby5hc3BlY3RSYXRpbywgcCA9ICExKSksIG4gKyBvLnNpemUuaGVpZ2h0ID49IG8ucGFyZW50RGF0YS5oZWlnaHQgJiYgKG8uc2l6ZS5oZWlnaHQgPSBvLnBhcmVudERhdGEuaGVpZ2h0IC0gbiwgYyAmJiAoby5zaXplLndpZHRoID0gby5zaXplLmhlaWdodCAqIG8uYXNwZWN0UmF0aW8sIHAgPSAhMSkpLCBwIHx8IChvLnBvc2l0aW9uLmxlZnQgPSBvLnByZXZQb3NpdGlvbi5sZWZ0LCBvLnBvc2l0aW9uLnRvcCA9IG8ucHJldlBvc2l0aW9uLnRvcCwgby5zaXplLndpZHRoID0gby5wcmV2U2l6ZS53aWR0aCwgby5zaXplLmhlaWdodCA9IG8ucHJldlNpemUuaGVpZ2h0KTtcbiAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHZhciBlID0gdCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxcbiAgICAgICAgICAgIGkgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICBuID0gZS5jb250YWluZXJPZmZzZXQsXG4gICAgICAgICAgICBzID0gZS5jb250YWluZXJQb3NpdGlvbixcbiAgICAgICAgICAgIHIgPSBlLmNvbnRhaW5lckVsZW1lbnQsXG4gICAgICAgICAgICBvID0gdChlLmhlbHBlciksXG4gICAgICAgICAgICBhID0gby5vZmZzZXQoKSxcbiAgICAgICAgICAgIGwgPSBvLm91dGVyV2lkdGgoKSAtIGUuc2l6ZURpZmYud2lkdGgsXG4gICAgICAgICAgICB1ID0gby5vdXRlckhlaWdodCgpIC0gZS5zaXplRGlmZi5oZWlnaHQ7ZS5faGVscGVyICYmICFpLmFuaW1hdGUgJiYgL3JlbGF0aXZlLy50ZXN0KHIuY3NzKFwicG9zaXRpb25cIikpICYmIHQodGhpcykuY3NzKHsgbGVmdDogYS5sZWZ0IC0gcy5sZWZ0IC0gbi5sZWZ0LCB3aWR0aDogbCwgaGVpZ2h0OiB1IH0pLCBlLl9oZWxwZXIgJiYgIWkuYW5pbWF0ZSAmJiAvc3RhdGljLy50ZXN0KHIuY3NzKFwicG9zaXRpb25cIikpICYmIHQodGhpcykuY3NzKHsgbGVmdDogYS5sZWZ0IC0gcy5sZWZ0IC0gbi5sZWZ0LCB3aWR0aDogbCwgaGVpZ2h0OiB1IH0pO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4uYWRkKFwicmVzaXphYmxlXCIsIFwiYWxzb1Jlc2l6ZVwiLCB7IHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgdmFyIGUgPSB0KHRoaXMpLnJlc2l6YWJsZShcImluc3RhbmNlXCIpLFxuICAgICAgICAgICAgaSA9IGUub3B0aW9uczt0KGkuYWxzb1Jlc2l6ZSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0KHRoaXMpO2UuZGF0YShcInVpLXJlc2l6YWJsZS1hbHNvcmVzaXplXCIsIHsgd2lkdGg6IHBhcnNlRmxvYXQoZS53aWR0aCgpKSwgaGVpZ2h0OiBwYXJzZUZsb2F0KGUuaGVpZ2h0KCkpLCBsZWZ0OiBwYXJzZUZsb2F0KGUuY3NzKFwibGVmdFwiKSksIHRvcDogcGFyc2VGbG9hdChlLmNzcyhcInRvcFwiKSkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIiksXG4gICAgICAgICAgICBzID0gbi5vcHRpb25zLFxuICAgICAgICAgICAgciA9IG4ub3JpZ2luYWxTaXplLFxuICAgICAgICAgICAgbyA9IG4ub3JpZ2luYWxQb3NpdGlvbixcbiAgICAgICAgICAgIGEgPSB7IGhlaWdodDogbi5zaXplLmhlaWdodCAtIHIuaGVpZ2h0IHx8IDAsIHdpZHRoOiBuLnNpemUud2lkdGggLSByLndpZHRoIHx8IDAsIHRvcDogbi5wb3NpdGlvbi50b3AgLSBvLnRvcCB8fCAwLCBsZWZ0OiBuLnBvc2l0aW9uLmxlZnQgLSBvLmxlZnQgfHwgMCB9O3Qocy5hbHNvUmVzaXplKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHQodGhpcyksXG4gICAgICAgICAgICAgIG4gPSB0KHRoaXMpLmRhdGEoXCJ1aS1yZXNpemFibGUtYWxzb3Jlc2l6ZVwiKSxcbiAgICAgICAgICAgICAgcyA9IHt9LFxuICAgICAgICAgICAgICByID0gZS5wYXJlbnRzKGkub3JpZ2luYWxFbGVtZW50WzBdKS5sZW5ndGggPyBbXCJ3aWR0aFwiLCBcImhlaWdodFwiXSA6IFtcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwidG9wXCIsIFwibGVmdFwiXTt0LmVhY2gociwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gKG5bZV0gfHwgMCkgKyAoYVtlXSB8fCAwKTtpICYmIGkgPj0gMCAmJiAoc1tlXSA9IGkgfHwgbnVsbCk7XG4gICAgICAgICAgfSksIGUuY3NzKHMpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHQodGhpcykucmVtb3ZlRGF0YShcInVpLXJlc2l6YWJsZS1hbHNvcmVzaXplXCIpO1xuICAgICAgfSB9KSwgdC51aS5wbHVnaW4uYWRkKFwicmVzaXphYmxlXCIsIFwiZ2hvc3RcIiwgeyBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHZhciBlID0gdCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxcbiAgICAgICAgICAgIGkgPSBlLnNpemU7ZS5naG9zdCA9IGUub3JpZ2luYWxFbGVtZW50LmNsb25lKCksIGUuZ2hvc3QuY3NzKHsgb3BhY2l0eTogLjI1LCBkaXNwbGF5OiBcImJsb2NrXCIsIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsIGhlaWdodDogaS5oZWlnaHQsIHdpZHRoOiBpLndpZHRoLCBtYXJnaW46IDAsIGxlZnQ6IDAsIHRvcDogMCB9KSwgZS5fYWRkQ2xhc3MoZS5naG9zdCwgXCJ1aS1yZXNpemFibGUtZ2hvc3RcIiksICExICE9PSB0LnVpQmFja0NvbXBhdCAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBlLm9wdGlvbnMuZ2hvc3QgJiYgZS5naG9zdC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZ2hvc3QpLCBlLmdob3N0LmFwcGVuZFRvKGUuaGVscGVyKTtcbiAgICAgIH0sIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICB2YXIgZSA9IHQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIik7ZS5naG9zdCAmJiBlLmdob3N0LmNzcyh7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsIGhlaWdodDogZS5zaXplLmhlaWdodCwgd2lkdGg6IGUuc2l6ZS53aWR0aCB9KTtcbiAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHZhciBlID0gdCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKTtlLmdob3N0ICYmIGUuaGVscGVyICYmIGUuaGVscGVyLmdldCgwKS5yZW1vdmVDaGlsZChlLmdob3N0LmdldCgwKSk7XG4gICAgICB9IH0pLCB0LnVpLnBsdWdpbi5hZGQoXCJyZXNpemFibGVcIiwgXCJncmlkXCIsIHsgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgaSA9IHQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIiksXG4gICAgICAgICAgICBuID0gaS5vcHRpb25zLFxuICAgICAgICAgICAgcyA9IGkuc2l6ZSxcbiAgICAgICAgICAgIHIgPSBpLm9yaWdpbmFsU2l6ZSxcbiAgICAgICAgICAgIG8gPSBpLm9yaWdpbmFsUG9zaXRpb24sXG4gICAgICAgICAgICBhID0gaS5heGlzLFxuICAgICAgICAgICAgbCA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIG4uZ3JpZCA/IFtuLmdyaWQsIG4uZ3JpZF0gOiBuLmdyaWQsXG4gICAgICAgICAgICB1ID0gbFswXSB8fCAxLFxuICAgICAgICAgICAgYyA9IGxbMV0gfHwgMSxcbiAgICAgICAgICAgIGggPSBNYXRoLnJvdW5kKChzLndpZHRoIC0gci53aWR0aCkgLyB1KSAqIHUsXG4gICAgICAgICAgICBkID0gTWF0aC5yb3VuZCgocy5oZWlnaHQgLSByLmhlaWdodCkgLyBjKSAqIGMsXG4gICAgICAgICAgICBwID0gci53aWR0aCArIGgsXG4gICAgICAgICAgICBmID0gci5oZWlnaHQgKyBkLFxuICAgICAgICAgICAgZyA9IG4ubWF4V2lkdGggJiYgbi5tYXhXaWR0aCA8IHAsXG4gICAgICAgICAgICBtID0gbi5tYXhIZWlnaHQgJiYgbi5tYXhIZWlnaHQgPCBmLFxuICAgICAgICAgICAgdiA9IG4ubWluV2lkdGggJiYgbi5taW5XaWR0aCA+IHAsXG4gICAgICAgICAgICBfID0gbi5taW5IZWlnaHQgJiYgbi5taW5IZWlnaHQgPiBmO24uZ3JpZCA9IGwsIHYgJiYgKHAgKz0gdSksIF8gJiYgKGYgKz0gYyksIGcgJiYgKHAgLT0gdSksIG0gJiYgKGYgLT0gYyksIC9eKHNlfHN8ZSkkLy50ZXN0KGEpID8gKGkuc2l6ZS53aWR0aCA9IHAsIGkuc2l6ZS5oZWlnaHQgPSBmKSA6IC9eKG5lKSQvLnRlc3QoYSkgPyAoaS5zaXplLndpZHRoID0gcCwgaS5zaXplLmhlaWdodCA9IGYsIGkucG9zaXRpb24udG9wID0gby50b3AgLSBkKSA6IC9eKHN3KSQvLnRlc3QoYSkgPyAoaS5zaXplLndpZHRoID0gcCwgaS5zaXplLmhlaWdodCA9IGYsIGkucG9zaXRpb24ubGVmdCA9IG8ubGVmdCAtIGgpIDogKChmIC0gYyA8PSAwIHx8IHAgLSB1IDw9IDApICYmIChlID0gaS5fZ2V0UGFkZGluZ1BsdXNCb3JkZXJEaW1lbnNpb25zKHRoaXMpKSwgZiAtIGMgPiAwID8gKGkuc2l6ZS5oZWlnaHQgPSBmLCBpLnBvc2l0aW9uLnRvcCA9IG8udG9wIC0gZCkgOiAoZiA9IGMgLSBlLmhlaWdodCwgaS5zaXplLmhlaWdodCA9IGYsIGkucG9zaXRpb24udG9wID0gby50b3AgKyByLmhlaWdodCAtIGYpLCBwIC0gdSA+IDAgPyAoaS5zaXplLndpZHRoID0gcCwgaS5wb3NpdGlvbi5sZWZ0ID0gby5sZWZ0IC0gaCkgOiAocCA9IHUgLSBlLndpZHRoLCBpLnNpemUud2lkdGggPSBwLCBpLnBvc2l0aW9uLmxlZnQgPSBvLmxlZnQgKyByLndpZHRoIC0gcCkpO1xuICAgICAgfSB9KSwgdC51aS5yZXNpemFibGUsXG4gICAgLyohXG4gICAgICogalF1ZXJ5IFVJIERpYWxvZyAxLjEyLjFcbiAgICAgKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAgICAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICAgICovXG4gICAgdC53aWRnZXQoXCJ1aS5kaWFsb2dcIiwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCBvcHRpb25zOiB7IGFwcGVuZFRvOiBcImJvZHlcIiwgYXV0b09wZW46ICEwLCBidXR0b25zOiBbXSwgY2xhc3NlczogeyBcInVpLWRpYWxvZ1wiOiBcInVpLWNvcm5lci1hbGxcIiwgXCJ1aS1kaWFsb2ctdGl0bGViYXJcIjogXCJ1aS1jb3JuZXItYWxsXCIgfSwgY2xvc2VPbkVzY2FwZTogITAsIGNsb3NlVGV4dDogXCJDbG9zZVwiLCBkcmFnZ2FibGU6ICEwLCBoaWRlOiBudWxsLCBoZWlnaHQ6IFwiYXV0b1wiLCBtYXhIZWlnaHQ6IG51bGwsIG1heFdpZHRoOiBudWxsLCBtaW5IZWlnaHQ6IDE1MCwgbWluV2lkdGg6IDE1MCwgbW9kYWw6ICExLCBwb3NpdGlvbjogeyBteTogXCJjZW50ZXJcIiwgYXQ6IFwiY2VudGVyXCIsIG9mOiB3aW5kb3csIGNvbGxpc2lvbjogXCJmaXRcIiwgdXNpbmc6IGZ1bmN0aW9uIHVzaW5nKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdCh0aGlzKS5jc3MoZSkub2Zmc2V0KCkudG9wO2kgPCAwICYmIHQodGhpcykuY3NzKFwidG9wXCIsIGUudG9wIC0gaSk7XG4gICAgICAgICAgfSB9LCByZXNpemFibGU6ICEwLCBzaG93OiBudWxsLCB0aXRsZTogbnVsbCwgd2lkdGg6IDMwMCwgYmVmb3JlQ2xvc2U6IG51bGwsIGNsb3NlOiBudWxsLCBkcmFnOiBudWxsLCBkcmFnU3RhcnQ6IG51bGwsIGRyYWdTdG9wOiBudWxsLCBmb2N1czogbnVsbCwgb3BlbjogbnVsbCwgcmVzaXplOiBudWxsLCByZXNpemVTdGFydDogbnVsbCwgcmVzaXplU3RvcDogbnVsbCB9LCBzaXplUmVsYXRlZE9wdGlvbnM6IHsgYnV0dG9uczogITAsIGhlaWdodDogITAsIG1heEhlaWdodDogITAsIG1heFdpZHRoOiAhMCwgbWluSGVpZ2h0OiAhMCwgbWluV2lkdGg6ICEwLCB3aWR0aDogITAgfSwgcmVzaXphYmxlUmVsYXRlZE9wdGlvbnM6IHsgbWF4SGVpZ2h0OiAhMCwgbWF4V2lkdGg6ICEwLCBtaW5IZWlnaHQ6ICEwLCBtaW5XaWR0aDogITAgfSwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbENzcyA9IHsgZGlzcGxheTogdGhpcy5lbGVtZW50WzBdLnN0eWxlLmRpc3BsYXksIHdpZHRoOiB0aGlzLmVsZW1lbnRbMF0uc3R5bGUud2lkdGgsIG1pbkhlaWdodDogdGhpcy5lbGVtZW50WzBdLnN0eWxlLm1pbkhlaWdodCwgbWF4SGVpZ2h0OiB0aGlzLmVsZW1lbnRbMF0uc3R5bGUubWF4SGVpZ2h0LCBoZWlnaHQ6IHRoaXMuZWxlbWVudFswXS5zdHlsZS5oZWlnaHQgfSwgdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0geyBwYXJlbnQ6IHRoaXMuZWxlbWVudC5wYXJlbnQoKSwgaW5kZXg6IHRoaXMuZWxlbWVudC5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4KHRoaXMuZWxlbWVudCkgfSwgdGhpcy5vcmlnaW5hbFRpdGxlID0gdGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKSwgbnVsbCA9PSB0aGlzLm9wdGlvbnMudGl0bGUgJiYgbnVsbCAhPSB0aGlzLm9yaWdpbmFsVGl0bGUgJiYgKHRoaXMub3B0aW9ucy50aXRsZSA9IHRoaXMub3JpZ2luYWxUaXRsZSksIHRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiAodGhpcy5vcHRpb25zLmRpc2FibGVkID0gITEpLCB0aGlzLl9jcmVhdGVXcmFwcGVyKCksIHRoaXMuZWxlbWVudC5zaG93KCkucmVtb3ZlQXR0cihcInRpdGxlXCIpLmFwcGVuZFRvKHRoaXMudWlEaWFsb2cpLCB0aGlzLl9hZGRDbGFzcyhcInVpLWRpYWxvZy1jb250ZW50XCIsIFwidWktd2lkZ2V0LWNvbnRlbnRcIiksIHRoaXMuX2NyZWF0ZVRpdGxlYmFyKCksIHRoaXMuX2NyZWF0ZUJ1dHRvblBhbmUoKSwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSAmJiB0LmZuLmRyYWdnYWJsZSAmJiB0aGlzLl9tYWtlRHJhZ2dhYmxlKCksIHRoaXMub3B0aW9ucy5yZXNpemFibGUgJiYgdC5mbi5yZXNpemFibGUgJiYgdGhpcy5fbWFrZVJlc2l6YWJsZSgpLCB0aGlzLl9pc09wZW4gPSAhMSwgdGhpcy5fdHJhY2tGb2N1cygpO1xuICAgICAgfSwgX2luaXQ6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuYXV0b09wZW4gJiYgdGhpcy5vcGVuKCk7XG4gICAgICB9LCBfYXBwZW5kVG86IGZ1bmN0aW9uIF9hcHBlbmRUbygpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLm9wdGlvbnMuYXBwZW5kVG87cmV0dXJuIGUgJiYgKGUuanF1ZXJ5IHx8IGUubm9kZVR5cGUpID8gdChlKSA6IHRoaXMuZG9jdW1lbnQuZmluZChlIHx8IFwiYm9keVwiKS5lcSgwKTtcbiAgICAgIH0sIF9kZXN0cm95OiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICBlID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uO3RoaXMuX3VudHJhY2tJbnN0YW5jZSgpLCB0aGlzLl9kZXN0cm95T3ZlcmxheSgpLCB0aGlzLmVsZW1lbnQucmVtb3ZlVW5pcXVlSWQoKS5jc3ModGhpcy5vcmlnaW5hbENzcykuZGV0YWNoKCksIHRoaXMudWlEaWFsb2cucmVtb3ZlKCksIHRoaXMub3JpZ2luYWxUaXRsZSAmJiB0aGlzLmVsZW1lbnQuYXR0cihcInRpdGxlXCIsIHRoaXMub3JpZ2luYWxUaXRsZSksICh0ID0gZS5wYXJlbnQuY2hpbGRyZW4oKS5lcShlLmluZGV4KSkubGVuZ3RoICYmIHRbMF0gIT09IHRoaXMuZWxlbWVudFswXSA/IHQuYmVmb3JlKHRoaXMuZWxlbWVudCkgOiBlLnBhcmVudC5hcHBlbmQodGhpcy5lbGVtZW50KTtcbiAgICAgIH0sIHdpZGdldDogZnVuY3Rpb24gd2lkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51aURpYWxvZztcbiAgICAgIH0sIGRpc2FibGU6IHQubm9vcCwgZW5hYmxlOiB0Lm5vb3AsIGNsb3NlOiBmdW5jdGlvbiBjbG9zZShlKSB7XG4gICAgICAgIHZhciBpID0gdGhpczt0aGlzLl9pc09wZW4gJiYgITEgIT09IHRoaXMuX3RyaWdnZXIoXCJiZWZvcmVDbG9zZVwiLCBlKSAmJiAodGhpcy5faXNPcGVuID0gITEsIHRoaXMuX2ZvY3VzZWRFbGVtZW50ID0gbnVsbCwgdGhpcy5fZGVzdHJveU92ZXJsYXkoKSwgdGhpcy5fdW50cmFja0luc3RhbmNlKCksIHRoaXMub3BlbmVyLmZpbHRlcihcIjpmb2N1c2FibGVcIikudHJpZ2dlcihcImZvY3VzXCIpLmxlbmd0aCB8fCB0LnVpLnNhZmVCbHVyKHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkpLCB0aGlzLl9oaWRlKHRoaXMudWlEaWFsb2csIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaS5fdHJpZ2dlcihcImNsb3NlXCIsIGUpO1xuICAgICAgICB9KSk7XG4gICAgICB9LCBpc09wZW46IGZ1bmN0aW9uIGlzT3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzT3BlbjtcbiAgICAgIH0sIG1vdmVUb1RvcDogZnVuY3Rpb24gbW92ZVRvVG9wKCkge1xuICAgICAgICB0aGlzLl9tb3ZlVG9Ub3AoKTtcbiAgICAgIH0sIF9tb3ZlVG9Ub3A6IGZ1bmN0aW9uIF9tb3ZlVG9Ub3AoZSwgaSkge1xuICAgICAgICB2YXIgbiA9ICExLFxuICAgICAgICAgICAgcyA9IHRoaXMudWlEaWFsb2cuc2libGluZ3MoXCIudWktZnJvbnQ6dmlzaWJsZVwiKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiArdCh0aGlzKS5jc3MoXCJ6LWluZGV4XCIpO1xuICAgICAgICB9KS5nZXQoKSxcbiAgICAgICAgICAgIHIgPSBNYXRoLm1heC5hcHBseShudWxsLCBzKTtyZXR1cm4gciA+PSArdGhpcy51aURpYWxvZy5jc3MoXCJ6LWluZGV4XCIpICYmICh0aGlzLnVpRGlhbG9nLmNzcyhcInotaW5kZXhcIiwgciArIDEpLCBuID0gITApLCBuICYmICFpICYmIHRoaXMuX3RyaWdnZXIoXCJmb2N1c1wiLCBlKSwgbjtcbiAgICAgIH0sIG9wZW46IGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgICAgIHZhciBlID0gdGhpczt0aGlzLl9pc09wZW4gPyB0aGlzLl9tb3ZlVG9Ub3AoKSAmJiB0aGlzLl9mb2N1c1RhYmJhYmxlKCkgOiAodGhpcy5faXNPcGVuID0gITAsIHRoaXMub3BlbmVyID0gdCh0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pKSwgdGhpcy5fc2l6ZSgpLCB0aGlzLl9wb3NpdGlvbigpLCB0aGlzLl9jcmVhdGVPdmVybGF5KCksIHRoaXMuX21vdmVUb1RvcChudWxsLCAhMCksIHRoaXMub3ZlcmxheSAmJiB0aGlzLm92ZXJsYXkuY3NzKFwiei1pbmRleFwiLCB0aGlzLnVpRGlhbG9nLmNzcyhcInotaW5kZXhcIikgLSAxKSwgdGhpcy5fc2hvdyh0aGlzLnVpRGlhbG9nLCB0aGlzLm9wdGlvbnMuc2hvdywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGUuX2ZvY3VzVGFiYmFibGUoKSwgZS5fdHJpZ2dlcihcImZvY3VzXCIpO1xuICAgICAgICB9KSwgdGhpcy5fbWFrZUZvY3VzVGFyZ2V0KCksIHRoaXMuX3RyaWdnZXIoXCJvcGVuXCIpKTtcbiAgICAgIH0sIF9mb2N1c1RhYmJhYmxlOiBmdW5jdGlvbiBfZm9jdXNUYWJiYWJsZSgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLl9mb2N1c2VkRWxlbWVudDt0IHx8ICh0ID0gdGhpcy5lbGVtZW50LmZpbmQoXCJbYXV0b2ZvY3VzXVwiKSksIHQubGVuZ3RoIHx8ICh0ID0gdGhpcy5lbGVtZW50LmZpbmQoXCI6dGFiYmFibGVcIikpLCB0Lmxlbmd0aCB8fCAodCA9IHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmZpbmQoXCI6dGFiYmFibGVcIikpLCB0Lmxlbmd0aCB8fCAodCA9IHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlLmZpbHRlcihcIjp0YWJiYWJsZVwiKSksIHQubGVuZ3RoIHx8ICh0ID0gdGhpcy51aURpYWxvZyksIHQuZXEoMCkudHJpZ2dlcihcImZvY3VzXCIpO1xuICAgICAgfSwgX2tlZXBGb2N1czogZnVuY3Rpb24gX2tlZXBGb2N1cyhlKSB7XG4gICAgICAgIGZ1bmN0aW9uIGkoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pO3RoaXMudWlEaWFsb2dbMF0gPT09IGUgfHwgdC5jb250YWlucyh0aGlzLnVpRGlhbG9nWzBdLCBlKSB8fCB0aGlzLl9mb2N1c1RhYmJhYmxlKCk7XG4gICAgICAgIH1lLnByZXZlbnREZWZhdWx0KCksIGkuY2FsbCh0aGlzKSwgdGhpcy5fZGVsYXkoaSk7XG4gICAgICB9LCBfY3JlYXRlV3JhcHBlcjogZnVuY3Rpb24gX2NyZWF0ZVdyYXBwZXIoKSB7XG4gICAgICAgIHRoaXMudWlEaWFsb2cgPSB0KFwiPGRpdj5cIikuaGlkZSgpLmF0dHIoeyB0YWJJbmRleDogLTEsIHJvbGU6IFwiZGlhbG9nXCIgfSkuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSksIHRoaXMuX2FkZENsYXNzKHRoaXMudWlEaWFsb2csIFwidWktZGlhbG9nXCIsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWZyb250XCIpLCB0aGlzLl9vbih0aGlzLnVpRGlhbG9nLCB7IGtleWRvd246IGZ1bmN0aW9uIGtleWRvd24oZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjYXBlICYmICFlLmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIGUua2V5Q29kZSAmJiBlLmtleUNvZGUgPT09IHQudWkua2V5Q29kZS5FU0NBUEUpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCksIHZvaWQgdGhpcy5jbG9zZShlKTtpZiAoZS5rZXlDb2RlID09PSB0LnVpLmtleUNvZGUuVEFCICYmICFlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gdGhpcy51aURpYWxvZy5maW5kKFwiOnRhYmJhYmxlXCIpLFxuICAgICAgICAgICAgICAgICAgbiA9IGkuZmlsdGVyKFwiOmZpcnN0XCIpLFxuICAgICAgICAgICAgICAgICAgcyA9IGkuZmlsdGVyKFwiOmxhc3RcIik7ZS50YXJnZXQgIT09IHNbMF0gJiYgZS50YXJnZXQgIT09IHRoaXMudWlEaWFsb2dbMF0gfHwgZS5zaGlmdEtleSA/IGUudGFyZ2V0ICE9PSBuWzBdICYmIGUudGFyZ2V0ICE9PSB0aGlzLnVpRGlhbG9nWzBdIHx8ICFlLnNoaWZ0S2V5IHx8ICh0aGlzLl9kZWxheShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcy50cmlnZ2VyKFwiZm9jdXNcIik7XG4gICAgICAgICAgICAgIH0pLCBlLnByZXZlbnREZWZhdWx0KCkpIDogKHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBuLnRyaWdnZXIoXCJmb2N1c1wiKTtcbiAgICAgICAgICAgICAgfSksIGUucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgbW91c2Vkb3duOiBmdW5jdGlvbiBtb3VzZWRvd24odCkge1xuICAgICAgICAgICAgdGhpcy5fbW92ZVRvVG9wKHQpICYmIHRoaXMuX2ZvY3VzVGFiYmFibGUoKTtcbiAgICAgICAgICB9IH0pLCB0aGlzLmVsZW1lbnQuZmluZChcIlthcmlhLWRlc2NyaWJlZGJ5XVwiKS5sZW5ndGggfHwgdGhpcy51aURpYWxvZy5hdHRyKHsgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IHRoaXMuZWxlbWVudC51bmlxdWVJZCgpLmF0dHIoXCJpZFwiKSB9KTtcbiAgICAgIH0sIF9jcmVhdGVUaXRsZWJhcjogZnVuY3Rpb24gX2NyZWF0ZVRpdGxlYmFyKCkge1xuICAgICAgICB2YXIgZTt0aGlzLnVpRGlhbG9nVGl0bGViYXIgPSB0KFwiPGRpdj5cIiksIHRoaXMuX2FkZENsYXNzKHRoaXMudWlEaWFsb2dUaXRsZWJhciwgXCJ1aS1kaWFsb2ctdGl0bGViYXJcIiwgXCJ1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeFwiKSwgdGhpcy5fb24odGhpcy51aURpYWxvZ1RpdGxlYmFyLCB7IG1vdXNlZG93bjogZnVuY3Rpb24gbW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgIHQoZS50YXJnZXQpLmNsb3Nlc3QoXCIudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIpIHx8IHRoaXMudWlEaWFsb2cudHJpZ2dlcihcImZvY3VzXCIpO1xuICAgICAgICAgIH0gfSksIHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlID0gdChcIjxidXR0b24gdHlwZT0nYnV0dG9uJz48L2J1dHRvbj5cIikuYnV0dG9uKHsgbGFiZWw6IHQoXCI8YT5cIikudGV4dCh0aGlzLm9wdGlvbnMuY2xvc2VUZXh0KS5odG1sKCksIGljb246IFwidWktaWNvbi1jbG9zZXRoaWNrXCIsIHNob3dMYWJlbDogITEgfSkuYXBwZW5kVG8odGhpcy51aURpYWxvZ1RpdGxlYmFyKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UsIFwidWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIpLCB0aGlzLl9vbih0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZSwgeyBjbGljazogZnVuY3Rpb24gY2xpY2sodCkge1xuICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmNsb3NlKHQpO1xuICAgICAgICAgIH0gfSksIGUgPSB0KFwiPHNwYW4+XCIpLnVuaXF1ZUlkKCkucHJlcGVuZFRvKHRoaXMudWlEaWFsb2dUaXRsZWJhciksIHRoaXMuX2FkZENsYXNzKGUsIFwidWktZGlhbG9nLXRpdGxlXCIpLCB0aGlzLl90aXRsZShlKSwgdGhpcy51aURpYWxvZ1RpdGxlYmFyLnByZXBlbmRUbyh0aGlzLnVpRGlhbG9nKSwgdGhpcy51aURpYWxvZy5hdHRyKHsgXCJhcmlhLWxhYmVsbGVkYnlcIjogZS5hdHRyKFwiaWRcIikgfSk7XG4gICAgICB9LCBfdGl0bGU6IGZ1bmN0aW9uIF90aXRsZSh0KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy50aXRsZSA/IHQudGV4dCh0aGlzLm9wdGlvbnMudGl0bGUpIDogdC5odG1sKFwiJiMxNjA7XCIpO1xuICAgICAgfSwgX2NyZWF0ZUJ1dHRvblBhbmU6IGZ1bmN0aW9uIF9jcmVhdGVCdXR0b25QYW5lKCkge1xuICAgICAgICB0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZSA9IHQoXCI8ZGl2PlwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy51aURpYWxvZ0J1dHRvblBhbmUsIFwidWktZGlhbG9nLWJ1dHRvbnBhbmVcIiwgXCJ1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXhcIiksIHRoaXMudWlCdXR0b25TZXQgPSB0KFwiPGRpdj5cIikuYXBwZW5kVG8odGhpcy51aURpYWxvZ0J1dHRvblBhbmUpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLnVpQnV0dG9uU2V0LCBcInVpLWRpYWxvZy1idXR0b25zZXRcIiksIHRoaXMuX2NyZWF0ZUJ1dHRvbnMoKTtcbiAgICAgIH0sIF9jcmVhdGVCdXR0b25zOiBmdW5jdGlvbiBfY3JlYXRlQnV0dG9ucygpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgaSA9IHRoaXMub3B0aW9ucy5idXR0b25zO3RoaXMudWlEaWFsb2dCdXR0b25QYW5lLnJlbW92ZSgpLCB0aGlzLnVpQnV0dG9uU2V0LmVtcHR5KCksIHQuaXNFbXB0eU9iamVjdChpKSB8fCB0LmlzQXJyYXkoaSkgJiYgIWkubGVuZ3RoID8gdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy51aURpYWxvZywgXCJ1aS1kaWFsb2ctYnV0dG9uc1wiKSA6ICh0LmVhY2goaSwgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICB2YXIgcywgcjtuID0gdC5pc0Z1bmN0aW9uKG4pID8geyBjbGljazogbiwgdGV4dDogaSB9IDogbiwgbiA9IHQuZXh0ZW5kKHsgdHlwZTogXCJidXR0b25cIiB9LCBuKSwgcyA9IG4uY2xpY2ssIHIgPSB7IGljb246IG4uaWNvbiwgaWNvblBvc2l0aW9uOiBuLmljb25Qb3NpdGlvbiwgc2hvd0xhYmVsOiBuLnNob3dMYWJlbCwgaWNvbnM6IG4uaWNvbnMsIHRleHQ6IG4udGV4dCB9LCBkZWxldGUgbi5jbGljaywgZGVsZXRlIG4uaWNvbiwgZGVsZXRlIG4uaWNvblBvc2l0aW9uLCBkZWxldGUgbi5zaG93TGFiZWwsIGRlbGV0ZSBuLmljb25zLCBcImJvb2xlYW5cIiA9PSB0eXBlb2Ygbi50ZXh0ICYmIGRlbGV0ZSBuLnRleHQsIHQoXCI8YnV0dG9uPjwvYnV0dG9uPlwiLCBuKS5idXR0b24ocikuYXBwZW5kVG8oZS51aUJ1dHRvblNldCkub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzLmFwcGx5KGUuZWxlbWVudFswXSwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksIHRoaXMuX2FkZENsYXNzKHRoaXMudWlEaWFsb2csIFwidWktZGlhbG9nLWJ1dHRvbnNcIiksIHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLmFwcGVuZFRvKHRoaXMudWlEaWFsb2cpKTtcbiAgICAgIH0sIF9tYWtlRHJhZ2dhYmxlOiBmdW5jdGlvbiBfbWFrZURyYWdnYWJsZSgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgaSA9IHRoaXMub3B0aW9ucztmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgICByZXR1cm4geyBwb3NpdGlvbjogdC5wb3NpdGlvbiwgb2Zmc2V0OiB0Lm9mZnNldCB9O1xuICAgICAgICB9dGhpcy51aURpYWxvZy5kcmFnZ2FibGUoeyBjYW5jZWw6IFwiLnVpLWRpYWxvZy1jb250ZW50LCAudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIsIGhhbmRsZTogXCIudWktZGlhbG9nLXRpdGxlYmFyXCIsIGNvbnRhaW5tZW50OiBcImRvY3VtZW50XCIsIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChpLCBzKSB7XG4gICAgICAgICAgICBlLl9hZGRDbGFzcyh0KHRoaXMpLCBcInVpLWRpYWxvZy1kcmFnZ2luZ1wiKSwgZS5fYmxvY2tGcmFtZXMoKSwgZS5fdHJpZ2dlcihcImRyYWdTdGFydFwiLCBpLCBuKHMpKTtcbiAgICAgICAgICB9LCBkcmFnOiBmdW5jdGlvbiBkcmFnKHQsIGkpIHtcbiAgICAgICAgICAgIGUuX3RyaWdnZXIoXCJkcmFnXCIsIHQsIG4oaSkpO1xuICAgICAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3Aocywgcikge1xuICAgICAgICAgICAgdmFyIG8gPSByLm9mZnNldC5sZWZ0IC0gZS5kb2N1bWVudC5zY3JvbGxMZWZ0KCksXG4gICAgICAgICAgICAgICAgYSA9IHIub2Zmc2V0LnRvcCAtIGUuZG9jdW1lbnQuc2Nyb2xsVG9wKCk7aS5wb3NpdGlvbiA9IHsgbXk6IFwibGVmdCB0b3BcIiwgYXQ6IFwibGVmdFwiICsgKG8gPj0gMCA/IFwiK1wiIDogXCJcIikgKyBvICsgXCIgdG9wXCIgKyAoYSA+PSAwID8gXCIrXCIgOiBcIlwiKSArIGEsIG9mOiBlLndpbmRvdyB9LCBlLl9yZW1vdmVDbGFzcyh0KHRoaXMpLCBcInVpLWRpYWxvZy1kcmFnZ2luZ1wiKSwgZS5fdW5ibG9ja0ZyYW1lcygpLCBlLl90cmlnZ2VyKFwiZHJhZ1N0b3BcIiwgcywgbihyKSk7XG4gICAgICAgICAgfSB9KTtcbiAgICAgIH0sIF9tYWtlUmVzaXphYmxlOiBmdW5jdGlvbiBfbWFrZVJlc2l6YWJsZSgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgaSA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIG4gPSBpLnJlc2l6YWJsZSxcbiAgICAgICAgICAgIHMgPSB0aGlzLnVpRGlhbG9nLmNzcyhcInBvc2l0aW9uXCIpLFxuICAgICAgICAgICAgciA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIG4gPyBuIDogXCJuLGUscyx3LHNlLHN3LG5lLG53XCI7ZnVuY3Rpb24gbyh0KSB7XG4gICAgICAgICAgcmV0dXJuIHsgb3JpZ2luYWxQb3NpdGlvbjogdC5vcmlnaW5hbFBvc2l0aW9uLCBvcmlnaW5hbFNpemU6IHQub3JpZ2luYWxTaXplLCBwb3NpdGlvbjogdC5wb3NpdGlvbiwgc2l6ZTogdC5zaXplIH07XG4gICAgICAgIH10aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSh7IGNhbmNlbDogXCIudWktZGlhbG9nLWNvbnRlbnRcIiwgY29udGFpbm1lbnQ6IFwiZG9jdW1lbnRcIiwgYWxzb1Jlc2l6ZTogdGhpcy5lbGVtZW50LCBtYXhXaWR0aDogaS5tYXhXaWR0aCwgbWF4SGVpZ2h0OiBpLm1heEhlaWdodCwgbWluV2lkdGg6IGkubWluV2lkdGgsIG1pbkhlaWdodDogdGhpcy5fbWluSGVpZ2h0KCksIGhhbmRsZXM6IHIsIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChpLCBuKSB7XG4gICAgICAgICAgICBlLl9hZGRDbGFzcyh0KHRoaXMpLCBcInVpLWRpYWxvZy1yZXNpemluZ1wiKSwgZS5fYmxvY2tGcmFtZXMoKSwgZS5fdHJpZ2dlcihcInJlc2l6ZVN0YXJ0XCIsIGksIG8obikpO1xuICAgICAgICAgIH0sIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKHQsIGkpIHtcbiAgICAgICAgICAgIGUuX3RyaWdnZXIoXCJyZXNpemVcIiwgdCwgbyhpKSk7XG4gICAgICAgICAgfSwgc3RvcDogZnVuY3Rpb24gc3RvcChuLCBzKSB7XG4gICAgICAgICAgICB2YXIgciA9IGUudWlEaWFsb2cub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgYSA9IHIubGVmdCAtIGUuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpLFxuICAgICAgICAgICAgICAgIGwgPSByLnRvcCAtIGUuZG9jdW1lbnQuc2Nyb2xsVG9wKCk7aS5oZWlnaHQgPSBlLnVpRGlhbG9nLmhlaWdodCgpLCBpLndpZHRoID0gZS51aURpYWxvZy53aWR0aCgpLCBpLnBvc2l0aW9uID0geyBteTogXCJsZWZ0IHRvcFwiLCBhdDogXCJsZWZ0XCIgKyAoYSA+PSAwID8gXCIrXCIgOiBcIlwiKSArIGEgKyBcIiB0b3BcIiArIChsID49IDAgPyBcIitcIiA6IFwiXCIpICsgbCwgb2Y6IGUud2luZG93IH0sIGUuX3JlbW92ZUNsYXNzKHQodGhpcyksIFwidWktZGlhbG9nLXJlc2l6aW5nXCIpLCBlLl91bmJsb2NrRnJhbWVzKCksIGUuX3RyaWdnZXIoXCJyZXNpemVTdG9wXCIsIG4sIG8ocykpO1xuICAgICAgICAgIH0gfSkuY3NzKFwicG9zaXRpb25cIiwgcyk7XG4gICAgICB9LCBfdHJhY2tGb2N1czogZnVuY3Rpb24gX3RyYWNrRm9jdXMoKSB7XG4gICAgICAgIHRoaXMuX29uKHRoaXMud2lkZ2V0KCksIHsgZm9jdXNpbjogZnVuY3Rpb24gZm9jdXNpbihlKSB7XG4gICAgICAgICAgICB0aGlzLl9tYWtlRm9jdXNUYXJnZXQoKSwgdGhpcy5fZm9jdXNlZEVsZW1lbnQgPSB0KGUudGFyZ2V0KTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgfSwgX21ha2VGb2N1c1RhcmdldDogZnVuY3Rpb24gX21ha2VGb2N1c1RhcmdldCgpIHtcbiAgICAgICAgdGhpcy5fdW50cmFja0luc3RhbmNlKCksIHRoaXMuX3RyYWNraW5nSW5zdGFuY2VzKCkudW5zaGlmdCh0aGlzKTtcbiAgICAgIH0sIF91bnRyYWNrSW5zdGFuY2U6IGZ1bmN0aW9uIF91bnRyYWNrSW5zdGFuY2UoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5fdHJhY2tpbmdJbnN0YW5jZXMoKSxcbiAgICAgICAgICAgIGkgPSB0LmluQXJyYXkodGhpcywgZSk7LTEgIT09IGkgJiYgZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9LCBfdHJhY2tpbmdJbnN0YW5jZXM6IGZ1bmN0aW9uIF90cmFja2luZ0luc3RhbmNlcygpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctaW5zdGFuY2VzXCIpO3JldHVybiB0IHx8ICh0ID0gW10sIHRoaXMuZG9jdW1lbnQuZGF0YShcInVpLWRpYWxvZy1pbnN0YW5jZXNcIiwgdCkpLCB0O1xuICAgICAgfSwgX21pbkhlaWdodDogZnVuY3Rpb24gX21pbkhlaWdodCgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnM7cmV0dXJuIFwiYXV0b1wiID09PSB0LmhlaWdodCA/IHQubWluSGVpZ2h0IDogTWF0aC5taW4odC5taW5IZWlnaHQsIHQuaGVpZ2h0KTtcbiAgICAgIH0sIF9wb3NpdGlvbjogZnVuY3Rpb24gX3Bvc2l0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMudWlEaWFsb2cuaXMoXCI6dmlzaWJsZVwiKTt0IHx8IHRoaXMudWlEaWFsb2cuc2hvdygpLCB0aGlzLnVpRGlhbG9nLnBvc2l0aW9uKHRoaXMub3B0aW9ucy5wb3NpdGlvbiksIHQgfHwgdGhpcy51aURpYWxvZy5oaWRlKCk7XG4gICAgICB9LCBfc2V0T3B0aW9uczogZnVuY3Rpb24gX3NldE9wdGlvbnMoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICBuID0gITEsXG4gICAgICAgICAgICBzID0ge307dC5lYWNoKGUsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgaS5fc2V0T3B0aW9uKHQsIGUpLCB0IGluIGkuc2l6ZVJlbGF0ZWRPcHRpb25zICYmIChuID0gITApLCB0IGluIGkucmVzaXphYmxlUmVsYXRlZE9wdGlvbnMgJiYgKHNbdF0gPSBlKTtcbiAgICAgICAgfSksIG4gJiYgKHRoaXMuX3NpemUoKSwgdGhpcy5fcG9zaXRpb24oKSksIHRoaXMudWlEaWFsb2cuaXMoXCI6ZGF0YSh1aS1yZXNpemFibGUpXCIpICYmIHRoaXMudWlEaWFsb2cucmVzaXphYmxlKFwib3B0aW9uXCIsIHMpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbihlLCBpKSB7XG4gICAgICAgIHZhciBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIgPSB0aGlzLnVpRGlhbG9nO1wiZGlzYWJsZWRcIiAhPT0gZSAmJiAodGhpcy5fc3VwZXIoZSwgaSksIFwiYXBwZW5kVG9cIiA9PT0gZSAmJiB0aGlzLnVpRGlhbG9nLmFwcGVuZFRvKHRoaXMuX2FwcGVuZFRvKCkpLCBcImJ1dHRvbnNcIiA9PT0gZSAmJiB0aGlzLl9jcmVhdGVCdXR0b25zKCksIFwiY2xvc2VUZXh0XCIgPT09IGUgJiYgdGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UuYnV0dG9uKHsgbGFiZWw6IHQoXCI8YT5cIikudGV4dChcIlwiICsgdGhpcy5vcHRpb25zLmNsb3NlVGV4dCkuaHRtbCgpIH0pLCBcImRyYWdnYWJsZVwiID09PSBlICYmICgobiA9IHIuaXMoXCI6ZGF0YSh1aS1kcmFnZ2FibGUpXCIpKSAmJiAhaSAmJiByLmRyYWdnYWJsZShcImRlc3Ryb3lcIiksICFuICYmIGkgJiYgdGhpcy5fbWFrZURyYWdnYWJsZSgpKSwgXCJwb3NpdGlvblwiID09PSBlICYmIHRoaXMuX3Bvc2l0aW9uKCksIFwicmVzaXphYmxlXCIgPT09IGUgJiYgKChzID0gci5pcyhcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIikpICYmICFpICYmIHIucmVzaXphYmxlKFwiZGVzdHJveVwiKSwgcyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBpICYmIHIucmVzaXphYmxlKFwib3B0aW9uXCIsIFwiaGFuZGxlc1wiLCBpKSwgcyB8fCAhMSA9PT0gaSB8fCB0aGlzLl9tYWtlUmVzaXphYmxlKCkpLCBcInRpdGxlXCIgPT09IGUgJiYgdGhpcy5fdGl0bGUodGhpcy51aURpYWxvZ1RpdGxlYmFyLmZpbmQoXCIudWktZGlhbG9nLXRpdGxlXCIpKSk7XG4gICAgICB9LCBfc2l6ZTogZnVuY3Rpb24gX3NpemUoKSB7XG4gICAgICAgIHZhciB0LFxuICAgICAgICAgICAgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gdGhpcy5vcHRpb25zO3RoaXMuZWxlbWVudC5zaG93KCkuY3NzKHsgd2lkdGg6IFwiYXV0b1wiLCBtaW5IZWlnaHQ6IDAsIG1heEhlaWdodDogXCJub25lXCIsIGhlaWdodDogMCB9KSwgbi5taW5XaWR0aCA+IG4ud2lkdGggJiYgKG4ud2lkdGggPSBuLm1pbldpZHRoKSwgdCA9IHRoaXMudWlEaWFsb2cuY3NzKHsgaGVpZ2h0OiBcImF1dG9cIiwgd2lkdGg6IG4ud2lkdGggfSkub3V0ZXJIZWlnaHQoKSwgZSA9IE1hdGgubWF4KDAsIG4ubWluSGVpZ2h0IC0gdCksIGkgPSBcIm51bWJlclwiID09IHR5cGVvZiBuLm1heEhlaWdodCA/IE1hdGgubWF4KDAsIG4ubWF4SGVpZ2h0IC0gdCkgOiBcIm5vbmVcIiwgXCJhdXRvXCIgPT09IG4uaGVpZ2h0ID8gdGhpcy5lbGVtZW50LmNzcyh7IG1pbkhlaWdodDogZSwgbWF4SGVpZ2h0OiBpLCBoZWlnaHQ6IFwiYXV0b1wiIH0pIDogdGhpcy5lbGVtZW50LmhlaWdodChNYXRoLm1heCgwLCBuLmhlaWdodCAtIHQpKSwgdGhpcy51aURpYWxvZy5pcyhcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIikgJiYgdGhpcy51aURpYWxvZy5yZXNpemFibGUoXCJvcHRpb25cIiwgXCJtaW5IZWlnaHRcIiwgdGhpcy5fbWluSGVpZ2h0KCkpO1xuICAgICAgfSwgX2Jsb2NrRnJhbWVzOiBmdW5jdGlvbiBfYmxvY2tGcmFtZXMoKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lQmxvY2tzID0gdGhpcy5kb2N1bWVudC5maW5kKFwiaWZyYW1lXCIpLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0KHRoaXMpO3JldHVybiB0KFwiPGRpdj5cIikuY3NzKHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgd2lkdGg6IGUub3V0ZXJXaWR0aCgpLCBoZWlnaHQ6IGUub3V0ZXJIZWlnaHQoKSB9KS5hcHBlbmRUbyhlLnBhcmVudCgpKS5vZmZzZXQoZS5vZmZzZXQoKSlbMF07XG4gICAgICAgIH0pO1xuICAgICAgfSwgX3VuYmxvY2tGcmFtZXM6IGZ1bmN0aW9uIF91bmJsb2NrRnJhbWVzKCkge1xuICAgICAgICB0aGlzLmlmcmFtZUJsb2NrcyAmJiAodGhpcy5pZnJhbWVCbG9ja3MucmVtb3ZlKCksIGRlbGV0ZSB0aGlzLmlmcmFtZUJsb2Nrcyk7XG4gICAgICB9LCBfYWxsb3dJbnRlcmFjdGlvbjogZnVuY3Rpb24gX2FsbG93SW50ZXJhY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gISF0KGUudGFyZ2V0KS5jbG9zZXN0KFwiLnVpLWRpYWxvZ1wiKS5sZW5ndGggfHwgISF0KGUudGFyZ2V0KS5jbG9zZXN0KFwiLnVpLWRhdGVwaWNrZXJcIikubGVuZ3RoO1xuICAgICAgfSwgX2NyZWF0ZU92ZXJsYXk6IGZ1bmN0aW9uIF9jcmVhdGVPdmVybGF5KCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1vZGFsKSB7XG4gICAgICAgICAgdmFyIGUgPSAhMDt0aGlzLl9kZWxheShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlID0gITE7XG4gICAgICAgICAgfSksIHRoaXMuZG9jdW1lbnQuZGF0YShcInVpLWRpYWxvZy1vdmVybGF5c1wiKSB8fCB0aGlzLl9vbih0aGlzLmRvY3VtZW50LCB7IGZvY3VzaW46IGZ1bmN0aW9uIGZvY3VzaW4odCkge1xuICAgICAgICAgICAgICBlIHx8IHRoaXMuX2FsbG93SW50ZXJhY3Rpb24odCkgfHwgKHQucHJldmVudERlZmF1bHQoKSwgdGhpcy5fdHJhY2tpbmdJbnN0YW5jZXMoKVswXS5fZm9jdXNUYWJiYWJsZSgpKTtcbiAgICAgICAgICAgIH0gfSksIHRoaXMub3ZlcmxheSA9IHQoXCI8ZGl2PlwiKS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5vdmVybGF5LCBudWxsLCBcInVpLXdpZGdldC1vdmVybGF5IHVpLWZyb250XCIpLCB0aGlzLl9vbih0aGlzLm92ZXJsYXksIHsgbW91c2Vkb3duOiBcIl9rZWVwRm9jdXNcIiB9KSwgdGhpcy5kb2N1bWVudC5kYXRhKFwidWktZGlhbG9nLW92ZXJsYXlzXCIsICh0aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIikgfHwgMCkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgfSwgX2Rlc3Ryb3lPdmVybGF5OiBmdW5jdGlvbiBfZGVzdHJveU92ZXJsYXkoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubW9kYWwgJiYgdGhpcy5vdmVybGF5KSB7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIikgLSAxO3QgPyB0aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIiwgdCkgOiAodGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsIFwiZm9jdXNpblwiKSwgdGhpcy5kb2N1bWVudC5yZW1vdmVEYXRhKFwidWktZGlhbG9nLW92ZXJsYXlzXCIpKSwgdGhpcy5vdmVybGF5LnJlbW92ZSgpLCB0aGlzLm92ZXJsYXkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IH0pLCAhMSAhPT0gdC51aUJhY2tDb21wYXQgJiYgdC53aWRnZXQoXCJ1aS5kaWFsb2dcIiwgdC51aS5kaWFsb2csIHsgb3B0aW9uczogeyBkaWFsb2dDbGFzczogXCJcIiB9LCBfY3JlYXRlV3JhcHBlcjogZnVuY3Rpb24gX2NyZWF0ZVdyYXBwZXIoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCksIHRoaXMudWlEaWFsb2cuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRpYWxvZ0NsYXNzKTtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24odCwgZSkge1xuICAgICAgICBcImRpYWxvZ0NsYXNzXCIgPT09IHQgJiYgdGhpcy51aURpYWxvZy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZGlhbG9nQ2xhc3MpLmFkZENsYXNzKGUpLCB0aGlzLl9zdXBlckFwcGx5KGFyZ3VtZW50cyk7XG4gICAgICB9IH0pLCB0LnVpLmRpYWxvZyxcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgRHJvcHBhYmxlIDEuMTIuMVxuICAgICAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAgICAgKlxuICAgICAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB0LndpZGdldChcInVpLmRyb3BwYWJsZVwiLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIHdpZGdldEV2ZW50UHJlZml4OiBcImRyb3BcIiwgb3B0aW9uczogeyBhY2NlcHQ6IFwiKlwiLCBhZGRDbGFzc2VzOiAhMCwgZ3JlZWR5OiAhMSwgc2NvcGU6IFwiZGVmYXVsdFwiLCB0b2xlcmFuY2U6IFwiaW50ZXJzZWN0XCIsIGFjdGl2YXRlOiBudWxsLCBkZWFjdGl2YXRlOiBudWxsLCBkcm9wOiBudWxsLCBvdXQ6IG51bGwsIG92ZXI6IG51bGwgfSwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgbiA9IGkuYWNjZXB0O3RoaXMuaXNvdmVyID0gITEsIHRoaXMuaXNvdXQgPSAhMCwgdGhpcy5hY2NlcHQgPSB0LmlzRnVuY3Rpb24obikgPyBuIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5pcyhuKTtcbiAgICAgICAgfSwgdGhpcy5wcm9wb3J0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlIHx8IChlID0geyB3aWR0aDogdGhpcy5lbGVtZW50WzBdLm9mZnNldFdpZHRoLCBoZWlnaHQ6IHRoaXMuZWxlbWVudFswXS5vZmZzZXRIZWlnaHQgfSk7ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgfSwgdGhpcy5fYWRkVG9NYW5hZ2VyKGkuc2NvcGUpLCBpLmFkZENsYXNzZXMgJiYgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1kcm9wcGFibGVcIik7XG4gICAgICB9LCBfYWRkVG9NYW5hZ2VyOiBmdW5jdGlvbiBfYWRkVG9NYW5hZ2VyKGUpIHtcbiAgICAgICAgdC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tlXSA9IHQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZV0gfHwgW10sIHQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZV0ucHVzaCh0aGlzKTtcbiAgICAgIH0sIF9zcGxpY2U6IGZ1bmN0aW9uIF9zcGxpY2UodCkge1xuICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHQubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICB0W2VdID09PSB0aGlzICYmIHQuc3BsaWNlKGUsIDEpO1xuICAgICAgICB9XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHZhciBlID0gdC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1t0aGlzLm9wdGlvbnMuc2NvcGVdO3RoaXMuX3NwbGljZShlKTtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24oZSwgaSkge1xuICAgICAgICBpZiAoXCJhY2NlcHRcIiA9PT0gZSkgdGhpcy5hY2NlcHQgPSB0LmlzRnVuY3Rpb24oaSkgPyBpIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC5pcyhpKTtcbiAgICAgICAgfTtlbHNlIGlmIChcInNjb3BlXCIgPT09IGUpIHtcbiAgICAgICAgICB2YXIgbiA9IHQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbdGhpcy5vcHRpb25zLnNjb3BlXTt0aGlzLl9zcGxpY2UobiksIHRoaXMuX2FkZFRvTWFuYWdlcihpKTtcbiAgICAgICAgfXRoaXMuX3N1cGVyKGUsIGkpO1xuICAgICAgfSwgX2FjdGl2YXRlOiBmdW5jdGlvbiBfYWN0aXZhdGUoZSkge1xuICAgICAgICB2YXIgaSA9IHQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7dGhpcy5fYWRkQWN0aXZlQ2xhc3MoKSwgaSAmJiB0aGlzLl90cmlnZ2VyKFwiYWN0aXZhdGVcIiwgZSwgdGhpcy51aShpKSk7XG4gICAgICB9LCBfZGVhY3RpdmF0ZTogZnVuY3Rpb24gX2RlYWN0aXZhdGUoZSkge1xuICAgICAgICB2YXIgaSA9IHQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7dGhpcy5fcmVtb3ZlQWN0aXZlQ2xhc3MoKSwgaSAmJiB0aGlzLl90cmlnZ2VyKFwiZGVhY3RpdmF0ZVwiLCBlLCB0aGlzLnVpKGkpKTtcbiAgICAgIH0sIF9vdmVyOiBmdW5jdGlvbiBfb3ZlcihlKSB7XG4gICAgICAgIHZhciBpID0gdC51aS5kZG1hbmFnZXIuY3VycmVudDtpICYmIChpLmN1cnJlbnRJdGVtIHx8IGkuZWxlbWVudClbMF0gIT09IHRoaXMuZWxlbWVudFswXSAmJiB0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSwgaS5jdXJyZW50SXRlbSB8fCBpLmVsZW1lbnQpICYmICh0aGlzLl9hZGRIb3ZlckNsYXNzKCksIHRoaXMuX3RyaWdnZXIoXCJvdmVyXCIsIGUsIHRoaXMudWkoaSkpKTtcbiAgICAgIH0sIF9vdXQ6IGZ1bmN0aW9uIF9vdXQoZSkge1xuICAgICAgICB2YXIgaSA9IHQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7aSAmJiAoaS5jdXJyZW50SXRlbSB8fCBpLmVsZW1lbnQpWzBdICE9PSB0aGlzLmVsZW1lbnRbMF0gJiYgdGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sIGkuY3VycmVudEl0ZW0gfHwgaS5lbGVtZW50KSAmJiAodGhpcy5fcmVtb3ZlSG92ZXJDbGFzcygpLCB0aGlzLl90cmlnZ2VyKFwib3V0XCIsIGUsIHRoaXMudWkoaSkpKTtcbiAgICAgIH0sIF9kcm9wOiBmdW5jdGlvbiBfZHJvcChlLCBpKSB7XG4gICAgICAgIHZhciBuID0gaSB8fCB0LnVpLmRkbWFuYWdlci5jdXJyZW50LFxuICAgICAgICAgICAgcyA9ICExO3JldHVybiAhKCFuIHx8IChuLmN1cnJlbnRJdGVtIHx8IG4uZWxlbWVudClbMF0gPT09IHRoaXMuZWxlbWVudFswXSkgJiYgKHRoaXMuZWxlbWVudC5maW5kKFwiOmRhdGEodWktZHJvcHBhYmxlKVwiKS5ub3QoXCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpID0gdCh0aGlzKS5kcm9wcGFibGUoXCJpbnN0YW5jZVwiKTtpZiAoaS5vcHRpb25zLmdyZWVkeSAmJiAhaS5vcHRpb25zLmRpc2FibGVkICYmIGkub3B0aW9ucy5zY29wZSA9PT0gbi5vcHRpb25zLnNjb3BlICYmIGkuYWNjZXB0LmNhbGwoaS5lbGVtZW50WzBdLCBuLmN1cnJlbnRJdGVtIHx8IG4uZWxlbWVudCkgJiYgXyhuLCB0LmV4dGVuZChpLCB7IG9mZnNldDogaS5lbGVtZW50Lm9mZnNldCgpIH0pLCBpLm9wdGlvbnMudG9sZXJhbmNlLCBlKSkgcmV0dXJuIHMgPSAhMCwgITE7XG4gICAgICAgIH0pLCAhcyAmJiAhIXRoaXMuYWNjZXB0LmNhbGwodGhpcy5lbGVtZW50WzBdLCBuLmN1cnJlbnRJdGVtIHx8IG4uZWxlbWVudCkgJiYgKHRoaXMuX3JlbW92ZUFjdGl2ZUNsYXNzKCksIHRoaXMuX3JlbW92ZUhvdmVyQ2xhc3MoKSwgdGhpcy5fdHJpZ2dlcihcImRyb3BcIiwgZSwgdGhpcy51aShuKSksIHRoaXMuZWxlbWVudCkpO1xuICAgICAgfSwgdWk6IGZ1bmN0aW9uIHVpKHQpIHtcbiAgICAgICAgcmV0dXJuIHsgZHJhZ2dhYmxlOiB0LmN1cnJlbnRJdGVtIHx8IHQuZWxlbWVudCwgaGVscGVyOiB0LmhlbHBlciwgcG9zaXRpb246IHQucG9zaXRpb24sIG9mZnNldDogdC5wb3NpdGlvbkFicyB9O1xuICAgICAgfSwgX2FkZEhvdmVyQ2xhc3M6IGZ1bmN0aW9uIF9hZGRIb3ZlckNsYXNzKCkge1xuICAgICAgICB0aGlzLl9hZGRDbGFzcyhcInVpLWRyb3BwYWJsZS1ob3ZlclwiKTtcbiAgICAgIH0sIF9yZW1vdmVIb3ZlckNsYXNzOiBmdW5jdGlvbiBfcmVtb3ZlSG92ZXJDbGFzcygpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlQ2xhc3MoXCJ1aS1kcm9wcGFibGUtaG92ZXJcIik7XG4gICAgICB9LCBfYWRkQWN0aXZlQ2xhc3M6IGZ1bmN0aW9uIF9hZGRBY3RpdmVDbGFzcygpIHtcbiAgICAgICAgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1kcm9wcGFibGUtYWN0aXZlXCIpO1xuICAgICAgfSwgX3JlbW92ZUFjdGl2ZUNsYXNzOiBmdW5jdGlvbiBfcmVtb3ZlQWN0aXZlQ2xhc3MoKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZUNsYXNzKFwidWktZHJvcHBhYmxlLWFjdGl2ZVwiKTtcbiAgICAgIH0gfSk7dmFyIHYsXG4gICAgICAgIF8gPSB0LnVpLmludGVyc2VjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHQodCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gdCA+PSBlICYmIHQgPCBlICsgaTtcbiAgICAgIH1yZXR1cm4gZnVuY3Rpb24gKGUsIGksIG4sIHMpIHtcbiAgICAgICAgaWYgKCFpLm9mZnNldCkgcmV0dXJuICExO3ZhciByID0gKGUucG9zaXRpb25BYnMgfHwgZS5wb3NpdGlvbi5hYnNvbHV0ZSkubGVmdCArIGUubWFyZ2lucy5sZWZ0LFxuICAgICAgICAgICAgbyA9IChlLnBvc2l0aW9uQWJzIHx8IGUucG9zaXRpb24uYWJzb2x1dGUpLnRvcCArIGUubWFyZ2lucy50b3AsXG4gICAgICAgICAgICBhID0gciArIGUuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG4gICAgICAgICAgICBsID0gbyArIGUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgdSA9IGkub2Zmc2V0LmxlZnQsXG4gICAgICAgICAgICBjID0gaS5vZmZzZXQudG9wLFxuICAgICAgICAgICAgaCA9IHUgKyBpLnByb3BvcnRpb25zKCkud2lkdGgsXG4gICAgICAgICAgICBkID0gYyArIGkucHJvcG9ydGlvbnMoKS5oZWlnaHQ7c3dpdGNoIChuKSB7Y2FzZSBcImZpdFwiOlxuICAgICAgICAgICAgcmV0dXJuIHUgPD0gciAmJiBhIDw9IGggJiYgYyA8PSBvICYmIGwgPD0gZDtjYXNlIFwiaW50ZXJzZWN0XCI6XG4gICAgICAgICAgICByZXR1cm4gdSA8IHIgKyBlLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMiAmJiBhIC0gZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIgPCBoICYmIGMgPCBvICsgZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyICYmIGwgLSBlLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIgPCBkO2Nhc2UgXCJwb2ludGVyXCI6XG4gICAgICAgICAgICByZXR1cm4gdChzLnBhZ2VZLCBjLCBpLnByb3BvcnRpb25zKCkuaGVpZ2h0KSAmJiB0KHMucGFnZVgsIHUsIGkucHJvcG9ydGlvbnMoKS53aWR0aCk7Y2FzZSBcInRvdWNoXCI6XG4gICAgICAgICAgICByZXR1cm4gKG8gPj0gYyAmJiBvIDw9IGQgfHwgbCA+PSBjICYmIGwgPD0gZCB8fCBvIDwgYyAmJiBsID4gZCkgJiYgKHIgPj0gdSAmJiByIDw9IGggfHwgYSA+PSB1ICYmIGEgPD0gaCB8fCByIDwgdSAmJiBhID4gaCk7ZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAhMTt9XG4gICAgICB9O1xuICAgIH0oKTtcbiAgICAvKiFcbiAgICAgKiBqUXVlcnkgVUkgU3Bpbm5lciAxLjEyLjFcbiAgICAgKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gICAgICpcbiAgICAgKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAgICAgKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYih0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuZWxlbWVudC52YWwoKTt0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXMuX3JlZnJlc2goKSwgZSAhPT0gdGhpcy5lbGVtZW50LnZhbCgpICYmIHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICB9O1xuICAgIH10LnVpLmRkbWFuYWdlciA9IHsgY3VycmVudDogbnVsbCwgZHJvcHBhYmxlczogeyBkZWZhdWx0OiBbXSB9LCBwcmVwYXJlT2Zmc2V0czogZnVuY3Rpb24gcHJlcGFyZU9mZnNldHMoZSwgaSkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByID0gdC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tlLm9wdGlvbnMuc2NvcGVdIHx8IFtdLFxuICAgICAgICAgICAgbyA9IGkgPyBpLnR5cGUgOiBudWxsLFxuICAgICAgICAgICAgYSA9IChlLmN1cnJlbnRJdGVtIHx8IGUuZWxlbWVudCkuZmluZChcIjpkYXRhKHVpLWRyb3BwYWJsZSlcIikuYWRkQmFjaygpO3Q6IGZvciAobiA9IDA7IG4gPCByLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgaWYgKCEocltuXS5vcHRpb25zLmRpc2FibGVkIHx8IGUgJiYgIXJbbl0uYWNjZXB0LmNhbGwocltuXS5lbGVtZW50WzBdLCBlLmN1cnJlbnRJdGVtIHx8IGUuZWxlbWVudCkpKSB7XG4gICAgICAgICAgICBmb3IgKHMgPSAwOyBzIDwgYS5sZW5ndGg7IHMrKykge1xuICAgICAgICAgICAgICBpZiAoYVtzXSA9PT0gcltuXS5lbGVtZW50WzBdKSB7XG4gICAgICAgICAgICAgICAgcltuXS5wcm9wb3J0aW9ucygpLmhlaWdodCA9IDA7Y29udGludWUgdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJbbl0udmlzaWJsZSA9IFwibm9uZVwiICE9PSByW25dLmVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSwgcltuXS52aXNpYmxlICYmIChcIm1vdXNlZG93blwiID09PSBvICYmIHJbbl0uX2FjdGl2YXRlLmNhbGwocltuXSwgaSksIHJbbl0ub2Zmc2V0ID0gcltuXS5lbGVtZW50Lm9mZnNldCgpLCByW25dLnByb3BvcnRpb25zKHsgd2lkdGg6IHJbbl0uZWxlbWVudFswXS5vZmZzZXRXaWR0aCwgaGVpZ2h0OiByW25dLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0IH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGRyb3A6IGZ1bmN0aW9uIGRyb3AoZSwgaSkge1xuICAgICAgICB2YXIgbiA9ICExO3JldHVybiB0LmVhY2goKHQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZS5vcHRpb25zLnNjb3BlXSB8fCBbXSkuc2xpY2UoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMub3B0aW9ucyAmJiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiB0aGlzLnZpc2libGUgJiYgXyhlLCB0aGlzLCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlLCBpKSAmJiAobiA9IHRoaXMuX2Ryb3AuY2FsbCh0aGlzLCBpKSB8fCBuKSwgIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiB0aGlzLnZpc2libGUgJiYgdGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0sIGUuY3VycmVudEl0ZW0gfHwgZS5lbGVtZW50KSAmJiAodGhpcy5pc291dCA9ICEwLCB0aGlzLmlzb3ZlciA9ICExLCB0aGlzLl9kZWFjdGl2YXRlLmNhbGwodGhpcywgaSkpKTtcbiAgICAgICAgfSksIG47XG4gICAgICB9LCBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChlLCBpKSB7XG4gICAgICAgIGUuZWxlbWVudC5wYXJlbnRzVW50aWwoXCJib2R5XCIpLm9uKFwic2Nyb2xsLmRyb3BwYWJsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgfHwgdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoZSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgZHJhZzogZnVuY3Rpb24gZHJhZyhlLCBpKSB7XG4gICAgICAgIGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zICYmIHQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKGUsIGkpLCB0LmVhY2godC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tlLm9wdGlvbnMuc2NvcGVdIHx8IFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgIXRoaXMuZ3JlZWR5Q2hpbGQgJiYgdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgbyA9IF8oZSwgdGhpcywgdGhpcy5vcHRpb25zLnRvbGVyYW5jZSwgaSksXG4gICAgICAgICAgICAgICAgYSA9ICFvICYmIHRoaXMuaXNvdmVyID8gXCJpc291dFwiIDogbyAmJiAhdGhpcy5pc292ZXIgPyBcImlzb3ZlclwiIDogbnVsbDthICYmICh0aGlzLm9wdGlvbnMuZ3JlZWR5ICYmIChzID0gdGhpcy5vcHRpb25zLnNjb3BlLCAociA9IHRoaXMuZWxlbWVudC5wYXJlbnRzKFwiOmRhdGEodWktZHJvcHBhYmxlKVwiKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdCh0aGlzKS5kcm9wcGFibGUoXCJpbnN0YW5jZVwiKS5vcHRpb25zLnNjb3BlID09PSBzO1xuICAgICAgICAgICAgfSkpLmxlbmd0aCAmJiAoKG4gPSB0KHJbMF0pLmRyb3BwYWJsZShcImluc3RhbmNlXCIpKS5ncmVlZHlDaGlsZCA9IFwiaXNvdmVyXCIgPT09IGEpKSwgbiAmJiBcImlzb3ZlclwiID09PSBhICYmIChuLmlzb3ZlciA9ICExLCBuLmlzb3V0ID0gITAsIG4uX291dC5jYWxsKG4sIGkpKSwgdGhpc1thXSA9ICEwLCB0aGlzW1wiaXNvdXRcIiA9PT0gYSA/IFwiaXNvdmVyXCIgOiBcImlzb3V0XCJdID0gITEsIHRoaXNbXCJpc292ZXJcIiA9PT0gYSA/IFwiX292ZXJcIiA6IFwiX291dFwiXS5jYWxsKHRoaXMsIGkpLCBuICYmIFwiaXNvdXRcIiA9PT0gYSAmJiAobi5pc291dCA9ICExLCBuLmlzb3ZlciA9ICEwLCBuLl9vdmVyLmNhbGwobiwgaSkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSwgZHJhZ1N0b3A6IGZ1bmN0aW9uIGRyYWdTdG9wKGUsIGkpIHtcbiAgICAgICAgZS5lbGVtZW50LnBhcmVudHNVbnRpbChcImJvZHlcIikub2ZmKFwic2Nyb2xsLmRyb3BwYWJsZVwiKSwgZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgfHwgdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoZSwgaSk7XG4gICAgICB9IH0sICExICE9PSB0LnVpQmFja0NvbXBhdCAmJiB0LndpZGdldChcInVpLmRyb3BwYWJsZVwiLCB0LnVpLmRyb3BwYWJsZSwgeyBvcHRpb25zOiB7IGhvdmVyQ2xhc3M6ICExLCBhY3RpdmVDbGFzczogITEgfSwgX2FkZEFjdGl2ZUNsYXNzOiBmdW5jdGlvbiBfYWRkQWN0aXZlQ2xhc3MoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCksIHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyAmJiB0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICAgIH0sIF9yZW1vdmVBY3RpdmVDbGFzczogZnVuY3Rpb24gX3JlbW92ZUFjdGl2ZUNsYXNzKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpLCB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MgJiYgdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG4gICAgICB9LCBfYWRkSG92ZXJDbGFzczogZnVuY3Rpb24gX2FkZEhvdmVyQ2xhc3MoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCksIHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzICYmIHRoaXMuZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyk7XG4gICAgICB9LCBfcmVtb3ZlSG92ZXJDbGFzczogZnVuY3Rpb24gX3JlbW92ZUhvdmVyQ2xhc3MoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCksIHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzICYmIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyk7XG4gICAgICB9IH0pLCB0LnVpLmRyb3BwYWJsZSwgdC53aWRnZXQoXCJ1aS5wcm9ncmVzc2JhclwiLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIG9wdGlvbnM6IHsgY2xhc3NlczogeyBcInVpLXByb2dyZXNzYmFyXCI6IFwidWktY29ybmVyLWFsbFwiLCBcInVpLXByb2dyZXNzYmFyLXZhbHVlXCI6IFwidWktY29ybmVyLWxlZnRcIiwgXCJ1aS1wcm9ncmVzc2Jhci1jb21wbGV0ZVwiOiBcInVpLWNvcm5lci1yaWdodFwiIH0sIG1heDogMTAwLCB2YWx1ZTogMCwgY2hhbmdlOiBudWxsLCBjb21wbGV0ZTogbnVsbCB9LCBtaW46IDAsIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl9jb25zdHJhaW5lZFZhbHVlKCksIHRoaXMuZWxlbWVudC5hdHRyKHsgcm9sZTogXCJwcm9ncmVzc2JhclwiLCBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW4gfSksIHRoaXMuX2FkZENsYXNzKFwidWktcHJvZ3Jlc3NiYXJcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiksIHRoaXMudmFsdWVEaXYgPSB0KFwiPGRpdj5cIikuYXBwZW5kVG8odGhpcy5lbGVtZW50KSwgdGhpcy5fYWRkQ2xhc3ModGhpcy52YWx1ZURpdiwgXCJ1aS1wcm9ncmVzc2Jhci12YWx1ZVwiLCBcInVpLXdpZGdldC1oZWFkZXJcIiksIHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuICAgICAgfSwgX2Rlc3Ryb3k6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cihcInJvbGUgYXJpYS12YWx1ZW1pbiBhcmlhLXZhbHVlbWF4IGFyaWEtdmFsdWVub3dcIiksIHRoaXMudmFsdWVEaXYucmVtb3ZlKCk7XG4gICAgICB9LCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCkge1xuICAgICAgICBpZiAodm9pZCAwID09PSB0KSByZXR1cm4gdGhpcy5vcHRpb25zLnZhbHVlO3RoaXMub3B0aW9ucy52YWx1ZSA9IHRoaXMuX2NvbnN0cmFpbmVkVmFsdWUodCksIHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuICAgICAgfSwgX2NvbnN0cmFpbmVkVmFsdWU6IGZ1bmN0aW9uIF9jb25zdHJhaW5lZFZhbHVlKHQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCAmJiAodCA9IHRoaXMub3B0aW9ucy52YWx1ZSksIHRoaXMuaW5kZXRlcm1pbmF0ZSA9ICExID09PSB0LCBcIm51bWJlclwiICE9IHR5cGVvZiB0ICYmICh0ID0gMCksICF0aGlzLmluZGV0ZXJtaW5hdGUgJiYgTWF0aC5taW4odGhpcy5vcHRpb25zLm1heCwgTWF0aC5tYXgodGhpcy5taW4sIHQpKTtcbiAgICAgIH0sIF9zZXRPcHRpb25zOiBmdW5jdGlvbiBfc2V0T3B0aW9ucyh0KSB7XG4gICAgICAgIHZhciBlID0gdC52YWx1ZTtkZWxldGUgdC52YWx1ZSwgdGhpcy5fc3VwZXIodCksIHRoaXMub3B0aW9ucy52YWx1ZSA9IHRoaXMuX2NvbnN0cmFpbmVkVmFsdWUoZSksIHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIFwibWF4XCIgPT09IHQgJiYgKGUgPSBNYXRoLm1heCh0aGlzLm1pbiwgZSkpLCB0aGlzLl9zdXBlcih0LCBlKTtcbiAgICAgIH0sIF9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24gX3NldE9wdGlvbkRpc2FibGVkKHQpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIodCksIHRoaXMuZWxlbWVudC5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLCB0KSwgdGhpcy5fdG9nZ2xlQ2xhc3MobnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXQpO1xuICAgICAgfSwgX3BlcmNlbnRhZ2U6IGZ1bmN0aW9uIF9wZXJjZW50YWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRldGVybWluYXRlID8gMTAwIDogMTAwICogKHRoaXMub3B0aW9ucy52YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm9wdGlvbnMubWF4IC0gdGhpcy5taW4pO1xuICAgICAgfSwgX3JlZnJlc2hWYWx1ZTogZnVuY3Rpb24gX3JlZnJlc2hWYWx1ZSgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLm9wdGlvbnMudmFsdWUsXG4gICAgICAgICAgICBpID0gdGhpcy5fcGVyY2VudGFnZSgpO3RoaXMudmFsdWVEaXYudG9nZ2xlKHRoaXMuaW5kZXRlcm1pbmF0ZSB8fCBlID4gdGhpcy5taW4pLndpZHRoKGkudG9GaXhlZCgwKSArIFwiJVwiKSwgdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy52YWx1ZURpdiwgXCJ1aS1wcm9ncmVzc2Jhci1jb21wbGV0ZVwiLCBudWxsLCBlID09PSB0aGlzLm9wdGlvbnMubWF4KS5fdG9nZ2xlQ2xhc3MoXCJ1aS1wcm9ncmVzc2Jhci1pbmRldGVybWluYXRlXCIsIG51bGwsIHRoaXMuaW5kZXRlcm1pbmF0ZSksIHRoaXMuaW5kZXRlcm1pbmF0ZSA/ICh0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cihcImFyaWEtdmFsdWVub3dcIiksIHRoaXMub3ZlcmxheURpdiB8fCAodGhpcy5vdmVybGF5RGl2ID0gdChcIjxkaXY+XCIpLmFwcGVuZFRvKHRoaXMudmFsdWVEaXYpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLm92ZXJsYXlEaXYsIFwidWktcHJvZ3Jlc3NiYXItb3ZlcmxheVwiKSkpIDogKHRoaXMuZWxlbWVudC5hdHRyKHsgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMub3B0aW9ucy5tYXgsIFwiYXJpYS12YWx1ZW5vd1wiOiBlIH0pLCB0aGlzLm92ZXJsYXlEaXYgJiYgKHRoaXMub3ZlcmxheURpdi5yZW1vdmUoKSwgdGhpcy5vdmVybGF5RGl2ID0gbnVsbCkpLCB0aGlzLm9sZFZhbHVlICE9PSBlICYmICh0aGlzLm9sZFZhbHVlID0gZSwgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiKSksIGUgPT09IHRoaXMub3B0aW9ucy5tYXggJiYgdGhpcy5fdHJpZ2dlcihcImNvbXBsZXRlXCIpO1xuICAgICAgfSB9KSwgdC53aWRnZXQoXCJ1aS5zZWxlY3RhYmxlXCIsIHQudWkubW91c2UsIHsgdmVyc2lvbjogXCIxLjEyLjFcIiwgb3B0aW9uczogeyBhcHBlbmRUbzogXCJib2R5XCIsIGF1dG9SZWZyZXNoOiAhMCwgZGlzdGFuY2U6IDAsIGZpbHRlcjogXCIqXCIsIHRvbGVyYW5jZTogXCJ0b3VjaFwiLCBzZWxlY3RlZDogbnVsbCwgc2VsZWN0aW5nOiBudWxsLCBzdGFydDogbnVsbCwgc3RvcDogbnVsbCwgdW5zZWxlY3RlZDogbnVsbCwgdW5zZWxlY3Rpbmc6IG51bGwgfSwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO3RoaXMuX2FkZENsYXNzKFwidWktc2VsZWN0YWJsZVwiKSwgdGhpcy5kcmFnZ2VkID0gITEsIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlLmVsZW1lbnRQb3MgPSB0KGUuZWxlbWVudFswXSkub2Zmc2V0KCksIGUuc2VsZWN0ZWVzID0gdChlLm9wdGlvbnMuZmlsdGVyLCBlLmVsZW1lbnRbMF0pLCBlLl9hZGRDbGFzcyhlLnNlbGVjdGVlcywgXCJ1aS1zZWxlY3RlZVwiKSwgZS5zZWxlY3RlZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHQodGhpcyksXG4gICAgICAgICAgICAgICAgbiA9IGkub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgcyA9IHsgbGVmdDogbi5sZWZ0IC0gZS5lbGVtZW50UG9zLmxlZnQsIHRvcDogbi50b3AgLSBlLmVsZW1lbnRQb3MudG9wIH07dC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIsIHsgZWxlbWVudDogdGhpcywgJGVsZW1lbnQ6IGksIGxlZnQ6IHMubGVmdCwgdG9wOiBzLnRvcCwgcmlnaHQ6IHMubGVmdCArIGkub3V0ZXJXaWR0aCgpLCBib3R0b206IHMudG9wICsgaS5vdXRlckhlaWdodCgpLCBzdGFydHNlbGVjdGVkOiAhMSwgc2VsZWN0ZWQ6IGkuaGFzQ2xhc3MoXCJ1aS1zZWxlY3RlZFwiKSwgc2VsZWN0aW5nOiBpLmhhc0NsYXNzKFwidWktc2VsZWN0aW5nXCIpLCB1bnNlbGVjdGluZzogaS5oYXNDbGFzcyhcInVpLXVuc2VsZWN0aW5nXCIpIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCB0aGlzLnJlZnJlc2goKSwgdGhpcy5fbW91c2VJbml0KCksIHRoaXMuaGVscGVyID0gdChcIjxkaXY+XCIpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLmhlbHBlciwgXCJ1aS1zZWxlY3RhYmxlLWhlbHBlclwiKTtcbiAgICAgIH0sIF9kZXN0cm95OiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZXMucmVtb3ZlRGF0YShcInNlbGVjdGFibGUtaXRlbVwiKSwgdGhpcy5fbW91c2VEZXN0cm95KCk7XG4gICAgICB9LCBfbW91c2VTdGFydDogZnVuY3Rpb24gX21vdXNlU3RhcnQoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgICBuID0gdGhpcy5vcHRpb25zO3RoaXMub3BvcyA9IFtlLnBhZ2VYLCBlLnBhZ2VZXSwgdGhpcy5lbGVtZW50UG9zID0gdCh0aGlzLmVsZW1lbnRbMF0pLm9mZnNldCgpLCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgKHRoaXMuc2VsZWN0ZWVzID0gdChuLmZpbHRlciwgdGhpcy5lbGVtZW50WzBdKSwgdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsIGUpLCB0KG4uYXBwZW5kVG8pLmFwcGVuZCh0aGlzLmhlbHBlciksIHRoaXMuaGVscGVyLmNzcyh7IGxlZnQ6IGUucGFnZVgsIHRvcDogZS5wYWdlWSwgd2lkdGg6IDAsIGhlaWdodDogMCB9KSwgbi5hdXRvUmVmcmVzaCAmJiB0aGlzLnJlZnJlc2goKSwgdGhpcy5zZWxlY3RlZXMuZmlsdGVyKFwiLnVpLXNlbGVjdGVkXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBuID0gdC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIpO24uc3RhcnRzZWxlY3RlZCA9ICEwLCBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5IHx8IChpLl9yZW1vdmVDbGFzcyhuLiRlbGVtZW50LCBcInVpLXNlbGVjdGVkXCIpLCBuLnNlbGVjdGVkID0gITEsIGkuX2FkZENsYXNzKG4uJGVsZW1lbnQsIFwidWktdW5zZWxlY3RpbmdcIiksIG4udW5zZWxlY3RpbmcgPSAhMCwgaS5fdHJpZ2dlcihcInVuc2VsZWN0aW5nXCIsIGUsIHsgdW5zZWxlY3Rpbmc6IG4uZWxlbWVudCB9KSk7XG4gICAgICAgIH0pLCB0KGUudGFyZ2V0KS5wYXJlbnRzKCkuYWRkQmFjaygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICBzID0gdC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIpO2lmIChzKSByZXR1cm4gbiA9ICFlLm1ldGFLZXkgJiYgIWUuY3RybEtleSB8fCAhcy4kZWxlbWVudC5oYXNDbGFzcyhcInVpLXNlbGVjdGVkXCIpLCBpLl9yZW1vdmVDbGFzcyhzLiRlbGVtZW50LCBuID8gXCJ1aS11bnNlbGVjdGluZ1wiIDogXCJ1aS1zZWxlY3RlZFwiKS5fYWRkQ2xhc3Mocy4kZWxlbWVudCwgbiA/IFwidWktc2VsZWN0aW5nXCIgOiBcInVpLXVuc2VsZWN0aW5nXCIpLCBzLnVuc2VsZWN0aW5nID0gIW4sIHMuc2VsZWN0aW5nID0gbiwgcy5zZWxlY3RlZCA9IG4sIG4gPyBpLl90cmlnZ2VyKFwic2VsZWN0aW5nXCIsIGUsIHsgc2VsZWN0aW5nOiBzLmVsZW1lbnQgfSkgOiBpLl90cmlnZ2VyKFwidW5zZWxlY3RpbmdcIiwgZSwgeyB1bnNlbGVjdGluZzogcy5lbGVtZW50IH0pLCAhMTtcbiAgICAgICAgfSkpO1xuICAgICAgfSwgX21vdXNlRHJhZzogZnVuY3Rpb24gX21vdXNlRHJhZyhlKSB7XG4gICAgICAgIGlmICh0aGlzLmRyYWdnZWQgPSAhMCwgIXRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICBuID0gdGhpcyxcbiAgICAgICAgICAgICAgcyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgciA9IHRoaXMub3Bvc1swXSxcbiAgICAgICAgICAgICAgbyA9IHRoaXMub3Bvc1sxXSxcbiAgICAgICAgICAgICAgYSA9IGUucGFnZVgsXG4gICAgICAgICAgICAgIGwgPSBlLnBhZ2VZO3JldHVybiByID4gYSAmJiAoaSA9IGEsIGEgPSByLCByID0gaSksIG8gPiBsICYmIChpID0gbCwgbCA9IG8sIG8gPSBpKSwgdGhpcy5oZWxwZXIuY3NzKHsgbGVmdDogciwgdG9wOiBvLCB3aWR0aDogYSAtIHIsIGhlaWdodDogbCAtIG8gfSksIHRoaXMuc2VsZWN0ZWVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0LmRhdGEodGhpcywgXCJzZWxlY3RhYmxlLWl0ZW1cIiksXG4gICAgICAgICAgICAgICAgdSA9ICExLFxuICAgICAgICAgICAgICAgIGMgPSB7fTtpICYmIGkuZWxlbWVudCAhPT0gbi5lbGVtZW50WzBdICYmIChjLmxlZnQgPSBpLmxlZnQgKyBuLmVsZW1lbnRQb3MubGVmdCwgYy5yaWdodCA9IGkucmlnaHQgKyBuLmVsZW1lbnRQb3MubGVmdCwgYy50b3AgPSBpLnRvcCArIG4uZWxlbWVudFBvcy50b3AsIGMuYm90dG9tID0gaS5ib3R0b20gKyBuLmVsZW1lbnRQb3MudG9wLCBcInRvdWNoXCIgPT09IHMudG9sZXJhbmNlID8gdSA9ICEoYy5sZWZ0ID4gYSB8fCBjLnJpZ2h0IDwgciB8fCBjLnRvcCA+IGwgfHwgYy5ib3R0b20gPCBvKSA6IFwiZml0XCIgPT09IHMudG9sZXJhbmNlICYmICh1ID0gYy5sZWZ0ID4gciAmJiBjLnJpZ2h0IDwgYSAmJiBjLnRvcCA+IG8gJiYgYy5ib3R0b20gPCBsKSwgdSA/IChpLnNlbGVjdGVkICYmIChuLl9yZW1vdmVDbGFzcyhpLiRlbGVtZW50LCBcInVpLXNlbGVjdGVkXCIpLCBpLnNlbGVjdGVkID0gITEpLCBpLnVuc2VsZWN0aW5nICYmIChuLl9yZW1vdmVDbGFzcyhpLiRlbGVtZW50LCBcInVpLXVuc2VsZWN0aW5nXCIpLCBpLnVuc2VsZWN0aW5nID0gITEpLCBpLnNlbGVjdGluZyB8fCAobi5fYWRkQ2xhc3MoaS4kZWxlbWVudCwgXCJ1aS1zZWxlY3RpbmdcIiksIGkuc2VsZWN0aW5nID0gITAsIG4uX3RyaWdnZXIoXCJzZWxlY3RpbmdcIiwgZSwgeyBzZWxlY3Rpbmc6IGkuZWxlbWVudCB9KSkpIDogKGkuc2VsZWN0aW5nICYmICgoZS5tZXRhS2V5IHx8IGUuY3RybEtleSkgJiYgaS5zdGFydHNlbGVjdGVkID8gKG4uX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsIFwidWktc2VsZWN0aW5nXCIpLCBpLnNlbGVjdGluZyA9ICExLCBuLl9hZGRDbGFzcyhpLiRlbGVtZW50LCBcInVpLXNlbGVjdGVkXCIpLCBpLnNlbGVjdGVkID0gITApIDogKG4uX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsIFwidWktc2VsZWN0aW5nXCIpLCBpLnNlbGVjdGluZyA9ICExLCBpLnN0YXJ0c2VsZWN0ZWQgJiYgKG4uX2FkZENsYXNzKGkuJGVsZW1lbnQsIFwidWktdW5zZWxlY3RpbmdcIiksIGkudW5zZWxlY3RpbmcgPSAhMCksIG4uX3RyaWdnZXIoXCJ1bnNlbGVjdGluZ1wiLCBlLCB7IHVuc2VsZWN0aW5nOiBpLmVsZW1lbnQgfSkpKSwgaS5zZWxlY3RlZCAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSB8fCBpLnN0YXJ0c2VsZWN0ZWQgfHwgKG4uX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsIFwidWktc2VsZWN0ZWRcIiksIGkuc2VsZWN0ZWQgPSAhMSwgbi5fYWRkQ2xhc3MoaS4kZWxlbWVudCwgXCJ1aS11bnNlbGVjdGluZ1wiKSwgaS51bnNlbGVjdGluZyA9ICEwLCBuLl90cmlnZ2VyKFwidW5zZWxlY3RpbmdcIiwgZSwgeyB1bnNlbGVjdGluZzogaS5lbGVtZW50IH0pKSkpKTtcbiAgICAgICAgICB9KSwgITE7XG4gICAgICAgIH1cbiAgICAgIH0sIF9tb3VzZVN0b3A6IGZ1bmN0aW9uIF9tb3VzZVN0b3AoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXM7cmV0dXJuIHRoaXMuZHJhZ2dlZCA9ICExLCB0KFwiLnVpLXVuc2VsZWN0aW5nXCIsIHRoaXMuZWxlbWVudFswXSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG4gPSB0LmRhdGEodGhpcywgXCJzZWxlY3RhYmxlLWl0ZW1cIik7aS5fcmVtb3ZlQ2xhc3Mobi4kZWxlbWVudCwgXCJ1aS11bnNlbGVjdGluZ1wiKSwgbi51bnNlbGVjdGluZyA9ICExLCBuLnN0YXJ0c2VsZWN0ZWQgPSAhMSwgaS5fdHJpZ2dlcihcInVuc2VsZWN0ZWRcIiwgZSwgeyB1bnNlbGVjdGVkOiBuLmVsZW1lbnQgfSk7XG4gICAgICAgIH0pLCB0KFwiLnVpLXNlbGVjdGluZ1wiLCB0aGlzLmVsZW1lbnRbMF0pLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBuID0gdC5kYXRhKHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIpO2kuX3JlbW92ZUNsYXNzKG4uJGVsZW1lbnQsIFwidWktc2VsZWN0aW5nXCIpLl9hZGRDbGFzcyhuLiRlbGVtZW50LCBcInVpLXNlbGVjdGVkXCIpLCBuLnNlbGVjdGluZyA9ICExLCBuLnNlbGVjdGVkID0gITAsIG4uc3RhcnRzZWxlY3RlZCA9ICEwLCBpLl90cmlnZ2VyKFwic2VsZWN0ZWRcIiwgZSwgeyBzZWxlY3RlZDogbi5lbGVtZW50IH0pO1xuICAgICAgICB9KSwgdGhpcy5fdHJpZ2dlcihcInN0b3BcIiwgZSksIHRoaXMuaGVscGVyLnJlbW92ZSgpLCAhMTtcbiAgICAgIH0gfSksIHQud2lkZ2V0KFwidWkuc2VsZWN0bWVudVwiLCBbdC51aS5mb3JtUmVzZXRNaXhpbiwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCBkZWZhdWx0RWxlbWVudDogXCI8c2VsZWN0PlwiLCBvcHRpb25zOiB7IGFwcGVuZFRvOiBudWxsLCBjbGFzc2VzOiB7IFwidWktc2VsZWN0bWVudS1idXR0b24tb3BlblwiOiBcInVpLWNvcm5lci10b3BcIiwgXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWRcIjogXCJ1aS1jb3JuZXItYWxsXCIgfSwgZGlzYWJsZWQ6IG51bGwsIGljb25zOiB7IGJ1dHRvbjogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtc1wiIH0sIHBvc2l0aW9uOiB7IG15OiBcImxlZnQgdG9wXCIsIGF0OiBcImxlZnQgYm90dG9tXCIsIGNvbGxpc2lvbjogXCJub25lXCIgfSwgd2lkdGg6ICExLCBjaGFuZ2U6IG51bGwsIGNsb3NlOiBudWxsLCBmb2N1czogbnVsbCwgb3BlbjogbnVsbCwgc2VsZWN0OiBudWxsIH0sIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5lbGVtZW50LnVuaXF1ZUlkKCkuYXR0cihcImlkXCIpO3RoaXMuaWRzID0geyBlbGVtZW50OiBlLCBidXR0b246IGUgKyBcIi1idXR0b25cIiwgbWVudTogZSArIFwiLW1lbnVcIiB9LCB0aGlzLl9kcmF3QnV0dG9uKCksIHRoaXMuX2RyYXdNZW51KCksIHRoaXMuX2JpbmRGb3JtUmVzZXRIYW5kbGVyKCksIHRoaXMuX3JlbmRlcmVkID0gITEsIHRoaXMubWVudUl0ZW1zID0gdCgpO1xuICAgICAgfSwgX2RyYXdCdXR0b246IGZ1bmN0aW9uIF9kcmF3QnV0dG9uKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGkgPSB0aGlzLFxuICAgICAgICAgICAgbiA9IHRoaXMuX3BhcnNlT3B0aW9uKHRoaXMuZWxlbWVudC5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpLCB0aGlzLmVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleCk7dGhpcy5sYWJlbHMgPSB0aGlzLmVsZW1lbnQubGFiZWxzKCkuYXR0cihcImZvclwiLCB0aGlzLmlkcy5idXR0b24pLCB0aGlzLl9vbih0aGlzLmxhYmVscywgeyBjbGljazogZnVuY3Rpb24gY2xpY2sodCkge1xuICAgICAgICAgICAgdGhpcy5idXR0b24uZm9jdXMoKSwgdC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0gfSksIHRoaXMuZWxlbWVudC5oaWRlKCksIHRoaXMuYnV0dG9uID0gdChcIjxzcGFuPlwiLCB7IHRhYmluZGV4OiB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPyAtMSA6IDAsIGlkOiB0aGlzLmlkcy5idXR0b24sIHJvbGU6IFwiY29tYm9ib3hcIiwgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIiwgXCJhcmlhLWF1dG9jb21wbGV0ZVwiOiBcImxpc3RcIiwgXCJhcmlhLW93bnNcIjogdGhpcy5pZHMubWVudSwgXCJhcmlhLWhhc3BvcHVwXCI6IFwidHJ1ZVwiLCB0aXRsZTogdGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKSB9KS5pbnNlcnRBZnRlcih0aGlzLmVsZW1lbnQpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLmJ1dHRvbiwgXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbiB1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWRcIiwgXCJ1aS1idXR0b24gdWktd2lkZ2V0XCIpLCBlID0gdChcIjxzcGFuPlwiKS5hcHBlbmRUbyh0aGlzLmJ1dHRvbiksIHRoaXMuX2FkZENsYXNzKGUsIFwidWktc2VsZWN0bWVudS1pY29uXCIsIFwidWktaWNvbiBcIiArIHRoaXMub3B0aW9ucy5pY29ucy5idXR0b24pLCB0aGlzLmJ1dHRvbkl0ZW0gPSB0aGlzLl9yZW5kZXJCdXR0b25JdGVtKG4pLmFwcGVuZFRvKHRoaXMuYnV0dG9uKSwgITEgIT09IHRoaXMub3B0aW9ucy53aWR0aCAmJiB0aGlzLl9yZXNpemVCdXR0b24oKSwgdGhpcy5fb24odGhpcy5idXR0b24sIHRoaXMuX2J1dHRvbkV2ZW50cyksIHRoaXMuYnV0dG9uLm9uZShcImZvY3VzaW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGkuX3JlbmRlcmVkIHx8IGkuX3JlZnJlc2hNZW51KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX2RyYXdNZW51OiBmdW5jdGlvbiBfZHJhd01lbnUoKSB7XG4gICAgICAgIHZhciBlID0gdGhpczt0aGlzLm1lbnUgPSB0KFwiPHVsPlwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMuaWRzLmJ1dHRvbiwgaWQ6IHRoaXMuaWRzLm1lbnUgfSksIHRoaXMubWVudVdyYXAgPSB0KFwiPGRpdj5cIikuYXBwZW5kKHRoaXMubWVudSksIHRoaXMuX2FkZENsYXNzKHRoaXMubWVudVdyYXAsIFwidWktc2VsZWN0bWVudS1tZW51XCIsIFwidWktZnJvbnRcIiksIHRoaXMubWVudVdyYXAuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSksIHRoaXMubWVudUluc3RhbmNlID0gdGhpcy5tZW51Lm1lbnUoeyBjbGFzc2VzOiB7IFwidWktbWVudVwiOiBcInVpLWNvcm5lci1ib3R0b21cIiB9LCByb2xlOiBcImxpc3Rib3hcIiwgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QodCwgaSkge1xuICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpLCBlLl9zZXRTZWxlY3Rpb24oKSwgZS5fc2VsZWN0KGkuaXRlbS5kYXRhKFwidWktc2VsZWN0bWVudS1pdGVtXCIpLCB0KTtcbiAgICAgICAgICB9LCBmb2N1czogZnVuY3Rpb24gZm9jdXModCwgaSkge1xuICAgICAgICAgICAgdmFyIG4gPSBpLml0ZW0uZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiKTtudWxsICE9IGUuZm9jdXNJbmRleCAmJiBuLmluZGV4ICE9PSBlLmZvY3VzSW5kZXggJiYgKGUuX3RyaWdnZXIoXCJmb2N1c1wiLCB0LCB7IGl0ZW06IG4gfSksIGUuaXNPcGVuIHx8IGUuX3NlbGVjdChuLCB0KSksIGUuZm9jdXNJbmRleCA9IG4uaW5kZXgsIGUuYnV0dG9uLmF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIiwgZS5tZW51SXRlbXMuZXEobi5pbmRleCkuYXR0cihcImlkXCIpKTtcbiAgICAgICAgICB9IH0pLm1lbnUoXCJpbnN0YW5jZVwiKSwgdGhpcy5tZW51SW5zdGFuY2UuX29mZih0aGlzLm1lbnUsIFwibW91c2VsZWF2ZVwiKSwgdGhpcy5tZW51SW5zdGFuY2UuX2Nsb3NlT25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfSwgdGhpcy5tZW51SW5zdGFuY2UuX2lzRGl2aWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH07XG4gICAgICB9LCByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLl9yZWZyZXNoTWVudSgpLCB0aGlzLmJ1dHRvbkl0ZW0ucmVwbGFjZVdpdGgodGhpcy5idXR0b25JdGVtID0gdGhpcy5fcmVuZGVyQnV0dG9uSXRlbSh0aGlzLl9nZXRTZWxlY3RlZEl0ZW0oKS5kYXRhKFwidWktc2VsZWN0bWVudS1pdGVtXCIpIHx8IHt9KSksIG51bGwgPT09IHRoaXMub3B0aW9ucy53aWR0aCAmJiB0aGlzLl9yZXNpemVCdXR0b24oKTtcbiAgICAgIH0sIF9yZWZyZXNoTWVudTogZnVuY3Rpb24gX3JlZnJlc2hNZW51KCkge1xuICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgIGUgPSB0aGlzLmVsZW1lbnQuZmluZChcIm9wdGlvblwiKTt0aGlzLm1lbnUuZW1wdHkoKSwgdGhpcy5fcGFyc2VPcHRpb25zKGUpLCB0aGlzLl9yZW5kZXJNZW51KHRoaXMubWVudSwgdGhpcy5pdGVtcyksIHRoaXMubWVudUluc3RhbmNlLnJlZnJlc2goKSwgdGhpcy5tZW51SXRlbXMgPSB0aGlzLm1lbnUuZmluZChcImxpXCIpLm5vdChcIi51aS1zZWxlY3RtZW51LW9wdGdyb3VwXCIpLmZpbmQoXCIudWktbWVudS1pdGVtLXdyYXBwZXJcIiksIHRoaXMuX3JlbmRlcmVkID0gITAsIGUubGVuZ3RoICYmICh0ID0gdGhpcy5fZ2V0U2VsZWN0ZWRJdGVtKCksIHRoaXMubWVudUluc3RhbmNlLmZvY3VzKG51bGwsIHQpLCB0aGlzLl9zZXRBcmlhKHQuZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiKSksIHRoaXMuX3NldE9wdGlvbihcImRpc2FibGVkXCIsIHRoaXMuZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIikpKTtcbiAgICAgIH0sIG9wZW46IGZ1bmN0aW9uIG9wZW4odCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgKHRoaXMuX3JlbmRlcmVkID8gKHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMubWVudS5maW5kKFwiLnVpLXN0YXRlLWFjdGl2ZVwiKSwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiksIHRoaXMubWVudUluc3RhbmNlLmZvY3VzKG51bGwsIHRoaXMuX2dldFNlbGVjdGVkSXRlbSgpKSkgOiB0aGlzLl9yZWZyZXNoTWVudSgpLCB0aGlzLm1lbnVJdGVtcy5sZW5ndGggJiYgKHRoaXMuaXNPcGVuID0gITAsIHRoaXMuX3RvZ2dsZUF0dHIoKSwgdGhpcy5fcmVzaXplTWVudSgpLCB0aGlzLl9wb3NpdGlvbigpLCB0aGlzLl9vbih0aGlzLmRvY3VtZW50LCB0aGlzLl9kb2N1bWVudENsaWNrKSwgdGhpcy5fdHJpZ2dlcihcIm9wZW5cIiwgdCkpKTtcbiAgICAgIH0sIF9wb3NpdGlvbjogZnVuY3Rpb24gX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLm1lbnVXcmFwLnBvc2l0aW9uKHQuZXh0ZW5kKHsgb2Y6IHRoaXMuYnV0dG9uIH0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbikpO1xuICAgICAgfSwgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKHQpIHtcbiAgICAgICAgdGhpcy5pc09wZW4gJiYgKHRoaXMuaXNPcGVuID0gITEsIHRoaXMuX3RvZ2dsZUF0dHIoKSwgdGhpcy5yYW5nZSA9IG51bGwsIHRoaXMuX29mZih0aGlzLmRvY3VtZW50KSwgdGhpcy5fdHJpZ2dlcihcImNsb3NlXCIsIHQpKTtcbiAgICAgIH0sIHdpZGdldDogZnVuY3Rpb24gd2lkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idXR0b247XG4gICAgICB9LCBtZW51V2lkZ2V0OiBmdW5jdGlvbiBtZW51V2lkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW51O1xuICAgICAgfSwgX3JlbmRlckJ1dHRvbkl0ZW06IGZ1bmN0aW9uIF9yZW5kZXJCdXR0b25JdGVtKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0KFwiPHNwYW4+XCIpO3JldHVybiB0aGlzLl9zZXRUZXh0KGksIGUubGFiZWwpLCB0aGlzLl9hZGRDbGFzcyhpLCBcInVpLXNlbGVjdG1lbnUtdGV4dFwiKSwgaTtcbiAgICAgIH0sIF9yZW5kZXJNZW51OiBmdW5jdGlvbiBfcmVuZGVyTWVudShlLCBpKSB7XG4gICAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICAgIHMgPSBcIlwiO3QuZWFjaChpLCBmdW5jdGlvbiAoaSwgcikge1xuICAgICAgICAgIHZhciBvO3Iub3B0Z3JvdXAgIT09IHMgJiYgKG8gPSB0KFwiPGxpPlwiLCB7IHRleHQ6IHIub3B0Z3JvdXAgfSksIG4uX2FkZENsYXNzKG8sIFwidWktc2VsZWN0bWVudS1vcHRncm91cFwiLCBcInVpLW1lbnUtZGl2aWRlclwiICsgKHIuZWxlbWVudC5wYXJlbnQoXCJvcHRncm91cFwiKS5wcm9wKFwiZGlzYWJsZWRcIikgPyBcIiB1aS1zdGF0ZS1kaXNhYmxlZFwiIDogXCJcIikpLCBvLmFwcGVuZFRvKGUpLCBzID0gci5vcHRncm91cCksIG4uX3JlbmRlckl0ZW1EYXRhKGUsIHIpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIF9yZW5kZXJJdGVtRGF0YTogZnVuY3Rpb24gX3JlbmRlckl0ZW1EYXRhKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckl0ZW0odCwgZSkuZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiLCBlKTtcbiAgICAgIH0sIF9yZW5kZXJJdGVtOiBmdW5jdGlvbiBfcmVuZGVySXRlbShlLCBpKSB7XG4gICAgICAgIHZhciBuID0gdChcIjxsaT5cIiksXG4gICAgICAgICAgICBzID0gdChcIjxkaXY+XCIsIHsgdGl0bGU6IGkuZWxlbWVudC5hdHRyKFwidGl0bGVcIikgfSk7cmV0dXJuIGkuZGlzYWJsZWQgJiYgdGhpcy5fYWRkQ2xhc3MobiwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSwgdGhpcy5fc2V0VGV4dChzLCBpLmxhYmVsKSwgbi5hcHBlbmQocykuYXBwZW5kVG8oZSk7XG4gICAgICB9LCBfc2V0VGV4dDogZnVuY3Rpb24gX3NldFRleHQodCwgZSkge1xuICAgICAgICBlID8gdC50ZXh0KGUpIDogdC5odG1sKFwiJiMxNjA7XCIpO1xuICAgICAgfSwgX21vdmU6IGZ1bmN0aW9uIF9tb3ZlKHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyA9IFwiLnVpLW1lbnUtaXRlbVwiO3RoaXMuaXNPcGVuID8gaSA9IHRoaXMubWVudUl0ZW1zLmVxKHRoaXMuZm9jdXNJbmRleCkucGFyZW50KFwibGlcIikgOiAoaSA9IHRoaXMubWVudUl0ZW1zLmVxKHRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4KS5wYXJlbnQoXCJsaVwiKSwgcyArPSBcIjpub3QoLnVpLXN0YXRlLWRpc2FibGVkKVwiKSwgKG4gPSBcImZpcnN0XCIgPT09IHQgfHwgXCJsYXN0XCIgPT09IHQgPyBpW1wiZmlyc3RcIiA9PT0gdCA/IFwicHJldkFsbFwiIDogXCJuZXh0QWxsXCJdKHMpLmVxKC0xKSA6IGlbdCArIFwiQWxsXCJdKHMpLmVxKDApKS5sZW5ndGggJiYgdGhpcy5tZW51SW5zdGFuY2UuZm9jdXMoZSwgbik7XG4gICAgICB9LCBfZ2V0U2VsZWN0ZWRJdGVtOiBmdW5jdGlvbiBfZ2V0U2VsZWN0ZWRJdGVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW51SXRlbXMuZXEodGhpcy5lbGVtZW50WzBdLnNlbGVjdGVkSW5kZXgpLnBhcmVudChcImxpXCIpO1xuICAgICAgfSwgX3RvZ2dsZTogZnVuY3Rpb24gX3RvZ2dsZSh0KSB7XG4gICAgICAgIHRoaXNbdGhpcy5pc09wZW4gPyBcImNsb3NlXCIgOiBcIm9wZW5cIl0odCk7XG4gICAgICB9LCBfc2V0U2VsZWN0aW9uOiBmdW5jdGlvbiBfc2V0U2VsZWN0aW9uKCkge1xuICAgICAgICB2YXIgdDt0aGlzLnJhbmdlICYmICh3aW5kb3cuZ2V0U2VsZWN0aW9uID8gKCh0ID0gd2luZG93LmdldFNlbGVjdGlvbigpKS5yZW1vdmVBbGxSYW5nZXMoKSwgdC5hZGRSYW5nZSh0aGlzLnJhbmdlKSkgOiB0aGlzLnJhbmdlLnNlbGVjdCgpLCB0aGlzLmJ1dHRvbi5mb2N1cygpKTtcbiAgICAgIH0sIF9kb2N1bWVudENsaWNrOiB7IG1vdXNlZG93bjogZnVuY3Rpb24gbW91c2Vkb3duKGUpIHtcbiAgICAgICAgICB0aGlzLmlzT3BlbiAmJiAodChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1zZWxlY3RtZW51LW1lbnUsICNcIiArIHQudWkuZXNjYXBlU2VsZWN0b3IodGhpcy5pZHMuYnV0dG9uKSkubGVuZ3RoIHx8IHRoaXMuY2xvc2UoZSkpO1xuICAgICAgICB9IH0sIF9idXR0b25FdmVudHM6IHsgbW91c2Vkb3duOiBmdW5jdGlvbiBtb3VzZWRvd24oKSB7XG4gICAgICAgICAgdmFyIHQ7d2luZG93LmdldFNlbGVjdGlvbiA/ICh0ID0gd2luZG93LmdldFNlbGVjdGlvbigpKS5yYW5nZUNvdW50ICYmICh0aGlzLnJhbmdlID0gdC5nZXRSYW5nZUF0KDApKSA6IHRoaXMucmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgfSwgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHQpIHtcbiAgICAgICAgICB0aGlzLl9zZXRTZWxlY3Rpb24oKSwgdGhpcy5fdG9nZ2xlKHQpO1xuICAgICAgICB9LCBrZXlkb3duOiBmdW5jdGlvbiBrZXlkb3duKGUpIHtcbiAgICAgICAgICB2YXIgaSA9ICEwO3N3aXRjaCAoZS5rZXlDb2RlKSB7Y2FzZSB0LnVpLmtleUNvZGUuVEFCOmNhc2UgdC51aS5rZXlDb2RlLkVTQ0FQRTpcbiAgICAgICAgICAgICAgdGhpcy5jbG9zZShlKSwgaSA9ICExO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkVOVEVSOlxuICAgICAgICAgICAgICB0aGlzLmlzT3BlbiAmJiB0aGlzLl9zZWxlY3RGb2N1c2VkSXRlbShlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5VUDpcbiAgICAgICAgICAgICAgZS5hbHRLZXkgPyB0aGlzLl90b2dnbGUoZSkgOiB0aGlzLl9tb3ZlKFwicHJldlwiLCBlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICBlLmFsdEtleSA/IHRoaXMuX3RvZ2dsZShlKSA6IHRoaXMuX21vdmUoXCJuZXh0XCIsIGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlNQQUNFOlxuICAgICAgICAgICAgICB0aGlzLmlzT3BlbiA/IHRoaXMuX3NlbGVjdEZvY3VzZWRJdGVtKGUpIDogdGhpcy5fdG9nZ2xlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkxFRlQ6XG4gICAgICAgICAgICAgIHRoaXMuX21vdmUoXCJwcmV2XCIsIGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlJJR0hUOlxuICAgICAgICAgICAgICB0aGlzLl9tb3ZlKFwibmV4dFwiLCBlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5IT01FOmNhc2UgdC51aS5rZXlDb2RlLlBBR0VfVVA6XG4gICAgICAgICAgICAgIHRoaXMuX21vdmUoXCJmaXJzdFwiLCBlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6Y2FzZSB0LnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuICAgICAgICAgICAgICB0aGlzLl9tb3ZlKFwibGFzdFwiLCBlKTticmVhaztkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLm1lbnUudHJpZ2dlcihlKSwgaSA9ICExO31pICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSB9LCBfc2VsZWN0Rm9jdXNlZEl0ZW06IGZ1bmN0aW9uIF9zZWxlY3RGb2N1c2VkSXRlbSh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5tZW51SXRlbXMuZXEodGhpcy5mb2N1c0luZGV4KS5wYXJlbnQoXCJsaVwiKTtlLmhhc0NsYXNzKFwidWktc3RhdGUtZGlzYWJsZWRcIikgfHwgdGhpcy5fc2VsZWN0KGUuZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiKSwgdCk7XG4gICAgICB9LCBfc2VsZWN0OiBmdW5jdGlvbiBfc2VsZWN0KHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLmVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleDt0aGlzLmVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleCA9IHQuaW5kZXgsIHRoaXMuYnV0dG9uSXRlbS5yZXBsYWNlV2l0aCh0aGlzLmJ1dHRvbkl0ZW0gPSB0aGlzLl9yZW5kZXJCdXR0b25JdGVtKHQpKSwgdGhpcy5fc2V0QXJpYSh0KSwgdGhpcy5fdHJpZ2dlcihcInNlbGVjdFwiLCBlLCB7IGl0ZW06IHQgfSksIHQuaW5kZXggIT09IGkgJiYgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCBlLCB7IGl0ZW06IHQgfSksIHRoaXMuY2xvc2UoZSk7XG4gICAgICB9LCBfc2V0QXJpYTogZnVuY3Rpb24gX3NldEFyaWEodCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMubWVudUl0ZW1zLmVxKHQuaW5kZXgpLmF0dHIoXCJpZFwiKTt0aGlzLmJ1dHRvbi5hdHRyKHsgXCJhcmlhLWxhYmVsbGVkYnlcIjogZSwgXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIjogZSB9KSwgdGhpcy5tZW51LmF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIiwgZSk7XG4gICAgICB9LCBfc2V0T3B0aW9uOiBmdW5jdGlvbiBfc2V0T3B0aW9uKHQsIGUpIHtcbiAgICAgICAgaWYgKFwiaWNvbnNcIiA9PT0gdCkge1xuICAgICAgICAgIHZhciBpID0gdGhpcy5idXR0b24uZmluZChcInNwYW4udWktaWNvblwiKTt0aGlzLl9yZW1vdmVDbGFzcyhpLCBudWxsLCB0aGlzLm9wdGlvbnMuaWNvbnMuYnV0dG9uKS5fYWRkQ2xhc3MoaSwgbnVsbCwgZS5idXR0b24pO1xuICAgICAgICB9dGhpcy5fc3VwZXIodCwgZSksIFwiYXBwZW5kVG9cIiA9PT0gdCAmJiB0aGlzLm1lbnVXcmFwLmFwcGVuZFRvKHRoaXMuX2FwcGVuZFRvKCkpLCBcIndpZHRoXCIgPT09IHQgJiYgdGhpcy5fcmVzaXplQnV0dG9uKCk7XG4gICAgICB9LCBfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uIF9zZXRPcHRpb25EaXNhYmxlZCh0KSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKHQpLCB0aGlzLm1lbnVJbnN0YW5jZS5vcHRpb24oXCJkaXNhYmxlZFwiLCB0KSwgdGhpcy5idXR0b24uYXR0cihcImFyaWEtZGlzYWJsZWRcIiwgdCksIHRoaXMuX3RvZ2dsZUNsYXNzKHRoaXMuYnV0dG9uLCBudWxsLCBcInVpLXN0YXRlLWRpc2FibGVkXCIsIHQpLCB0aGlzLmVsZW1lbnQucHJvcChcImRpc2FibGVkXCIsIHQpLCB0ID8gKHRoaXMuYnV0dG9uLmF0dHIoXCJ0YWJpbmRleFwiLCAtMSksIHRoaXMuY2xvc2UoKSkgOiB0aGlzLmJ1dHRvbi5hdHRyKFwidGFiaW5kZXhcIiwgMCk7XG4gICAgICB9LCBfYXBwZW5kVG86IGZ1bmN0aW9uIF9hcHBlbmRUbygpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLm9wdGlvbnMuYXBwZW5kVG87cmV0dXJuIGUgJiYgKGUgPSBlLmpxdWVyeSB8fCBlLm5vZGVUeXBlID8gdChlKSA6IHRoaXMuZG9jdW1lbnQuZmluZChlKS5lcSgwKSksIGUgJiYgZVswXSB8fCAoZSA9IHRoaXMuZWxlbWVudC5jbG9zZXN0KFwiLnVpLWZyb250LCBkaWFsb2dcIikpLCBlLmxlbmd0aCB8fCAoZSA9IHRoaXMuZG9jdW1lbnRbMF0uYm9keSksIGU7XG4gICAgICB9LCBfdG9nZ2xlQXR0cjogZnVuY3Rpb24gX3RvZ2dsZUF0dHIoKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsIHRoaXMuaXNPcGVuKSwgdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5idXR0b24sIFwidWktc2VsZWN0bWVudS1idXR0b24tXCIgKyAodGhpcy5pc09wZW4gPyBcImNsb3NlZFwiIDogXCJvcGVuXCIpKS5fYWRkQ2xhc3ModGhpcy5idXR0b24sIFwidWktc2VsZWN0bWVudS1idXR0b24tXCIgKyAodGhpcy5pc09wZW4gPyBcIm9wZW5cIiA6IFwiY2xvc2VkXCIpKS5fdG9nZ2xlQ2xhc3ModGhpcy5tZW51V3JhcCwgXCJ1aS1zZWxlY3RtZW51LW9wZW5cIiwgbnVsbCwgdGhpcy5pc09wZW4pLCB0aGlzLm1lbnUuYXR0cihcImFyaWEtaGlkZGVuXCIsICF0aGlzLmlzT3Blbik7XG4gICAgICB9LCBfcmVzaXplQnV0dG9uOiBmdW5jdGlvbiBfcmVzaXplQnV0dG9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9ucy53aWR0aDshMSAhPT0gdCA/IChudWxsID09PSB0ICYmICh0ID0gdGhpcy5lbGVtZW50LnNob3coKS5vdXRlcldpZHRoKCksIHRoaXMuZWxlbWVudC5oaWRlKCkpLCB0aGlzLmJ1dHRvbi5vdXRlcldpZHRoKHQpKSA6IHRoaXMuYnV0dG9uLmNzcyhcIndpZHRoXCIsIFwiXCIpO1xuICAgICAgfSwgX3Jlc2l6ZU1lbnU6IGZ1bmN0aW9uIF9yZXNpemVNZW51KCkge1xuICAgICAgICB0aGlzLm1lbnUub3V0ZXJXaWR0aChNYXRoLm1heCh0aGlzLmJ1dHRvbi5vdXRlcldpZHRoKCksIHRoaXMubWVudS53aWR0aChcIlwiKS5vdXRlcldpZHRoKCkgKyAxKSk7XG4gICAgICB9LCBfZ2V0Q3JlYXRlT3B0aW9uczogZnVuY3Rpb24gX2dldENyZWF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5fc3VwZXIoKTtyZXR1cm4gdC5kaXNhYmxlZCA9IHRoaXMuZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIiksIHQ7XG4gICAgICB9LCBfcGFyc2VPcHRpb25zOiBmdW5jdGlvbiBfcGFyc2VPcHRpb25zKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgICAgbiA9IFtdO2UuZWFjaChmdW5jdGlvbiAoZSwgcykge1xuICAgICAgICAgIG4ucHVzaChpLl9wYXJzZU9wdGlvbih0KHMpLCBlKSk7XG4gICAgICAgIH0pLCB0aGlzLml0ZW1zID0gbjtcbiAgICAgIH0sIF9wYXJzZU9wdGlvbjogZnVuY3Rpb24gX3BhcnNlT3B0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSB0LnBhcmVudChcIm9wdGdyb3VwXCIpO3JldHVybiB7IGVsZW1lbnQ6IHQsIGluZGV4OiBlLCB2YWx1ZTogdC52YWwoKSwgbGFiZWw6IHQudGV4dCgpLCBvcHRncm91cDogaS5hdHRyKFwibGFiZWxcIikgfHwgXCJcIiwgZGlzYWJsZWQ6IGkucHJvcChcImRpc2FibGVkXCIpIHx8IHQucHJvcChcImRpc2FibGVkXCIpIH07XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3VuYmluZEZvcm1SZXNldEhhbmRsZXIoKSwgdGhpcy5tZW51V3JhcC5yZW1vdmUoKSwgdGhpcy5idXR0b24ucmVtb3ZlKCksIHRoaXMuZWxlbWVudC5zaG93KCksIHRoaXMuZWxlbWVudC5yZW1vdmVVbmlxdWVJZCgpLCB0aGlzLmxhYmVscy5hdHRyKFwiZm9yXCIsIHRoaXMuaWRzLmVsZW1lbnQpO1xuICAgICAgfSB9XSksIHQud2lkZ2V0KFwidWkuc2xpZGVyXCIsIHQudWkubW91c2UsIHsgdmVyc2lvbjogXCIxLjEyLjFcIiwgd2lkZ2V0RXZlbnRQcmVmaXg6IFwic2xpZGVcIiwgb3B0aW9uczogeyBhbmltYXRlOiAhMSwgY2xhc3NlczogeyBcInVpLXNsaWRlclwiOiBcInVpLWNvcm5lci1hbGxcIiwgXCJ1aS1zbGlkZXItaGFuZGxlXCI6IFwidWktY29ybmVyLWFsbFwiLCBcInVpLXNsaWRlci1yYW5nZVwiOiBcInVpLWNvcm5lci1hbGwgdWktd2lkZ2V0LWhlYWRlclwiIH0sIGRpc3RhbmNlOiAwLCBtYXg6IDEwMCwgbWluOiAwLCBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsIHJhbmdlOiAhMSwgc3RlcDogMSwgdmFsdWU6IDAsIHZhbHVlczogbnVsbCwgY2hhbmdlOiBudWxsLCBzbGlkZTogbnVsbCwgc3RhcnQ6IG51bGwsIHN0b3A6IG51bGwgfSwgbnVtUGFnZXM6IDUsIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuX2tleVNsaWRpbmcgPSAhMSwgdGhpcy5fbW91c2VTbGlkaW5nID0gITEsIHRoaXMuX2FuaW1hdGVPZmYgPSAhMCwgdGhpcy5faGFuZGxlSW5kZXggPSBudWxsLCB0aGlzLl9kZXRlY3RPcmllbnRhdGlvbigpLCB0aGlzLl9tb3VzZUluaXQoKSwgdGhpcy5fY2FsY3VsYXRlTmV3TWF4KCksIHRoaXMuX2FkZENsYXNzKFwidWktc2xpZGVyIHVpLXNsaWRlci1cIiArIHRoaXMub3JpZW50YXRpb24sIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIpLCB0aGlzLl9yZWZyZXNoKCksIHRoaXMuX2FuaW1hdGVPZmYgPSAhMTtcbiAgICAgIH0sIF9yZWZyZXNoOiBmdW5jdGlvbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUmFuZ2UoKSwgdGhpcy5fY3JlYXRlSGFuZGxlcygpLCB0aGlzLl9zZXR1cEV2ZW50cygpLCB0aGlzLl9yZWZyZXNoVmFsdWUoKTtcbiAgICAgIH0sIF9jcmVhdGVIYW5kbGVzOiBmdW5jdGlvbiBfY3JlYXRlSGFuZGxlcygpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHMgPSB0aGlzLmVsZW1lbnQuZmluZChcIi51aS1zbGlkZXItaGFuZGxlXCIpLFxuICAgICAgICAgICAgciA9IFtdO2ZvciAoaSA9IG4udmFsdWVzICYmIG4udmFsdWVzLmxlbmd0aCB8fCAxLCBzLmxlbmd0aCA+IGkgJiYgKHMuc2xpY2UoaSkucmVtb3ZlKCksIHMgPSBzLnNsaWNlKDAsIGkpKSwgZSA9IHMubGVuZ3RoOyBlIDwgaTsgZSsrKSB7XG4gICAgICAgICAgci5wdXNoKFwiPHNwYW4gdGFiaW5kZXg9JzAnPjwvc3Bhbj5cIik7XG4gICAgICAgIH10aGlzLmhhbmRsZXMgPSBzLmFkZCh0KHIuam9pbihcIlwiKSkuYXBwZW5kVG8odGhpcy5lbGVtZW50KSksIHRoaXMuX2FkZENsYXNzKHRoaXMuaGFuZGxlcywgXCJ1aS1zbGlkZXItaGFuZGxlXCIsIFwidWktc3RhdGUtZGVmYXVsdFwiKSwgdGhpcy5oYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoMCksIHRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdCh0aGlzKS5kYXRhKFwidWktc2xpZGVyLWhhbmRsZS1pbmRleFwiLCBlKS5hdHRyKFwidGFiSW5kZXhcIiwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX2NyZWF0ZVJhbmdlOiBmdW5jdGlvbiBfY3JlYXRlUmFuZ2UoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5vcHRpb25zO2UucmFuZ2UgPyAoITAgPT09IGUucmFuZ2UgJiYgKGUudmFsdWVzID8gZS52YWx1ZXMubGVuZ3RoICYmIDIgIT09IGUudmFsdWVzLmxlbmd0aCA/IGUudmFsdWVzID0gW2UudmFsdWVzWzBdLCBlLnZhbHVlc1swXV0gOiB0LmlzQXJyYXkoZS52YWx1ZXMpICYmIChlLnZhbHVlcyA9IGUudmFsdWVzLnNsaWNlKDApKSA6IGUudmFsdWVzID0gW3RoaXMuX3ZhbHVlTWluKCksIHRoaXMuX3ZhbHVlTWluKCldKSwgdGhpcy5yYW5nZSAmJiB0aGlzLnJhbmdlLmxlbmd0aCA/ICh0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLnJhbmdlLCBcInVpLXNsaWRlci1yYW5nZS1taW4gdWktc2xpZGVyLXJhbmdlLW1heFwiKSwgdGhpcy5yYW5nZS5jc3MoeyBsZWZ0OiBcIlwiLCBib3R0b206IFwiXCIgfSkpIDogKHRoaXMucmFuZ2UgPSB0KFwiPGRpdj5cIikuYXBwZW5kVG8odGhpcy5lbGVtZW50KSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5yYW5nZSwgXCJ1aS1zbGlkZXItcmFuZ2VcIikpLCBcIm1pblwiICE9PSBlLnJhbmdlICYmIFwibWF4XCIgIT09IGUucmFuZ2UgfHwgdGhpcy5fYWRkQ2xhc3ModGhpcy5yYW5nZSwgXCJ1aS1zbGlkZXItcmFuZ2UtXCIgKyBlLnJhbmdlKSkgOiAodGhpcy5yYW5nZSAmJiB0aGlzLnJhbmdlLnJlbW92ZSgpLCB0aGlzLnJhbmdlID0gbnVsbCk7XG4gICAgICB9LCBfc2V0dXBFdmVudHM6IGZ1bmN0aW9uIF9zZXR1cEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5fb2ZmKHRoaXMuaGFuZGxlcyksIHRoaXMuX29uKHRoaXMuaGFuZGxlcywgdGhpcy5faGFuZGxlRXZlbnRzKSwgdGhpcy5faG92ZXJhYmxlKHRoaXMuaGFuZGxlcyksIHRoaXMuX2ZvY3VzYWJsZSh0aGlzLmhhbmRsZXMpO1xuICAgICAgfSwgX2Rlc3Ryb3k6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLmhhbmRsZXMucmVtb3ZlKCksIHRoaXMucmFuZ2UgJiYgdGhpcy5yYW5nZS5yZW1vdmUoKSwgdGhpcy5fbW91c2VEZXN0cm95KCk7XG4gICAgICB9LCBfbW91c2VDYXB0dXJlOiBmdW5jdGlvbiBfbW91c2VDYXB0dXJlKGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB1ID0gdGhpcyxcbiAgICAgICAgICAgIGMgPSB0aGlzLm9wdGlvbnM7cmV0dXJuICFjLmRpc2FibGVkICYmICh0aGlzLmVsZW1lbnRTaXplID0geyB3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSwgaGVpZ2h0OiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSB9LCB0aGlzLmVsZW1lbnRPZmZzZXQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCksIGkgPSB7IHg6IGUucGFnZVgsIHk6IGUucGFnZVkgfSwgbiA9IHRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZShpKSwgcyA9IHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpICsgMSwgdGhpcy5oYW5kbGVzLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgaSA9IE1hdGguYWJzKG4gLSB1LnZhbHVlcyhlKSk7KHMgPiBpIHx8IHMgPT09IGkgJiYgKGUgPT09IHUuX2xhc3RDaGFuZ2VkVmFsdWUgfHwgdS52YWx1ZXMoZSkgPT09IGMubWluKSkgJiYgKHMgPSBpLCByID0gdCh0aGlzKSwgbyA9IGUpO1xuICAgICAgICB9KSwgITEgIT09IHRoaXMuX3N0YXJ0KGUsIG8pICYmICh0aGlzLl9tb3VzZVNsaWRpbmcgPSAhMCwgdGhpcy5faGFuZGxlSW5kZXggPSBvLCB0aGlzLl9hZGRDbGFzcyhyLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiKSwgci50cmlnZ2VyKFwiZm9jdXNcIiksIGEgPSByLm9mZnNldCgpLCBsID0gIXQoZS50YXJnZXQpLnBhcmVudHMoKS5hZGRCYWNrKCkuaXMoXCIudWktc2xpZGVyLWhhbmRsZVwiKSwgdGhpcy5fY2xpY2tPZmZzZXQgPSBsID8geyBsZWZ0OiAwLCB0b3A6IDAgfSA6IHsgbGVmdDogZS5wYWdlWCAtIGEubGVmdCAtIHIud2lkdGgoKSAvIDIsIHRvcDogZS5wYWdlWSAtIGEudG9wIC0gci5oZWlnaHQoKSAvIDIgLSAocGFyc2VJbnQoci5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwgMTApIHx8IDApIC0gKHBhcnNlSW50KHIuY3NzKFwiYm9yZGVyQm90dG9tV2lkdGhcIiksIDEwKSB8fCAwKSArIChwYXJzZUludChyLmNzcyhcIm1hcmdpblRvcFwiKSwgMTApIHx8IDApIH0sIHRoaXMuaGFuZGxlcy5oYXNDbGFzcyhcInVpLXN0YXRlLWhvdmVyXCIpIHx8IHRoaXMuX3NsaWRlKGUsIG8sIG4pLCB0aGlzLl9hbmltYXRlT2ZmID0gITAsICEwKSk7XG4gICAgICB9LCBfbW91c2VTdGFydDogZnVuY3Rpb24gX21vdXNlU3RhcnQoKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICAgIH0sIF9tb3VzZURyYWc6IGZ1bmN0aW9uIF9tb3VzZURyYWcodCkge1xuICAgICAgICB2YXIgZSA9IHsgeDogdC5wYWdlWCwgeTogdC5wYWdlWSB9LFxuICAgICAgICAgICAgaSA9IHRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZShlKTtyZXR1cm4gdGhpcy5fc2xpZGUodCwgdGhpcy5faGFuZGxlSW5kZXgsIGkpLCAhMTtcbiAgICAgIH0sIF9tb3VzZVN0b3A6IGZ1bmN0aW9uIF9tb3VzZVN0b3AodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5oYW5kbGVzLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiKSwgdGhpcy5fbW91c2VTbGlkaW5nID0gITEsIHRoaXMuX3N0b3AodCwgdGhpcy5faGFuZGxlSW5kZXgpLCB0aGlzLl9jaGFuZ2UodCwgdGhpcy5faGFuZGxlSW5kZXgpLCB0aGlzLl9oYW5kbGVJbmRleCA9IG51bGwsIHRoaXMuX2NsaWNrT2Zmc2V0ID0gbnVsbCwgdGhpcy5fYW5pbWF0ZU9mZiA9ICExLCAhMTtcbiAgICAgIH0sIF9kZXRlY3RPcmllbnRhdGlvbjogZnVuY3Rpb24gX2RldGVjdE9yaWVudGF0aW9uKCkge1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gXCJ2ZXJ0aWNhbFwiID09PSB0aGlzLm9wdGlvbnMub3JpZW50YXRpb24gPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIjtcbiAgICAgIH0sIF9ub3JtVmFsdWVGcm9tTW91c2U6IGZ1bmN0aW9uIF9ub3JtVmFsdWVGcm9tTW91c2UodCkge1xuICAgICAgICB2YXIgZSwgaSwgbiwgcywgcjtyZXR1cm4gXCJob3Jpem9udGFsXCIgPT09IHRoaXMub3JpZW50YXRpb24gPyAoZSA9IHRoaXMuZWxlbWVudFNpemUud2lkdGgsIGkgPSB0LnggLSB0aGlzLmVsZW1lbnRPZmZzZXQubGVmdCAtICh0aGlzLl9jbGlja09mZnNldCA/IHRoaXMuX2NsaWNrT2Zmc2V0LmxlZnQgOiAwKSkgOiAoZSA9IHRoaXMuZWxlbWVudFNpemUuaGVpZ2h0LCBpID0gdC55IC0gdGhpcy5lbGVtZW50T2Zmc2V0LnRvcCAtICh0aGlzLl9jbGlja09mZnNldCA/IHRoaXMuX2NsaWNrT2Zmc2V0LnRvcCA6IDApKSwgKG4gPSBpIC8gZSkgPiAxICYmIChuID0gMSksIG4gPCAwICYmIChuID0gMCksIFwidmVydGljYWxcIiA9PT0gdGhpcy5vcmllbnRhdGlvbiAmJiAobiA9IDEgLSBuKSwgcyA9IHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpLCByID0gdGhpcy5fdmFsdWVNaW4oKSArIG4gKiBzLCB0aGlzLl90cmltQWxpZ25WYWx1ZShyKTtcbiAgICAgIH0sIF91aUhhc2g6IGZ1bmN0aW9uIF91aUhhc2godCwgZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHsgaGFuZGxlOiB0aGlzLmhhbmRsZXNbdF0sIGhhbmRsZUluZGV4OiB0LCB2YWx1ZTogdm9pZCAwICE9PSBlID8gZSA6IHRoaXMudmFsdWUoKSB9O3JldHVybiB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICYmIChuLnZhbHVlID0gdm9pZCAwICE9PSBlID8gZSA6IHRoaXMudmFsdWVzKHQpLCBuLnZhbHVlcyA9IGkgfHwgdGhpcy52YWx1ZXMoKSksIG47XG4gICAgICB9LCBfaGFzTXVsdGlwbGVWYWx1ZXM6IGZ1bmN0aW9uIF9oYXNNdWx0aXBsZVZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGg7XG4gICAgICB9LCBfc3RhcnQ6IGZ1bmN0aW9uIF9zdGFydCh0LCBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmlnZ2VyKFwic3RhcnRcIiwgdCwgdGhpcy5fdWlIYXNoKGUpKTtcbiAgICAgIH0sIF9zbGlkZTogZnVuY3Rpb24gX3NsaWRlKHQsIGUsIGkpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICBzID0gdGhpcy52YWx1ZSgpLFxuICAgICAgICAgICAgciA9IHRoaXMudmFsdWVzKCk7dGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSAmJiAobiA9IHRoaXMudmFsdWVzKGUgPyAwIDogMSksIHMgPSB0aGlzLnZhbHVlcyhlKSwgMiA9PT0gdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggJiYgITAgPT09IHRoaXMub3B0aW9ucy5yYW5nZSAmJiAoaSA9IDAgPT09IGUgPyBNYXRoLm1pbihuLCBpKSA6IE1hdGgubWF4KG4sIGkpKSwgcltlXSA9IGkpLCBpICE9PSBzICYmICExICE9PSB0aGlzLl90cmlnZ2VyKFwic2xpZGVcIiwgdCwgdGhpcy5fdWlIYXNoKGUsIGksIHIpKSAmJiAodGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSA/IHRoaXMudmFsdWVzKGUsIGkpIDogdGhpcy52YWx1ZShpKSk7XG4gICAgICB9LCBfc3RvcDogZnVuY3Rpb24gX3N0b3AodCwgZSkge1xuICAgICAgICB0aGlzLl90cmlnZ2VyKFwic3RvcFwiLCB0LCB0aGlzLl91aUhhc2goZSkpO1xuICAgICAgfSwgX2NoYW5nZTogZnVuY3Rpb24gX2NoYW5nZSh0LCBlKSB7XG4gICAgICAgIHRoaXMuX2tleVNsaWRpbmcgfHwgdGhpcy5fbW91c2VTbGlkaW5nIHx8ICh0aGlzLl9sYXN0Q2hhbmdlZFZhbHVlID0gZSwgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCB0LCB0aGlzLl91aUhhc2goZSkpKTtcbiAgICAgIH0sIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSh0KSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMub3B0aW9ucy52YWx1ZSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKHQpLCB0aGlzLl9yZWZyZXNoVmFsdWUoKSwgdm9pZCB0aGlzLl9jaGFuZ2UobnVsbCwgMCkpIDogdGhpcy5fdmFsdWUoKTtcbiAgICAgIH0sIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGUsIGkpIHtcbiAgICAgICAgdmFyIG4sIHMsIHI7aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSByZXR1cm4gdGhpcy5vcHRpb25zLnZhbHVlc1tlXSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKGkpLCB0aGlzLl9yZWZyZXNoVmFsdWUoKSwgdm9pZCB0aGlzLl9jaGFuZ2UobnVsbCwgZSk7aWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fdmFsdWVzKCk7aWYgKCF0LmlzQXJyYXkoYXJndW1lbnRzWzBdKSkgcmV0dXJuIHRoaXMuX2hhc011bHRpcGxlVmFsdWVzKCkgPyB0aGlzLl92YWx1ZXMoZSkgOiB0aGlzLnZhbHVlKCk7Zm9yIChuID0gdGhpcy5vcHRpb25zLnZhbHVlcywgcyA9IGFyZ3VtZW50c1swXSwgciA9IDA7IHIgPCBuLmxlbmd0aDsgciArPSAxKSB7XG4gICAgICAgICAgbltyXSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKHNbcl0pLCB0aGlzLl9jaGFuZ2UobnVsbCwgcik7XG4gICAgICAgIH10aGlzLl9yZWZyZXNoVmFsdWUoKTtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24oZSwgaSkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIHMgPSAwO3N3aXRjaCAoXCJyYW5nZVwiID09PSBlICYmICEwID09PSB0aGlzLm9wdGlvbnMucmFuZ2UgJiYgKFwibWluXCIgPT09IGkgPyAodGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fdmFsdWVzKDApLCB0aGlzLm9wdGlvbnMudmFsdWVzID0gbnVsbCkgOiBcIm1heFwiID09PSBpICYmICh0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl92YWx1ZXModGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggLSAxKSwgdGhpcy5vcHRpb25zLnZhbHVlcyA9IG51bGwpKSwgdC5pc0FycmF5KHRoaXMub3B0aW9ucy52YWx1ZXMpICYmIChzID0gdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGgpLCB0aGlzLl9zdXBlcihlLCBpKSwgZSkge2Nhc2UgXCJvcmllbnRhdGlvblwiOlxuICAgICAgICAgICAgdGhpcy5fZGV0ZWN0T3JpZW50YXRpb24oKSwgdGhpcy5fcmVtb3ZlQ2xhc3MoXCJ1aS1zbGlkZXItaG9yaXpvbnRhbCB1aS1zbGlkZXItdmVydGljYWxcIikuX2FkZENsYXNzKFwidWktc2xpZGVyLVwiICsgdGhpcy5vcmllbnRhdGlvbiksIHRoaXMuX3JlZnJlc2hWYWx1ZSgpLCB0aGlzLm9wdGlvbnMucmFuZ2UgJiYgdGhpcy5fcmVmcmVzaFJhbmdlKGkpLCB0aGlzLmhhbmRsZXMuY3NzKFwiaG9yaXpvbnRhbFwiID09PSBpID8gXCJib3R0b21cIiA6IFwibGVmdFwiLCBcIlwiKTticmVhaztjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGVPZmYgPSAhMCwgdGhpcy5fcmVmcmVzaFZhbHVlKCksIHRoaXMuX2NoYW5nZShudWxsLCAwKSwgdGhpcy5fYW5pbWF0ZU9mZiA9ICExO2JyZWFrO2Nhc2UgXCJ2YWx1ZXNcIjpcbiAgICAgICAgICAgIGZvciAodGhpcy5fYW5pbWF0ZU9mZiA9ICEwLCB0aGlzLl9yZWZyZXNoVmFsdWUoKSwgbiA9IHMgLSAxOyBuID49IDA7IG4tLSkge1xuICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2UobnVsbCwgbik7XG4gICAgICAgICAgICB9dGhpcy5fYW5pbWF0ZU9mZiA9ICExO2JyZWFrO2Nhc2UgXCJzdGVwXCI6Y2FzZSBcIm1pblwiOmNhc2UgXCJtYXhcIjpcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGVPZmYgPSAhMCwgdGhpcy5fY2FsY3VsYXRlTmV3TWF4KCksIHRoaXMuX3JlZnJlc2hWYWx1ZSgpLCB0aGlzLl9hbmltYXRlT2ZmID0gITE7YnJlYWs7Y2FzZSBcInJhbmdlXCI6XG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlT2ZmID0gITAsIHRoaXMuX3JlZnJlc2goKSwgdGhpcy5fYW5pbWF0ZU9mZiA9ICExO31cbiAgICAgIH0sIF9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24gX3NldE9wdGlvbkRpc2FibGVkKHQpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIodCksIHRoaXMuX3RvZ2dsZUNsYXNzKG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiwgISF0KTtcbiAgICAgIH0sIF92YWx1ZTogZnVuY3Rpb24gX3ZhbHVlKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9ucy52YWx1ZTtyZXR1cm4gdCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKHQpO1xuICAgICAgfSwgX3ZhbHVlczogZnVuY3Rpb24gX3ZhbHVlcyh0KSB7XG4gICAgICAgIHZhciBlLCBpLCBuO2lmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZSA9IHRoaXMub3B0aW9ucy52YWx1ZXNbdF0sIGUgPSB0aGlzLl90cmltQWxpZ25WYWx1ZShlKTtpZiAodGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSkge1xuICAgICAgICAgIGZvciAoaSA9IHRoaXMub3B0aW9ucy52YWx1ZXMuc2xpY2UoKSwgbiA9IDA7IG4gPCBpLmxlbmd0aDsgbiArPSAxKSB7XG4gICAgICAgICAgICBpW25dID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoaVtuXSk7XG4gICAgICAgICAgfXJldHVybiBpO1xuICAgICAgICB9cmV0dXJuIFtdO1xuICAgICAgfSwgX3RyaW1BbGlnblZhbHVlOiBmdW5jdGlvbiBfdHJpbUFsaWduVmFsdWUodCkge1xuICAgICAgICBpZiAodCA8PSB0aGlzLl92YWx1ZU1pbigpKSByZXR1cm4gdGhpcy5fdmFsdWVNaW4oKTtpZiAodCA+PSB0aGlzLl92YWx1ZU1heCgpKSByZXR1cm4gdGhpcy5fdmFsdWVNYXgoKTt2YXIgZSA9IHRoaXMub3B0aW9ucy5zdGVwID4gMCA/IHRoaXMub3B0aW9ucy5zdGVwIDogMSxcbiAgICAgICAgICAgIGkgPSAodCAtIHRoaXMuX3ZhbHVlTWluKCkpICUgZSxcbiAgICAgICAgICAgIG4gPSB0IC0gaTtyZXR1cm4gMiAqIE1hdGguYWJzKGkpID49IGUgJiYgKG4gKz0gaSA+IDAgPyBlIDogLWUpLCBwYXJzZUZsb2F0KG4udG9GaXhlZCg1KSk7XG4gICAgICB9LCBfY2FsY3VsYXRlTmV3TWF4OiBmdW5jdGlvbiBfY2FsY3VsYXRlTmV3TWF4KCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMub3B0aW9ucy5tYXgsXG4gICAgICAgICAgICBlID0gdGhpcy5fdmFsdWVNaW4oKSxcbiAgICAgICAgICAgIGkgPSB0aGlzLm9wdGlvbnMuc3RlcCxcbiAgICAgICAgICAgIG4gPSBNYXRoLnJvdW5kKCh0IC0gZSkgLyBpKSAqIGk7KHQgPSBuICsgZSkgPiB0aGlzLm9wdGlvbnMubWF4ICYmICh0IC09IGkpLCB0aGlzLm1heCA9IHBhcnNlRmxvYXQodC50b0ZpeGVkKHRoaXMuX3ByZWNpc2lvbigpKSk7XG4gICAgICB9LCBfcHJlY2lzaW9uOiBmdW5jdGlvbiBfcHJlY2lzaW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuX3ByZWNpc2lvbk9mKHRoaXMub3B0aW9ucy5zdGVwKTtyZXR1cm4gbnVsbCAhPT0gdGhpcy5vcHRpb25zLm1pbiAmJiAodCA9IE1hdGgubWF4KHQsIHRoaXMuX3ByZWNpc2lvbk9mKHRoaXMub3B0aW9ucy5taW4pKSksIHQ7XG4gICAgICB9LCBfcHJlY2lzaW9uT2Y6IGZ1bmN0aW9uIF9wcmVjaXNpb25PZih0KSB7XG4gICAgICAgIHZhciBlID0gdC50b1N0cmluZygpLFxuICAgICAgICAgICAgaSA9IGUuaW5kZXhPZihcIi5cIik7cmV0dXJuIC0xID09PSBpID8gMCA6IGUubGVuZ3RoIC0gaSAtIDE7XG4gICAgICB9LCBfdmFsdWVNaW46IGZ1bmN0aW9uIF92YWx1ZU1pbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5taW47XG4gICAgICB9LCBfdmFsdWVNYXg6IGZ1bmN0aW9uIF92YWx1ZU1heCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4O1xuICAgICAgfSwgX3JlZnJlc2hSYW5nZTogZnVuY3Rpb24gX3JlZnJlc2hSYW5nZSh0KSB7XG4gICAgICAgIFwidmVydGljYWxcIiA9PT0gdCAmJiB0aGlzLnJhbmdlLmNzcyh7IHdpZHRoOiBcIlwiLCBsZWZ0OiBcIlwiIH0pLCBcImhvcml6b250YWxcIiA9PT0gdCAmJiB0aGlzLnJhbmdlLmNzcyh7IGhlaWdodDogXCJcIiwgYm90dG9tOiBcIlwiIH0pO1xuICAgICAgfSwgX3JlZnJlc2hWYWx1ZTogZnVuY3Rpb24gX3JlZnJlc2hWYWx1ZSgpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyA9IHRoaXMub3B0aW9ucy5yYW5nZSxcbiAgICAgICAgICAgIGEgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBsID0gdGhpcyxcbiAgICAgICAgICAgIHUgPSAhdGhpcy5fYW5pbWF0ZU9mZiAmJiBhLmFuaW1hdGUsXG4gICAgICAgICAgICBjID0ge307dGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSA/IHRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgaSA9IChsLnZhbHVlcyhuKSAtIGwuX3ZhbHVlTWluKCkpIC8gKGwuX3ZhbHVlTWF4KCkgLSBsLl92YWx1ZU1pbigpKSAqIDEwMCwgY1tcImhvcml6b250YWxcIiA9PT0gbC5vcmllbnRhdGlvbiA/IFwibGVmdFwiIDogXCJib3R0b21cIl0gPSBpICsgXCIlXCIsIHQodGhpcykuc3RvcCgxLCAxKVt1ID8gXCJhbmltYXRlXCIgOiBcImNzc1wiXShjLCBhLmFuaW1hdGUpLCAhMCA9PT0gbC5vcHRpb25zLnJhbmdlICYmIChcImhvcml6b250YWxcIiA9PT0gbC5vcmllbnRhdGlvbiA/ICgwID09PSBuICYmIGwucmFuZ2Uuc3RvcCgxLCAxKVt1ID8gXCJhbmltYXRlXCIgOiBcImNzc1wiXSh7IGxlZnQ6IGkgKyBcIiVcIiB9LCBhLmFuaW1hdGUpLCAxID09PSBuICYmIGwucmFuZ2VbdSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIl0oeyB3aWR0aDogaSAtIGUgKyBcIiVcIiB9LCB7IHF1ZXVlOiAhMSwgZHVyYXRpb246IGEuYW5pbWF0ZSB9KSkgOiAoMCA9PT0gbiAmJiBsLnJhbmdlLnN0b3AoMSwgMSlbdSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIl0oeyBib3R0b206IGkgKyBcIiVcIiB9LCBhLmFuaW1hdGUpLCAxID09PSBuICYmIGwucmFuZ2VbdSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIl0oeyBoZWlnaHQ6IGkgLSBlICsgXCIlXCIgfSwgeyBxdWV1ZTogITEsIGR1cmF0aW9uOiBhLmFuaW1hdGUgfSkpKSwgZSA9IGk7XG4gICAgICAgIH0pIDogKG4gPSB0aGlzLnZhbHVlKCksIHMgPSB0aGlzLl92YWx1ZU1pbigpLCByID0gdGhpcy5fdmFsdWVNYXgoKSwgaSA9IHIgIT09IHMgPyAobiAtIHMpIC8gKHIgLSBzKSAqIDEwMCA6IDAsIGNbXCJob3Jpem9udGFsXCIgPT09IHRoaXMub3JpZW50YXRpb24gPyBcImxlZnRcIiA6IFwiYm90dG9tXCJdID0gaSArIFwiJVwiLCB0aGlzLmhhbmRsZS5zdG9wKDEsIDEpW3UgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCJdKGMsIGEuYW5pbWF0ZSksIFwibWluXCIgPT09IG8gJiYgXCJob3Jpem9udGFsXCIgPT09IHRoaXMub3JpZW50YXRpb24gJiYgdGhpcy5yYW5nZS5zdG9wKDEsIDEpW3UgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCJdKHsgd2lkdGg6IGkgKyBcIiVcIiB9LCBhLmFuaW1hdGUpLCBcIm1heFwiID09PSBvICYmIFwiaG9yaXpvbnRhbFwiID09PSB0aGlzLm9yaWVudGF0aW9uICYmIHRoaXMucmFuZ2Uuc3RvcCgxLCAxKVt1ID8gXCJhbmltYXRlXCIgOiBcImNzc1wiXSh7IHdpZHRoOiAxMDAgLSBpICsgXCIlXCIgfSwgYS5hbmltYXRlKSwgXCJtaW5cIiA9PT0gbyAmJiBcInZlcnRpY2FsXCIgPT09IHRoaXMub3JpZW50YXRpb24gJiYgdGhpcy5yYW5nZS5zdG9wKDEsIDEpW3UgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCJdKHsgaGVpZ2h0OiBpICsgXCIlXCIgfSwgYS5hbmltYXRlKSwgXCJtYXhcIiA9PT0gbyAmJiBcInZlcnRpY2FsXCIgPT09IHRoaXMub3JpZW50YXRpb24gJiYgdGhpcy5yYW5nZS5zdG9wKDEsIDEpW3UgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCJdKHsgaGVpZ2h0OiAxMDAgLSBpICsgXCIlXCIgfSwgYS5hbmltYXRlKSk7XG4gICAgICB9LCBfaGFuZGxlRXZlbnRzOiB7IGtleWRvd246IGZ1bmN0aW9uIGtleWRvd24oZSkge1xuICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICByID0gdChlLnRhcmdldCkuZGF0YShcInVpLXNsaWRlci1oYW5kbGUtaW5kZXhcIik7c3dpdGNoIChlLmtleUNvZGUpIHtjYXNlIHQudWkua2V5Q29kZS5IT01FOmNhc2UgdC51aS5rZXlDb2RlLkVORDpjYXNlIHQudWkua2V5Q29kZS5QQUdFX1VQOmNhc2UgdC51aS5rZXlDb2RlLlBBR0VfRE9XTjpjYXNlIHQudWkua2V5Q29kZS5VUDpjYXNlIHQudWkua2V5Q29kZS5SSUdIVDpjYXNlIHQudWkua2V5Q29kZS5ET1dOOmNhc2UgdC51aS5rZXlDb2RlLkxFRlQ6XG4gICAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KCksICF0aGlzLl9rZXlTbGlkaW5nICYmICh0aGlzLl9rZXlTbGlkaW5nID0gITAsIHRoaXMuX2FkZENsYXNzKHQoZS50YXJnZXQpLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiKSwgITEgPT09IHRoaXMuX3N0YXJ0KGUsIHIpKSkgcmV0dXJuO31zd2l0Y2ggKHMgPSB0aGlzLm9wdGlvbnMuc3RlcCwgaSA9IG4gPSB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpID8gdGhpcy52YWx1ZXMocikgOiB0aGlzLnZhbHVlKCksIGUua2V5Q29kZSkge2Nhc2UgdC51aS5rZXlDb2RlLkhPTUU6XG4gICAgICAgICAgICAgIG4gPSB0aGlzLl92YWx1ZU1pbigpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkVORDpcbiAgICAgICAgICAgICAgbiA9IHRoaXMuX3ZhbHVlTWF4KCk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuUEFHRV9VUDpcbiAgICAgICAgICAgICAgbiA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKGkgKyAodGhpcy5fdmFsdWVNYXgoKSAtIHRoaXMuX3ZhbHVlTWluKCkpIC8gdGhpcy5udW1QYWdlcyk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuICAgICAgICAgICAgICBuID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoaSAtICh0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKSkgLyB0aGlzLm51bVBhZ2VzKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5VUDpjYXNlIHQudWkua2V5Q29kZS5SSUdIVDpcbiAgICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMuX3ZhbHVlTWF4KCkpIHJldHVybjtuID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoaSArIHMpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkRPV046Y2FzZSB0LnVpLmtleUNvZGUuTEVGVDpcbiAgICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMuX3ZhbHVlTWluKCkpIHJldHVybjtuID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoaSAtIHMpO310aGlzLl9zbGlkZShlLCByLCBuKTtcbiAgICAgICAgfSwga2V5dXA6IGZ1bmN0aW9uIGtleXVwKGUpIHtcbiAgICAgICAgICB2YXIgaSA9IHQoZS50YXJnZXQpLmRhdGEoXCJ1aS1zbGlkZXItaGFuZGxlLWluZGV4XCIpO3RoaXMuX2tleVNsaWRpbmcgJiYgKHRoaXMuX2tleVNsaWRpbmcgPSAhMSwgdGhpcy5fc3RvcChlLCBpKSwgdGhpcy5fY2hhbmdlKGUsIGkpLCB0aGlzLl9yZW1vdmVDbGFzcyh0KGUudGFyZ2V0KSwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIikpO1xuICAgICAgICB9IH0gfSksIHQud2lkZ2V0KFwidWkuc29ydGFibGVcIiwgdC51aS5tb3VzZSwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCB3aWRnZXRFdmVudFByZWZpeDogXCJzb3J0XCIsIHJlYWR5OiAhMSwgb3B0aW9uczogeyBhcHBlbmRUbzogXCJwYXJlbnRcIiwgYXhpczogITEsIGNvbm5lY3RXaXRoOiAhMSwgY29udGFpbm1lbnQ6ICExLCBjdXJzb3I6IFwiYXV0b1wiLCBjdXJzb3JBdDogITEsIGRyb3BPbkVtcHR5OiAhMCwgZm9yY2VQbGFjZWhvbGRlclNpemU6ICExLCBmb3JjZUhlbHBlclNpemU6ICExLCBncmlkOiAhMSwgaGFuZGxlOiAhMSwgaGVscGVyOiBcIm9yaWdpbmFsXCIsIGl0ZW1zOiBcIj4gKlwiLCBvcGFjaXR5OiAhMSwgcGxhY2Vob2xkZXI6ICExLCByZXZlcnQ6ICExLCBzY3JvbGw6ICEwLCBzY3JvbGxTZW5zaXRpdml0eTogMjAsIHNjcm9sbFNwZWVkOiAyMCwgc2NvcGU6IFwiZGVmYXVsdFwiLCB0b2xlcmFuY2U6IFwiaW50ZXJzZWN0XCIsIHpJbmRleDogMWUzLCBhY3RpdmF0ZTogbnVsbCwgYmVmb3JlU3RvcDogbnVsbCwgY2hhbmdlOiBudWxsLCBkZWFjdGl2YXRlOiBudWxsLCBvdXQ6IG51bGwsIG92ZXI6IG51bGwsIHJlY2VpdmU6IG51bGwsIHJlbW92ZTogbnVsbCwgc29ydDogbnVsbCwgc3RhcnQ6IG51bGwsIHN0b3A6IG51bGwsIHVwZGF0ZTogbnVsbCB9LCBfaXNPdmVyQXhpczogZnVuY3Rpb24gX2lzT3ZlckF4aXModCwgZSwgaSkge1xuICAgICAgICByZXR1cm4gdCA+PSBlICYmIHQgPCBlICsgaTtcbiAgICAgIH0sIF9pc0Zsb2F0aW5nOiBmdW5jdGlvbiBfaXNGbG9hdGluZyh0KSB7XG4gICAgICAgIHJldHVybiAoL2xlZnR8cmlnaHQvLnRlc3QodC5jc3MoXCJmbG9hdFwiKSkgfHwgL2lubGluZXx0YWJsZS1jZWxsLy50ZXN0KHQuY3NzKFwiZGlzcGxheVwiKSlcbiAgICAgICAgKTtcbiAgICAgIH0sIF9jcmVhdGU6IGZ1bmN0aW9uIF9jcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyQ2FjaGUgPSB7fSwgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1zb3J0YWJsZVwiKSwgdGhpcy5yZWZyZXNoKCksIHRoaXMub2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpLCB0aGlzLl9tb3VzZUluaXQoKSwgdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCksIHRoaXMucmVhZHkgPSAhMDtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24odCwgZSkge1xuICAgICAgICB0aGlzLl9zdXBlcih0LCBlKSwgXCJoYW5kbGVcIiA9PT0gdCAmJiB0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKTtcbiAgICAgIH0sIF9zZXRIYW5kbGVDbGFzc05hbWU6IGZ1bmN0aW9uIF9zZXRIYW5kbGVDbGFzc05hbWUoKSB7XG4gICAgICAgIHZhciBlID0gdGhpczt0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnQuZmluZChcIi51aS1zb3J0YWJsZS1oYW5kbGVcIiksIFwidWktc29ydGFibGUtaGFuZGxlXCIpLCB0LmVhY2godGhpcy5pdGVtcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGUuX2FkZENsYXNzKHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oYW5kbGUgPyB0aGlzLml0ZW0uZmluZCh0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGFuZGxlKSA6IHRoaXMuaXRlbSwgXCJ1aS1zb3J0YWJsZS1oYW5kbGVcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX2Rlc3Ryb3k6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9tb3VzZURlc3Ryb3koKTtmb3IgKHZhciB0ID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyB0ID49IDA7IHQtLSkge1xuICAgICAgICAgIHRoaXMuaXRlbXNbdF0uaXRlbS5yZW1vdmVEYXRhKHRoaXMud2lkZ2V0TmFtZSArIFwiLWl0ZW1cIik7XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH0sIF9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uIF9tb3VzZUNhcHR1cmUoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IG51bGwsXG4gICAgICAgICAgICBzID0gITEsXG4gICAgICAgICAgICByID0gdGhpcztyZXR1cm4gISh0aGlzLnJldmVydGluZyB8fCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgXCJzdGF0aWNcIiA9PT0gdGhpcy5vcHRpb25zLnR5cGUgfHwgKHRoaXMuX3JlZnJlc2hJdGVtcyhlKSwgdChlLnRhcmdldCkucGFyZW50cygpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0LmRhdGEodGhpcywgci53aWRnZXROYW1lICsgXCItaXRlbVwiKSA9PT0gcikgcmV0dXJuIG4gPSB0KHRoaXMpLCAhMTtcbiAgICAgICAgfSksIHQuZGF0YShlLnRhcmdldCwgci53aWRnZXROYW1lICsgXCItaXRlbVwiKSA9PT0gciAmJiAobiA9IHQoZS50YXJnZXQpKSwgIW4gfHwgdGhpcy5vcHRpb25zLmhhbmRsZSAmJiAhaSAmJiAodCh0aGlzLm9wdGlvbnMuaGFuZGxlLCBuKS5maW5kKFwiKlwiKS5hZGRCYWNrKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyA9PT0gZS50YXJnZXQgJiYgKHMgPSAhMCk7XG4gICAgICAgIH0pLCAhcykgfHwgKHRoaXMuY3VycmVudEl0ZW0gPSBuLCB0aGlzLl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcygpLCAwKSkpO1xuICAgICAgfSwgX21vdXNlU3RhcnQ6IGZ1bmN0aW9uIF9tb3VzZVN0YXJ0KGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyA9IHRoaXMub3B0aW9ucztpZiAodGhpcy5jdXJyZW50Q29udGFpbmVyID0gdGhpcywgdGhpcy5yZWZyZXNoUG9zaXRpb25zKCksIHRoaXMuaGVscGVyID0gdGhpcy5fY3JlYXRlSGVscGVyKGUpLCB0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksIHRoaXMuX2NhY2hlTWFyZ2lucygpLCB0aGlzLnNjcm9sbFBhcmVudCA9IHRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCgpLCB0aGlzLm9mZnNldCA9IHRoaXMuY3VycmVudEl0ZW0ub2Zmc2V0KCksIHRoaXMub2Zmc2V0ID0geyB0b3A6IHRoaXMub2Zmc2V0LnRvcCAtIHRoaXMubWFyZ2lucy50b3AsIGxlZnQ6IHRoaXMub2Zmc2V0LmxlZnQgLSB0aGlzLm1hcmdpbnMubGVmdCB9LCB0LmV4dGVuZCh0aGlzLm9mZnNldCwgeyBjbGljazogeyBsZWZ0OiBlLnBhZ2VYIC0gdGhpcy5vZmZzZXQubGVmdCwgdG9wOiBlLnBhZ2VZIC0gdGhpcy5vZmZzZXQudG9wIH0sIHBhcmVudDogdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCksIHJlbGF0aXZlOiB0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpIH0pLCB0aGlzLmhlbHBlci5jc3MoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpLCB0aGlzLmNzc1Bvc2l0aW9uID0gdGhpcy5oZWxwZXIuY3NzKFwicG9zaXRpb25cIiksIHRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSksIHRoaXMub3JpZ2luYWxQYWdlWCA9IGUucGFnZVgsIHRoaXMub3JpZ2luYWxQYWdlWSA9IGUucGFnZVksIG8uY3Vyc29yQXQgJiYgdGhpcy5fYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcihvLmN1cnNvckF0KSwgdGhpcy5kb21Qb3NpdGlvbiA9IHsgcHJldjogdGhpcy5jdXJyZW50SXRlbS5wcmV2KClbMF0sIHBhcmVudDogdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVswXSB9LCB0aGlzLmhlbHBlclswXSAhPT0gdGhpcy5jdXJyZW50SXRlbVswXSAmJiB0aGlzLmN1cnJlbnRJdGVtLmhpZGUoKSwgdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXIoKSwgby5jb250YWlubWVudCAmJiB0aGlzLl9zZXRDb250YWlubWVudCgpLCBvLmN1cnNvciAmJiBcImF1dG9cIiAhPT0gby5jdXJzb3IgJiYgKHIgPSB0aGlzLmRvY3VtZW50LmZpbmQoXCJib2R5XCIpLCB0aGlzLnN0b3JlZEN1cnNvciA9IHIuY3NzKFwiY3Vyc29yXCIpLCByLmNzcyhcImN1cnNvclwiLCBvLmN1cnNvciksIHRoaXMuc3RvcmVkU3R5bGVzaGVldCA9IHQoXCI8c3R5bGU+KnsgY3Vyc29yOiBcIiArIG8uY3Vyc29yICsgXCIgIWltcG9ydGFudDsgfTwvc3R5bGU+XCIpLmFwcGVuZFRvKHIpKSwgby5vcGFjaXR5ICYmICh0aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIpICYmICh0aGlzLl9zdG9yZWRPcGFjaXR5ID0gdGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiKSksIHRoaXMuaGVscGVyLmNzcyhcIm9wYWNpdHlcIiwgby5vcGFjaXR5KSksIG8uekluZGV4ICYmICh0aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIikgJiYgKHRoaXMuX3N0b3JlZFpJbmRleCA9IHRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiKSksIHRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiLCBvLnpJbmRleCkpLCB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gdGhpcy5kb2N1bWVudFswXSAmJiBcIkhUTUxcIiAhPT0gdGhpcy5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSAmJiAodGhpcy5vdmVyZmxvd09mZnNldCA9IHRoaXMuc2Nyb2xsUGFyZW50Lm9mZnNldCgpKSwgdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsIGUsIHRoaXMuX3VpSGFzaCgpKSwgdGhpcy5fcHJlc2VydmVIZWxwZXJQcm9wb3J0aW9ucyB8fCB0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksICFuKSBmb3IgKHMgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgcyA+PSAwOyBzLS0pIHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lcnNbc10uX3RyaWdnZXIoXCJhY3RpdmF0ZVwiLCBlLCB0aGlzLl91aUhhc2godGhpcykpO1xuICAgICAgICB9cmV0dXJuIHQudWkuZGRtYW5hZ2VyICYmICh0LnVpLmRkbWFuYWdlci5jdXJyZW50ID0gdGhpcyksIHQudWkuZGRtYW5hZ2VyICYmICFvLmRyb3BCZWhhdmlvdXIgJiYgdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcywgZSksIHRoaXMuZHJhZ2dpbmcgPSAhMCwgdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsIFwidWktc29ydGFibGUtaGVscGVyXCIpLCB0aGlzLl9tb3VzZURyYWcoZSksICEwO1xuICAgICAgfSwgX21vdXNlRHJhZzogZnVuY3Rpb24gX21vdXNlRHJhZyhlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIGEgPSAhMTtmb3IgKHRoaXMucG9zaXRpb24gPSB0aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKGUpLCB0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5fY29udmVydFBvc2l0aW9uVG8oXCJhYnNvbHV0ZVwiKSwgdGhpcy5sYXN0UG9zaXRpb25BYnMgfHwgKHRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFicyksIHRoaXMub3B0aW9ucy5zY3JvbGwgJiYgKHRoaXMuc2Nyb2xsUGFyZW50WzBdICE9PSB0aGlzLmRvY3VtZW50WzBdICYmIFwiSFRNTFwiICE9PSB0aGlzLnNjcm9sbFBhcmVudFswXS50YWdOYW1lID8gKHRoaXMub3ZlcmZsb3dPZmZzZXQudG9wICsgdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0SGVpZ2h0IC0gZS5wYWdlWSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgPyB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgPSBhID0gdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wICsgby5zY3JvbGxTcGVlZCA6IGUucGFnZVkgLSB0aGlzLm92ZXJmbG93T2Zmc2V0LnRvcCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgJiYgKHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbFRvcCA9IGEgPSB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxUb3AgLSBvLnNjcm9sbFNwZWVkKSwgdGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0ICsgdGhpcy5zY3JvbGxQYXJlbnRbMF0ub2Zmc2V0V2lkdGggLSBlLnBhZ2VYIDwgby5zY3JvbGxTZW5zaXRpdml0eSA/IHRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQgPSBhID0gdGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCArIG8uc2Nyb2xsU3BlZWQgOiBlLnBhZ2VYIC0gdGhpcy5vdmVyZmxvd09mZnNldC5sZWZ0IDwgby5zY3JvbGxTZW5zaXRpdml0eSAmJiAodGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdCA9IGEgPSB0aGlzLnNjcm9sbFBhcmVudFswXS5zY3JvbGxMZWZ0IC0gby5zY3JvbGxTcGVlZCkpIDogKGUucGFnZVkgLSB0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSA/IGEgPSB0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCh0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCgpIC0gby5zY3JvbGxTcGVlZCkgOiB0aGlzLndpbmRvdy5oZWlnaHQoKSAtIChlLnBhZ2VZIC0gdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSkgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICYmIChhID0gdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AodGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSArIG8uc2Nyb2xsU3BlZWQpKSwgZS5wYWdlWCAtIHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSA/IGEgPSB0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQodGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkgLSBvLnNjcm9sbFNwZWVkKSA6IHRoaXMud2luZG93LndpZHRoKCkgLSAoZS5wYWdlWCAtIHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgJiYgKGEgPSB0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQodGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkKSkpLCAhMSAhPT0gYSAmJiB0LnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyICYmIHQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsIGUpKSwgdGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIiksIHRoaXMub3B0aW9ucy5heGlzICYmIFwieVwiID09PSB0aGlzLm9wdGlvbnMuYXhpcyB8fCAodGhpcy5oZWxwZXJbMF0uc3R5bGUubGVmdCA9IHRoaXMucG9zaXRpb24ubGVmdCArIFwicHhcIiksIHRoaXMub3B0aW9ucy5heGlzICYmIFwieFwiID09PSB0aGlzLm9wdGlvbnMuYXhpcyB8fCAodGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wID0gdGhpcy5wb3NpdGlvbi50b3AgKyBcInB4XCIpLCBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChuID0gdGhpcy5pdGVtc1tpXSwgcyA9IG4uaXRlbVswXSwgKHIgPSB0aGlzLl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIobikpICYmIG4uaW5zdGFuY2UgPT09IHRoaXMuY3VycmVudENvbnRhaW5lciAmJiAhKHMgPT09IHRoaXMuY3VycmVudEl0ZW1bMF0gfHwgdGhpcy5wbGFjZWhvbGRlclsxID09PSByID8gXCJuZXh0XCIgOiBcInByZXZcIl0oKVswXSA9PT0gcyB8fCB0LmNvbnRhaW5zKHRoaXMucGxhY2Vob2xkZXJbMF0sIHMpIHx8IFwic2VtaS1keW5hbWljXCIgPT09IHRoaXMub3B0aW9ucy50eXBlICYmIHQuY29udGFpbnModGhpcy5lbGVtZW50WzBdLCBzKSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9IDEgPT09IHIgPyBcImRvd25cIiA6IFwidXBcIiwgXCJwb2ludGVyXCIgIT09IHRoaXMub3B0aW9ucy50b2xlcmFuY2UgJiYgIXRoaXMuX2ludGVyc2VjdHNXaXRoU2lkZXMobikpIGJyZWFrO3RoaXMuX3JlYXJyYW5nZShlLCBuKSwgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCBlLCB0aGlzLl91aUhhc2goKSk7YnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIHRoaXMuX2NvbnRhY3RDb250YWluZXJzKGUpLCB0LnVpLmRkbWFuYWdlciAmJiB0LnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsIGUpLCB0aGlzLl90cmlnZ2VyKFwic29ydFwiLCBlLCB0aGlzLl91aUhhc2goKSksIHRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFicywgITE7XG4gICAgICB9LCBfbW91c2VTdG9wOiBmdW5jdGlvbiBfbW91c2VTdG9wKGUsIGkpIHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICBpZiAodC51aS5kZG1hbmFnZXIgJiYgIXRoaXMub3B0aW9ucy5kcm9wQmVoYXZpb3VyICYmIHQudWkuZGRtYW5hZ2VyLmRyb3AodGhpcywgZSksIHRoaXMub3B0aW9ucy5yZXZlcnQpIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzID0gdGhpcy5wbGFjZWhvbGRlci5vZmZzZXQoKSxcbiAgICAgICAgICAgICAgICByID0gdGhpcy5vcHRpb25zLmF4aXMsXG4gICAgICAgICAgICAgICAgbyA9IHt9O3IgJiYgXCJ4XCIgIT09IHIgfHwgKG8ubGVmdCA9IHMubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQgKyAodGhpcy5vZmZzZXRQYXJlbnRbMF0gPT09IHRoaXMuZG9jdW1lbnRbMF0uYm9keSA/IDAgOiB0aGlzLm9mZnNldFBhcmVudFswXS5zY3JvbGxMZWZ0KSksIHIgJiYgXCJ5XCIgIT09IHIgfHwgKG8udG9wID0gcy50b3AgLSB0aGlzLm9mZnNldC5wYXJlbnQudG9wIC0gdGhpcy5tYXJnaW5zLnRvcCArICh0aGlzLm9mZnNldFBhcmVudFswXSA9PT0gdGhpcy5kb2N1bWVudFswXS5ib2R5ID8gMCA6IHRoaXMub2Zmc2V0UGFyZW50WzBdLnNjcm9sbFRvcCkpLCB0aGlzLnJldmVydGluZyA9ICEwLCB0KHRoaXMuaGVscGVyKS5hbmltYXRlKG8sIHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnQsIDEwKSB8fCA1MDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgbi5fY2xlYXIoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgdGhpcy5fY2xlYXIoZSwgaSk7cmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICB9LCBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgICAgICB0aGlzLl9tb3VzZVVwKG5ldyB0LkV2ZW50KFwibW91c2V1cFwiLCB7IHRhcmdldDogbnVsbCB9KSksIFwib3JpZ2luYWxcIiA9PT0gdGhpcy5vcHRpb25zLmhlbHBlciA/ICh0aGlzLmN1cnJlbnRJdGVtLmNzcyh0aGlzLl9zdG9yZWRDU1MpLCB0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRJdGVtLCBcInVpLXNvcnRhYmxlLWhlbHBlclwiKSkgOiB0aGlzLmN1cnJlbnRJdGVtLnNob3coKTtmb3IgKHZhciBlID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGUgPj0gMDsgZS0tKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcnNbZV0uX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsIG51bGwsIHRoaXMuX3VpSGFzaCh0aGlzKSksIHRoaXMuY29udGFpbmVyc1tlXS5jb250YWluZXJDYWNoZS5vdmVyICYmICh0aGlzLmNvbnRhaW5lcnNbZV0uX3RyaWdnZXIoXCJvdXRcIiwgbnVsbCwgdGhpcy5fdWlIYXNoKHRoaXMpKSwgdGhpcy5jb250YWluZXJzW2VdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gdGhpcy5wbGFjZWhvbGRlciAmJiAodGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlICYmIHRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyWzBdKSwgXCJvcmlnaW5hbFwiICE9PSB0aGlzLm9wdGlvbnMuaGVscGVyICYmIHRoaXMuaGVscGVyICYmIHRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUgJiYgdGhpcy5oZWxwZXIucmVtb3ZlKCksIHQuZXh0ZW5kKHRoaXMsIHsgaGVscGVyOiBudWxsLCBkcmFnZ2luZzogITEsIHJldmVydGluZzogITEsIF9ub0ZpbmFsU29ydDogbnVsbCB9KSwgdGhpcy5kb21Qb3NpdGlvbi5wcmV2ID8gdCh0aGlzLmRvbVBvc2l0aW9uLnByZXYpLmFmdGVyKHRoaXMuY3VycmVudEl0ZW0pIDogdCh0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCkucHJlcGVuZCh0aGlzLmN1cnJlbnRJdGVtKSksIHRoaXM7XG4gICAgICB9LCBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZShlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5fZ2V0SXRlbXNBc2pRdWVyeShlICYmIGUuY29ubmVjdGVkKSxcbiAgICAgICAgICAgIG4gPSBbXTtyZXR1cm4gZSA9IGUgfHwge30sIHQoaSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGkgPSAodChlLml0ZW0gfHwgdGhpcykuYXR0cihlLmF0dHJpYnV0ZSB8fCBcImlkXCIpIHx8IFwiXCIpLm1hdGNoKGUuZXhwcmVzc2lvbiB8fCAvKC4rKVtcXC09X10oLispLyk7aSAmJiBuLnB1c2goKGUua2V5IHx8IGlbMV0gKyBcIltdXCIpICsgXCI9XCIgKyAoZS5rZXkgJiYgZS5leHByZXNzaW9uID8gaVsxXSA6IGlbMl0pKTtcbiAgICAgICAgfSksICFuLmxlbmd0aCAmJiBlLmtleSAmJiBuLnB1c2goZS5rZXkgKyBcIj1cIiksIG4uam9pbihcIiZcIik7XG4gICAgICB9LCB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KGUgJiYgZS5jb25uZWN0ZWQpLFxuICAgICAgICAgICAgbiA9IFtdO3JldHVybiBlID0gZSB8fCB7fSwgaS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBuLnB1c2godChlLml0ZW0gfHwgdGhpcykuYXR0cihlLmF0dHJpYnV0ZSB8fCBcImlkXCIpIHx8IFwiXCIpO1xuICAgICAgICB9KSwgbjtcbiAgICAgIH0sIF9pbnRlcnNlY3RzV2l0aDogZnVuY3Rpb24gX2ludGVyc2VjdHNXaXRoKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQsXG4gICAgICAgICAgICBpID0gZSArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG4gICAgICAgICAgICBuID0gdGhpcy5wb3NpdGlvbkFicy50b3AsXG4gICAgICAgICAgICBzID0gbiArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgciA9IHQubGVmdCxcbiAgICAgICAgICAgIG8gPSByICsgdC53aWR0aCxcbiAgICAgICAgICAgIGEgPSB0LnRvcCxcbiAgICAgICAgICAgIGwgPSBhICsgdC5oZWlnaHQsXG4gICAgICAgICAgICB1ID0gdGhpcy5vZmZzZXQuY2xpY2sudG9wLFxuICAgICAgICAgICAgYyA9IHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsXG4gICAgICAgICAgICBoID0gXCJ4XCIgPT09IHRoaXMub3B0aW9ucy5heGlzIHx8IG4gKyB1ID4gYSAmJiBuICsgdSA8IGwsXG4gICAgICAgICAgICBkID0gXCJ5XCIgPT09IHRoaXMub3B0aW9ucy5heGlzIHx8IGUgKyBjID4gciAmJiBlICsgYyA8IG8sXG4gICAgICAgICAgICBwID0gaCAmJiBkO3JldHVybiBcInBvaW50ZXJcIiA9PT0gdGhpcy5vcHRpb25zLnRvbGVyYW5jZSB8fCB0aGlzLm9wdGlvbnMuZm9yY2VQb2ludGVyRm9yQ29udGFpbmVycyB8fCBcInBvaW50ZXJcIiAhPT0gdGhpcy5vcHRpb25zLnRvbGVyYW5jZSAmJiB0aGlzLmhlbHBlclByb3BvcnRpb25zW3RoaXMuZmxvYXRpbmcgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA+IHRbdGhpcy5mbG9hdGluZyA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID8gcCA6IHIgPCBlICsgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIgJiYgaSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLyAyIDwgbyAmJiBhIDwgbiArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMiAmJiBzIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyIDwgbDtcbiAgICAgIH0sIF9pbnRlcnNlY3RzV2l0aFBvaW50ZXI6IGZ1bmN0aW9uIF9pbnRlcnNlY3RzV2l0aFBvaW50ZXIodCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gXCJ4XCIgPT09IHRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy50b3AgKyB0aGlzLm9mZnNldC5jbGljay50b3AsIHQudG9wLCB0LmhlaWdodCksXG4gICAgICAgICAgICBzID0gXCJ5XCIgPT09IHRoaXMub3B0aW9ucy5heGlzIHx8IHRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgdC5sZWZ0LCB0LndpZHRoKSxcbiAgICAgICAgICAgIHIgPSBuICYmIHM7cmV0dXJuICEhciAmJiAoZSA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLCBpID0gdGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKSwgdGhpcy5mbG9hdGluZyA/IFwicmlnaHRcIiA9PT0gaSB8fCBcImRvd25cIiA9PT0gZSA/IDIgOiAxIDogZSAmJiAoXCJkb3duXCIgPT09IGUgPyAyIDogMSkpO1xuICAgICAgfSwgX2ludGVyc2VjdHNXaXRoU2lkZXM6IGZ1bmN0aW9uIF9pbnRlcnNlY3RzV2l0aFNpZGVzKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLl9pc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMudG9wICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wLCB0LnRvcCArIHQuaGVpZ2h0IC8gMiwgdC5oZWlnaHQpLFxuICAgICAgICAgICAgaSA9IHRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgdC5sZWZ0ICsgdC53aWR0aCAvIDIsIHQud2lkdGgpLFxuICAgICAgICAgICAgbiA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLFxuICAgICAgICAgICAgcyA9IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7cmV0dXJuIHRoaXMuZmxvYXRpbmcgJiYgcyA/IFwicmlnaHRcIiA9PT0gcyAmJiBpIHx8IFwibGVmdFwiID09PSBzICYmICFpIDogbiAmJiAoXCJkb3duXCIgPT09IG4gJiYgZSB8fCBcInVwXCIgPT09IG4gJiYgIWUpO1xuICAgICAgfSwgX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbjogZnVuY3Rpb24gX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnBvc2l0aW9uQWJzLnRvcCAtIHRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDtyZXR1cm4gMCAhPT0gdCAmJiAodCA+IDAgPyBcImRvd25cIiA6IFwidXBcIik7XG4gICAgICB9LCBfZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb246IGZ1bmN0aW9uIF9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQgLSB0aGlzLmxhc3RQb3NpdGlvbkFicy5sZWZ0O3JldHVybiAwICE9PSB0ICYmICh0ID4gMCA/IFwicmlnaHRcIiA6IFwibGVmdFwiKTtcbiAgICAgIH0sIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2godCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmcmVzaEl0ZW1zKHQpLCB0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKSwgdGhpcy5yZWZyZXNoUG9zaXRpb25zKCksIHRoaXM7XG4gICAgICB9LCBfY29ubmVjdFdpdGg6IGZ1bmN0aW9uIF9jb25uZWN0V2l0aCgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLm9wdGlvbnM7cmV0dXJuIHQuY29ubmVjdFdpdGguY29uc3RydWN0b3IgPT09IFN0cmluZyA/IFt0LmNvbm5lY3RXaXRoXSA6IHQuY29ubmVjdFdpdGg7XG4gICAgICB9LCBfZ2V0SXRlbXNBc2pRdWVyeTogZnVuY3Rpb24gX2dldEl0ZW1zQXNqUXVlcnkoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8gPSBbXSxcbiAgICAgICAgICAgIGEgPSBbXSxcbiAgICAgICAgICAgIGwgPSB0aGlzLl9jb25uZWN0V2l0aCgpO2lmIChsICYmIGUpIGZvciAoaSA9IGwubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBmb3IgKHMgPSB0KGxbaV0sIHRoaXMuZG9jdW1lbnRbMF0pLCBuID0gcy5sZW5ndGggLSAxOyBuID49IDA7IG4tLSkge1xuICAgICAgICAgICAgKHIgPSB0LmRhdGEoc1tuXSwgdGhpcy53aWRnZXRGdWxsTmFtZSkpICYmIHIgIT09IHRoaXMgJiYgIXIub3B0aW9ucy5kaXNhYmxlZCAmJiBhLnB1c2goW3QuaXNGdW5jdGlvbihyLm9wdGlvbnMuaXRlbXMpID8gci5vcHRpb25zLml0ZW1zLmNhbGwoci5lbGVtZW50KSA6IHQoci5vcHRpb25zLml0ZW1zLCByLmVsZW1lbnQpLm5vdChcIi51aS1zb3J0YWJsZS1oZWxwZXJcIikubm90KFwiLnVpLXNvcnRhYmxlLXBsYWNlaG9sZGVyXCIpLCByXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9ZnVuY3Rpb24gdSgpIHtcbiAgICAgICAgICBvLnB1c2godGhpcyk7XG4gICAgICAgIH1mb3IgKGEucHVzaChbdC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcykgPyB0aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCh0aGlzLmVsZW1lbnQsIG51bGwsIHsgb3B0aW9uczogdGhpcy5vcHRpb25zLCBpdGVtOiB0aGlzLmN1cnJlbnRJdGVtIH0pIDogdCh0aGlzLm9wdGlvbnMuaXRlbXMsIHRoaXMuZWxlbWVudCkubm90KFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiKS5ub3QoXCIudWktc29ydGFibGUtcGxhY2Vob2xkZXJcIiksIHRoaXNdKSwgaSA9IGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBhW2ldWzBdLmVhY2godSk7XG4gICAgICAgIH1yZXR1cm4gdChvKTtcbiAgICAgIH0sIF9yZW1vdmVDdXJyZW50c0Zyb21JdGVtczogZnVuY3Rpb24gX3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMuY3VycmVudEl0ZW0uZmluZChcIjpkYXRhKFwiICsgdGhpcy53aWRnZXROYW1lICsgXCItaXRlbSlcIik7dGhpcy5pdGVtcyA9IHQuZ3JlcCh0aGlzLml0ZW1zLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGVbaV0gPT09IHQuaXRlbVswXSkgcmV0dXJuICExO1xuICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX3JlZnJlc2hJdGVtczogZnVuY3Rpb24gX3JlZnJlc2hJdGVtcyhlKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXSwgdGhpcy5jb250YWluZXJzID0gW3RoaXNdO3ZhciBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGMgPSB0aGlzLml0ZW1zLFxuICAgICAgICAgICAgaCA9IFtbdC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcykgPyB0aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCh0aGlzLmVsZW1lbnRbMF0sIGUsIHsgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9KSA6IHQodGhpcy5vcHRpb25zLml0ZW1zLCB0aGlzLmVsZW1lbnQpLCB0aGlzXV0sXG4gICAgICAgICAgICBkID0gdGhpcy5fY29ubmVjdFdpdGgoKTtpZiAoZCAmJiB0aGlzLnJlYWR5KSBmb3IgKGkgPSBkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgZm9yIChzID0gdChkW2ldLCB0aGlzLmRvY3VtZW50WzBdKSwgbiA9IHMubGVuZ3RoIC0gMTsgbiA+PSAwOyBuLS0pIHtcbiAgICAgICAgICAgIChyID0gdC5kYXRhKHNbbl0sIHRoaXMud2lkZ2V0RnVsbE5hbWUpKSAmJiByICE9PSB0aGlzICYmICFyLm9wdGlvbnMuZGlzYWJsZWQgJiYgKGgucHVzaChbdC5pc0Z1bmN0aW9uKHIub3B0aW9ucy5pdGVtcykgPyByLm9wdGlvbnMuaXRlbXMuY2FsbChyLmVsZW1lbnRbMF0sIGUsIHsgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9KSA6IHQoci5vcHRpb25zLml0ZW1zLCByLmVsZW1lbnQpLCByXSksIHRoaXMuY29udGFpbmVycy5wdXNoKHIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mb3IgKGkgPSBoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgZm9yIChvID0gaFtpXVsxXSwgYSA9IGhbaV1bMF0sIG4gPSAwLCB1ID0gYS5sZW5ndGg7IG4gPCB1OyBuKyspIHtcbiAgICAgICAgICAgIChsID0gdChhW25dKSkuZGF0YSh0aGlzLndpZGdldE5hbWUgKyBcIi1pdGVtXCIsIG8pLCBjLnB1c2goeyBpdGVtOiBsLCBpbnN0YW5jZTogbywgd2lkdGg6IDAsIGhlaWdodDogMCwgbGVmdDogMCwgdG9wOiAwIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgcmVmcmVzaFBvc2l0aW9uczogZnVuY3Rpb24gcmVmcmVzaFBvc2l0aW9ucyhlKSB7XG4gICAgICAgIHZhciBpLCBuLCBzLCByO2ZvciAodGhpcy5mbG9hdGluZyA9ICEhdGhpcy5pdGVtcy5sZW5ndGggJiYgKFwieFwiID09PSB0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLl9pc0Zsb2F0aW5nKHRoaXMuaXRlbXNbMF0uaXRlbSkpLCB0aGlzLm9mZnNldFBhcmVudCAmJiB0aGlzLmhlbHBlciAmJiAodGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCkpLCBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIChuID0gdGhpcy5pdGVtc1tpXSkuaW5zdGFuY2UgIT09IHRoaXMuY3VycmVudENvbnRhaW5lciAmJiB0aGlzLmN1cnJlbnRDb250YWluZXIgJiYgbi5pdGVtWzBdICE9PSB0aGlzLmN1cnJlbnRJdGVtWzBdIHx8IChzID0gdGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQgPyB0KHRoaXMub3B0aW9ucy50b2xlcmFuY2VFbGVtZW50LCBuLml0ZW0pIDogbi5pdGVtLCBlIHx8IChuLndpZHRoID0gcy5vdXRlcldpZHRoKCksIG4uaGVpZ2h0ID0gcy5vdXRlckhlaWdodCgpKSwgciA9IHMub2Zmc2V0KCksIG4ubGVmdCA9IHIubGVmdCwgbi50b3AgPSByLnRvcCk7XG4gICAgICAgIH1pZiAodGhpcy5vcHRpb25zLmN1c3RvbSAmJiB0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzKSB0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzLmNhbGwodGhpcyk7ZWxzZSBmb3IgKGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICByID0gdGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnQub2Zmc2V0KCksIHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5sZWZ0ID0gci5sZWZ0LCB0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUudG9wID0gci50b3AsIHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS53aWR0aCA9IHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50Lm91dGVyV2lkdGgoKSwgdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLmhlaWdodCA9IHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH0sIF9jcmVhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24gX2NyZWF0ZVBsYWNlaG9sZGVyKGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gKGUgPSBlIHx8IHRoaXMpLm9wdGlvbnM7bi5wbGFjZWhvbGRlciAmJiBuLnBsYWNlaG9sZGVyLmNvbnN0cnVjdG9yICE9PSBTdHJpbmcgfHwgKGkgPSBuLnBsYWNlaG9sZGVyLCBuLnBsYWNlaG9sZGVyID0geyBlbGVtZW50OiBmdW5jdGlvbiBlbGVtZW50KCkge1xuICAgICAgICAgICAgdmFyIG4gPSBlLmN1cnJlbnRJdGVtWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgcyA9IHQoXCI8XCIgKyBuICsgXCI+XCIsIGUuZG9jdW1lbnRbMF0pO3JldHVybiBlLl9hZGRDbGFzcyhzLCBcInVpLXNvcnRhYmxlLXBsYWNlaG9sZGVyXCIsIGkgfHwgZS5jdXJyZW50SXRlbVswXS5jbGFzc05hbWUpLl9yZW1vdmVDbGFzcyhzLCBcInVpLXNvcnRhYmxlLWhlbHBlclwiKSwgXCJ0Ym9keVwiID09PSBuID8gZS5fY3JlYXRlVHJQbGFjZWhvbGRlcihlLmN1cnJlbnRJdGVtLmZpbmQoXCJ0clwiKS5lcSgwKSwgdChcIjx0cj5cIiwgZS5kb2N1bWVudFswXSkuYXBwZW5kVG8ocykpIDogXCJ0clwiID09PSBuID8gZS5fY3JlYXRlVHJQbGFjZWhvbGRlcihlLmN1cnJlbnRJdGVtLCBzKSA6IFwiaW1nXCIgPT09IG4gJiYgcy5hdHRyKFwic3JjXCIsIGUuY3VycmVudEl0ZW0uYXR0cihcInNyY1wiKSksIGkgfHwgcy5jc3MoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLCBzO1xuICAgICAgICAgIH0sIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHQsIHMpIHtcbiAgICAgICAgICAgIGkgJiYgIW4uZm9yY2VQbGFjZWhvbGRlclNpemUgfHwgKHMuaGVpZ2h0KCkgfHwgcy5oZWlnaHQoZS5jdXJyZW50SXRlbS5pbm5lckhlaWdodCgpIC0gcGFyc2VJbnQoZS5jdXJyZW50SXRlbS5jc3MoXCJwYWRkaW5nVG9wXCIpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ0JvdHRvbVwiKSB8fCAwLCAxMCkpLCBzLndpZHRoKCkgfHwgcy53aWR0aChlLmN1cnJlbnRJdGVtLmlubmVyV2lkdGgoKSAtIHBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ0xlZnRcIikgfHwgMCwgMTApIC0gcGFyc2VJbnQoZS5jdXJyZW50SXRlbS5jc3MoXCJwYWRkaW5nUmlnaHRcIikgfHwgMCwgMTApKSk7XG4gICAgICAgICAgfSB9KSwgZS5wbGFjZWhvbGRlciA9IHQobi5wbGFjZWhvbGRlci5lbGVtZW50LmNhbGwoZS5lbGVtZW50LCBlLmN1cnJlbnRJdGVtKSksIGUuY3VycmVudEl0ZW0uYWZ0ZXIoZS5wbGFjZWhvbGRlciksIG4ucGxhY2Vob2xkZXIudXBkYXRlKGUsIGUucGxhY2Vob2xkZXIpO1xuICAgICAgfSwgX2NyZWF0ZVRyUGxhY2Vob2xkZXI6IGZ1bmN0aW9uIF9jcmVhdGVUclBsYWNlaG9sZGVyKGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzO2UuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0KFwiPHRkPiYjMTYwOzwvdGQ+XCIsIG4uZG9jdW1lbnRbMF0pLmF0dHIoXCJjb2xzcGFuXCIsIHQodGhpcykuYXR0cihcImNvbHNwYW5cIikgfHwgMSkuYXBwZW5kVG8oaSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX2NvbnRhY3RDb250YWluZXJzOiBmdW5jdGlvbiBfY29udGFjdENvbnRhaW5lcnMoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGQgPSBudWxsLFxuICAgICAgICAgICAgcCA9IG51bGw7Zm9yIChpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKCF0LmNvbnRhaW5zKHRoaXMuY3VycmVudEl0ZW1bMF0sIHRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50WzBdKSkgaWYgKHRoaXMuX2ludGVyc2VjdHNXaXRoKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZSkpIHtcbiAgICAgICAgICAgIGlmIChkICYmIHQuY29udGFpbnModGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnRbMF0sIGQuZWxlbWVudFswXSkpIGNvbnRpbnVlO2QgPSB0aGlzLmNvbnRhaW5lcnNbaV0sIHAgPSBpO1xuICAgICAgICAgIH0gZWxzZSB0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlciAmJiAodGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKFwib3V0XCIsIGUsIHRoaXMuX3VpSGFzaCh0aGlzKSksIHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyID0gMCk7XG4gICAgICAgIH1pZiAoZCkgaWYgKDEgPT09IHRoaXMuY29udGFpbmVycy5sZW5ndGgpIHRoaXMuY29udGFpbmVyc1twXS5jb250YWluZXJDYWNoZS5vdmVyIHx8ICh0aGlzLmNvbnRhaW5lcnNbcF0uX3RyaWdnZXIoXCJvdmVyXCIsIGUsIHRoaXMuX3VpSGFzaCh0aGlzKSksIHRoaXMuY29udGFpbmVyc1twXS5jb250YWluZXJDYWNoZS5vdmVyID0gMSk7ZWxzZSB7XG4gICAgICAgICAgZm9yIChzID0gMWU0LCByID0gbnVsbCwgYyA9IGQuZmxvYXRpbmcgfHwgdGhpcy5faXNGbG9hdGluZyh0aGlzLmN1cnJlbnRJdGVtKSwgbyA9IGMgPyBcImxlZnRcIiA6IFwidG9wXCIsIGEgPSBjID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIiwgaCA9IGMgPyBcInBhZ2VYXCIgOiBcInBhZ2VZXCIsIG4gPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IG4gPj0gMDsgbi0tKSB7XG4gICAgICAgICAgICB0LmNvbnRhaW5zKHRoaXMuY29udGFpbmVyc1twXS5lbGVtZW50WzBdLCB0aGlzLml0ZW1zW25dLml0ZW1bMF0pICYmIHRoaXMuaXRlbXNbbl0uaXRlbVswXSAhPT0gdGhpcy5jdXJyZW50SXRlbVswXSAmJiAobCA9IHRoaXMuaXRlbXNbbl0uaXRlbS5vZmZzZXQoKVtvXSwgdSA9ICExLCBlW2hdIC0gbCA+IHRoaXMuaXRlbXNbbl1bYV0gLyAyICYmICh1ID0gITApLCBNYXRoLmFicyhlW2hdIC0gbCkgPCBzICYmIChzID0gTWF0aC5hYnMoZVtoXSAtIGwpLCByID0gdGhpcy5pdGVtc1tuXSwgdGhpcy5kaXJlY3Rpb24gPSB1ID8gXCJ1cFwiIDogXCJkb3duXCIpKTtcbiAgICAgICAgICB9aWYgKCFyICYmICF0aGlzLm9wdGlvbnMuZHJvcE9uRW1wdHkpIHJldHVybjtpZiAodGhpcy5jdXJyZW50Q29udGFpbmVyID09PSB0aGlzLmNvbnRhaW5lcnNbcF0pIHJldHVybiB2b2lkICh0aGlzLmN1cnJlbnRDb250YWluZXIuY29udGFpbmVyQ2FjaGUub3ZlciB8fCAodGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKFwib3ZlclwiLCBlLCB0aGlzLl91aUhhc2goKSksIHRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyID0gMSkpO3IgPyB0aGlzLl9yZWFycmFuZ2UoZSwgciwgbnVsbCwgITApIDogdGhpcy5fcmVhcnJhbmdlKGUsIG51bGwsIHRoaXMuY29udGFpbmVyc1twXS5lbGVtZW50LCAhMCksIHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIiwgZSwgdGhpcy5fdWlIYXNoKCkpLCB0aGlzLmNvbnRhaW5lcnNbcF0uX3RyaWdnZXIoXCJjaGFuZ2VcIiwgZSwgdGhpcy5fdWlIYXNoKHRoaXMpKSwgdGhpcy5jdXJyZW50Q29udGFpbmVyID0gdGhpcy5jb250YWluZXJzW3BdLCB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIudXBkYXRlKHRoaXMuY3VycmVudENvbnRhaW5lciwgdGhpcy5wbGFjZWhvbGRlciksIHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcihcIm92ZXJcIiwgZSwgdGhpcy5fdWlIYXNoKHRoaXMpKSwgdGhpcy5jb250YWluZXJzW3BdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAxO1xuICAgICAgICB9XG4gICAgICB9LCBfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiBfY3JlYXRlSGVscGVyKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBuID0gdC5pc0Z1bmN0aW9uKGkuaGVscGVyKSA/IHQoaS5oZWxwZXIuYXBwbHkodGhpcy5lbGVtZW50WzBdLCBbZSwgdGhpcy5jdXJyZW50SXRlbV0pKSA6IFwiY2xvbmVcIiA9PT0gaS5oZWxwZXIgPyB0aGlzLmN1cnJlbnRJdGVtLmNsb25lKCkgOiB0aGlzLmN1cnJlbnRJdGVtO3JldHVybiBuLnBhcmVudHMoXCJib2R5XCIpLmxlbmd0aCB8fCB0KFwicGFyZW50XCIgIT09IGkuYXBwZW5kVG8gPyBpLmFwcGVuZFRvIDogdGhpcy5jdXJyZW50SXRlbVswXS5wYXJlbnROb2RlKVswXS5hcHBlbmRDaGlsZChuWzBdKSwgblswXSA9PT0gdGhpcy5jdXJyZW50SXRlbVswXSAmJiAodGhpcy5fc3RvcmVkQ1NTID0geyB3aWR0aDogdGhpcy5jdXJyZW50SXRlbVswXS5zdHlsZS53aWR0aCwgaGVpZ2h0OiB0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLmhlaWdodCwgcG9zaXRpb246IHRoaXMuY3VycmVudEl0ZW0uY3NzKFwicG9zaXRpb25cIiksIHRvcDogdGhpcy5jdXJyZW50SXRlbS5jc3MoXCJ0b3BcIiksIGxlZnQ6IHRoaXMuY3VycmVudEl0ZW0uY3NzKFwibGVmdFwiKSB9KSwgblswXS5zdHlsZS53aWR0aCAmJiAhaS5mb3JjZUhlbHBlclNpemUgfHwgbi53aWR0aCh0aGlzLmN1cnJlbnRJdGVtLndpZHRoKCkpLCBuWzBdLnN0eWxlLmhlaWdodCAmJiAhaS5mb3JjZUhlbHBlclNpemUgfHwgbi5oZWlnaHQodGhpcy5jdXJyZW50SXRlbS5oZWlnaHQoKSksIG47XG4gICAgICB9LCBfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24gX2FkanVzdE9mZnNldEZyb21IZWxwZXIoZSkge1xuICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChlID0gZS5zcGxpdChcIiBcIikpLCB0LmlzQXJyYXkoZSkgJiYgKGUgPSB7IGxlZnQ6ICtlWzBdLCB0b3A6ICtlWzFdIHx8IDAgfSksIFwibGVmdFwiIGluIGUgJiYgKHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSBlLmxlZnQgKyB0aGlzLm1hcmdpbnMubGVmdCksIFwicmlnaHRcIiBpbiBlICYmICh0aGlzLm9mZnNldC5jbGljay5sZWZ0ID0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIGUucmlnaHQgKyB0aGlzLm1hcmdpbnMubGVmdCksIFwidG9wXCIgaW4gZSAmJiAodGhpcy5vZmZzZXQuY2xpY2sudG9wID0gZS50b3AgKyB0aGlzLm1hcmdpbnMudG9wKSwgXCJib3R0b21cIiBpbiBlICYmICh0aGlzLm9mZnNldC5jbGljay50b3AgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIGUuYm90dG9tICsgdGhpcy5tYXJnaW5zLnRvcCk7XG4gICAgICB9LCBfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbiBfZ2V0UGFyZW50T2Zmc2V0KCkge1xuICAgICAgICB0aGlzLm9mZnNldFBhcmVudCA9IHRoaXMuaGVscGVyLm9mZnNldFBhcmVudCgpO3ZhciBlID0gdGhpcy5vZmZzZXRQYXJlbnQub2Zmc2V0KCk7cmV0dXJuIFwiYWJzb2x1dGVcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiAmJiB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gdGhpcy5kb2N1bWVudFswXSAmJiB0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkgJiYgKGUubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCksIGUudG9wICs9IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpKSwgKHRoaXMub2Zmc2V0UGFyZW50WzBdID09PSB0aGlzLmRvY3VtZW50WzBdLmJvZHkgfHwgdGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZSAmJiBcImh0bWxcIiA9PT0gdGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpICYmIHQudWkuaWUpICYmIChlID0geyB0b3A6IDAsIGxlZnQ6IDAgfSksIHsgdG9wOiBlLnRvcCArIChwYXJzZUludCh0aGlzLm9mZnNldFBhcmVudC5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwgMTApIHx8IDApLCBsZWZ0OiBlLmxlZnQgKyAocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLCAxMCkgfHwgMCkgfTtcbiAgICAgIH0sIF9nZXRSZWxhdGl2ZU9mZnNldDogZnVuY3Rpb24gX2dldFJlbGF0aXZlT2Zmc2V0KCkge1xuICAgICAgICBpZiAoXCJyZWxhdGl2ZVwiID09PSB0aGlzLmNzc1Bvc2l0aW9uKSB7XG4gICAgICAgICAgdmFyIHQgPSB0aGlzLmN1cnJlbnRJdGVtLnBvc2l0aW9uKCk7cmV0dXJuIHsgdG9wOiB0LnRvcCAtIChwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoXCJ0b3BcIiksIDEwKSB8fCAwKSArIHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpLCBsZWZ0OiB0LmxlZnQgLSAocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKFwibGVmdFwiKSwgMTApIHx8IDApICsgdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIH07XG4gICAgICAgIH1yZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgICAgIH0sIF9jYWNoZU1hcmdpbnM6IGZ1bmN0aW9uIF9jYWNoZU1hcmdpbnMoKSB7XG4gICAgICAgIHRoaXMubWFyZ2lucyA9IHsgbGVmdDogcGFyc2VJbnQodGhpcy5jdXJyZW50SXRlbS5jc3MoXCJtYXJnaW5MZWZ0XCIpLCAxMCkgfHwgMCwgdG9wOiBwYXJzZUludCh0aGlzLmN1cnJlbnRJdGVtLmNzcyhcIm1hcmdpblRvcFwiKSwgMTApIHx8IDAgfTtcbiAgICAgIH0sIF9jYWNoZUhlbHBlclByb3BvcnRpb25zOiBmdW5jdGlvbiBfY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpIHtcbiAgICAgICAgdGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IHsgd2lkdGg6IHRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSwgaGVpZ2h0OiB0aGlzLmhlbHBlci5vdXRlckhlaWdodCgpIH07XG4gICAgICB9LCBfc2V0Q29udGFpbm1lbnQ6IGZ1bmN0aW9uIF9zZXRDb250YWlubWVudCgpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHMgPSB0aGlzLm9wdGlvbnM7XCJwYXJlbnRcIiA9PT0gcy5jb250YWlubWVudCAmJiAocy5jb250YWlubWVudCA9IHRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUpLCBcImRvY3VtZW50XCIgIT09IHMuY29udGFpbm1lbnQgJiYgXCJ3aW5kb3dcIiAhPT0gcy5jb250YWlubWVudCB8fCAodGhpcy5jb250YWlubWVudCA9IFswIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0LCAwIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCwgXCJkb2N1bWVudFwiID09PSBzLmNvbnRhaW5tZW50ID8gdGhpcy5kb2N1bWVudC53aWR0aCgpIDogdGhpcy53aW5kb3cud2lkdGgoKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCwgKFwiZG9jdW1lbnRcIiA9PT0gcy5jb250YWlubWVudCA/IHRoaXMuZG9jdW1lbnQuaGVpZ2h0KCkgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCA6IHRoaXMud2luZG93LmhlaWdodCgpIHx8IHRoaXMuZG9jdW1lbnRbMF0uYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3BdKSwgL14oZG9jdW1lbnR8d2luZG93fHBhcmVudCkkLy50ZXN0KHMuY29udGFpbm1lbnQpIHx8IChlID0gdChzLmNvbnRhaW5tZW50KVswXSwgaSA9IHQocy5jb250YWlubWVudCkub2Zmc2V0KCksIG4gPSBcImhpZGRlblwiICE9PSB0KGUpLmNzcyhcIm92ZXJmbG93XCIpLCB0aGlzLmNvbnRhaW5tZW50ID0gW2kubGVmdCArIChwYXJzZUludCh0KGUpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwgMTApIHx8IDApICsgKHBhcnNlSW50KHQoZSkuY3NzKFwicGFkZGluZ0xlZnRcIiksIDEwKSB8fCAwKSAtIHRoaXMubWFyZ2lucy5sZWZ0LCBpLnRvcCArIChwYXJzZUludCh0KGUpLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLCAxMCkgfHwgMCkgKyAocGFyc2VJbnQodChlKS5jc3MoXCJwYWRkaW5nVG9wXCIpLCAxMCkgfHwgMCkgLSB0aGlzLm1hcmdpbnMudG9wLCBpLmxlZnQgKyAobiA/IE1hdGgubWF4KGUuc2Nyb2xsV2lkdGgsIGUub2Zmc2V0V2lkdGgpIDogZS5vZmZzZXRXaWR0aCkgLSAocGFyc2VJbnQodChlKS5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIiksIDEwKSB8fCAwKSAtIChwYXJzZUludCh0KGUpLmNzcyhcInBhZGRpbmdSaWdodFwiKSwgMTApIHx8IDApIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LCBpLnRvcCArIChuID8gTWF0aC5tYXgoZS5zY3JvbGxIZWlnaHQsIGUub2Zmc2V0SGVpZ2h0KSA6IGUub2Zmc2V0SGVpZ2h0KSAtIChwYXJzZUludCh0KGUpLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpLCAxMCkgfHwgMCkgLSAocGFyc2VJbnQodChlKS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpLCAxMCkgfHwgMCkgLSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3BdKTtcbiAgICAgIH0sIF9jb252ZXJ0UG9zaXRpb25UbzogZnVuY3Rpb24gX2NvbnZlcnRQb3NpdGlvblRvKGUsIGkpIHtcbiAgICAgICAgaSB8fCAoaSA9IHRoaXMucG9zaXRpb24pO3ZhciBuID0gXCJhYnNvbHV0ZVwiID09PSBlID8gMSA6IC0xLFxuICAgICAgICAgICAgcyA9IFwiYWJzb2x1dGVcIiAhPT0gdGhpcy5jc3NQb3NpdGlvbiB8fCB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gdGhpcy5kb2N1bWVudFswXSAmJiB0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLCB0aGlzLm9mZnNldFBhcmVudFswXSkgPyB0aGlzLnNjcm9sbFBhcmVudCA6IHRoaXMub2Zmc2V0UGFyZW50LFxuICAgICAgICAgICAgciA9IC8oaHRtbHxib2R5KS9pLnRlc3Qoc1swXS50YWdOYW1lKTtyZXR1cm4geyB0b3A6IGkudG9wICsgdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogbiArIHRoaXMub2Zmc2V0LnBhcmVudC50b3AgKiBuIC0gKFwiZml4ZWRcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6IHIgPyAwIDogcy5zY3JvbGxUb3AoKSkgKiBuLCBsZWZ0OiBpLmxlZnQgKyB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbiArIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICogbiAtIChcImZpeGVkXCIgPT09IHRoaXMuY3NzUG9zaXRpb24gPyAtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogciA/IDAgOiBzLnNjcm9sbExlZnQoKSkgKiBuIH07XG4gICAgICB9LCBfZ2VuZXJhdGVQb3NpdGlvbjogZnVuY3Rpb24gX2dlbmVyYXRlUG9zaXRpb24oZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBzID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgciA9IGUucGFnZVgsXG4gICAgICAgICAgICBvID0gZS5wYWdlWSxcbiAgICAgICAgICAgIGEgPSBcImFic29sdXRlXCIgIT09IHRoaXMuY3NzUG9zaXRpb24gfHwgdGhpcy5zY3JvbGxQYXJlbnRbMF0gIT09IHRoaXMuZG9jdW1lbnRbMF0gJiYgdC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSwgdGhpcy5vZmZzZXRQYXJlbnRbMF0pID8gdGhpcy5zY3JvbGxQYXJlbnQgOiB0aGlzLm9mZnNldFBhcmVudCxcbiAgICAgICAgICAgIGwgPSAvKGh0bWx8Ym9keSkvaS50ZXN0KGFbMF0udGFnTmFtZSk7cmV0dXJuIFwicmVsYXRpdmVcIiAhPT0gdGhpcy5jc3NQb3NpdGlvbiB8fCB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gdGhpcy5kb2N1bWVudFswXSAmJiB0aGlzLnNjcm9sbFBhcmVudFswXSAhPT0gdGhpcy5vZmZzZXRQYXJlbnRbMF0gfHwgKHRoaXMub2Zmc2V0LnJlbGF0aXZlID0gdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKSksIHRoaXMub3JpZ2luYWxQb3NpdGlvbiAmJiAodGhpcy5jb250YWlubWVudCAmJiAoZS5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPCB0aGlzLmNvbnRhaW5tZW50WzBdICYmIChyID0gdGhpcy5jb250YWlubWVudFswXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLCBlLnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgdGhpcy5jb250YWlubWVudFsxXSAmJiAobyA9IHRoaXMuY29udGFpbm1lbnRbMV0gKyB0aGlzLm9mZnNldC5jbGljay50b3ApLCBlLnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA+IHRoaXMuY29udGFpbm1lbnRbMl0gJiYgKHIgPSB0aGlzLmNvbnRhaW5tZW50WzJdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCksIGUucGFnZVkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPiB0aGlzLmNvbnRhaW5tZW50WzNdICYmIChvID0gdGhpcy5jb250YWlubWVudFszXSArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCkpLCBzLmdyaWQgJiYgKGkgPSB0aGlzLm9yaWdpbmFsUGFnZVkgKyBNYXRoLnJvdW5kKChvIC0gdGhpcy5vcmlnaW5hbFBhZ2VZKSAvIHMuZ3JpZFsxXSkgKiBzLmdyaWRbMV0sIG8gPSB0aGlzLmNvbnRhaW5tZW50ID8gaSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSB0aGlzLmNvbnRhaW5tZW50WzFdICYmIGkgLSB0aGlzLm9mZnNldC5jbGljay50b3AgPD0gdGhpcy5jb250YWlubWVudFszXSA/IGkgOiBpIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IHRoaXMuY29udGFpbm1lbnRbMV0gPyBpIC0gcy5ncmlkWzFdIDogaSArIHMuZ3JpZFsxXSA6IGksIG4gPSB0aGlzLm9yaWdpbmFsUGFnZVggKyBNYXRoLnJvdW5kKChyIC0gdGhpcy5vcmlnaW5hbFBhZ2VYKSAvIHMuZ3JpZFswXSkgKiBzLmdyaWRbMF0sIHIgPSB0aGlzLmNvbnRhaW5tZW50ID8gbiAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gdGhpcy5jb250YWlubWVudFswXSAmJiBuIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8PSB0aGlzLmNvbnRhaW5tZW50WzJdID8gbiA6IG4gLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IHRoaXMuY29udGFpbm1lbnRbMF0gPyBuIC0gcy5ncmlkWzBdIDogbiArIHMuZ3JpZFswXSA6IG4pKSwgeyB0b3A6IG8gLSB0aGlzLm9mZnNldC5jbGljay50b3AgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AgLSB0aGlzLm9mZnNldC5wYXJlbnQudG9wICsgKFwiZml4ZWRcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6IGwgPyAwIDogYS5zY3JvbGxUb3AoKSksIGxlZnQ6IHIgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IC0gdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCAtIHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICsgKFwiZml4ZWRcIiA9PT0gdGhpcy5jc3NQb3NpdGlvbiA/IC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiBsID8gMCA6IGEuc2Nyb2xsTGVmdCgpKSB9O1xuICAgICAgfSwgX3JlYXJyYW5nZTogZnVuY3Rpb24gX3JlYXJyYW5nZSh0LCBlLCBpLCBuKSB7XG4gICAgICAgIGkgPyBpWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pIDogZS5pdGVtWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJbMF0sIFwiZG93blwiID09PSB0aGlzLmRpcmVjdGlvbiA/IGUuaXRlbVswXSA6IGUuaXRlbVswXS5uZXh0U2libGluZyksIHRoaXMuY291bnRlciA9IHRoaXMuY291bnRlciA/ICsrdGhpcy5jb3VudGVyIDogMTt2YXIgcyA9IHRoaXMuY291bnRlcjt0aGlzLl9kZWxheShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcyA9PT0gdGhpcy5jb3VudGVyICYmIHRoaXMucmVmcmVzaFBvc2l0aW9ucyghbik7XG4gICAgICAgIH0pO1xuICAgICAgfSwgX2NsZWFyOiBmdW5jdGlvbiBfY2xlYXIodCwgZSkge1xuICAgICAgICB0aGlzLnJldmVydGluZyA9ICExO3ZhciBpLFxuICAgICAgICAgICAgbiA9IFtdO2lmICghdGhpcy5fbm9GaW5hbFNvcnQgJiYgdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKS5sZW5ndGggJiYgdGhpcy5wbGFjZWhvbGRlci5iZWZvcmUodGhpcy5jdXJyZW50SXRlbSksIHRoaXMuX25vRmluYWxTb3J0ID0gbnVsbCwgdGhpcy5oZWxwZXJbMF0gPT09IHRoaXMuY3VycmVudEl0ZW1bMF0pIHtcbiAgICAgICAgICBmb3IgKGkgaW4gdGhpcy5fc3RvcmVkQ1NTKSB7XG4gICAgICAgICAgICBcImF1dG9cIiAhPT0gdGhpcy5fc3RvcmVkQ1NTW2ldICYmIFwic3RhdGljXCIgIT09IHRoaXMuX3N0b3JlZENTU1tpXSB8fCAodGhpcy5fc3RvcmVkQ1NTW2ldID0gXCJcIik7XG4gICAgICAgICAgfXRoaXMuY3VycmVudEl0ZW0uY3NzKHRoaXMuX3N0b3JlZENTUyksIHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuY3VycmVudEl0ZW0sIFwidWktc29ydGFibGUtaGVscGVyXCIpO1xuICAgICAgICB9IGVsc2UgdGhpcy5jdXJyZW50SXRlbS5zaG93KCk7ZnVuY3Rpb24gcyh0LCBlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICBpLl90cmlnZ2VyKHQsIG4sIGUuX3VpSGFzaChlKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfWZvciAodGhpcy5mcm9tT3V0c2lkZSAmJiAhZSAmJiBuLnB1c2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwicmVjZWl2ZVwiLCB0LCB0aGlzLl91aUhhc2godGhpcy5mcm9tT3V0c2lkZSkpO1xuICAgICAgICB9KSwgIXRoaXMuZnJvbU91dHNpZGUgJiYgdGhpcy5kb21Qb3NpdGlvbi5wcmV2ID09PSB0aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoXCIudWktc29ydGFibGUtaGVscGVyXCIpWzBdICYmIHRoaXMuZG9tUG9zaXRpb24ucGFyZW50ID09PSB0aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpWzBdIHx8IGUgfHwgbi5wdXNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlcihcInVwZGF0ZVwiLCB0LCB0aGlzLl91aUhhc2goKSk7XG4gICAgICAgIH0pLCB0aGlzICE9PSB0aGlzLmN1cnJlbnRDb250YWluZXIgJiYgKGUgfHwgKG4ucHVzaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJyZW1vdmVcIiwgdCwgdGhpcy5fdWlIYXNoKCkpO1xuICAgICAgICB9KSwgbi5wdXNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB0Ll90cmlnZ2VyKFwicmVjZWl2ZVwiLCBlLCB0aGlzLl91aUhhc2godGhpcykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0uY2FsbCh0aGlzLCB0aGlzLmN1cnJlbnRDb250YWluZXIpKSwgbi5wdXNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB0Ll90cmlnZ2VyKFwidXBkYXRlXCIsIGUsIHRoaXMuX3VpSGFzaCh0aGlzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfS5jYWxsKHRoaXMsIHRoaXMuY3VycmVudENvbnRhaW5lcikpKSksIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBlIHx8IG4ucHVzaChzKFwiZGVhY3RpdmF0ZVwiLCB0aGlzLCB0aGlzLmNvbnRhaW5lcnNbaV0pKSwgdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLm92ZXIgJiYgKG4ucHVzaChzKFwib3V0XCIsIHRoaXMsIHRoaXMuY29udGFpbmVyc1tpXSkpLCB0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDApO1xuICAgICAgICB9aWYgKHRoaXMuc3RvcmVkQ3Vyc29yICYmICh0aGlzLmRvY3VtZW50LmZpbmQoXCJib2R5XCIpLmNzcyhcImN1cnNvclwiLCB0aGlzLnN0b3JlZEN1cnNvciksIHRoaXMuc3RvcmVkU3R5bGVzaGVldC5yZW1vdmUoKSksIHRoaXMuX3N0b3JlZE9wYWNpdHkgJiYgdGhpcy5oZWxwZXIuY3NzKFwib3BhY2l0eVwiLCB0aGlzLl9zdG9yZWRPcGFjaXR5KSwgdGhpcy5fc3RvcmVkWkluZGV4ICYmIHRoaXMuaGVscGVyLmNzcyhcInpJbmRleFwiLCBcImF1dG9cIiA9PT0gdGhpcy5fc3RvcmVkWkluZGV4ID8gXCJcIiA6IHRoaXMuX3N0b3JlZFpJbmRleCksIHRoaXMuZHJhZ2dpbmcgPSAhMSwgZSB8fCB0aGlzLl90cmlnZ2VyKFwiYmVmb3JlU3RvcFwiLCB0LCB0aGlzLl91aUhhc2goKSksIHRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyWzBdKSwgdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsIHx8ICh0aGlzLmhlbHBlclswXSAhPT0gdGhpcy5jdXJyZW50SXRlbVswXSAmJiB0aGlzLmhlbHBlci5yZW1vdmUoKSwgdGhpcy5oZWxwZXIgPSBudWxsKSwgIWUpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbltpXS5jYWxsKHRoaXMsIHQpO1xuICAgICAgICAgIH10aGlzLl90cmlnZ2VyKFwic3RvcFwiLCB0LCB0aGlzLl91aUhhc2goKSk7XG4gICAgICAgIH1yZXR1cm4gdGhpcy5mcm9tT3V0c2lkZSA9ICExLCAhdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsO1xuICAgICAgfSwgX3RyaWdnZXI6IGZ1bmN0aW9uIF90cmlnZ2VyKCkge1xuICAgICAgICAhMSA9PT0gdC5XaWRnZXQucHJvdG90eXBlLl90cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgJiYgdGhpcy5jYW5jZWwoKTtcbiAgICAgIH0sIF91aUhhc2g6IGZ1bmN0aW9uIF91aUhhc2goZSkge1xuICAgICAgICB2YXIgaSA9IGUgfHwgdGhpcztyZXR1cm4geyBoZWxwZXI6IGkuaGVscGVyLCBwbGFjZWhvbGRlcjogaS5wbGFjZWhvbGRlciB8fCB0KFtdKSwgcG9zaXRpb246IGkucG9zaXRpb24sIG9yaWdpbmFsUG9zaXRpb246IGkub3JpZ2luYWxQb3NpdGlvbiwgb2Zmc2V0OiBpLnBvc2l0aW9uQWJzLCBpdGVtOiBpLmN1cnJlbnRJdGVtLCBzZW5kZXI6IGUgPyBlLmVsZW1lbnQgOiBudWxsIH07XG4gICAgICB9IH0pLCB0LndpZGdldChcInVpLnNwaW5uZXJcIiwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCBkZWZhdWx0RWxlbWVudDogXCI8aW5wdXQ+XCIsIHdpZGdldEV2ZW50UHJlZml4OiBcInNwaW5cIiwgb3B0aW9uczogeyBjbGFzc2VzOiB7IFwidWktc3Bpbm5lclwiOiBcInVpLWNvcm5lci1hbGxcIiwgXCJ1aS1zcGlubmVyLWRvd25cIjogXCJ1aS1jb3JuZXItYnJcIiwgXCJ1aS1zcGlubmVyLXVwXCI6IFwidWktY29ybmVyLXRyXCIgfSwgY3VsdHVyZTogbnVsbCwgaWNvbnM6IHsgZG93bjogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtc1wiLCB1cDogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtblwiIH0sIGluY3JlbWVudGFsOiAhMCwgbWF4OiBudWxsLCBtaW46IG51bGwsIG51bWJlckZvcm1hdDogbnVsbCwgcGFnZTogMTAsIHN0ZXA6IDEsIGNoYW5nZTogbnVsbCwgc3BpbjogbnVsbCwgc3RhcnQ6IG51bGwsIHN0b3A6IG51bGwgfSwgX2NyZWF0ZTogZnVuY3Rpb24gX2NyZWF0ZSgpIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKFwibWF4XCIsIHRoaXMub3B0aW9ucy5tYXgpLCB0aGlzLl9zZXRPcHRpb24oXCJtaW5cIiwgdGhpcy5vcHRpb25zLm1pbiksIHRoaXMuX3NldE9wdGlvbihcInN0ZXBcIiwgdGhpcy5vcHRpb25zLnN0ZXApLCBcIlwiICE9PSB0aGlzLnZhbHVlKCkgJiYgdGhpcy5fdmFsdWUodGhpcy5lbGVtZW50LnZhbCgpLCAhMCksIHRoaXMuX2RyYXcoKSwgdGhpcy5fb24odGhpcy5fZXZlbnRzKSwgdGhpcy5fcmVmcmVzaCgpLCB0aGlzLl9vbih0aGlzLndpbmRvdywgeyBiZWZvcmV1bmxvYWQ6IGZ1bmN0aW9uIGJlZm9yZXVubG9hZCgpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwiYXV0b2NvbXBsZXRlXCIpO1xuICAgICAgICAgIH0gfSk7XG4gICAgICB9LCBfZ2V0Q3JlYXRlT3B0aW9uczogZnVuY3Rpb24gX2dldENyZWF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5fc3VwZXIoKSxcbiAgICAgICAgICAgIGkgPSB0aGlzLmVsZW1lbnQ7cmV0dXJuIHQuZWFjaChbXCJtaW5cIiwgXCJtYXhcIiwgXCJzdGVwXCJdLCBmdW5jdGlvbiAodCwgbikge1xuICAgICAgICAgIHZhciBzID0gaS5hdHRyKG4pO251bGwgIT0gcyAmJiBzLmxlbmd0aCAmJiAoZVtuXSA9IHMpO1xuICAgICAgICB9KSwgZTtcbiAgICAgIH0sIF9ldmVudHM6IHsga2V5ZG93bjogZnVuY3Rpb24ga2V5ZG93bih0KSB7XG4gICAgICAgICAgdGhpcy5fc3RhcnQodCkgJiYgdGhpcy5fa2V5ZG93bih0KSAmJiB0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0sIGtleXVwOiBcIl9zdG9wXCIsIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgICB0aGlzLnByZXZpb3VzID0gdGhpcy5lbGVtZW50LnZhbCgpO1xuICAgICAgICB9LCBibHVyOiBmdW5jdGlvbiBibHVyKHQpIHtcbiAgICAgICAgICB0aGlzLmNhbmNlbEJsdXIgPyBkZWxldGUgdGhpcy5jYW5jZWxCbHVyIDogKHRoaXMuX3N0b3AoKSwgdGhpcy5fcmVmcmVzaCgpLCB0aGlzLnByZXZpb3VzICE9PSB0aGlzLmVsZW1lbnQudmFsKCkgJiYgdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLCB0KSk7XG4gICAgICAgIH0sIG1vdXNld2hlZWw6IGZ1bmN0aW9uIG1vdXNld2hlZWwodCwgZSkge1xuICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3Bpbm5pbmcgJiYgIXRoaXMuX3N0YXJ0KHQpKSByZXR1cm4gITE7dGhpcy5fc3BpbigoZSA+IDAgPyAxIDogLTEpICogdGhpcy5vcHRpb25zLnN0ZXAsIHQpLCBjbGVhclRpbWVvdXQodGhpcy5tb3VzZXdoZWVsVGltZXIpLCB0aGlzLm1vdXNld2hlZWxUaW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhpcy5zcGlubmluZyAmJiB0aGlzLl9zdG9wKHQpO1xuICAgICAgICAgICAgfSwgMTAwKSwgdC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgXCJtb3VzZWRvd24gLnVpLXNwaW5uZXItYnV0dG9uXCI6IGZ1bmN0aW9uIG1vdXNlZG93blVpU3Bpbm5lckJ1dHRvbihlKSB7XG4gICAgICAgICAgdmFyIGk7ZnVuY3Rpb24gbigpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFswXSA9PT0gdC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSB8fCAodGhpcy5lbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiKSwgdGhpcy5wcmV2aW91cyA9IGksIHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmV2aW91cyA9IGk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfWkgPSB0aGlzLmVsZW1lbnRbMF0gPT09IHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkgPyB0aGlzLnByZXZpb3VzIDogdGhpcy5lbGVtZW50LnZhbCgpLCBlLnByZXZlbnREZWZhdWx0KCksIG4uY2FsbCh0aGlzKSwgdGhpcy5jYW5jZWxCbHVyID0gITAsIHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbmNlbEJsdXIsIG4uY2FsbCh0aGlzKTtcbiAgICAgICAgICB9KSwgITEgIT09IHRoaXMuX3N0YXJ0KGUpICYmIHRoaXMuX3JlcGVhdChudWxsLCB0KGUuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoXCJ1aS1zcGlubmVyLXVwXCIpID8gMSA6IC0xLCBlKTtcbiAgICAgICAgfSwgXCJtb3VzZXVwIC51aS1zcGlubmVyLWJ1dHRvblwiOiBcIl9zdG9wXCIsIFwibW91c2VlbnRlciAudWktc3Bpbm5lci1idXR0b25cIjogZnVuY3Rpb24gbW91c2VlbnRlclVpU3Bpbm5lckJ1dHRvbihlKSB7XG4gICAgICAgICAgaWYgKHQoZS5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcyhcInVpLXN0YXRlLWFjdGl2ZVwiKSkgcmV0dXJuICExICE9PSB0aGlzLl9zdGFydChlKSAmJiB2b2lkIHRoaXMuX3JlcGVhdChudWxsLCB0KGUuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoXCJ1aS1zcGlubmVyLXVwXCIpID8gMSA6IC0xLCBlKTtcbiAgICAgICAgfSwgXCJtb3VzZWxlYXZlIC51aS1zcGlubmVyLWJ1dHRvblwiOiBcIl9zdG9wXCIgfSwgX2VuaGFuY2U6IGZ1bmN0aW9uIF9lbmhhbmNlKCkge1xuICAgICAgICB0aGlzLnVpU3Bpbm5lciA9IHRoaXMuZWxlbWVudC5hdHRyKFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIpLndyYXAoXCI8c3Bhbj5cIikucGFyZW50KCkuYXBwZW5kKFwiPGE+PC9hPjxhPjwvYT5cIik7XG4gICAgICB9LCBfZHJhdzogZnVuY3Rpb24gX2RyYXcoKSB7XG4gICAgICAgIHRoaXMuX2VuaGFuY2UoKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy51aVNwaW5uZXIsIFwidWktc3Bpbm5lclwiLCBcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudFwiKSwgdGhpcy5fYWRkQ2xhc3MoXCJ1aS1zcGlubmVyLWlucHV0XCIpLCB0aGlzLmVsZW1lbnQuYXR0cihcInJvbGVcIiwgXCJzcGluYnV0dG9uXCIpLCB0aGlzLmJ1dHRvbnMgPSB0aGlzLnVpU3Bpbm5lci5jaGlsZHJlbihcImFcIikuYXR0cihcInRhYkluZGV4XCIsIC0xKS5hdHRyKFwiYXJpYS1oaWRkZW5cIiwgITApLmJ1dHRvbih7IGNsYXNzZXM6IHsgXCJ1aS1idXR0b25cIjogXCJcIiB9IH0pLCB0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmJ1dHRvbnMsIFwidWktY29ybmVyLWFsbFwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5idXR0b25zLmZpcnN0KCksIFwidWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci11cFwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5idXR0b25zLmxhc3QoKSwgXCJ1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLWRvd25cIiksIHRoaXMuYnV0dG9ucy5maXJzdCgpLmJ1dHRvbih7IGljb246IHRoaXMub3B0aW9ucy5pY29ucy51cCwgc2hvd0xhYmVsOiAhMSB9KSwgdGhpcy5idXR0b25zLmxhc3QoKS5idXR0b24oeyBpY29uOiB0aGlzLm9wdGlvbnMuaWNvbnMuZG93biwgc2hvd0xhYmVsOiAhMSB9KSwgdGhpcy5idXR0b25zLmhlaWdodCgpID4gTWF0aC5jZWlsKC41ICogdGhpcy51aVNwaW5uZXIuaGVpZ2h0KCkpICYmIHRoaXMudWlTcGlubmVyLmhlaWdodCgpID4gMCAmJiB0aGlzLnVpU3Bpbm5lci5oZWlnaHQodGhpcy51aVNwaW5uZXIuaGVpZ2h0KCkpO1xuICAgICAgfSwgX2tleWRvd246IGZ1bmN0aW9uIF9rZXlkb3duKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBuID0gdC51aS5rZXlDb2RlO3N3aXRjaCAoZS5rZXlDb2RlKSB7Y2FzZSBuLlVQOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcGVhdChudWxsLCAxLCBlKSwgITA7Y2FzZSBuLkRPV046XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsIC0xLCBlKSwgITA7Y2FzZSBuLlBBR0VfVVA6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsIGkucGFnZSwgZSksICEwO2Nhc2Ugbi5QQUdFX0RPV046XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsIC1pLnBhZ2UsIGUpLCAhMDt9cmV0dXJuICExO1xuICAgICAgfSwgX3N0YXJ0OiBmdW5jdGlvbiBfc3RhcnQodCkge1xuICAgICAgICByZXR1cm4gISghdGhpcy5zcGlubmluZyAmJiAhMSA9PT0gdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsIHQpIHx8ICh0aGlzLmNvdW50ZXIgfHwgKHRoaXMuY291bnRlciA9IDEpLCB0aGlzLnNwaW5uaW5nID0gITAsIDApKTtcbiAgICAgIH0sIF9yZXBlYXQ6IGZ1bmN0aW9uIF9yZXBlYXQodCwgZSwgaSkge1xuICAgICAgICB0ID0gdCB8fCA1MDAsIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSwgdGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLl9yZXBlYXQoNDAsIGUsIGkpO1xuICAgICAgICB9LCB0KSwgdGhpcy5fc3BpbihlICogdGhpcy5vcHRpb25zLnN0ZXAsIGkpO1xuICAgICAgfSwgX3NwaW46IGZ1bmN0aW9uIF9zcGluKHQsIGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLnZhbHVlKCkgfHwgMDt0aGlzLmNvdW50ZXIgfHwgKHRoaXMuY291bnRlciA9IDEpLCBpID0gdGhpcy5fYWRqdXN0VmFsdWUoaSArIHQgKiB0aGlzLl9pbmNyZW1lbnQodGhpcy5jb3VudGVyKSksIHRoaXMuc3Bpbm5pbmcgJiYgITEgPT09IHRoaXMuX3RyaWdnZXIoXCJzcGluXCIsIGUsIHsgdmFsdWU6IGkgfSkgfHwgKHRoaXMuX3ZhbHVlKGkpLCB0aGlzLmNvdW50ZXIrKyk7XG4gICAgICB9LCBfaW5jcmVtZW50OiBmdW5jdGlvbiBfaW5jcmVtZW50KGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLm9wdGlvbnMuaW5jcmVtZW50YWw7cmV0dXJuIGkgPyB0LmlzRnVuY3Rpb24oaSkgPyBpKGUpIDogTWF0aC5mbG9vcihlICogZSAqIGUgLyA1ZTQgLSBlICogZSAvIDUwMCArIDE3ICogZSAvIDIwMCArIDEpIDogMTtcbiAgICAgIH0sIF9wcmVjaXNpb246IGZ1bmN0aW9uIF9wcmVjaXNpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5fcHJlY2lzaW9uT2YodGhpcy5vcHRpb25zLnN0ZXApO3JldHVybiBudWxsICE9PSB0aGlzLm9wdGlvbnMubWluICYmICh0ID0gTWF0aC5tYXgodCwgdGhpcy5fcHJlY2lzaW9uT2YodGhpcy5vcHRpb25zLm1pbikpKSwgdDtcbiAgICAgIH0sIF9wcmVjaXNpb25PZjogZnVuY3Rpb24gX3ByZWNpc2lvbk9mKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBpID0gZS5pbmRleE9mKFwiLlwiKTtyZXR1cm4gLTEgPT09IGkgPyAwIDogZS5sZW5ndGggLSBpIC0gMTtcbiAgICAgIH0sIF9hZGp1c3RWYWx1ZTogZnVuY3Rpb24gX2FkanVzdFZhbHVlKHQpIHtcbiAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbiA9IHRoaXMub3B0aW9ucztyZXR1cm4gaSA9IHQgLSAoZSA9IG51bGwgIT09IG4ubWluID8gbi5taW4gOiAwKSwgdCA9IGUgKyAoaSA9IE1hdGgucm91bmQoaSAvIG4uc3RlcCkgKiBuLnN0ZXApLCB0ID0gcGFyc2VGbG9hdCh0LnRvRml4ZWQodGhpcy5fcHJlY2lzaW9uKCkpKSwgbnVsbCAhPT0gbi5tYXggJiYgdCA+IG4ubWF4ID8gbi5tYXggOiBudWxsICE9PSBuLm1pbiAmJiB0IDwgbi5taW4gPyBuLm1pbiA6IHQ7XG4gICAgICB9LCBfc3RvcDogZnVuY3Rpb24gX3N0b3AodCkge1xuICAgICAgICB0aGlzLnNwaW5uaW5nICYmIChjbGVhclRpbWVvdXQodGhpcy50aW1lciksIGNsZWFyVGltZW91dCh0aGlzLm1vdXNld2hlZWxUaW1lciksIHRoaXMuY291bnRlciA9IDAsIHRoaXMuc3Bpbm5pbmcgPSAhMSwgdGhpcy5fdHJpZ2dlcihcInN0b3BcIiwgdCkpO1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBpLCBuLCBzO2lmIChcImN1bHR1cmVcIiA9PT0gdCB8fCBcIm51bWJlckZvcm1hdFwiID09PSB0KSByZXR1cm4gaSA9IHRoaXMuX3BhcnNlKHRoaXMuZWxlbWVudC52YWwoKSksIHRoaXMub3B0aW9uc1t0XSA9IGUsIHZvaWQgdGhpcy5lbGVtZW50LnZhbCh0aGlzLl9mb3JtYXQoaSkpO1wibWF4XCIgIT09IHQgJiYgXCJtaW5cIiAhPT0gdCAmJiBcInN0ZXBcIiAhPT0gdCB8fCBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIChlID0gdGhpcy5fcGFyc2UoZSkpLCBcImljb25zXCIgPT09IHQgJiYgKG4gPSB0aGlzLmJ1dHRvbnMuZmlyc3QoKS5maW5kKFwiLnVpLWljb25cIiksIHRoaXMuX3JlbW92ZUNsYXNzKG4sIG51bGwsIHRoaXMub3B0aW9ucy5pY29ucy51cCksIHRoaXMuX2FkZENsYXNzKG4sIG51bGwsIGUudXApLCBzID0gdGhpcy5idXR0b25zLmxhc3QoKS5maW5kKFwiLnVpLWljb25cIiksIHRoaXMuX3JlbW92ZUNsYXNzKHMsIG51bGwsIHRoaXMub3B0aW9ucy5pY29ucy5kb3duKSwgdGhpcy5fYWRkQ2xhc3MocywgbnVsbCwgZS5kb3duKSksIHRoaXMuX3N1cGVyKHQsIGUpO1xuICAgICAgfSwgX3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiBfc2V0T3B0aW9uRGlzYWJsZWQodCkge1xuICAgICAgICB0aGlzLl9zdXBlcih0KSwgdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy51aVNwaW5uZXIsIG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiwgISF0KSwgdGhpcy5lbGVtZW50LnByb3AoXCJkaXNhYmxlZFwiLCAhIXQpLCB0aGlzLmJ1dHRvbnMuYnV0dG9uKHQgPyBcImRpc2FibGVcIiA6IFwiZW5hYmxlXCIpO1xuICAgICAgfSwgX3NldE9wdGlvbnM6IGIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIodCk7XG4gICAgICB9KSwgX3BhcnNlOiBmdW5jdGlvbiBfcGFyc2UodCkge1xuICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiBcIlwiICE9PSB0ICYmICh0ID0gd2luZG93Lkdsb2JhbGl6ZSAmJiB0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0ID8gR2xvYmFsaXplLnBhcnNlRmxvYXQodCwgMTAsIHRoaXMub3B0aW9ucy5jdWx0dXJlKSA6ICt0KSwgXCJcIiA9PT0gdCB8fCBpc05hTih0KSA/IG51bGwgOiB0O1xuICAgICAgfSwgX2Zvcm1hdDogZnVuY3Rpb24gX2Zvcm1hdCh0KSB7XG4gICAgICAgIHJldHVybiBcIlwiID09PSB0ID8gXCJcIiA6IHdpbmRvdy5HbG9iYWxpemUgJiYgdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCA/IEdsb2JhbGl6ZS5mb3JtYXQodCwgdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCwgdGhpcy5vcHRpb25zLmN1bHR1cmUpIDogdDtcbiAgICAgIH0sIF9yZWZyZXNoOiBmdW5jdGlvbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoeyBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5vcHRpb25zLm1pbiwgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMub3B0aW9ucy5tYXgsIFwiYXJpYS12YWx1ZW5vd1wiOiB0aGlzLl9wYXJzZSh0aGlzLmVsZW1lbnQudmFsKCkpIH0pO1xuICAgICAgfSwgaXNWYWxpZDogZnVuY3Rpb24gaXNWYWxpZCgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLnZhbHVlKCk7cmV0dXJuIG51bGwgIT09IHQgJiYgdCA9PT0gdGhpcy5fYWRqdXN0VmFsdWUodCk7XG4gICAgICB9LCBfdmFsdWU6IGZ1bmN0aW9uIF92YWx1ZSh0LCBlKSB7XG4gICAgICAgIHZhciBpO1wiXCIgIT09IHQgJiYgbnVsbCAhPT0gKGkgPSB0aGlzLl9wYXJzZSh0KSkgJiYgKGUgfHwgKGkgPSB0aGlzLl9hZGp1c3RWYWx1ZShpKSksIHQgPSB0aGlzLl9mb3JtYXQoaSkpLCB0aGlzLmVsZW1lbnQudmFsKHQpLCB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5wcm9wKFwiZGlzYWJsZWRcIiwgITEpLnJlbW92ZUF0dHIoXCJhdXRvY29tcGxldGUgcm9sZSBhcmlhLXZhbHVlbWluIGFyaWEtdmFsdWVtYXggYXJpYS12YWx1ZW5vd1wiKSwgdGhpcy51aVNwaW5uZXIucmVwbGFjZVdpdGgodGhpcy5lbGVtZW50KTtcbiAgICAgIH0sIHN0ZXBVcDogYihmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLl9zdGVwVXAodCk7XG4gICAgICB9KSwgX3N0ZXBVcDogZnVuY3Rpb24gX3N0ZXBVcCh0KSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0KCkgJiYgKHRoaXMuX3NwaW4oKHQgfHwgMSkgKiB0aGlzLm9wdGlvbnMuc3RlcCksIHRoaXMuX3N0b3AoKSk7XG4gICAgICB9LCBzdGVwRG93bjogYihmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLl9zdGVwRG93bih0KTtcbiAgICAgIH0pLCBfc3RlcERvd246IGZ1bmN0aW9uIF9zdGVwRG93bih0KSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0KCkgJiYgKHRoaXMuX3NwaW4oKHQgfHwgMSkgKiAtdGhpcy5vcHRpb25zLnN0ZXApLCB0aGlzLl9zdG9wKCkpO1xuICAgICAgfSwgcGFnZVVwOiBiKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHRoaXMuX3N0ZXBVcCgodCB8fCAxKSAqIHRoaXMub3B0aW9ucy5wYWdlKTtcbiAgICAgIH0pLCBwYWdlRG93bjogYihmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLl9zdGVwRG93bigodCB8fCAxKSAqIHRoaXMub3B0aW9ucy5wYWdlKTtcbiAgICAgIH0pLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCkge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9wYXJzZSh0aGlzLmVsZW1lbnQudmFsKCkpO2IodGhpcy5fdmFsdWUpLmNhbGwodGhpcywgdCk7XG4gICAgICB9LCB3aWRnZXQ6IGZ1bmN0aW9uIHdpZGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudWlTcGlubmVyO1xuICAgICAgfSB9KSwgITEgIT09IHQudWlCYWNrQ29tcGF0ICYmIHQud2lkZ2V0KFwidWkuc3Bpbm5lclwiLCB0LnVpLnNwaW5uZXIsIHsgX2VuaGFuY2U6IGZ1bmN0aW9uIF9lbmhhbmNlKCkge1xuICAgICAgICB0aGlzLnVpU3Bpbm5lciA9IHRoaXMuZWxlbWVudC5hdHRyKFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIpLndyYXAodGhpcy5fdWlTcGlubmVySHRtbCgpKS5wYXJlbnQoKS5hcHBlbmQodGhpcy5fYnV0dG9uSHRtbCgpKTtcbiAgICAgIH0sIF91aVNwaW5uZXJIdG1sOiBmdW5jdGlvbiBfdWlTcGlubmVySHRtbCgpIHtcbiAgICAgICAgcmV0dXJuIFwiPHNwYW4+XCI7XG4gICAgICB9LCBfYnV0dG9uSHRtbDogZnVuY3Rpb24gX2J1dHRvbkh0bWwoKSB7XG4gICAgICAgIHJldHVybiBcIjxhPjwvYT48YT48L2E+XCI7XG4gICAgICB9IH0pLCB0LnVpLnNwaW5uZXIsXG4gICAgLyohXG4gICAgICogalF1ZXJ5IFVJIFRhYnMgMS4xMi4xXG4gICAgICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAgICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gICAgICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICAgICAqL1xuICAgIHQud2lkZ2V0KFwidWkudGFic1wiLCB7IHZlcnNpb246IFwiMS4xMi4xXCIsIGRlbGF5OiAzMDAsIG9wdGlvbnM6IHsgYWN0aXZlOiBudWxsLCBjbGFzc2VzOiB7IFwidWktdGFic1wiOiBcInVpLWNvcm5lci1hbGxcIiwgXCJ1aS10YWJzLW5hdlwiOiBcInVpLWNvcm5lci1hbGxcIiwgXCJ1aS10YWJzLXBhbmVsXCI6IFwidWktY29ybmVyLWJvdHRvbVwiLCBcInVpLXRhYnMtdGFiXCI6IFwidWktY29ybmVyLXRvcFwiIH0sIGNvbGxhcHNpYmxlOiAhMSwgZXZlbnQ6IFwiY2xpY2tcIiwgaGVpZ2h0U3R5bGU6IFwiY29udGVudFwiLCBoaWRlOiBudWxsLCBzaG93OiBudWxsLCBhY3RpdmF0ZTogbnVsbCwgYmVmb3JlQWN0aXZhdGU6IG51bGwsIGJlZm9yZUxvYWQ6IG51bGwsIGxvYWQ6IG51bGwgfSwgX2lzTG9jYWw6ICh2ID0gLyMuKiQvLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgZSwgaTtlID0gdC5ocmVmLnJlcGxhY2UodiwgXCJcIiksIGkgPSBsb2NhdGlvbi5ocmVmLnJlcGxhY2UodiwgXCJcIik7dHJ5IHtcbiAgICAgICAgICBlID0gZGVjb2RlVVJJQ29tcG9uZW50KGUpO1xuICAgICAgICB9IGNhdGNoICh0KSB7fXRyeSB7XG4gICAgICAgICAgaSA9IGRlY29kZVVSSUNvbXBvbmVudChpKTtcbiAgICAgICAgfSBjYXRjaCAodCkge31yZXR1cm4gdC5oYXNoLmxlbmd0aCA+IDEgJiYgZSA9PT0gaTtcbiAgICAgIH0pLCBfY3JlYXRlOiBmdW5jdGlvbiBfY3JlYXRlKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zO3RoaXMucnVubmluZyA9ICExLCB0aGlzLl9hZGRDbGFzcyhcInVpLXRhYnNcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiksIHRoaXMuX3RvZ2dsZUNsYXNzKFwidWktdGFicy1jb2xsYXBzaWJsZVwiLCBudWxsLCBpLmNvbGxhcHNpYmxlKSwgdGhpcy5fcHJvY2Vzc1RhYnMoKSwgaS5hY3RpdmUgPSB0aGlzLl9pbml0aWFsQWN0aXZlKCksIHQuaXNBcnJheShpLmRpc2FibGVkKSAmJiAoaS5kaXNhYmxlZCA9IHQudW5pcXVlKGkuZGlzYWJsZWQuY29uY2F0KHQubWFwKHRoaXMudGFicy5maWx0ZXIoXCIudWktc3RhdGUtZGlzYWJsZWRcIiksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGUudGFicy5pbmRleCh0KTtcbiAgICAgICAgfSkpKS5zb3J0KCkpLCAhMSAhPT0gdGhpcy5vcHRpb25zLmFjdGl2ZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoID8gdGhpcy5hY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKGkuYWN0aXZlKSA6IHRoaXMuYWN0aXZlID0gdCgpLCB0aGlzLl9yZWZyZXNoKCksIHRoaXMuYWN0aXZlLmxlbmd0aCAmJiB0aGlzLmxvYWQoaS5hY3RpdmUpO1xuICAgICAgfSwgX2luaXRpYWxBY3RpdmU6IGZ1bmN0aW9uIF9pbml0aWFsQWN0aXZlKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMub3B0aW9ucy5hY3RpdmUsXG4gICAgICAgICAgICBpID0gdGhpcy5vcHRpb25zLmNvbGxhcHNpYmxlLFxuICAgICAgICAgICAgbiA9IGxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO3JldHVybiBudWxsID09PSBlICYmIChuICYmIHRoaXMudGFicy5lYWNoKGZ1bmN0aW9uIChpLCBzKSB7XG4gICAgICAgICAgaWYgKHQocykuYXR0cihcImFyaWEtY29udHJvbHNcIikgPT09IG4pIHJldHVybiBlID0gaSwgITE7XG4gICAgICAgIH0pLCBudWxsID09PSBlICYmIChlID0gdGhpcy50YWJzLmluZGV4KHRoaXMudGFicy5maWx0ZXIoXCIudWktdGFicy1hY3RpdmVcIikpKSwgbnVsbCAhPT0gZSAmJiAtMSAhPT0gZSB8fCAoZSA9ICEhdGhpcy50YWJzLmxlbmd0aCAmJiAwKSksICExICE9PSBlICYmIC0xID09PSAoZSA9IHRoaXMudGFicy5pbmRleCh0aGlzLnRhYnMuZXEoZSkpKSAmJiAoZSA9ICFpICYmIDApLCAhaSAmJiAhMSA9PT0gZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICYmIChlID0gMCksIGU7XG4gICAgICB9LCBfZ2V0Q3JlYXRlRXZlbnREYXRhOiBmdW5jdGlvbiBfZ2V0Q3JlYXRlRXZlbnREYXRhKCkge1xuICAgICAgICByZXR1cm4geyB0YWI6IHRoaXMuYWN0aXZlLCBwYW5lbDogdGhpcy5hY3RpdmUubGVuZ3RoID8gdGhpcy5fZ2V0UGFuZWxGb3JUYWIodGhpcy5hY3RpdmUpIDogdCgpIH07XG4gICAgICB9LCBfdGFiS2V5ZG93bjogZnVuY3Rpb24gX3RhYktleWRvd24oZSkge1xuICAgICAgICB2YXIgaSA9IHQodC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSkuY2xvc2VzdChcImxpXCIpLFxuICAgICAgICAgICAgbiA9IHRoaXMudGFicy5pbmRleChpKSxcbiAgICAgICAgICAgIHMgPSAhMDtpZiAoIXRoaXMuX2hhbmRsZVBhZ2VOYXYoZSkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge2Nhc2UgdC51aS5rZXlDb2RlLlJJR0hUOmNhc2UgdC51aS5rZXlDb2RlLkRPV046XG4gICAgICAgICAgICAgIG4rKzticmVhaztjYXNlIHQudWkua2V5Q29kZS5VUDpjYXNlIHQudWkua2V5Q29kZS5MRUZUOlxuICAgICAgICAgICAgICBzID0gITEsIG4tLTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6XG4gICAgICAgICAgICAgIG4gPSB0aGlzLmFuY2hvcnMubGVuZ3RoIC0gMTticmVhaztjYXNlIHQudWkua2V5Q29kZS5IT01FOlxuICAgICAgICAgICAgICBuID0gMDticmVhaztjYXNlIHQudWkua2V5Q29kZS5TUEFDRTpcbiAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSwgY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZhdGluZyksIHZvaWQgdGhpcy5fYWN0aXZhdGUobik7Y2FzZSB0LnVpLmtleUNvZGUuRU5URVI6XG4gICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCksIGNsZWFyVGltZW91dCh0aGlzLmFjdGl2YXRpbmcpLCB2b2lkIHRoaXMuX2FjdGl2YXRlKG4gIT09IHRoaXMub3B0aW9ucy5hY3RpdmUgJiYgbik7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuO31lLnByZXZlbnREZWZhdWx0KCksIGNsZWFyVGltZW91dCh0aGlzLmFjdGl2YXRpbmcpLCBuID0gdGhpcy5fZm9jdXNOZXh0VGFiKG4sIHMpLCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IChpLmF0dHIoXCJhcmlhLXNlbGVjdGVkXCIsIFwiZmFsc2VcIiksIHRoaXMudGFicy5lcShuKS5hdHRyKFwiYXJpYS1zZWxlY3RlZFwiLCBcInRydWVcIiksIHRoaXMuYWN0aXZhdGluZyA9IHRoaXMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uKFwiYWN0aXZlXCIsIG4pO1xuICAgICAgICAgIH0sIHRoaXMuZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgfSwgX3BhbmVsS2V5ZG93bjogZnVuY3Rpb24gX3BhbmVsS2V5ZG93bihlKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVBhZ2VOYXYoZSkgfHwgZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gdC51aS5rZXlDb2RlLlVQICYmIChlLnByZXZlbnREZWZhdWx0KCksIHRoaXMuYWN0aXZlLnRyaWdnZXIoXCJmb2N1c1wiKSk7XG4gICAgICB9LCBfaGFuZGxlUGFnZU5hdjogZnVuY3Rpb24gX2hhbmRsZVBhZ2VOYXYoZSkge1xuICAgICAgICByZXR1cm4gZS5hbHRLZXkgJiYgZS5rZXlDb2RlID09PSB0LnVpLmtleUNvZGUuUEFHRV9VUCA/ICh0aGlzLl9hY3RpdmF0ZSh0aGlzLl9mb2N1c05leHRUYWIodGhpcy5vcHRpb25zLmFjdGl2ZSAtIDEsICExKSksICEwKSA6IGUuYWx0S2V5ICYmIGUua2V5Q29kZSA9PT0gdC51aS5rZXlDb2RlLlBBR0VfRE9XTiA/ICh0aGlzLl9hY3RpdmF0ZSh0aGlzLl9mb2N1c05leHRUYWIodGhpcy5vcHRpb25zLmFjdGl2ZSArIDEsICEwKSksICEwKSA6IHZvaWQgMDtcbiAgICAgIH0sIF9maW5kTmV4dFRhYjogZnVuY3Rpb24gX2ZpbmROZXh0VGFiKGUsIGkpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IHRoaXMudGFicy5sZW5ndGggLSAxOyAtMSAhPT0gdC5pbkFycmF5KChlID4gbiAmJiAoZSA9IDApLCBlIDwgMCAmJiAoZSA9IG4pLCBlKSwgdGhpcy5vcHRpb25zLmRpc2FibGVkKTspIHtcbiAgICAgICAgICBlID0gaSA/IGUgKyAxIDogZSAtIDE7XG4gICAgICAgIH1yZXR1cm4gZTtcbiAgICAgIH0sIF9mb2N1c05leHRUYWI6IGZ1bmN0aW9uIF9mb2N1c05leHRUYWIodCwgZSkge1xuICAgICAgICByZXR1cm4gdCA9IHRoaXMuX2ZpbmROZXh0VGFiKHQsIGUpLCB0aGlzLnRhYnMuZXEodCkudHJpZ2dlcihcImZvY3VzXCIpLCB0O1xuICAgICAgfSwgX3NldE9wdGlvbjogZnVuY3Rpb24gX3NldE9wdGlvbih0LCBlKSB7XG4gICAgICAgIFwiYWN0aXZlXCIgIT09IHQgPyAodGhpcy5fc3VwZXIodCwgZSksIFwiY29sbGFwc2libGVcIiA9PT0gdCAmJiAodGhpcy5fdG9nZ2xlQ2xhc3MoXCJ1aS10YWJzLWNvbGxhcHNpYmxlXCIsIG51bGwsIGUpLCBlIHx8ICExICE9PSB0aGlzLm9wdGlvbnMuYWN0aXZlIHx8IHRoaXMuX2FjdGl2YXRlKDApKSwgXCJldmVudFwiID09PSB0ICYmIHRoaXMuX3NldHVwRXZlbnRzKGUpLCBcImhlaWdodFN0eWxlXCIgPT09IHQgJiYgdGhpcy5fc2V0dXBIZWlnaHRTdHlsZShlKSkgOiB0aGlzLl9hY3RpdmF0ZShlKTtcbiAgICAgIH0sIF9zYW5pdGl6ZVNlbGVjdG9yOiBmdW5jdGlvbiBfc2FuaXRpemVTZWxlY3Rvcih0KSB7XG4gICAgICAgIHJldHVybiB0ID8gdC5yZXBsYWNlKC9bIVwiJCUmJygpKissLlxcLzo7PD0+P0BcXFtcXF1cXF5ge3x9fl0vZywgXCJcXFxcJCZcIikgOiBcIlwiO1xuICAgICAgfSwgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBpID0gdGhpcy50YWJsaXN0LmNoaWxkcmVuKFwiOmhhcyhhW2hyZWZdKVwiKTtlLmRpc2FibGVkID0gdC5tYXAoaS5maWx0ZXIoXCIudWktc3RhdGUtZGlzYWJsZWRcIiksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIGkuaW5kZXgodCk7XG4gICAgICAgIH0pLCB0aGlzLl9wcm9jZXNzVGFicygpLCAhMSAhPT0gZS5hY3RpdmUgJiYgdGhpcy5hbmNob3JzLmxlbmd0aCA/IHRoaXMuYWN0aXZlLmxlbmd0aCAmJiAhdC5jb250YWlucyh0aGlzLnRhYmxpc3RbMF0sIHRoaXMuYWN0aXZlWzBdKSA/IHRoaXMudGFicy5sZW5ndGggPT09IGUuZGlzYWJsZWQubGVuZ3RoID8gKGUuYWN0aXZlID0gITEsIHRoaXMuYWN0aXZlID0gdCgpKSA6IHRoaXMuX2FjdGl2YXRlKHRoaXMuX2ZpbmROZXh0VGFiKE1hdGgubWF4KDAsIGUuYWN0aXZlIC0gMSksICExKSkgOiBlLmFjdGl2ZSA9IHRoaXMudGFicy5pbmRleCh0aGlzLmFjdGl2ZSkgOiAoZS5hY3RpdmUgPSAhMSwgdGhpcy5hY3RpdmUgPSB0KCkpLCB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICB9LCBfcmVmcmVzaDogZnVuY3Rpb24gX3JlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuX3NldE9wdGlvbkRpc2FibGVkKHRoaXMub3B0aW9ucy5kaXNhYmxlZCksIHRoaXMuX3NldHVwRXZlbnRzKHRoaXMub3B0aW9ucy5ldmVudCksIHRoaXMuX3NldHVwSGVpZ2h0U3R5bGUodGhpcy5vcHRpb25zLmhlaWdodFN0eWxlKSwgdGhpcy50YWJzLm5vdCh0aGlzLmFjdGl2ZSkuYXR0cih7IFwiYXJpYS1zZWxlY3RlZFwiOiBcImZhbHNlXCIsIFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsIHRhYkluZGV4OiAtMSB9KSwgdGhpcy5wYW5lbHMubm90KHRoaXMuX2dldFBhbmVsRm9yVGFiKHRoaXMuYWN0aXZlKSkuaGlkZSgpLmF0dHIoeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0pLCB0aGlzLmFjdGl2ZS5sZW5ndGggPyAodGhpcy5hY3RpdmUuYXR0cih7IFwiYXJpYS1zZWxlY3RlZFwiOiBcInRydWVcIiwgXCJhcmlhLWV4cGFuZGVkXCI6IFwidHJ1ZVwiLCB0YWJJbmRleDogMCB9KSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5hY3RpdmUsIFwidWktdGFicy1hY3RpdmVcIiwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiksIHRoaXMuX2dldFBhbmVsRm9yVGFiKHRoaXMuYWN0aXZlKS5zaG93KCkuYXR0cih7IFwiYXJpYS1oaWRkZW5cIjogXCJmYWxzZVwiIH0pKSA6IHRoaXMudGFicy5lcSgwKS5hdHRyKFwidGFiSW5kZXhcIiwgMCk7XG4gICAgICB9LCBfcHJvY2Vzc1RhYnM6IGZ1bmN0aW9uIF9wcm9jZXNzVGFicygpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLFxuICAgICAgICAgICAgaSA9IHRoaXMudGFicyxcbiAgICAgICAgICAgIG4gPSB0aGlzLmFuY2hvcnMsXG4gICAgICAgICAgICBzID0gdGhpcy5wYW5lbHM7dGhpcy50YWJsaXN0ID0gdGhpcy5fZ2V0TGlzdCgpLmF0dHIoXCJyb2xlXCIsIFwidGFibGlzdFwiKSwgdGhpcy5fYWRkQ2xhc3ModGhpcy50YWJsaXN0LCBcInVpLXRhYnMtbmF2XCIsIFwidWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyXCIpLCB0aGlzLnRhYmxpc3Qub24oXCJtb3VzZWRvd25cIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIFwiPiBsaVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHQodGhpcykuaXMoXCIudWktc3RhdGUtZGlzYWJsZWRcIikgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KS5vbihcImZvY3VzXCIgKyB0aGlzLmV2ZW50TmFtZXNwYWNlLCBcIi51aS10YWJzLWFuY2hvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdCh0aGlzKS5jbG9zZXN0KFwibGlcIikuaXMoXCIudWktc3RhdGUtZGlzYWJsZWRcIikgJiYgdGhpcy5ibHVyKCk7XG4gICAgICAgIH0pLCB0aGlzLnRhYnMgPSB0aGlzLnRhYmxpc3QuZmluZChcIj4gbGk6aGFzKGFbaHJlZl0pXCIpLmF0dHIoeyByb2xlOiBcInRhYlwiLCB0YWJJbmRleDogLTEgfSksIHRoaXMuX2FkZENsYXNzKHRoaXMudGFicywgXCJ1aS10YWJzLXRhYlwiLCBcInVpLXN0YXRlLWRlZmF1bHRcIiksIHRoaXMuYW5jaG9ycyA9IHRoaXMudGFicy5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0KFwiYVwiLCB0aGlzKVswXTtcbiAgICAgICAgfSkuYXR0cih7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIHRhYkluZGV4OiAtMSB9KSwgdGhpcy5fYWRkQ2xhc3ModGhpcy5hbmNob3JzLCBcInVpLXRhYnMtYW5jaG9yXCIpLCB0aGlzLnBhbmVscyA9IHQoKSwgdGhpcy5hbmNob3JzLmVhY2goZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgYSA9IHQobikudW5pcXVlSWQoKS5hdHRyKFwiaWRcIiksXG4gICAgICAgICAgICAgIGwgPSB0KG4pLmNsb3Nlc3QoXCJsaVwiKSxcbiAgICAgICAgICAgICAgdSA9IGwuYXR0cihcImFyaWEtY29udHJvbHNcIik7ZS5faXNMb2NhbChuKSA/IChvID0gKHMgPSBuLmhhc2gpLnN1YnN0cmluZygxKSwgciA9IGUuZWxlbWVudC5maW5kKGUuX3Nhbml0aXplU2VsZWN0b3IocykpKSA6IChzID0gXCIjXCIgKyAobyA9IGwuYXR0cihcImFyaWEtY29udHJvbHNcIikgfHwgdCh7fSkudW5pcXVlSWQoKVswXS5pZCksIChyID0gZS5lbGVtZW50LmZpbmQocykpLmxlbmd0aCB8fCAociA9IGUuX2NyZWF0ZVBhbmVsKG8pKS5pbnNlcnRBZnRlcihlLnBhbmVsc1tpIC0gMV0gfHwgZS50YWJsaXN0KSwgci5hdHRyKFwiYXJpYS1saXZlXCIsIFwicG9saXRlXCIpKSwgci5sZW5ndGggJiYgKGUucGFuZWxzID0gZS5wYW5lbHMuYWRkKHIpKSwgdSAmJiBsLmRhdGEoXCJ1aS10YWJzLWFyaWEtY29udHJvbHNcIiwgdSksIGwuYXR0cih7IFwiYXJpYS1jb250cm9sc1wiOiBvLCBcImFyaWEtbGFiZWxsZWRieVwiOiBhIH0pLCByLmF0dHIoXCJhcmlhLWxhYmVsbGVkYnlcIiwgYSk7XG4gICAgICAgIH0pLCB0aGlzLnBhbmVscy5hdHRyKFwicm9sZVwiLCBcInRhYnBhbmVsXCIpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLnBhbmVscywgXCJ1aS10YWJzLXBhbmVsXCIsIFwidWktd2lkZ2V0LWNvbnRlbnRcIiksIGkgJiYgKHRoaXMuX29mZihpLm5vdCh0aGlzLnRhYnMpKSwgdGhpcy5fb2ZmKG4ubm90KHRoaXMuYW5jaG9ycykpLCB0aGlzLl9vZmYocy5ub3QodGhpcy5wYW5lbHMpKSk7XG4gICAgICB9LCBfZ2V0TGlzdDogZnVuY3Rpb24gX2dldExpc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmxpc3QgfHwgdGhpcy5lbGVtZW50LmZpbmQoXCJvbCwgdWxcIikuZXEoMCk7XG4gICAgICB9LCBfY3JlYXRlUGFuZWw6IGZ1bmN0aW9uIF9jcmVhdGVQYW5lbChlKSB7XG4gICAgICAgIHJldHVybiB0KFwiPGRpdj5cIikuYXR0cihcImlkXCIsIGUpLmRhdGEoXCJ1aS10YWJzLWRlc3Ryb3lcIiwgITApO1xuICAgICAgfSwgX3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiBfc2V0T3B0aW9uRGlzYWJsZWQoZSkge1xuICAgICAgICB2YXIgaSwgbiwgcztmb3IgKHQuaXNBcnJheShlKSAmJiAoZS5sZW5ndGggPyBlLmxlbmd0aCA9PT0gdGhpcy5hbmNob3JzLmxlbmd0aCAmJiAoZSA9ICEwKSA6IGUgPSAhMSksIHMgPSAwOyBuID0gdGhpcy50YWJzW3NdOyBzKyspIHtcbiAgICAgICAgICBpID0gdChuKSwgITAgPT09IGUgfHwgLTEgIT09IHQuaW5BcnJheShzLCBlKSA/IChpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsIFwidHJ1ZVwiKSwgdGhpcy5fYWRkQ2xhc3MoaSwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSkgOiAoaS5yZW1vdmVBdHRyKFwiYXJpYS1kaXNhYmxlZFwiKSwgdGhpcy5fcmVtb3ZlQ2xhc3MoaSwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSk7XG4gICAgICAgIH10aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSBlLCB0aGlzLl90b2dnbGVDbGFzcyh0aGlzLndpZGdldCgpLCB0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWRcIiwgbnVsbCwgITAgPT09IGUpO1xuICAgICAgfSwgX3NldHVwRXZlbnRzOiBmdW5jdGlvbiBfc2V0dXBFdmVudHMoZSkge1xuICAgICAgICB2YXIgaSA9IHt9O2UgJiYgdC5lYWNoKGUuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIGlbZV0gPSBcIl9ldmVudEhhbmRsZXJcIjtcbiAgICAgICAgfSksIHRoaXMuX29mZih0aGlzLmFuY2hvcnMuYWRkKHRoaXMudGFicykuYWRkKHRoaXMucGFuZWxzKSksIHRoaXMuX29uKCEwLCB0aGlzLmFuY2hvcnMsIHsgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHQpIHtcbiAgICAgICAgICAgIHQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9IH0pLCB0aGlzLl9vbih0aGlzLmFuY2hvcnMsIGkpLCB0aGlzLl9vbih0aGlzLnRhYnMsIHsga2V5ZG93bjogXCJfdGFiS2V5ZG93blwiIH0pLCB0aGlzLl9vbih0aGlzLnBhbmVscywgeyBrZXlkb3duOiBcIl9wYW5lbEtleWRvd25cIiB9KSwgdGhpcy5fZm9jdXNhYmxlKHRoaXMudGFicyksIHRoaXMuX2hvdmVyYWJsZSh0aGlzLnRhYnMpO1xuICAgICAgfSwgX3NldHVwSGVpZ2h0U3R5bGU6IGZ1bmN0aW9uIF9zZXR1cEhlaWdodFN0eWxlKGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gdGhpcy5lbGVtZW50LnBhcmVudCgpO1wiZmlsbFwiID09PSBlID8gKGkgPSBuLmhlaWdodCgpLCBpIC09IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIC0gdGhpcy5lbGVtZW50LmhlaWdodCgpLCB0aGlzLmVsZW1lbnQuc2libGluZ3MoXCI6dmlzaWJsZVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHQodGhpcyksXG4gICAgICAgICAgICAgIG4gPSBlLmNzcyhcInBvc2l0aW9uXCIpO1wiYWJzb2x1dGVcIiAhPT0gbiAmJiBcImZpeGVkXCIgIT09IG4gJiYgKGkgLT0gZS5vdXRlckhlaWdodCghMCkpO1xuICAgICAgICB9KSwgdGhpcy5lbGVtZW50LmNoaWxkcmVuKCkubm90KHRoaXMucGFuZWxzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpIC09IHQodGhpcykub3V0ZXJIZWlnaHQoITApO1xuICAgICAgICB9KSwgdGhpcy5wYW5lbHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdCh0aGlzKS5oZWlnaHQoTWF0aC5tYXgoMCwgaSAtIHQodGhpcykuaW5uZXJIZWlnaHQoKSArIHQodGhpcykuaGVpZ2h0KCkpKTtcbiAgICAgICAgfSkuY3NzKFwib3ZlcmZsb3dcIiwgXCJhdXRvXCIpKSA6IFwiYXV0b1wiID09PSBlICYmIChpID0gMCwgdGhpcy5wYW5lbHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaSA9IE1hdGgubWF4KGksIHQodGhpcykuaGVpZ2h0KFwiXCIpLmhlaWdodCgpKTtcbiAgICAgICAgfSkuaGVpZ2h0KGkpKTtcbiAgICAgIH0sIF9ldmVudEhhbmRsZXI6IGZ1bmN0aW9uIF9ldmVudEhhbmRsZXIoZSkge1xuICAgICAgICB2YXIgaSA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIG4gPSB0aGlzLmFjdGl2ZSxcbiAgICAgICAgICAgIHMgPSB0KGUuY3VycmVudFRhcmdldCkuY2xvc2VzdChcImxpXCIpLFxuICAgICAgICAgICAgciA9IHNbMF0gPT09IG5bMF0sXG4gICAgICAgICAgICBvID0gciAmJiBpLmNvbGxhcHNpYmxlLFxuICAgICAgICAgICAgYSA9IG8gPyB0KCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYihzKSxcbiAgICAgICAgICAgIGwgPSBuLmxlbmd0aCA/IHRoaXMuX2dldFBhbmVsRm9yVGFiKG4pIDogdCgpLFxuICAgICAgICAgICAgdSA9IHsgb2xkVGFiOiBuLCBvbGRQYW5lbDogbCwgbmV3VGFiOiBvID8gdCgpIDogcywgbmV3UGFuZWw6IGEgfTtlLnByZXZlbnREZWZhdWx0KCksIHMuaGFzQ2xhc3MoXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSB8fCBzLmhhc0NsYXNzKFwidWktdGFicy1sb2FkaW5nXCIpIHx8IHRoaXMucnVubmluZyB8fCByICYmICFpLmNvbGxhcHNpYmxlIHx8ICExID09PSB0aGlzLl90cmlnZ2VyKFwiYmVmb3JlQWN0aXZhdGVcIiwgZSwgdSkgfHwgKGkuYWN0aXZlID0gIW8gJiYgdGhpcy50YWJzLmluZGV4KHMpLCB0aGlzLmFjdGl2ZSA9IHIgPyB0KCkgOiBzLCB0aGlzLnhociAmJiB0aGlzLnhoci5hYm9ydCgpLCBsLmxlbmd0aCB8fCBhLmxlbmd0aCB8fCB0LmVycm9yKFwialF1ZXJ5IFVJIFRhYnM6IE1pc21hdGNoaW5nIGZyYWdtZW50IGlkZW50aWZpZXIuXCIpLCBhLmxlbmd0aCAmJiB0aGlzLmxvYWQodGhpcy50YWJzLmluZGV4KHMpLCBlKSwgdGhpcy5fdG9nZ2xlKGUsIHUpKTtcbiAgICAgIH0sIF90b2dnbGU6IGZ1bmN0aW9uIF90b2dnbGUoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICBzID0gaS5uZXdQYW5lbCxcbiAgICAgICAgICAgIHIgPSBpLm9sZFBhbmVsO2Z1bmN0aW9uIG8oKSB7XG4gICAgICAgICAgbi5ydW5uaW5nID0gITEsIG4uX3RyaWdnZXIoXCJhY3RpdmF0ZVwiLCBlLCBpKTtcbiAgICAgICAgfWZ1bmN0aW9uIGEoKSB7XG4gICAgICAgICAgbi5fYWRkQ2xhc3MoaS5uZXdUYWIuY2xvc2VzdChcImxpXCIpLCBcInVpLXRhYnMtYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIpLCBzLmxlbmd0aCAmJiBuLm9wdGlvbnMuc2hvdyA/IG4uX3Nob3cocywgbi5vcHRpb25zLnNob3csIG8pIDogKHMuc2hvdygpLCBvKCkpO1xuICAgICAgICB9dGhpcy5ydW5uaW5nID0gITAsIHIubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5oaWRlID8gdGhpcy5faGlkZShyLCB0aGlzLm9wdGlvbnMuaGlkZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG4uX3JlbW92ZUNsYXNzKGkub2xkVGFiLmNsb3Nlc3QoXCJsaVwiKSwgXCJ1aS10YWJzLWFjdGl2ZVwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiKSwgYSgpO1xuICAgICAgICB9KSA6ICh0aGlzLl9yZW1vdmVDbGFzcyhpLm9sZFRhYi5jbG9zZXN0KFwibGlcIiksIFwidWktdGFicy1hY3RpdmVcIiwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiksIHIuaGlkZSgpLCBhKCkpLCByLmF0dHIoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIiksIGkub2xkVGFiLmF0dHIoeyBcImFyaWEtc2VsZWN0ZWRcIjogXCJmYWxzZVwiLCBcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiIH0pLCBzLmxlbmd0aCAmJiByLmxlbmd0aCA/IGkub2xkVGFiLmF0dHIoXCJ0YWJJbmRleFwiLCAtMSkgOiBzLmxlbmd0aCAmJiB0aGlzLnRhYnMuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gMCA9PT0gdCh0aGlzKS5hdHRyKFwidGFiSW5kZXhcIik7XG4gICAgICAgIH0pLmF0dHIoXCJ0YWJJbmRleFwiLCAtMSksIHMuYXR0cihcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIiksIGkubmV3VGFiLmF0dHIoeyBcImFyaWEtc2VsZWN0ZWRcIjogXCJ0cnVlXCIsIFwiYXJpYS1leHBhbmRlZFwiOiBcInRydWVcIiwgdGFiSW5kZXg6IDAgfSk7XG4gICAgICB9LCBfYWN0aXZhdGU6IGZ1bmN0aW9uIF9hY3RpdmF0ZShlKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbiA9IHRoaXMuX2ZpbmRBY3RpdmUoZSk7blswXSAhPT0gdGhpcy5hY3RpdmVbMF0gJiYgKG4ubGVuZ3RoIHx8IChuID0gdGhpcy5hY3RpdmUpLCBpID0gbi5maW5kKFwiLnVpLXRhYnMtYW5jaG9yXCIpWzBdLCB0aGlzLl9ldmVudEhhbmRsZXIoeyB0YXJnZXQ6IGksIGN1cnJlbnRUYXJnZXQ6IGksIHByZXZlbnREZWZhdWx0OiB0Lm5vb3AgfSkpO1xuICAgICAgfSwgX2ZpbmRBY3RpdmU6IGZ1bmN0aW9uIF9maW5kQWN0aXZlKGUpIHtcbiAgICAgICAgcmV0dXJuICExID09PSBlID8gdCgpIDogdGhpcy50YWJzLmVxKGUpO1xuICAgICAgfSwgX2dldEluZGV4OiBmdW5jdGlvbiBfZ2V0SW5kZXgoZSkge1xuICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAoZSA9IHRoaXMuYW5jaG9ycy5pbmRleCh0aGlzLmFuY2hvcnMuZmlsdGVyKFwiW2hyZWYkPSdcIiArIHQudWkuZXNjYXBlU2VsZWN0b3IoZSkgKyBcIiddXCIpKSksIGU7XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMueGhyICYmIHRoaXMueGhyLmFib3J0KCksIHRoaXMudGFibGlzdC5yZW1vdmVBdHRyKFwicm9sZVwiKS5vZmYodGhpcy5ldmVudE5hbWVzcGFjZSksIHRoaXMuYW5jaG9ycy5yZW1vdmVBdHRyKFwicm9sZSB0YWJJbmRleFwiKS5yZW1vdmVVbmlxdWVJZCgpLCB0aGlzLnRhYnMuYWRkKHRoaXMucGFuZWxzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0LmRhdGEodGhpcywgXCJ1aS10YWJzLWRlc3Ryb3lcIikgPyB0KHRoaXMpLnJlbW92ZSgpIDogdCh0aGlzKS5yZW1vdmVBdHRyKFwicm9sZSB0YWJJbmRleCBhcmlhLWxpdmUgYXJpYS1idXN5IGFyaWEtc2VsZWN0ZWQgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtaGlkZGVuIGFyaWEtZXhwYW5kZWRcIik7XG4gICAgICAgIH0pLCB0aGlzLnRhYnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUgPSB0KHRoaXMpLFxuICAgICAgICAgICAgICBpID0gZS5kYXRhKFwidWktdGFicy1hcmlhLWNvbnRyb2xzXCIpO2kgPyBlLmF0dHIoXCJhcmlhLWNvbnRyb2xzXCIsIGkpLnJlbW92ZURhdGEoXCJ1aS10YWJzLWFyaWEtY29udHJvbHNcIikgOiBlLnJlbW92ZUF0dHIoXCJhcmlhLWNvbnRyb2xzXCIpO1xuICAgICAgICB9KSwgdGhpcy5wYW5lbHMuc2hvdygpLCBcImNvbnRlbnRcIiAhPT0gdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICYmIHRoaXMucGFuZWxzLmNzcyhcImhlaWdodFwiLCBcIlwiKTtcbiAgICAgIH0sIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKGUpIHtcbiAgICAgICAgdmFyIGkgPSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQ7ITEgIT09IGkgJiYgKHZvaWQgMCA9PT0gZSA/IGkgPSAhMSA6IChlID0gdGhpcy5fZ2V0SW5kZXgoZSksIGkgPSB0LmlzQXJyYXkoaSkgPyB0Lm1hcChpLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0ICE9PSBlID8gdCA6IG51bGw7XG4gICAgICAgIH0pIDogdC5tYXAodGhpcy50YWJzLCBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICAgIHJldHVybiBpICE9PSBlID8gaSA6IG51bGw7XG4gICAgICAgIH0pKSwgdGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoaSkpO1xuICAgICAgfSwgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZShlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy5vcHRpb25zLmRpc2FibGVkO2lmICghMCAhPT0gaSkge1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGUpIGkgPSAhMDtlbHNlIHtcbiAgICAgICAgICAgIGlmIChlID0gdGhpcy5fZ2V0SW5kZXgoZSksIC0xICE9PSB0LmluQXJyYXkoZSwgaSkpIHJldHVybjtpID0gdC5pc0FycmF5KGkpID8gdC5tZXJnZShbZV0sIGkpLnNvcnQoKSA6IFtlXTtcbiAgICAgICAgICB9dGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoaSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoZSwgaSkge1xuICAgICAgICBlID0gdGhpcy5fZ2V0SW5kZXgoZSk7dmFyIG4gPSB0aGlzLFxuICAgICAgICAgICAgcyA9IHRoaXMudGFicy5lcShlKSxcbiAgICAgICAgICAgIHIgPSBzLmZpbmQoXCIudWktdGFicy1hbmNob3JcIiksXG4gICAgICAgICAgICBvID0gdGhpcy5fZ2V0UGFuZWxGb3JUYWIocyksXG4gICAgICAgICAgICBhID0geyB0YWI6IHMsIHBhbmVsOiBvIH0sXG4gICAgICAgICAgICBsID0gZnVuY3Rpb24gbCh0LCBlKSB7XG4gICAgICAgICAgXCJhYm9ydFwiID09PSBlICYmIG4ucGFuZWxzLnN0b3AoITEsICEwKSwgbi5fcmVtb3ZlQ2xhc3MocywgXCJ1aS10YWJzLWxvYWRpbmdcIiksIG8ucmVtb3ZlQXR0cihcImFyaWEtYnVzeVwiKSwgdCA9PT0gbi54aHIgJiYgZGVsZXRlIG4ueGhyO1xuICAgICAgICB9O3RoaXMuX2lzTG9jYWwoclswXSkgfHwgKHRoaXMueGhyID0gdC5hamF4KHRoaXMuX2FqYXhTZXR0aW5ncyhyLCBpLCBhKSksIHRoaXMueGhyICYmIFwiY2FuY2VsZWRcIiAhPT0gdGhpcy54aHIuc3RhdHVzVGV4dCAmJiAodGhpcy5fYWRkQ2xhc3MocywgXCJ1aS10YWJzLWxvYWRpbmdcIiksIG8uYXR0cihcImFyaWEtYnVzeVwiLCBcInRydWVcIiksIHRoaXMueGhyLmRvbmUoZnVuY3Rpb24gKHQsIGUsIHMpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG8uaHRtbCh0KSwgbi5fdHJpZ2dlcihcImxvYWRcIiwgaSwgYSksIGwocywgZSk7XG4gICAgICAgICAgfSwgMSk7XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGwodCwgZSk7XG4gICAgICAgICAgfSwgMSk7XG4gICAgICAgIH0pKSk7XG4gICAgICB9LCBfYWpheFNldHRpbmdzOiBmdW5jdGlvbiBfYWpheFNldHRpbmdzKGUsIGksIG4pIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzO3JldHVybiB7IHVybDogZS5hdHRyKFwiaHJlZlwiKS5yZXBsYWNlKC8jLiokLywgXCJcIiksIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uIGJlZm9yZVNlbmQoZSwgcikge1xuICAgICAgICAgICAgcmV0dXJuIHMuX3RyaWdnZXIoXCJiZWZvcmVMb2FkXCIsIGksIHQuZXh0ZW5kKHsganFYSFI6IGUsIGFqYXhTZXR0aW5nczogciB9LCBuKSk7XG4gICAgICAgICAgfSB9O1xuICAgICAgfSwgX2dldFBhbmVsRm9yVGFiOiBmdW5jdGlvbiBfZ2V0UGFuZWxGb3JUYWIoZSkge1xuICAgICAgICB2YXIgaSA9IHQoZSkuYXR0cihcImFyaWEtY29udHJvbHNcIik7cmV0dXJuIHRoaXMuZWxlbWVudC5maW5kKHRoaXMuX3Nhbml0aXplU2VsZWN0b3IoXCIjXCIgKyBpKSk7XG4gICAgICB9IH0pLCAhMSAhPT0gdC51aUJhY2tDb21wYXQgJiYgdC53aWRnZXQoXCJ1aS50YWJzXCIsIHQudWkudGFicywgeyBfcHJvY2Vzc1RhYnM6IGZ1bmN0aW9uIF9wcm9jZXNzVGFicygpIHtcbiAgICAgICAgdGhpcy5fc3VwZXJBcHBseShhcmd1bWVudHMpLCB0aGlzLl9hZGRDbGFzcyh0aGlzLnRhYnMsIFwidWktdGFiXCIpO1xuICAgICAgfSB9KSwgdC51aS50YWJzLFxuICAgIC8qIVxuICAgICAqIGpRdWVyeSBVSSBUb29sdGlwIDEuMTIuMVxuICAgICAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAgICAgKlxuICAgICAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gICAgICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgICAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB0LndpZGdldChcInVpLnRvb2x0aXBcIiwgeyB2ZXJzaW9uOiBcIjEuMTIuMVwiLCBvcHRpb25zOiB7IGNsYXNzZXM6IHsgXCJ1aS10b29sdGlwXCI6IFwidWktY29ybmVyLWFsbCB1aS13aWRnZXQtc2hhZG93XCIgfSwgY29udGVudDogZnVuY3Rpb24gY29udGVudCgpIHtcbiAgICAgICAgICB2YXIgZSA9IHQodGhpcykuYXR0cihcInRpdGxlXCIpIHx8IFwiXCI7cmV0dXJuIHQoXCI8YT5cIikudGV4dChlKS5odG1sKCk7XG4gICAgICAgIH0sIGhpZGU6ICEwLCBpdGVtczogXCJbdGl0bGVdOm5vdChbZGlzYWJsZWRdKVwiLCBwb3NpdGlvbjogeyBteTogXCJsZWZ0IHRvcCsxNVwiLCBhdDogXCJsZWZ0IGJvdHRvbVwiLCBjb2xsaXNpb246IFwiZmxpcGZpdCBmbGlwXCIgfSwgc2hvdzogITAsIHRyYWNrOiAhMSwgY2xvc2U6IG51bGwsIG9wZW46IG51bGwgfSwgX2FkZERlc2NyaWJlZEJ5OiBmdW5jdGlvbiBfYWRkRGVzY3JpYmVkQnkoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IChlLmF0dHIoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpIHx8IFwiXCIpLnNwbGl0KC9cXHMrLyk7bi5wdXNoKGkpLCBlLmRhdGEoXCJ1aS10b29sdGlwLWlkXCIsIGkpLmF0dHIoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIHQudHJpbShuLmpvaW4oXCIgXCIpKSk7XG4gICAgICB9LCBfcmVtb3ZlRGVzY3JpYmVkQnk6IGZ1bmN0aW9uIF9yZW1vdmVEZXNjcmliZWRCeShlKSB7XG4gICAgICAgIHZhciBpID0gZS5kYXRhKFwidWktdG9vbHRpcC1pZFwiKSxcbiAgICAgICAgICAgIG4gPSAoZS5hdHRyKFwiYXJpYS1kZXNjcmliZWRieVwiKSB8fCBcIlwiKS5zcGxpdCgvXFxzKy8pLFxuICAgICAgICAgICAgcyA9IHQuaW5BcnJheShpLCBuKTstMSAhPT0gcyAmJiBuLnNwbGljZShzLCAxKSwgZS5yZW1vdmVEYXRhKFwidWktdG9vbHRpcC1pZFwiKSwgKG4gPSB0LnRyaW0obi5qb2luKFwiIFwiKSkpID8gZS5hdHRyKFwiYXJpYS1kZXNjcmliZWRieVwiLCBuKSA6IGUucmVtb3ZlQXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIik7XG4gICAgICB9LCBfY3JlYXRlOiBmdW5jdGlvbiBfY3JlYXRlKCkge1xuICAgICAgICB0aGlzLl9vbih7IG1vdXNlb3ZlcjogXCJvcGVuXCIsIGZvY3VzaW46IFwib3BlblwiIH0pLCB0aGlzLnRvb2x0aXBzID0ge30sIHRoaXMucGFyZW50cyA9IHt9LCB0aGlzLmxpdmVSZWdpb24gPSB0KFwiPGRpdj5cIikuYXR0cih7IHJvbGU6IFwibG9nXCIsIFwiYXJpYS1saXZlXCI6IFwiYXNzZXJ0aXZlXCIsIFwiYXJpYS1yZWxldmFudFwiOiBcImFkZGl0aW9uc1wiIH0pLmFwcGVuZFRvKHRoaXMuZG9jdW1lbnRbMF0uYm9keSksIHRoaXMuX2FkZENsYXNzKHRoaXMubGl2ZVJlZ2lvbiwgbnVsbCwgXCJ1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGVcIiksIHRoaXMuZGlzYWJsZWRUaXRsZXMgPSB0KFtdKTtcbiAgICAgIH0sIF9zZXRPcHRpb246IGZ1bmN0aW9uIF9zZXRPcHRpb24oZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHRoaXM7dGhpcy5fc3VwZXIoZSwgaSksIFwiY29udGVudFwiID09PSBlICYmIHQuZWFjaCh0aGlzLnRvb2x0aXBzLCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgIG4uX3VwZGF0ZUNvbnRlbnQoZS5lbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uIF9zZXRPcHRpb25EaXNhYmxlZCh0KSB7XG4gICAgICAgIHRoaXNbdCA/IFwiX2Rpc2FibGVcIiA6IFwiX2VuYWJsZVwiXSgpO1xuICAgICAgfSwgX2Rpc2FibGU6IGZ1bmN0aW9uIF9kaXNhYmxlKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7dC5lYWNoKHRoaXMudG9vbHRpcHMsIGZ1bmN0aW9uIChpLCBuKSB7XG4gICAgICAgICAgdmFyIHMgPSB0LkV2ZW50KFwiYmx1clwiKTtzLnRhcmdldCA9IHMuY3VycmVudFRhcmdldCA9IG4uZWxlbWVudFswXSwgZS5jbG9zZShzLCAhMCk7XG4gICAgICAgIH0pLCB0aGlzLmRpc2FibGVkVGl0bGVzID0gdGhpcy5kaXNhYmxlZFRpdGxlcy5hZGQodGhpcy5lbGVtZW50LmZpbmQodGhpcy5vcHRpb25zLml0ZW1zKS5hZGRCYWNrKCkuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZSA9IHQodGhpcyk7aWYgKGUuaXMoXCJbdGl0bGVdXCIpKSByZXR1cm4gZS5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiLCBlLmF0dHIoXCJ0aXRsZVwiKSkucmVtb3ZlQXR0cihcInRpdGxlXCIpO1xuICAgICAgICB9KSk7XG4gICAgICB9LCBfZW5hYmxlOiBmdW5jdGlvbiBfZW5hYmxlKCkge1xuICAgICAgICB0aGlzLmRpc2FibGVkVGl0bGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBlID0gdCh0aGlzKTtlLmRhdGEoXCJ1aS10b29sdGlwLXRpdGxlXCIpICYmIGUuYXR0cihcInRpdGxlXCIsIGUuZGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIikpO1xuICAgICAgICB9KSwgdGhpcy5kaXNhYmxlZFRpdGxlcyA9IHQoW10pO1xuICAgICAgfSwgb3BlbjogZnVuY3Rpb24gb3BlbihlKSB7XG4gICAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICAgIG4gPSB0KGUgPyBlLnRhcmdldCA6IHRoaXMuZWxlbWVudCkuY2xvc2VzdCh0aGlzLm9wdGlvbnMuaXRlbXMpO24ubGVuZ3RoICYmICFuLmRhdGEoXCJ1aS10b29sdGlwLWlkXCIpICYmIChuLmF0dHIoXCJ0aXRsZVwiKSAmJiBuLmRhdGEoXCJ1aS10b29sdGlwLXRpdGxlXCIsIG4uYXR0cihcInRpdGxlXCIpKSwgbi5kYXRhKFwidWktdG9vbHRpcC1vcGVuXCIsICEwKSwgZSAmJiBcIm1vdXNlb3ZlclwiID09PSBlLnR5cGUgJiYgbi5wYXJlbnRzKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgIG4gPSB0KHRoaXMpO24uZGF0YShcInVpLXRvb2x0aXAtb3BlblwiKSAmJiAoKGUgPSB0LkV2ZW50KFwiYmx1clwiKSkudGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0ID0gdGhpcywgaS5jbG9zZShlLCAhMCkpLCBuLmF0dHIoXCJ0aXRsZVwiKSAmJiAobi51bmlxdWVJZCgpLCBpLnBhcmVudHNbdGhpcy5pZF0gPSB7IGVsZW1lbnQ6IHRoaXMsIHRpdGxlOiBuLmF0dHIoXCJ0aXRsZVwiKSB9LCBuLmF0dHIoXCJ0aXRsZVwiLCBcIlwiKSk7XG4gICAgICAgIH0pLCB0aGlzLl9yZWdpc3RlckNsb3NlSGFuZGxlcnMoZSwgbiksIHRoaXMuX3VwZGF0ZUNvbnRlbnQobiwgZSkpO1xuICAgICAgfSwgX3VwZGF0ZUNvbnRlbnQ6IGZ1bmN0aW9uIF91cGRhdGVDb250ZW50KHQsIGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBuID0gdGhpcy5vcHRpb25zLmNvbnRlbnQsXG4gICAgICAgICAgICBzID0gdGhpcyxcbiAgICAgICAgICAgIHIgPSBlID8gZS50eXBlIDogbnVsbDtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgbiB8fCBuLm5vZGVUeXBlIHx8IG4uanF1ZXJ5KSByZXR1cm4gdGhpcy5fb3BlbihlLCB0LCBuKTsoaSA9IG4uY2FsbCh0WzBdLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHMuX2RlbGF5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHQuZGF0YShcInVpLXRvb2x0aXAtb3BlblwiKSAmJiAoZSAmJiAoZS50eXBlID0gciksIHRoaXMuX29wZW4oZSwgdCwgaSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSkgJiYgdGhpcy5fb3BlbihlLCB0LCBpKTtcbiAgICAgIH0sIF9vcGVuOiBmdW5jdGlvbiBfb3BlbihlLCBpLCBuKSB7XG4gICAgICAgIHZhciBzLFxuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgbCA9IHQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24pO2Z1bmN0aW9uIHUodCkge1xuICAgICAgICAgIGwub2YgPSB0LCByLmlzKFwiOmhpZGRlblwiKSB8fCByLnBvc2l0aW9uKGwpO1xuICAgICAgICB9biAmJiAoKHMgPSB0aGlzLl9maW5kKGkpKSA/IHMudG9vbHRpcC5maW5kKFwiLnVpLXRvb2x0aXAtY29udGVudFwiKS5odG1sKG4pIDogKGkuaXMoXCJbdGl0bGVdXCIpICYmIChlICYmIFwibW91c2VvdmVyXCIgPT09IGUudHlwZSA/IGkuYXR0cihcInRpdGxlXCIsIFwiXCIpIDogaS5yZW1vdmVBdHRyKFwidGl0bGVcIikpLCBzID0gdGhpcy5fdG9vbHRpcChpKSwgciA9IHMudG9vbHRpcCwgdGhpcy5fYWRkRGVzY3JpYmVkQnkoaSwgci5hdHRyKFwiaWRcIikpLCByLmZpbmQoXCIudWktdG9vbHRpcC1jb250ZW50XCIpLmh0bWwobiksIHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKSwgKGEgPSB0KFwiPGRpdj5cIikuaHRtbChyLmZpbmQoXCIudWktdG9vbHRpcC1jb250ZW50XCIpLmh0bWwoKSkpLnJlbW92ZUF0dHIoXCJuYW1lXCIpLmZpbmQoXCJbbmFtZV1cIikucmVtb3ZlQXR0cihcIm5hbWVcIiksIGEucmVtb3ZlQXR0cihcImlkXCIpLmZpbmQoXCJbaWRdXCIpLnJlbW92ZUF0dHIoXCJpZFwiKSwgYS5hcHBlbmRUbyh0aGlzLmxpdmVSZWdpb24pLCB0aGlzLm9wdGlvbnMudHJhY2sgJiYgZSAmJiAvXm1vdXNlLy50ZXN0KGUudHlwZSkgPyAodGhpcy5fb24odGhpcy5kb2N1bWVudCwgeyBtb3VzZW1vdmU6IHUgfSksIHUoZSkpIDogci5wb3NpdGlvbih0LmV4dGVuZCh7IG9mOiBpIH0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbikpLCByLmhpZGUoKSwgdGhpcy5fc2hvdyhyLCB0aGlzLm9wdGlvbnMuc2hvdyksIHRoaXMub3B0aW9ucy50cmFjayAmJiB0aGlzLm9wdGlvbnMuc2hvdyAmJiB0aGlzLm9wdGlvbnMuc2hvdy5kZWxheSAmJiAobyA9IHRoaXMuZGVsYXllZFNob3cgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgci5pcyhcIjp2aXNpYmxlXCIpICYmICh1KGwub2YpLCBjbGVhckludGVydmFsKG8pKTtcbiAgICAgICAgfSwgdC5meC5pbnRlcnZhbCkpLCB0aGlzLl90cmlnZ2VyKFwib3BlblwiLCBlLCB7IHRvb2x0aXA6IHIgfSkpKTtcbiAgICAgIH0sIF9yZWdpc3RlckNsb3NlSGFuZGxlcnM6IGZ1bmN0aW9uIF9yZWdpc3RlckNsb3NlSGFuZGxlcnMoZSwgaSkge1xuICAgICAgICB2YXIgbiA9IHsga2V5dXA6IGZ1bmN0aW9uIGtleXVwKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IHQudWkua2V5Q29kZS5FU0NBUEUpIHtcbiAgICAgICAgICAgICAgdmFyIG4gPSB0LkV2ZW50KGUpO24uY3VycmVudFRhcmdldCA9IGlbMF0sIHRoaXMuY2xvc2UobiwgITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gfTtpWzBdICE9PSB0aGlzLmVsZW1lbnRbMF0gJiYgKG4ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVRvb2x0aXAodGhpcy5fZmluZChpKS50b29sdGlwKTtcbiAgICAgICAgfSksIGUgJiYgXCJtb3VzZW92ZXJcIiAhPT0gZS50eXBlIHx8IChuLm1vdXNlbGVhdmUgPSBcImNsb3NlXCIpLCBlICYmIFwiZm9jdXNpblwiICE9PSBlLnR5cGUgfHwgKG4uZm9jdXNvdXQgPSBcImNsb3NlXCIpLCB0aGlzLl9vbighMCwgaSwgbik7XG4gICAgICB9LCBjbG9zZTogZnVuY3Rpb24gY2xvc2UoZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG4gPSB0aGlzLFxuICAgICAgICAgICAgcyA9IHQoZSA/IGUuY3VycmVudFRhcmdldCA6IHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgICByID0gdGhpcy5fZmluZChzKTtyID8gKGkgPSByLnRvb2x0aXAsIHIuY2xvc2luZyB8fCAoY2xlYXJJbnRlcnZhbCh0aGlzLmRlbGF5ZWRTaG93KSwgcy5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSAmJiAhcy5hdHRyKFwidGl0bGVcIikgJiYgcy5hdHRyKFwidGl0bGVcIiwgcy5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSksIHRoaXMuX3JlbW92ZURlc2NyaWJlZEJ5KHMpLCByLmhpZGluZyA9ICEwLCBpLnN0b3AoITApLCB0aGlzLl9oaWRlKGksIHRoaXMub3B0aW9ucy5oaWRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbi5fcmVtb3ZlVG9vbHRpcCh0KHRoaXMpKTtcbiAgICAgICAgfSksIHMucmVtb3ZlRGF0YShcInVpLXRvb2x0aXAtb3BlblwiKSwgdGhpcy5fb2ZmKHMsIFwibW91c2VsZWF2ZSBmb2N1c291dCBrZXl1cFwiKSwgc1swXSAhPT0gdGhpcy5lbGVtZW50WzBdICYmIHRoaXMuX29mZihzLCBcInJlbW92ZVwiKSwgdGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsIFwibW91c2Vtb3ZlXCIpLCBlICYmIFwibW91c2VsZWF2ZVwiID09PSBlLnR5cGUgJiYgdC5lYWNoKHRoaXMucGFyZW50cywgZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICB0KGkuZWxlbWVudCkuYXR0cihcInRpdGxlXCIsIGkudGl0bGUpLCBkZWxldGUgbi5wYXJlbnRzW2VdO1xuICAgICAgICB9KSwgci5jbG9zaW5nID0gITAsIHRoaXMuX3RyaWdnZXIoXCJjbG9zZVwiLCBlLCB7IHRvb2x0aXA6IGkgfSksIHIuaGlkaW5nIHx8IChyLmNsb3NpbmcgPSAhMSkpKSA6IHMucmVtb3ZlRGF0YShcInVpLXRvb2x0aXAtb3BlblwiKTtcbiAgICAgIH0sIF90b29sdGlwOiBmdW5jdGlvbiBfdG9vbHRpcChlKSB7XG4gICAgICAgIHZhciBpID0gdChcIjxkaXY+XCIpLmF0dHIoXCJyb2xlXCIsIFwidG9vbHRpcFwiKSxcbiAgICAgICAgICAgIG4gPSB0KFwiPGRpdj5cIikuYXBwZW5kVG8oaSksXG4gICAgICAgICAgICBzID0gaS51bmlxdWVJZCgpLmF0dHIoXCJpZFwiKTtyZXR1cm4gdGhpcy5fYWRkQ2xhc3MobiwgXCJ1aS10b29sdGlwLWNvbnRlbnRcIiksIHRoaXMuX2FkZENsYXNzKGksIFwidWktdG9vbHRpcFwiLCBcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudFwiKSwgaS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbyhlKSksIHRoaXMudG9vbHRpcHNbc10gPSB7IGVsZW1lbnQ6IGUsIHRvb2x0aXA6IGkgfTtcbiAgICAgIH0sIF9maW5kOiBmdW5jdGlvbiBfZmluZCh0KSB7XG4gICAgICAgIHZhciBlID0gdC5kYXRhKFwidWktdG9vbHRpcC1pZFwiKTtyZXR1cm4gZSA/IHRoaXMudG9vbHRpcHNbZV0gOiBudWxsO1xuICAgICAgfSwgX3JlbW92ZVRvb2x0aXA6IGZ1bmN0aW9uIF9yZW1vdmVUb29sdGlwKHQpIHtcbiAgICAgICAgdC5yZW1vdmUoKSwgZGVsZXRlIHRoaXMudG9vbHRpcHNbdC5hdHRyKFwiaWRcIildO1xuICAgICAgfSwgX2FwcGVuZFRvOiBmdW5jdGlvbiBfYXBwZW5kVG8odCkge1xuICAgICAgICB2YXIgZSA9IHQuY2xvc2VzdChcIi51aS1mcm9udCwgZGlhbG9nXCIpO3JldHVybiBlLmxlbmd0aCB8fCAoZSA9IHRoaXMuZG9jdW1lbnRbMF0uYm9keSksIGU7XG4gICAgICB9LCBfZGVzdHJveTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgIHZhciBlID0gdGhpczt0LmVhY2godGhpcy50b29sdGlwcywgZnVuY3Rpb24gKGksIG4pIHtcbiAgICAgICAgICB2YXIgcyA9IHQuRXZlbnQoXCJibHVyXCIpLFxuICAgICAgICAgICAgICByID0gbi5lbGVtZW50O3MudGFyZ2V0ID0gcy5jdXJyZW50VGFyZ2V0ID0gclswXSwgZS5jbG9zZShzLCAhMCksIHQoXCIjXCIgKyBpKS5yZW1vdmUoKSwgci5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSAmJiAoci5hdHRyKFwidGl0bGVcIikgfHwgci5hdHRyKFwidGl0bGVcIiwgci5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSksIHIucmVtb3ZlRGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIikpO1xuICAgICAgICB9KSwgdGhpcy5saXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgICAgfSB9KSwgITEgIT09IHQudWlCYWNrQ29tcGF0ICYmIHQud2lkZ2V0KFwidWkudG9vbHRpcFwiLCB0LnVpLnRvb2x0aXAsIHsgb3B0aW9uczogeyB0b29sdGlwQ2xhc3M6IG51bGwgfSwgX3Rvb2x0aXA6IGZ1bmN0aW9uIF90b29sdGlwKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKTtyZXR1cm4gdGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyAmJiB0LnRvb2x0aXAuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyksIHQ7XG4gICAgICB9IH0pLCB0LnVpLnRvb2x0aXA7XG4gIH0pID8gbi5hcHBseShlLCBzKSA6IG4pIHx8ICh0LmV4cG9ydHMgPSByKTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIGkoMCk7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgd2luZG93LmVkaXRvcm9iaiA9IHRpbnltY2UsIHdpbmRvdy5lZGl0b3JvYmouaW5pdCh7IHNlbGVjdG9yOiBcIiN0eHRBSktyeXBJbldyaXRlQ29udGVudFwiLCBtZW51YmFyOiAhMSwgdG9vbGJhcjogXCJ1bmRvIHJlZG8gfCBzdHlsZXNlbGVjdCB8IGJvbGQgaXRhbGljIHwgbGluayBpbWFnZVwiIH0pO1xuICAgIH0sIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHdpbmRvdy5lZGl0b3JvYmouYWN0aXZlRWRpdG9yLnNldENvbnRlbnQoXCJcIik7XG4gICAgfSB9O1xufSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgdC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdGhpcy5jYWNoZURvbSgpO1xuICAgIH0sIGNhY2hlRG9tOiBmdW5jdGlvbiBjYWNoZURvbSgpIHtcbiAgICAgIHRoaXMuJGJiX2FqX01haW5LcnlwaW5Ta2luQ29udGFpbmVyID0gJChcIi5hal9iYl9LcnlwaW5Ta2luXCIpLCB0aGlzLiRiYl9hal9Nb2RhbE1haW5Db250YWluZXIgPSAkKFwiI2JiX2FqX0dlbmVyaWNNb2RhbENvbnRhaW5lclwiKTtcbiAgICB9LCBjbG9zZU1vZGFsOiBmdW5jdGlvbiBjbG9zZU1vZGFsKCkge1xuICAgICAgdGhpcy4kYmJfYWpfTW9kYWxNYWluQ29udGFpbmVyLmZhZGVPdXQoXCJzbG93XCIpO1xuICAgIH0sIG9wZW5Jbk1vZGFsOiBmdW5jdGlvbiBvcGVuSW5Nb2RhbCgpIHtcbiAgICAgIHRoaXMuJGJiX2FqX01vZGFsTWFpbkNvbnRhaW5lci5mYWRlSW4oXCJzbG93XCIpO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIHZhciBuID0gaSgxMyksXG4gICAgICBzID0gaSgxKSxcbiAgICAgIHIgPSBpKDApO3IoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ID0gcy5jb25maWc7dC51c2VyaW5mby51c2VyaWQgPSByKFwiI2Jhcm5lbnNiaWJsQ3VycmVudFVzZXJpZFwiKS5odG1sKCk7dmFyIGUgPSByKFwiLmtrX2FqX0N1cnJlbnRQYWdlVHlwZVwiKS5odG1sKCk7IWZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpID0gcihcIi5iYl9hal91c2Vyc2tpbnNldHRpbmdcIikuaHRtbCgpO3IoXCIjYWpfYmJfS3J5cGluU2tpblwiKS5hZGRDbGFzcyhpKSwgbi5wYWdlcmVxdWVzdChlLCB0LnVzZXJpbmZvLnVzZXJpZCk7XG4gICAgfSgpO1xuICB9KTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIHZhciBuID0gaSgxNCksXG4gICAgICBzID0gaSgxOCksXG4gICAgICByID0gaSgyMCksXG4gICAgICBvID0gaSgyMiksXG4gICAgICBhID0gaSgyNiksXG4gICAgICBsID0gaSgyOCksXG4gICAgICB1ID0gaSgyOSksXG4gICAgICBjID0gaSgzMCksXG4gICAgICBoID0gaSgzMSksXG4gICAgICBkID0gaSgxKTtpKDApO3QuZXhwb3J0cyA9IHsgcGFnZXJlcXVlc3Q6IGZ1bmN0aW9uIHBhZ2VyZXF1ZXN0KHQsIGUpIHtcbiAgICAgICFmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICB2YXIgaSA9IHsgYmJfYWpfU3RhcnRfS3J5cGluOiBmdW5jdGlvbiBiYl9hal9TdGFydF9LcnlwaW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5pbml0KGUpLCBjb25zb2xlLmxvZyhcImxvZ2dhIGRldHRhIFwiICsgZC5jb25maWcuZG5uVVJMKSwgITE7XG4gICAgICAgICAgfSwgYmJfYWpfQm9rbGlzdG9yX0tyeXBpbjogZnVuY3Rpb24gYmJfYWpfQm9rbGlzdG9yX0tyeXBpbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzLmluaXQoZSksICExO1xuICAgICAgICAgIH0sIGJiX2FqX1Nrcml2Ym9rZW5fS3J5cGluOiBmdW5jdGlvbiBiYl9hal9Ta3JpdmJva2VuX0tyeXBpbigpIHtcbiAgICAgICAgICAgIHJldHVybiByLmluaXQoZSksICExO1xuICAgICAgICAgIH0sIGJiX2FqX0Jva3RpcHNfS3J5cGluOiBmdW5jdGlvbiBiYl9hal9Cb2t0aXBzX0tyeXBpbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvLmluaXQoZSksICExO1xuICAgICAgICAgIH0sIGJiX2FqX1Njb3JlYm9hcmRfS3J5cGluOiBmdW5jdGlvbiBiYl9hal9TY29yZWJvYXJkX0tyeXBpbigpIHtcbiAgICAgICAgICAgIHJldHVybiBhLmluaXQoZSksICExO1xuICAgICAgICAgIH0sIGJiX2FqX0JpYmJsb21vbl9LcnlwaW46IGZ1bmN0aW9uIGJiX2FqX0JpYmJsb21vbl9LcnlwaW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gbC5pbml0KGUpLCAhMTtcbiAgICAgICAgICB9LCBiYl9hal9JbnZlbnRhcmllX0tyeXBpbjogZnVuY3Rpb24gYmJfYWpfSW52ZW50YXJpZV9LcnlwaW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gdS5pbml0KGUpLCAhMTtcbiAgICAgICAgICB9LCBiYl9hal9zaG9wX0tyeXBpbjogZnVuY3Rpb24gYmJfYWpfc2hvcF9LcnlwaW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5pbml0KGUpLCAhMTtcbiAgICAgICAgICB9LCBiYl9hal9zZXR1cF9rcnlwaW46IGZ1bmN0aW9uIGJiX2FqX3NldHVwX2tyeXBpbigpIHtcbiAgICAgICAgICAgIHJldHVybiBoLmluaXQoZSksICExO1xuICAgICAgICAgIH0sIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICAgICAgcmV0dXJuIG4uaW5pdChlKSwgITE7XG4gICAgICAgICAgfSB9OyhpW3RdIHx8IGkuZGVmYXVsdCkoKTtcbiAgICAgIH0odCwgZSk7XG4gICAgfSB9O1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgaSgyKTt2YXIgbiA9IGkoMCksXG4gICAgICBzID0gaSgzKSxcbiAgICAgIHIgPSBpKDYpLFxuICAgICAgbyA9IGkoNCksXG4gICAgICBhID0gaSg1KSxcbiAgICAgIGwgPSBpKDEpLFxuICAgICAgdSA9IGwudXNlcm1lc3NhZ2VzLFxuICAgICAgYyA9IGwuY29uZmlnO3QuZXhwb3J0cyA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdCh0KSB7XG4gICAgICBvLmluaXQoXCJTdGFydFwiKSwgdGhpcy5jYWNoZURvbSgpLCB0aGlzLkJpbmRFdmVudCh0KSwgdGhpcy5SZW5kZXIodCk7XG4gICAgfSwgY2FjaGVEb206IGZ1bmN0aW9uIGNhY2hlRG9tKCkge1xuICAgICAgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIgPSBuKFwiLmFqX2JiX0tyeXBpblNraW5cIiksIHRoaXMuJGJiX2JiX2FqX01haW5TY29yZSA9IG4oXCIuYmliYmxvbW9uTWFpbnNjb3JlXCIpLCB0aGlzLiRiYl9hal9idXR0b25pdGVtX2RlbF9sYXNlcmp1c3RudSA9IG4oXCIuYnV0dG9uaXRlbV9kZWxfbGFzZXJqdXN0bnVcIik7XG4gICAgfSwgQmluZEV2ZW50OiBmdW5jdGlvbiBCaW5kRXZlbnQodCkge1xuICAgICAgdmFyIGUgPSB0aGlzO3IuY2FsbEV2ZW50cy5vbihcInVzZXJTY29yZXVwZGF0ZVwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICBlLiRiYl9iYl9hal9NYWluU2NvcmUuaHRtbCh0ICsgXCIgeHBcIik7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5idXR0b25pdGVtX2RlbF9sYXNlcmp1c3RudVwiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gY29uZmlybSh1Lmxhc2VyanVzdG51LmNvbmZpcm1SZW1vdmUpICYmIGUucmVtb3ZlZnJvbUxhc2VyanVzdG51KHQpLCAhMDtcbiAgICAgIH0pO1xuICAgIH0sIFJlbmRlcmJpYmxvbW9uOiBmdW5jdGlvbiBSZW5kZXJiaWJsb21vbih0KSB7XG4gICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgaSA9IGMuYXBpLmJpYmJsb21vbmxpc3Rvci5nZXR1c2VyYmliYmxvbW9ubGlzdDtzLmdldGpzb25kYXRhKGkodCksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHIuY2FsbEV2ZW50cy5lbWl0KFwidXNlclNjb3JldXBkYXRlXCIsIHQuTW9udmFsdWUpLCBlLiRiYl9iYl9hal9NYWluU2NvcmUuaHRtbCh0Lk1vbnZhbHVlICsgXCIgeHBcIik7XG4gICAgICB9KTtcbiAgICB9LCBSZW5kZXJsYXNlcmp1c3RudTogZnVuY3Rpb24gUmVuZGVybGFzZXJqdXN0bnUodCkge1xuICAgICAgdmFyIGUgPSBcIiNsYXNlcmp1c3RudUl0ZW1zXCI7aWYgKHRoaXMuY2hlY2tJZkRpdkV4aXN0KGUpKSB7XG4gICAgICAgIHZhciBfaTMgPSBjLmFwaS5pbnN0YWxsbmluZ2FyLmxhc2VyanVzdG51LFxuICAgICAgICAgICAgX24yID0gYy5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl9sYXNlcmp1c3RudV90bXA7cy5nZXRqc29uZGF0YShfaTModCksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgYS5pbmplY3RodG1sdGVtcGxhdGUoZSwgX24yLCB0LCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIFJlbmRlclVzZXJMYXRlc3RCb2t0aXBzOiBmdW5jdGlvbiBSZW5kZXJVc2VyTGF0ZXN0Qm9rdGlwcyh0KSB7XG4gICAgICB2YXIgZSA9IFwiI2JiX2FqX3VzZXJsYXRlc3Rib2t0aXBzXCI7aWYgKHRoaXMuY2hlY2tJZkRpdkV4aXN0KGUpKSB7XG4gICAgICAgIHZhciBfaTQgPSBjLmFwaS5pbnN0YWxsbmluZ2FyLnVzZXJsYXRlc3Rib2t0aXBzLFxuICAgICAgICAgICAgX24zID0gYy5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl91c2VybGF0ZXN0Ym9rdGlwc190bXA7cy5nZXRqc29uZGF0YShfaTQodCksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgYS5pbmplY3RodG1sdGVtcGxhdGUoZSwgX24zLCB0LCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIFJlbmRlcnVzZXJTY29yZXVwZGF0ZTogZnVuY3Rpb24gUmVuZGVydXNlclNjb3JldXBkYXRlKHQpIHtcbiAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICBpID0gYy5hcGkuYmliYmxvbW9ubGlzdG9yLmdldHVzZXJiaWJibG9tb25saXN0O3MuZ2V0anNvbmRhdGEoaSh0KSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgci5jYWxsRXZlbnRzLmVtaXQoXCJ1c2VyU2NvcmV1cGRhdGVcIiwgdC5Nb252YWx1ZSksIGUuJGJiX2JiX2FqX01haW5TY29yZS5odG1sKHQuTW9udmFsdWUgKyBcIiB4cFwiKTtcbiAgICAgIH0pO1xuICAgIH0sIFJlbmRlcjogZnVuY3Rpb24gUmVuZGVyKHQpIHtcbiAgICAgIHRoaXMuUmVuZGVybGFzZXJqdXN0bnUodCksIHRoaXMuUmVuZGVyVXNlckxhdGVzdEJva3RpcHModCksIHRoaXMuUmVuZGVydXNlclNjb3JldXBkYXRlKHQpO1xuICAgIH0sIGNoZWNrSWZEaXZFeGlzdDogZnVuY3Rpb24gY2hlY2tJZkRpdkV4aXN0KHQpIHtcbiAgICAgIHJldHVybiBudWxsID09PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTtcbiAgICB9LCByZW1vdmVmcm9tTGFzZXJqdXN0bnU6IGZ1bmN0aW9uIHJlbW92ZWZyb21MYXNlcmp1c3RudSh0KSB7XG4gICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgaSA9IGMuYXBpLmluc3RhbGxuaW5nYXIudXBkYXRlc2V0dGluZ3M7cy5nZXRqc29uZGF0YShpKHQsIDMsIDApLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxhc2VyIGp1c3RudSBib2sgYm9ydHRhZ2VuXCIpLCBlLlJlbmRlcmxhc2VyanVzdG51KHQpO1xuICAgICAgfSk7XG4gICAgfSB9O1xufSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgdmFyIGk7aSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSgpO3RyeSB7XG4gICAgaSA9IGkgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgfSBjYXRjaCAodCkge1xuICAgIFwib2JqZWN0XCIgPT0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSAmJiAoaSA9IHdpbmRvdyk7XG4gIH10LmV4cG9ydHMgPSBpO1xufSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgdC5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC53ZWJwYWNrUG9seWZpbGwgfHwgKHQuZGVwcmVjYXRlID0gZnVuY3Rpb24gKCkge30sIHQucGF0aHMgPSBbXSwgdC5jaGlsZHJlbiB8fCAodC5jaGlsZHJlbiA9IFtdKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwibG9hZGVkXCIsIHsgZW51bWVyYWJsZTogITAsIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdC5sO1xuICAgICAgfSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiaWRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0Lmk7XG4gICAgICB9IH0pLCB0LndlYnBhY2tQb2x5ZmlsbCA9IDEpLCB0O1xuICB9O1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgdmFyIG4gPSBpKDIpLFxuICAgICAgcyA9IChpKDApLCBpKDEpKTtzLmNvbmZpZzt0LmV4cG9ydHMgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiZGF0YWdyb3VwbmFtZVwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgZSA9IHQuaW5kZXhPZihcImlcIiwgMCk7cmV0dXJuIHQucmVwbGFjZUF0KGUsIFwib1wiKSwgdC5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgICB9KTtIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiY291bnRcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIFwiZ3J1cHBcIiArIHQ7XG4gICAgICB9KSwgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImNhdGVnb3J5aW1nXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlID0gcy5za3JpdmJva2ltYWdlcyxcbiAgICAgICAgICAgIGkgPSBlLmNhdGltYWdlc3JjLFxuICAgICAgICAgICAgciA9IG4uZmluZChpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBlLmNhdGlkID09IHQ7XG4gICAgICAgIH0pO3IgfHwgKHIgPSBuLmZpbmQoaSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gMCA9PSB0LmNhdGlkO1xuICAgICAgICB9KSk7dmFyIG8gPSBlLmNhdGltZ2Jhc2UgKyByLmltZ3NyYztyZXR1cm4gXCI8aW1nIHRpdGxlPVwiICsgci5jYXRuYW1lICsgXCIgc3JjPVwiICsgbyArIFwiIC8+XCI7XG4gICAgICB9KSwgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImNhdGVnb3J5VXJsaW1nXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGlmICghdCkge1xuICAgICAgICAgIHZhciBfZTUgPSBzLnNrcml2Ym9raW1hZ2VzLFxuICAgICAgICAgICAgICBfaTUgPSBfZTUuY2F0aW1hZ2VzcmMsXG4gICAgICAgICAgICAgIHIgPSBuLmZpbmQoX2k1LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIDAgPT0gdC5jYXRpZDtcbiAgICAgICAgICB9KTt0ID0gX2U1LmNhdGltZ2Jhc2UgKyByLmltZ3NyYztcbiAgICAgICAgfXJldHVybiB0O1xuICAgICAgfSksIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJpc2Jvb2tpbmxhc2VyanVzdG51XCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0ID4gMDtcbiAgICAgIH0pO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIGkoMik7dmFyIG4gPSBpKDApO2koOSk7dmFyIHMgPSBpKDQpLFxuICAgICAgciA9IGkoNyksXG4gICAgICBvID0gaSgzKSxcbiAgICAgIGEgPSBpKDUpLFxuICAgICAgbCA9IGkoMTkpLFxuICAgICAgdSA9IGkoMSksXG4gICAgICBjID0gdS5jb25maWcsXG4gICAgICBoID0gdS51c2VybWVzc2FnZXM7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHIuaW5pdChcIkJvb2tsaXN0XCIpLCBzLmluaXQoXCJCb29rbGlzdFwiKSwgbC5pbml0KCksIHRoaXMuY2FjaGVEb20oKSwgdGhpcy5CaW5kRXZlbnQodCksIHRoaXMuaW5pdGJvb2tsaXN0KHQpO1xuICAgIH0sIGNhY2hlRG9tOiBmdW5jdGlvbiBjYWNoZURvbSgpIHtcbiAgICAgIHRoaXMuJGFqX2JiX0tyeXBpbk1haW5HcmlkID0gbihcIi5iYl9hal9rcnlwaW5jb250YWluZXJcIiksIHRoaXMuJGJiX2FqX2Jvb2tsaXN0TWFpbiA9IG4oXCIjYmJfYWpfYm9va2xpc3RNYWluXCIpLCB0aGlzLiRiYl9hal9ib29rbGlzdF9Nb2QgPSBuKFwiI2JiX2FqX2Jvb2tsaXN0X01vZFwiKSwgdGhpcy4kYmJfYWpfYWRkYm9va2xpc3QgPSBuKFwiI2NtZE55Qm9rbGlzdGFcIiksIHRoaXMuJGJiX2FqX0dlbmVyaWNNb2RhbENvbnRhaW5lciA9IG4oXCIjYmJfYWpfR2VuZXJpY01vZGFsQ29udGFpbmVyXCIpO1xuICAgIH0sIEJpbmRFdmVudDogZnVuY3Rpb24gQmluZEV2ZW50KHQpIHtcbiAgICAgIHZhciBlID0gdGhpczt0aGlzLiRiYl9hal9ib29rbGlzdE1haW4ub24oXCJjbGlja1wiLCBcIiNiYl9hal9jbWRBZGRfQm9va2xpc3RcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuICEwO1xuICAgICAgfSksIHRoaXMuJGJiX2FqX2Jvb2tsaXN0TWFpbi5vbihcImNsaWNrXCIsIFwiLmJ1dHRvbml0ZW1fYm9va3RpcFwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gITA7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfYm9va2xpc3RfTW9kLm9uKFwiY2xpY2tcIiwgXCIjY21kQXZicnl0XCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiByLmNsb3NlYm94YmVoYXZpb3IoKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfYm9va2xpc3RNYWluLm9uKFwiY2xpY2tcIiwgXCIuYnV0dG9uaXRlbV90YWJvcnRcIiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIHMgPSBuKHRoaXMpLmF0dHIoXCJkYXRhLWl0ZW1pZFwiKSxcbiAgICAgICAgICAgIHIgPSBuKHRoaXMpLmF0dHIoXCJkYXRhLWJvb2tpc3RpZFwiKTtlLmRlbGJvb2tpdGVtZnJvbWxpc3QociwgcywgdCk7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfYWRkYm9va2xpc3Qub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgcyA9IG4oXCIjdHh0Qm9rbGlzdGFuYW1uXCIpLFxuICAgICAgICAgICAgciA9IHMudmFsKCk7aWYgKCFyKSByZXR1cm4gYWxlcnQoaC5ib2tsaXN0LmNvbmZpcm1BbGVydCksIHMuZm9jdXMoKSwgITE7Y29uZmlybShoLmJva2xpc3QuY29uZmlybUFERCkgJiYgZS5hZGRCb29rbGlzdChyLCB0KTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9ib29rbGlzdE1haW4ub24oXCJjbGlja1wiLCBcIi5iYl9hal9ib29rbGlzdERlbGV0ZVwiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgcyA9IG4odGhpcykuYXR0cihcImRhdGEtYm9va2lzdGlkXCIpO2lmICghZChzKSkge1xuICAgICAgICAgIGNvbmZpcm0oaC5ib2tsaXN0LmNvbmZpcm1EZWwpICYmIGUuZGVsQm9va2xpc3QocywgdCk7XG4gICAgICAgIH1yZXR1cm4gITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfYm9va2xpc3RNYWluLm9uKFwiY2xpY2tcIiwgXCIuYmJfYWpfYm9va2xpc3RFZGl0bmFtZVwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgZSA9IG4odGhpcykuYXR0cihcImRhdGEtYm9va2lzdGlkXCIpO3JldHVybiBkKGUpIHx8IChuKFwiLmJiX2FqX2Jvb2tsaXN0bmFtZVwiICsgZSkudG9nZ2xlKCksIG4oXCIuYmJfYWpfZWRpdGJvb2tsaXN0bmFtbkJsb2NrXCIgKyBlKS50b2dnbGUoKSksICExO1xuICAgICAgfSksIHRoaXMuJGJiX2FqX2Jvb2tsaXN0TWFpbi5vbihcImNsaWNrXCIsIFwiLmJvb2tsaXN0UHJpbnRcIiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIHMgPSBuKHRoaXMpLmF0dHIoXCJkYXRhLWJvb2tpc3RpZFwiKSxcbiAgICAgICAgICAgIHIgPSBuKFwiLmJiX2FqX2Jvb2tsaXN0bmFtZVwiICsgcykuaHRtbCgpO3JldHVybiBjb25zb2xlLmxvZyhcImJvb2tsaXN0aWQ6IFwiICsgcyksIGUucHJpbnRNb2RhbChzLCB0LCByKSwgbC5vcGVuSW5Nb2RhbCgpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9HZW5lcmljTW9kYWxDb250YWluZXIub24oXCJjbGlja1wiLCBcIiNiYl9hal9QcmludEJva2xpc3RUZW1wbGF0ZVwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgZSA9IHsgdXNlcmlkOiBuKHRoaXMpLmF0dHIoXCJkYXRhLXVzZXJpZFwiKSwgYm9va2xpc3RpZDogbih0aGlzKS5hdHRyKFwiZGF0YS1ib2tsaXN0SWRcIiksIGJnaW1nOiBuKFwiI3ByaW50X2JnVmFsXCIpLnZhbCgpLCBjb2xvcjogbihcIiNwcmludF9SdWJyaWtDb2xvclZhbFwiKS52YWwoKSwgZm9udDogbihcIiNwcmludF9SdWJyaWtUeXBzbml0dFZhbFwiKS52YWwoKSwgUnVicmlrOiBuKHRoaXMpLmF0dHIoXCJkYXRhLWJva2xpc3ROYW1uXCIpIH0sXG4gICAgICAgICAgICBpID0gYy5hcGkuYm9rbGlzdG9yLnByaW50VXJsO2NvbnNvbGUubG9nKGkoZSkpO3dpbmRvdy5vcGVuKGkoZSksIFwiVGl0bGVcIiwgXCJ0b29sYmFyPW5vLGxvY2F0aW9uPW5vLGRpcmVjdG9yaWVzPW5vLHN0YXR1cz1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsd2lkdGg9NzgwLGhlaWdodD0yMDAsdG9wPVwiICsgKHNjcmVlbi5oZWlnaHQgLSA0MDApICsgXCIsbGVmdD1cIiArIChzY3JlZW4ud2lkdGggLSA4NDApKTtyZXR1cm4gITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfR2VuZXJpY01vZGFsQ29udGFpbmVyLm9uKFwiY2xpY2tcIiwgXCIuYmJfYWpfY2xvc2VNb2RhbFwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gbC5jbG9zZU1vZGFsKCksICExO1xuICAgICAgfSksIHRoaXMuJGJiX2FqX2Jvb2tsaXN0TWFpbi5vbihcImNsaWNrXCIsIFwiLmNtZGVkaXRCb2tsaXN0YVwiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgcyA9IG4odGhpcykuY2xvc2VzdChcIi5hal9iYl9LcnlwaW5NYWluR3JpZFwiKS5hdHRyKFwiZGF0YS1ib29raXN0aWRcIiksXG4gICAgICAgICAgICByID0gbih0aGlzKS5zaWJsaW5ncyhcIi5lZGl0Qm9rbGlzdGFuYW1uXCIpLnZhbCgpO2lmICghZChzKSkge1xuICAgICAgICAgIGNvbmZpcm0oaC5ib2tsaXN0LmNvbmZpcm1FZGl0KSAmJiByICYmIHMgJiYgKGUuZWRpdEJvb2tsaXN0KHMsIHIsIHQpLCBuKFwiLmJiX2FqX2Jvb2tsaXN0bmFtZVwiICsgcykuc2hvdygpLCBuKFwiLmJiX2FqX2VkaXRib29rbGlzdG5hbW5CbG9ja1wiICsgcykuaGlkZSgpKTtcbiAgICAgICAgfXJldHVybiAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9ib29rbGlzdE1haW4ub24oXCJjbGlja1wiLCBcIi5jbWRBdmJyeXRcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGUgPSBuKHRoaXMpLmNsb3Nlc3QoXCIuYWpfYmJfS3J5cGluTWFpbkdyaWRcIikuYXR0cihcImRhdGEtYm9va2lzdGlkXCIpO3JldHVybiBuKFwiLmJiX2FqX2Jvb2tsaXN0bmFtZVwiICsgZSkuc2hvdygpLCBuKFwiLmJiX2FqX2VkaXRib29rbGlzdG5hbW5CbG9ja1wiICsgZSkuaGlkZSgpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9ib29rbGlzdE1haW4ub24oXCJjbGlja1wiLCBcIi50aXRsZS1jbGVhci1idG5cIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIG4oXCIubGlzdGZpbHRlclwiKS52YWwoXCJcIiksIGpwbGlzdC5yZXNldENvbnRyb2xzKCksICExO1xuICAgICAgfSksIHRoaXMuJGJiX2FqX2Jvb2tsaXN0TWFpbi5vbihcImNsaWNrXCIsIFwiLmJ1dHRvbml0ZW1fcmVhZG5vd1wiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgcyA9IG4odGhpcykuYXR0cihcImRhdGEtaXRlbWlkXCIpO3JldHVybiBlLkxhc2VyanVzdG51KHQsIHMpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9ib29rbGlzdE1haW4ub24oXCJjbGlja1wiLCBcIi5ib2tsaXN0c2hvd1wiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgZSA9IG4odGhpcykuYXR0cihcImRhdGEtYm9va2lzdGlkXCIpO3JldHVybiBuKFwiLmJiX2FqX2dyaWRJdGVtW2RhdGEtYm9va2lzdGlkPVwiICsgZSArIFwiXSAuaXRlbVwiKS50b2dnbGUoKSwgITE7XG4gICAgICB9KTtcbiAgICB9LCBBcGl1cGRhdGU6IGZ1bmN0aW9uIEFwaXVwZGF0ZSh0LCBlKSB7XG4gICAgICB2YXIgaSA9IHRoaXM7by5nZXRqc29uZGF0YSh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICBpLmluaXRib29rbGlzdChlKTtcbiAgICAgIH0pO1xuICAgIH0sIEFwaXVwZGF0ZWFqYXg6IGZ1bmN0aW9uIEFwaXVwZGF0ZWFqYXgodCwgZSkge1xuICAgICAgby5nZXRqc29uZGF0YSh0LCBmdW5jdGlvbiAodCkge30pO1xuICAgIH0sIHByaW50TW9kYWw6IGZ1bmN0aW9uIHByaW50TW9kYWwodCwgZSwgaSkge1xuICAgICAgdmFyIG4gPSBjLmhhbmRsZWJhcnRlbXBsYXRlLmhiX1ByaW50TW9kYWxWYWxfdG1wLFxuICAgICAgICAgIHMgPSB7IGJva2xpc3RpZDogdCwgdXNlcmlkOiBlLCBib2tsaXN0TmFtbjogaSB9O2EuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX0dlbmVyaWNNb2RhbENvbnRhaW5lclwiLCBuLCBzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwia2xhcnQhXCIpO1xuICAgICAgfSk7XG4gICAgfSwgZ2V0Ym9va2xpc3Q6IGZ1bmN0aW9uIGdldGJvb2tsaXN0KHQsIGUpIHtcbiAgICAgIHZhciBpID0gYy5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl9ib29rbGlzdF90bXA7dGhpcy5SZW5kZXIodCwgaSwgZSk7XG4gICAgfSwgaW5pdGJvb2tsaXN0OiBmdW5jdGlvbiBpbml0Ym9va2xpc3QodCkge1xuICAgICAgdmFyIGUgPSBjLmFwaS5ib2tsaXN0b3IuZ2V0dXNlcmJva2xpc3Q7dGhpcy5nZXRib29rbGlzdChlKHQpLCB0KTtcbiAgICB9LCBkZWxib29raXRlbWZyb21saXN0OiBmdW5jdGlvbiBkZWxib29raXRlbWZyb21saXN0KHQsIGUsIGkpIHtcbiAgICAgIHZhciBuID0gYy5hcGkuYm9rbGlzdG9yLmRlbHVzZXJib2tpdGVtO2pwbGlzdC5yZXNldENvbnRyb2xzKCksIHRoaXMuQXBpdXBkYXRlKG4odCwgZSwgaSksIGkpO1xuICAgIH0sIGFkZGJvb2tpdGVtZnJvbWxpc3Q6IGZ1bmN0aW9uIGFkZGJvb2tpdGVtZnJvbWxpc3QodCwgZSwgaSkge1xuICAgICAgdmFyIG4gPSBjLmFwaS5ib2tsaXN0b3IuYWRkdXNlcmJva2l0ZW07dGhpcy5BcGl1cGRhdGVhamF4KG4odCwgZSwgaSksIGkpO1xuICAgIH0sIGFkZEJvb2tsaXN0OiBmdW5jdGlvbiBhZGRCb29rbGlzdCh0LCBlKSB7XG4gICAgICB2YXIgaSA9IGMuYXBpLmJva2xpc3Rvci5hZGRib29rbGlzdDtqcGxpc3QucmVzZXRDb250cm9scygpLCB0aGlzLkFwaXVwZGF0ZShpKHQsIGUpLCBlKTtcbiAgICB9LCBlZGl0Qm9va2xpc3Q6IGZ1bmN0aW9uIGVkaXRCb29rbGlzdCh0LCBlLCBpKSB7XG4gICAgICB2YXIgbiA9IGMuYXBpLmJva2xpc3Rvci5lZGl0Ym9va2xpc3Q7anBsaXN0LnJlc2V0Q29udHJvbHMoKSwgdGhpcy5BcGl1cGRhdGUobih0LCBlLCBpKSwgaSk7XG4gICAgfSwgZGVsQm9va2xpc3Q6IGZ1bmN0aW9uIGRlbEJvb2tsaXN0KHQsIGUpIHtcbiAgICAgIHZhciBpID0gYy5hcGkuYm9rbGlzdG9yLmRlbGJvb2tsaXN0O2pwbGlzdC5yZXNldENvbnRyb2xzKCksIHRoaXMuQXBpdXBkYXRlKGkodCwgZSksIGUpO1xuICAgIH0sIExhc2VyanVzdG51OiBmdW5jdGlvbiBMYXNlcmp1c3RudSh0LCBlKSB7XG4gICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgbiA9IGMuYXBpLmluc3RhbGxuaW5nYXIudXBkYXRlc2V0dGluZ3M7by5nZXRqc29uZGF0YShuKHQsIDMsIGUpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpLmluaXRib29rbGlzdCh0KTtcbiAgICAgIH0pO1xuICAgIH0sIFJlbmRlcjogZnVuY3Rpb24gUmVuZGVyKHQsIGUsIGkpIHtcbiAgICAgIHZhciBzID0gdGhpcztvLmdldGpzb25kYXRhKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGEuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX2Jvb2tsaXN0TWFpblwiLCBlLCB0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGpwbGlzdC5pbml0KCksIG5ldyBkcmFnZHJvcC5zdGFydChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgdC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgIHIgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICBvID0gdm9pZCAwO3RyeSB7XG4gICAgICAgICAgICAgICAgZSA9IHQuY3VycmVudFRhcmdldC5hY3RpdmVFbGVtZW50LmF0dHJpYnV0ZXNbMl0udmFsdWUsIHIgPSB0LmN1cnJlbnRUYXJnZXQuYWN0aXZlRWxlbWVudC5hdHRyaWJ1dGVzWzNdLnZhbHVlO3ZhciBhID0gcCh0LnRhcmdldCwgXCIuYmJfYWpfZ3JpZEl0ZW1cIik7KG8gPSBuKGEpLmF0dHIoXCJkYXRhLWJvb2tpc3RpZFwiKSkgfHwgKG8gPSB0LnRhcmdldC5hdHRyaWJ1dGVzWzJdLnZhbHVlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIGUgPSAwLCByID0gMCwgbyA9IDA7XG4gICAgICAgICAgICAgIH1vICYmIHIgIT0gbyAmJiAocy5kZWxib29raXRlbWZyb21saXN0KHIsIGUsIGkpLCBzLmFkZGJvb2tpdGVtZnJvbWxpc3QobywgZSwgaSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSksICExO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gfTt2YXIgZCA9IGZ1bmN0aW9uIGQodCkge1xuICAgIHJldHVybiBcIjEwMDAwMDAwMDBcIiA9PSB0O1xuICB9LFxuICAgICAgcCA9IGZ1bmN0aW9uIHAodCwgZSkge1xuICAgIGZvciAoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCAoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24gKHQpIHtcbiAgICAgIGZvciAodmFyIGUgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwodCksIGkgPSBlLmxlbmd0aDsgLS1pID49IDAgJiYgZS5pdGVtKGkpICE9PSB0aGlzOykge31yZXR1cm4gaSA+IC0xO1xuICAgIH0pOyB0ICYmIHQgIT09IGRvY3VtZW50OyB0ID0gdC5wYXJlbnROb2RlKSB7XG4gICAgICBpZiAodC5tYXRjaGVzKGUpKSByZXR1cm4gdDtcbiAgICB9cmV0dXJuIG51bGw7XG4gIH07XG59LCBmdW5jdGlvbiAodCwgZSkge1xuICB0LmV4cG9ydHMgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLmNhY2hlRG9tKCk7XG4gICAgfSwgY2FjaGVEb206IGZ1bmN0aW9uIGNhY2hlRG9tKCkge1xuICAgICAgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIgPSAkKFwiLmFqX2JiX0tyeXBpblNraW5cIiksIHRoaXMuJGJiX2FqX01vZGFsTWFpbkNvbnRhaW5lciA9ICQoXCIjYmJfYWpfR2VuZXJpY01vZGFsQ29udGFpbmVyXCIpO1xuICAgIH0sIGNsb3NlTW9kYWw6IGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gICAgICB0aGlzLiRiYl9hal9Nb2RhbE1haW5Db250YWluZXIuZmFkZU91dChcInNsb3dcIik7XG4gICAgfSwgb3BlbkluTW9kYWw6IGZ1bmN0aW9uIG9wZW5Jbk1vZGFsKCkge1xuICAgICAgdGhpcy4kYmJfYWpfTW9kYWxNYWluQ29udGFpbmVyLmZhZGVJbihcInNsb3dcIik7XG4gICAgfSB9O1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgdmFyIG4gPSBpKDIpLFxuICAgICAgcyA9IGkoMCksXG4gICAgICByID0gaSgxMCksXG4gICAgICBvID0gaSgxMSksXG4gICAgICBhID0gaSg0KSxcbiAgICAgIGwgPSBpKDcpLFxuICAgICAgdSA9IGkoMyksXG4gICAgICBjID0gaSg1KSxcbiAgICAgIGggPSBpKDgpLFxuICAgICAgZCA9IGkoMjEpLFxuICAgICAgcCA9IGkoMSksXG4gICAgICBmID0gcC5jb25maWcsXG4gICAgICBnID0gcC51c2VybWVzc2FnZXM7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIG8uaW5pdCgpLCBkLmluaXQodCksIGwuaW5pdChcIlNrcml2Ym9rXCIpLCBhLmluaXQoXCJTa3JpdmJva1wiKSwgdGhpcy5jYWNoZURvbSgpLCB0aGlzLkJpbmRFdmVudCh0KSwgdGhpcy5pbml0Ym9va2xpc3QodCk7XG4gICAgfSwgY2FjaGVEb206IGZ1bmN0aW9uIGNhY2hlRG9tKCkge1xuICAgICAgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIgPSBzKFwiLmFqX2JiX0tyeXBpblNraW5cIiksIHRoaXMuJGJiX2FqX01vZGFsTWFpbkNvbnRhaW5lciA9IHMoXCIjYmJfYWpfbW9kYWxDb250YWluZXJcIiksIHRoaXMuJGJiX2FqX0Zvcm1fdHh0V3JpdGVyVGl0bGUgPSBzKFwiI3R4dFdyaXRlclRpdGxlXCIpLCB0aGlzLiRiYl9hal9Gb3JtX2NtZFNlbmQgPSBzKFwiI2NtZFNlbmRTa3JpdmJva0Zvcm1cIiksIHRoaXMuJGJiX2FqX0Zvcm1fY21kUmVzZXQgPSBzKFwiI2NtZFJlc2V0U2tyaXZib2tGb3JtXCIpLCB0aGlzLiRiYl9hal9Gb3JtX2V4ZW1wbGVJbWcgPSBzKFwiLnNrcml2Ym9rZW5FeGVtcGxlaW1nIC5ib29raXRlbS1pbWFnZSBpbWdcIiksIHRoaXMuJGJiX2FqX2JlcmF0dGVsc2VDYXRkcnAgPSBzKFwiI2RycFR5cGF2QmVyYXR0ZWxzZVwiKSwgdGhpcy4kYmJfYWpfYWpfYmJfZm9ybUJsb2NrID0gcyhcIi5hal9iYl9mb3JtQmxvY2tcIiksIHRoaXMuJGJiX2FqX2NtZEFkZCA9IHMoXCIjYmJfYWpfY21kQWRkXCIpO1xuICAgIH0sIEJpbmRFdmVudDogZnVuY3Rpb24gQmluZEV2ZW50KHQpIHtcbiAgICAgIHZhciBlID0gdGhpcztyLmluaXQoKSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5iYl9hal9jbG9zZU1vZGFsXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBvLmNsb3NlTW9kYWwoKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5iYl9hal9vcGVuSW5Nb2RhbFwiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgbiA9IHModGhpcykuYXR0cihcImRhdGEtaWRcIik7cmV0dXJuIGUuZ2V0c2tyaXZib29rYnlJRChuLCB0KSwgby5vcGVuSW5Nb2RhbCgpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9NYWluS3J5cGluU2tpbkNvbnRhaW5lci5vbihcImNsaWNrXCIsIFwiLmJ1dHRvbml0ZW1fZWRpdFwiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICBzKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzKFwiLmJiX2FqX2dyaWRJdGVtX0hlYWRlclwiKS5vZmZzZXQoKS50b3AgfSwgXCJzbG93XCIpO3ZhciBuID0gcyh0aGlzKS5hdHRyKFwiZGF0YS1pZFwiKTtyZXR1cm4gZS4kYmJfYWpfRm9ybV9jbWRTZW5kLmF0dHIoXCJkYXRhLWNtZFwiLCBcImVkaXRcIiksIGUuJGJiX2FqX0Zvcm1fY21kU2VuZC5odG1sKFwiJkF1bWw7bmRyYVwiKSwgZS4kYmJfYWpfYWpfYmJfZm9ybUJsb2NrLnNob3coXCJzbG93XCIpLCBlLnVwZHNrcml2Ym9va0VkaW9yYnlJRChuLCB0KSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfRm9ybV9jbWRTZW5kLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIG4gPSBzKHRoaXMpLmF0dHIoXCJkYXRhLWNtZFwiKTtyZXR1cm4gXCJhZGRcIiA9PSBuICYmIGNvbmZpcm0oZy5za3JpdmJvay5jb25maXJtQWRkKSAmJiBkLmFkZFNrcml2Ym9rSXRlbSh0LCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIGkgPyBlLmZvcm11cGRhdGUodCkgOiBhbGVydChnLnNrcml2Ym9rLmNvbmZpcm1BbGVydCk7XG4gICAgICAgIH0pLCBcImVkaXRcIiA9PSBuICYmIGNvbmZpcm0oZy5za3JpdmJvay5jb25maXJtRWRpdCkgJiYgZC51cGRhdGVTa3JpdmJva0l0ZW0odCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBlLiRiYl9hal9Gb3JtX2NtZFNlbmQuYXR0cihcImRhdGEtY21kXCIsIFwiYWRkXCIpLCBlLiRiYl9hal9Gb3JtX2NtZFNlbmQuaHRtbChcIlNwYXJhXCIpLCBpID8gKGUuZm9ybXVwZGF0ZSh0KSwgZS4kYmJfYWpfRm9ybV9jbWRTZW5kLmF0dHIoXCJkYXRhLWNtZFwiLCBcImFkZFwiKSwgZS4kYmJfYWpfRm9ybV9jbWRTZW5kLmh0bWwoXCJTcGFyYVwiKSkgOiBhbGVydChnLnNrcml2Ym9rLmNvbmZpcm1BbGVydCk7XG4gICAgICAgIH0pLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9NYWluS3J5cGluU2tpbkNvbnRhaW5lci5vbihcImNsaWNrXCIsIFwiLmJ1dHRvbml0ZW1fdGFib3J0XCIsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBuID0gcyh0aGlzKS5hdHRyKFwiZGF0YS1pZFwiKTtyZXR1cm4gY29uZmlybShnLnNrcml2Ym9rLmNvbmZpcm1EZWwpICYmIGQuZGVsZXRlU2tyaXZib2tJdGVtKG4sIHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlLmZvcm11cGRhdGUodCk7XG4gICAgICAgIH0pLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9Gb3JtX2NtZFJlc2V0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGQucmVuc2FFZGl0Zm9ybSgpLCBlLiRiYl9hal9Gb3JtX2NtZFNlbmQuYXR0cihcImRhdGEtY21kXCIsIFwiYWRkXCIpLCBlLiRiYl9hal9Gb3JtX2NtZFNlbmQuaHRtbChcIlNwYXJhXCIpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9NYWluS3J5cGluU2tpbkNvbnRhaW5lci5vbihcImNoYW5nZVwiLCBcIiNkcnBUeXBhdkJlcmF0dGVsc2VcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGkgPSBzKHRoaXMpLnZhbCgpO3JldHVybiBlLiRiYl9hal9Gb3JtX2V4ZW1wbGVJbWcuYXR0cihcInNyY1wiLCBoLmdldGltYWdlSGVscGVyKGkpKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5za3JpdmJva2xpc3RzaG93XCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBzKFwiLmFqX2JiX2Zvcm1CbG9ja1wiKS50b2dnbGUoXCJzbG93XCIpLCBzKHRoaXMpLnRvZ2dsZUNsYXNzKFwiZ3JhZGVyMTgwXCIpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9NYWluS3J5cGluU2tpbkNvbnRhaW5lci5vbihcImNsaWNrXCIsIFwiI2JiX2FqX2NtZEFkZFwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gcyhcIi5hal9iYl9mb3JtQmxvY2tcIikudG9nZ2xlKFwic2xvd1wiKSwgcyh0aGlzKS50b2dnbGVDbGFzcyhcImdyYWRlcjE4MFwiKSwgZC5yZW5zYUVkaXRmb3JtKCksICExO1xuICAgICAgfSk7XG4gICAgfSwgZ2V0c2tyaXZib29rbGlzdDogZnVuY3Rpb24gZ2V0c2tyaXZib29rbGlzdCh0LCBlKSB7XG4gICAgICB2YXIgaSA9IGYuaGFuZGxlYmFydGVtcGxhdGUuaGJfc2tyaXZib2tlbmxpc3RfdG1wO3RoaXMuUmVuZGVyKHQsIGksIGUpO1xuICAgIH0sIGdldHNrcml2Ym9va2J5SUQ6IGZ1bmN0aW9uIGdldHNrcml2Ym9va2J5SUQodCwgZSkge1xuICAgICAgZC5nZXRza3JpdmJvb2tCeUlkRm9yRWRpdCh0LCBlKTtcbiAgICB9LCB1cGRza3JpdmJvb2tFZGlvcmJ5SUQ6IGZ1bmN0aW9uIHVwZHNrcml2Ym9va0VkaW9yYnlJRCh0LCBlKSB7XG4gICAgICBkLnVwZHNrcml2Ym9va0VkaXRvcih0LCBlKTtcbiAgICB9LCBmb3JtdXBkYXRlOiBmdW5jdGlvbiBmb3JtdXBkYXRlKHQpIHtcbiAgICAgIGQucmVuc2FFZGl0Zm9ybSgpLCB0aGlzLmluaXRib29rbGlzdCh0KTtcbiAgICB9LCBpbml0Ym9va2xpc3Q6IGZ1bmN0aW9uIGluaXRib29rbGlzdCh0KSB7XG4gICAgICB2YXIgZSA9IGYuYXBpLnNrcml2Ym9rZW5saXN0b3IuZ2V0dXNlcnNrcmlib2tlbmxpc3Q7dGhpcy5nZXRza3JpdmJvb2tsaXN0KGUodCksIHQpO1xuICAgIH0sIFJlbmRlcjogZnVuY3Rpb24gUmVuZGVyKHQsIGUsIGksIHMpIHtcbiAgICAgIHMgPSBzIHx8IFwiYXNjXCIsIHUuZ2V0anNvbmRhdGEodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGkgPSB0LlNrcml2Ym9rZW5MaXN0O3QuU2tyaXZib2tlbkxpc3QgPSBuLm9yZGVyQnkoaSwgW1wiVGl0bGVcIl0sIFtzXSksIGMuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX3Nrcml2Ym9rZW50ZW1wbGF0ZWNvbnRhaW5lclwiLCBlLCB0LCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgICB9KTtcbiAgICB9IH07XG59LCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICB2YXIgbiA9IGkoMCksXG4gICAgICBzID0gaSgzKSxcbiAgICAgIHIgPSBpKDUpLFxuICAgICAgbyA9IGkoOCksXG4gICAgICBhID0gaSgxKS5jb25maWc7dmFyIGwgPSB7IEFwcHJvdmVkOiBcIlwiLCBDYXRlZ29yeTogXCJcIiwgR2lsbGFyOiBcIlwiLCBJbnNlcnRlZDogXCJcIiwgUHVibGlzaDogXCJcIiwgU2tyaXZJRDogXCJcIiwgU3Rvcnk6IFwiXCIsIFRpdGxlOiBcIlwiLCBVc2VySUQ6IFwiXCIsIFVzZXJOYW1lOiBcIlwiIH07dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHRoaXMuY2FjaGVEb20oKTtcbiAgICB9LCBjYWNoZURvbTogZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICB0aGlzLiRiYl9hal9Gb3JtX3R4dFdyaXRlclRpdGxlID0gbihcIiN0eHRXcml0ZXJUaXRsZVwiKSwgdGhpcy4kYmJfYWpfRm9ybV9sYmxXcml0ZXJUaXRsZSA9IG4oXCIjbGJsV3JpdGVyVGl0bGVcIiksIHRoaXMuJGJiX2FqX0Zvcm1fbGJsQUpLcnlwSW5Xcml0ZUNvbnRlbnQgPSBuKFwiI2xibEFKS3J5cEluV3JpdGVDb250ZW50XCIpLCB0aGlzLiRiYl9hal9Gb3JtX2NtZFNlbmQgPSBuKFwiI2NtZFNlbmRTa3JpdmJva0Zvcm1cIiksIHRoaXMuJGJiX2FqX0Zvcm1fY21kUmVzZXQgPSBuKFwiI2NtZFJlc2V0U2tyaXZib2tGb3JtXCIpLCB0aGlzLiRiYl9hal9za3JpdmJva2VuRm9ybV9leGVtcGxlSW1nID0gbihcIi5za3JpdmJva2VuRXhlbXBsZWltZyAuYm9va2l0ZW0taW1hZ2UgaW1nXCIpO1xuICAgIH0sIGdldHNrcml2Ym9va0J5SWRGb3JFZGl0OiBmdW5jdGlvbiBnZXRza3JpdmJvb2tCeUlkRm9yRWRpdCh0LCBlKSB7XG4gICAgICB2YXIgaSA9IGEuYXBpLnNrcml2Ym9rZW5saXN0b3IuZ2V0dXNlcnNrcmlib2tlbkJ5SUQsXG4gICAgICAgICAgbiA9IGEuaGFuZGxlYmFydGVtcGxhdGUuaGJfc2tyaXZib2tNb2RhbFZpZXdfdG1wO3RoaXMuUmVuZGVyKGkodCwgZSksIG4sIGUpO1xuICAgIH0sIHVwZHNrcml2Ym9va0VkaXRvcjogZnVuY3Rpb24gdXBkc2tyaXZib29rRWRpdG9yKHQsIGUpIHtcbiAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICByID0gYS5hcGkuc2tyaXZib2tlbmxpc3Rvci5nZXR1c2Vyc2tyaWJva2VuQnlJRDt0aGlzLnJlbnNhRWRpdGZvcm0oKSwgcy5nZXRqc29uZGF0YShyKHQsIGUpLCBmdW5jdGlvbiAodCkge1xuICAgICAgICBuLmVhY2godC5Ta3JpdmJva2VuTGlzdCwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICBpLiRiYl9hal9Gb3JtX3R4dFdyaXRlclRpdGxlLnZhbChlLlRpdGxlKSwgaS4kYmJfYWpfRm9ybV9jbWRTZW5kLmF0dHIoXCJkYXRhLWlkXCIsIGUuU2tyaXZJRCksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycFR5cGF2QmVyYXR0ZWxzZVwiKSwgZS5DYXRlZ29yeSksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycF9BSktyeXBJbldyaXRlZGVsYWRcIiksIGUuUHVibGlzaCksIGkuJGJiX2FqX3Nrcml2Ym9rZW5Gb3JtX2V4ZW1wbGVJbWcuYXR0cihcInNyY1wiLCBvLmdldGltYWdlSGVscGVyKGUuQ2F0ZWdvcnkpKSwgdGlueW1jZS5hY3RpdmVFZGl0b3IuZXhlY0NvbW1hbmQoXCJtY2VJbnNlcnRDb250ZW50XCIsICExLCBlLlN0b3J5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LCByZW5zYUVkaXRmb3JtOiBmdW5jdGlvbiByZW5zYUVkaXRmb3JtKCkge1xuICAgICAgdGhpcy4kYmJfYWpfRm9ybV90eHRXcml0ZXJUaXRsZS52YWwoXCJcIiksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycFR5cGF2QmVyYXR0ZWxzZVwiKSwgXCIwXCIpLCBvLkhlbHBlcnNldFNlbGVjdGVkSW5kZXgoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcnBfQUpLcnlwSW5Xcml0ZWRlbGFkXCIpLCBcIjFcIiksIHRoaXMuJGJiX2FqX3Nrcml2Ym9rZW5Gb3JtX2V4ZW1wbGVJbWcuYXR0cihcInNyY1wiLCBcIi9EZXNrdG9wTW9kdWxlcy9iYl9hal9Ta3JpdmJva2VuX0tyeXBpbi9pbWFnZXMvc2tyaXZib2tfZGVmYXVsdDI1Nl8zNi5wbmdcIiksIHRoaXMuJGJiX2FqX0Zvcm1fY21kU2VuZC5hdHRyKFwiZGF0YS1pZFwiLCBcIjBcIiksIHRpbnlNQ0UuYWN0aXZlRWRpdG9yLnNldENvbnRlbnQoXCJcIik7XG4gICAgfSwgYWRkU2tyaXZib2tJdGVtOiBmdW5jdGlvbiBhZGRTa3JpdmJva0l0ZW0odCwgZSkge1xuICAgICAgdmFyIGkgPSBhLmFwaS5za3JpdmJva2VubGlzdG9yLmFkZHNrcmlib2tlbkl0ZW07dGhpcy5BcGlQb3N0SGFuZGxlcihpKCksIHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGUodCk7XG4gICAgICB9KTtcbiAgICB9LCB1cGRhdGVTa3JpdmJva0l0ZW06IGZ1bmN0aW9uIHVwZGF0ZVNrcml2Ym9rSXRlbSh0LCBlKSB7XG4gICAgICB2YXIgaSA9IGEuYXBpLnNrcml2Ym9rZW5saXN0b3IuZWRpdHNrcmlib2tlbkl0ZW07dGhpcy5BcGlQb3N0SGFuZGxlcihpKCksIHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGUodCk7XG4gICAgICB9KTtcbiAgICB9LCBkZWxldGVTa3JpdmJva0l0ZW06IGZ1bmN0aW9uIGRlbGV0ZVNrcml2Ym9rSXRlbSh0KSB7XG4gICAgICB2YXIgZSA9IGEuYXBpLnNrcml2Ym9rZW5saXN0b3IuZGVsc2tyaWJva2VuSXRlbTt0aGlzLkFwaVBvc3RIYW5kbGVyKGUoKSwgdCk7XG4gICAgfSwgQXBpUG9zdEhhbmRsZXI6IGZ1bmN0aW9uIEFwaVBvc3RIYW5kbGVyKHQsIGUsIGkpIHtcbiAgICAgIHZhciBuID0gdGhpcy5IZWxwZXJjb2xsZWN0Rm9ybVZhbHVlcyhlKTt0aGlzLnZhbGlkYXRlU2F2ZShuKSA/IHMucG9zdGpzb25kYXRhKHQsIG4sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGkoITApO1xuICAgICAgfSkgOiBpKCExKTtcbiAgICB9LCBSZW5kZXI6IGZ1bmN0aW9uIFJlbmRlcih0LCBlLCBpKSB7XG4gICAgICBzLmdldGpzb25kYXRhKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHIuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX21vZGFsQ29udGFpbmVyXCIsIGUsIHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImFwaSBrw7ZydCFcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSwgdmFsaWRhdGVTYXZlOiBmdW5jdGlvbiB2YWxpZGF0ZVNhdmUoKSB7XG4gICAgICB2YXIgdCA9ICEwO3JldHVybiBsLlRpdGxlIHx8ICh0aGlzLiRiYl9hal9Gb3JtX2xibFdyaXRlclRpdGxlLmF0dHIoXCJzdHlsZVwiLCBcImNvbG9yOnJlZDsgZm9udC13ZWlnaHQ6Ym9sZDtcIiksIHQgPSAhMSksIGwuU3RvcnkgfHwgKHRoaXMuJGJiX2FqX0Zvcm1fbGJsQUpLcnlwSW5Xcml0ZUNvbnRlbnQuYXR0cihcInN0eWxlXCIsIFwiY29sb3I6cmVkOyBmb250LXdlaWdodDpib2xkO1wiKSwgdCA9ICExKSwgdCAmJiAodGhpcy4kYmJfYWpfRm9ybV9sYmxXcml0ZXJUaXRsZS5yZW1vdmVBdHRyKFwic3R5bGVcIiksIHRoaXMuJGJiX2FqX0Zvcm1fbGJsQUpLcnlwSW5Xcml0ZUNvbnRlbnQucmVtb3ZlQXR0cihcInN0eWxlXCIpKSwgdDtcbiAgICB9LCBIZWxwZXJjb2xsZWN0Rm9ybVZhbHVlczogZnVuY3Rpb24gSGVscGVyY29sbGVjdEZvcm1WYWx1ZXModCkge1xuICAgICAgcmV0dXJuIGwuU2tyaXZJRCA9IHRoaXMuJGJiX2FqX0Zvcm1fY21kU2VuZC5hdHRyKFwiZGF0YS1pZFwiKSwgbC5Vc2VySUQgPSB0LCBsLkFwcHJvdmVkID0gMCwgbC5UaXRsZSA9IHRoaXMuJGJiX2FqX0Zvcm1fdHh0V3JpdGVyVGl0bGUudmFsKCksIGwuU3RvcnkgPSB0aW55TUNFLmFjdGl2ZUVkaXRvci5nZXRDb250ZW50KCksIGwuQ2F0ZWdvcnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycFR5cGF2QmVyYXR0ZWxzZVwiKS52YWx1ZSwgbC5QdWJsaXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcnBfQUpLcnlwSW5Xcml0ZWRlbGFkXCIpLnZhbHVlLCBsO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIHZhciBuID0gaSgyKSxcbiAgICAgIHMgPSBpKDApLFxuICAgICAgciA9IGkoMTApLFxuICAgICAgbyA9IGkoMTEpLFxuICAgICAgYSA9IGkoNiksXG4gICAgICBsID0gaSgyMyksXG4gICAgICB1ID0gaSg0KSxcbiAgICAgIGMgPSBpKDcpLFxuICAgICAgaCA9IGkoMyksXG4gICAgICBkID0gaSgyNCksXG4gICAgICBwID0gKGkoOCksIGkoNSkpLFxuICAgICAgZiA9IGkoMjUpLFxuICAgICAgZyA9IGkoMSksXG4gICAgICBtID0gZy5jb25maWcsXG4gICAgICB2ID0gZy51c2VybWVzc2FnZXM7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHZhciBlID0gZC5jaGVja3BhcmFtc2ludXJsKCk7bC5pbml0KFwiI3R4dGJva3RpcHNUaXRsZVwiKSwgby5pbml0KCksIGYuaW5pdCh0LCBlLmJvb2tpZCksIGMuaW5pdChcIkJva3RpcHNcIiksIHUuaW5pdChcIkJva3RpcHNcIiksIHRoaXMuY2FjaGVEb20oKSwgdGhpcy5CaW5kRXZlbnQodCksIHRoaXMuaW5pdGJvb2tsaXN0KHQsIGUuYm9va2lkKTtcbiAgICB9LCBjYWNoZURvbTogZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICB0aGlzLiRiYl9hal9NYWluS3J5cGluU2tpbkNvbnRhaW5lciA9IHMoXCIuYWpfYmJfS3J5cGluU2tpblwiKSwgdGhpcy4kYmJfYWpfTW9kYWxNYWluQ29udGFpbmVyID0gcyhcIiNiYl9hal9tb2RhbENvbnRhaW5lclwiKSwgdGhpcy4kYmJfYWpfRm9ybV90eHRib2t0aXBzVGl0bGUgPSBzKFwiI3R4dGJva3RpcHNUaXRsZVwiKSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1fY21kU2VuZCA9IHMoXCIjY21kU2VuZEJva3RpcHNGb3JtXCIpLCB0aGlzLiRiYl9hal9ib2t0aXBzRm9ybV9jbWRSZXNldCA9IHMoXCIjY21kUmVzZXRCb2t0aXBzRm9ybVwiKSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1fZXhlbXBsZUltZyA9IHMoXCIuYm9rdGlwc0V4ZW1wbGVpbWcgLmJvb2tpdGVtLWltYWdlIGltZ1wiKSwgdGhpcy4kYmJfYWpfYmJfYm9rdGlwc0Zvcm1CbG9jayA9IHMoXCIuYWpfYmJfZm9ybUJsb2NrXCIpLCB0aGlzLiRiYl9hal9ib2t0aXBzQ21kQWRkID0gcyhcIiNiYl9hal9jbWRBZGRcIik7XG4gICAgfSwgQmluZEV2ZW50OiBmdW5jdGlvbiBCaW5kRXZlbnQodCkge1xuICAgICAgdmFyIGUgPSB0aGlzO3IuaW5pdCgpLCBhLmNhbGxFdmVudHMub24oXCJ1cGRhdGVJbWdcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgZS51cGRib2t0aXBzYnlCb29rSUQodCk7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5iYl9hal9jbG9zZU1vZGFsXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBvLmNsb3NlTW9kYWwoKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5iYl9hal9vcGVuSW5Nb2RhbFwiLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgbiA9IHModGhpcykuYXR0cihcImRhdGEtaWRcIik7cmV0dXJuIGUuZ2V0Ym9rdGlwc2J5SUQobiwgdCksIG8ub3BlbkluTW9kYWwoKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5idXR0b25pdGVtX2VkaXRcIiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcyhcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogcyhcIi5iYl9hal9ncmlkSXRlbV9IZWFkZXJcIikub2Zmc2V0KCkudG9wIH0sIFwic2xvd1wiKTt2YXIgbiA9IHModGhpcykuYXR0cihcImRhdGEtaWRcIik7cmV0dXJuIGUuJGJiX2FqX2Jva3RpcHNGb3JtX2NtZFNlbmQuYXR0cihcImRhdGEtY21kXCIsIFwiZWRpdFwiKSwgZS4kYmJfYWpfYm9rdGlwc0Zvcm1fY21kU2VuZC5odG1sKFwiJkF1bWw7bmRyYVwiKSwgZS4kYmJfYWpfYmJfYm9rdGlwc0Zvcm1CbG9jay5zaG93KFwic2xvd1wiKSwgZS51cGRib2t0aXBzRWRpb3JieUlEKG4sIHQpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9ib2t0aXBzRm9ybV9jbWRTZW5kLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIG4gPSBzKHRoaXMpLmF0dHIoXCJkYXRhLWNtZFwiKTtyZXR1cm4gXCJhZGRcIiA9PSBuICYmIGNvbmZpcm0odi5ib2t0aXBzLmNvbmZpcm1BZGQpICYmIGYuYWRkQm9rdGlwc0l0ZW0odCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpID8gZS5mb3JtdXBkYXRlKHQpIDogYWxlcnQodi5ib2t0aXBzLmNvbmZpcm1BbGVydCk7XG4gICAgICAgIH0pLCBcImVkaXRcIiA9PSBuICYmIGNvbmZpcm0odi5ib2t0aXBzLmNvbmZpcm1FZGl0KSAmJiBmLmVkaXRCb2t0aXBzSXRlbSh0LCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIGkgPyAoZS5mb3JtdXBkYXRlKHQpLCBlLiRiYl9hal9ib2t0aXBzRm9ybV9jbWRTZW5kLmF0dHIoXCJkYXRhLWNtZFwiLCBcImFkZFwiKSwgZS4kYmJfYWpfYm9rdGlwc0Zvcm1fY21kU2VuZC5odG1sKFwiU3BhcmFcIikpIDogYWxlcnQodi5ib2t0aXBzLmNvbmZpcm1BbGVydCk7XG4gICAgICAgIH0pLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9NYWluS3J5cGluU2tpbkNvbnRhaW5lci5vbihcImNsaWNrXCIsIFwiLmJ1dHRvbml0ZW1fdGFib3J0XCIsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBuID0gcyh0aGlzKS5hdHRyKFwiZGF0YS1pZFwiKTtyZXR1cm4gY29uZmlybSh2LmJva3RpcHMuY29uZmlybURlbCkgJiYgZi5kZWxldGVCb2t0aXBzSXRlbShuLCB0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZS5mb3JtdXBkYXRlKHQpO1xuICAgICAgICB9KSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1fY21kUmVzZXQub24oXCJjbGlja1wiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZi5yZW5zYUVkaXRmb3JtKCksIGUuJGJiX2FqX2Jva3RpcHNGb3JtX2NtZFNlbmQuYXR0cihcImRhdGEtY21kXCIsIFwiYWRkXCIpLCBlLiRiYl9hal9ib2t0aXBzRm9ybV9jbWRTZW5kLmh0bWwoXCJTcGFyYVwiKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjaGFuZ2VcIiwgXCIjZHJwVHlwYXZCZXJhdHRlbHNlXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHModGhpcykudmFsKCk7cmV0dXJuICExO1xuICAgICAgfSksIHRoaXMuJGJiX2FqX01haW5LcnlwaW5Ta2luQ29udGFpbmVyLm9uKFwiY2xpY2tcIiwgXCIuc2tyaXZib2tsaXN0c2hvd1wiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gcyhcIi5hal9iYl9mb3JtQmxvY2tcIikudG9nZ2xlKFwic2xvd1wiKSwgcyh0aGlzKS50b2dnbGVDbGFzcyhcImdyYWRlcjE4MFwiKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIiNiYl9hal9ib2t0aXBzQ21kQWRkXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBzKFwiLmFqX2JiX2Zvcm1CbG9ja1wiKS50b2dnbGUoXCJzbG93XCIpLCBzKHRoaXMpLnRvZ2dsZUNsYXNzKFwiZ3JhZGVyMTgwXCIpLCBmLnJlbnNhRWRpdGZvcm0oKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfTWFpbktyeXBpblNraW5Db250YWluZXIub24oXCJjbGlja1wiLCBcIi5ib2t0aXBzbGlzdHNob3dcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHMoXCIuYWpfYmJfZm9ybUJsb2NrXCIpLnRvZ2dsZShcInNsb3dcIiksIHModGhpcykudG9nZ2xlQ2xhc3MoXCJncmFkZXIxODBcIiksICExO1xuICAgICAgfSk7XG4gICAgfSwgZ2V0Ym9rdGlwc2xpc3Q6IGZ1bmN0aW9uIGdldGJva3RpcHNsaXN0KHQsIGUpIHtcbiAgICAgIHZhciBpID0gbS5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl9ib2t0aXBzbGlzdF90bXA7dGhpcy5SZW5kZXIodCwgaSwgZSk7XG4gICAgfSwgZ2V0Ym9rdGlwc2J5SUQ6IGZ1bmN0aW9uIGdldGJva3RpcHNieUlEKHQsIGUpIHtcbiAgICAgIGYuZ2V0Qm9rdGlwc0J5SWRGb3JFZGl0KHQsIGUpO1xuICAgIH0sIHVwZGJva3RpcHNFZGlvcmJ5SUQ6IGZ1bmN0aW9uIHVwZGJva3RpcHNFZGlvcmJ5SUQodCwgZSkge1xuICAgICAgZi51cGRCb2t0aXBzRWRpdG9yKHQsIGUpO1xuICAgIH0sIHVwZGJva3RpcHNieUJvb2tJRDogZnVuY3Rpb24gdXBkYm9rdGlwc2J5Qm9va0lEKHQpIHtcbiAgICAgIGYudXBkQm9rdGlwc0VkaXRvckJ5Qm9va2lkKHQpO1xuICAgIH0sIGZvcm11cGRhdGU6IGZ1bmN0aW9uIGZvcm11cGRhdGUodCkge1xuICAgICAgZi5yZW5zYUVkaXRmb3JtKCksIHRoaXMuaW5pdGJvb2tsaXN0KHQpO1xuICAgIH0sIGluaXRib29rbGlzdDogZnVuY3Rpb24gaW5pdGJvb2tsaXN0KHQsIGUpIHtcbiAgICAgIHZhciBpID0gbS5hcGkuYm9rdGlwc2xpc3Rvci5nZXR1c2VyYm9rdGlwc2xpc3Q7dGhpcy5nZXRib2t0aXBzbGlzdChpKHQpLCB0KSwgZSAmJiBmLnVwZEJva3RpcHNFZGl0b3JCeUJvb2tpZChlKTtcbiAgICB9LCBSZW5kZXI6IGZ1bmN0aW9uIFJlbmRlcih0LCBlLCBpLCBzKSB7XG4gICAgICBzID0gcyB8fCBcImFzY1wiLCBoLmdldGpzb25kYXRhKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBpID0gdC5Cb2t0aXBzO3QuQm9rdGlwcyA9IG4ub3JkZXJCeShpLCBbXCJUaXRsZVwiXSwgW3NdKSwgcC5pbmplY3RodG1sdGVtcGxhdGUoXCIjYmJfYWpfYm9rdGlwc3RlbXBsYXRlY29udGFpbmVyXCIsIGUsIHQsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgIH0pO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBuKSB7XG4gIHZhciBzID0gbigwKSxcbiAgICAgIHIgPSBuKDYpLFxuICAgICAgbyA9IG4oMSkuY29uZmlnO3QuZXhwb3J0cyA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdCh0KSB7XG4gICAgICBuZXcgYXV0b0NvbXBsZXRlKHsgc2VsZWN0b3I6IHQsIG1pbkNoYXJzOiAyLCBzb3VyY2U6IGZ1bmN0aW9uIHNvdXJjZSh0LCBlKSB7XG4gICAgICAgICAgdmFyIGkgPSBvLmFwaS5hdXRvY29tcGxldGUuZ2V0dXJsLFxuICAgICAgICAgICAgICBuID0gKGkoMTApLCB7IFNlYXJjaHN0cjogdCB9KTtzLmFqYXgoeyBhc3luYzogITAsIHR5cGU6IFwicG9zdFwiLCBkYXRhVHlwZTogXCJqc29uXCIsIGRhdGE6IG4sIHVybDogaSgxMCksIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3ModCkge1xuICAgICAgICAgICAgICB2YXIgaSA9IFtdO3MuZWFjaCh0LkJvb2tMaXN0LCBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIGkucHVzaChbZS5UaXRsZSwgZS5Cb29raWRdKTtcbiAgICAgICAgICAgICAgfSksIGUoaSk7XG4gICAgICAgICAgICB9LCBlcnJvcjogZnVuY3Rpb24gZXJyb3IodCwgZSwgaSkge1xuICAgICAgICAgICAgICBhbGVydChcIk7DpXR0IGJsZXYgZmVsIHZpZCBow6RtdG5pbmcgYXYgYXJyYW5nZW1hbmchXCIpO1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgfSwgcmVuZGVySXRlbTogZnVuY3Rpb24gcmVuZGVySXRlbSh0LCBlKSB7XG4gICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25cIiBkYXRhLWJvb2tpZD1cIicgKyB0WzFdICsgJ1wiPicgKyB0WzBdICsgXCI8L2Rpdj5cIjtcbiAgICAgICAgfSwgb25TZWxlY3Q6IGZ1bmN0aW9uIG9uU2VsZWN0KHQsIGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gci5jYWxsRXZlbnRzLmVtaXQoXCJ1cGRhdGVJbWdcIiwgaS5kYXRhc2V0LmJvb2tpZCksICExO1xuICAgICAgICB9IH0pO1xuICAgIH0sIGRlbW86IGZ1bmN0aW9uIGRlbW8oKSB7XG4gICAgICBuZXcgYXV0b0NvbXBsZXRlKHsgc2VsZWN0b3I6IFwiI3R4dGJva3RpcHNUaXRsZTJcIiwgbWluQ2hhcnM6IDEsIHNvdXJjZTogZnVuY3Rpb24gc291cmNlKHQsIGUpIHtcbiAgICAgICAgICB0ID0gdC50b0xvd2VyQ2FzZSgpO3ZhciBuID0gW1wiQWN0aW9uU2NyaXB0XCIsIFwiQXBwbGVTY3JpcHRcIiwgXCJBc3BcIiwgXCJBc3NlbWJseVwiLCBcIkJBU0lDXCIsIFwiQmF0Y2hcIiwgXCJDXCIsIFwiQysrXCIsIFwiQ1NTXCIsIFwiQ2xvanVyZVwiLCBcIkNPQk9MXCIsIFwiQ29sZEZ1c2lvblwiLCBcIkVybGFuZ1wiLCBcIkZvcnRyYW5cIiwgXCJHcm9vdnlcIiwgXCJIYXNrZWxsXCIsIFwiSFRNTFwiLCBcIkphdmFcIiwgXCJKYXZhU2NyaXB0XCIsIFwiTGlzcFwiLCBcIlBlcmxcIiwgXCJQSFBcIiwgXCJQb3dlclNoZWxsXCIsIFwiUHl0aG9uXCIsIFwiUnVieVwiLCBcIlNjYWxhXCIsIFwiU2NoZW1lXCIsIFwiU1FMXCIsIFwiVGVYXCIsIFwiWE1MXCJdLFxuICAgICAgICAgICAgICBzID0gW107Zm9yIChpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIH5uW2ldLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0KSAmJiBzLnB1c2gobltpXSk7XG4gICAgICAgICAgfWUocyk7XG4gICAgICAgIH0gfSk7XG4gICAgfSB9O1xufSwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgdC5leHBvcnRzID0geyBjaGVja3BhcmFtc2ludXJsOiBmdW5jdGlvbiBjaGVja3BhcmFtc2ludXJsKHQpIHtcbiAgICAgIHZhciBlID0gdm9pZCAwLFxuICAgICAgICAgIGkgPSB7fSxcbiAgICAgICAgICBuID0gL1xcKy9nLFxuICAgICAgICAgIHMgPSAvKFteJj1dKyk9PyhbXiZdKikvZyxcbiAgICAgICAgICByID0gZnVuY3Rpb24gcih0KSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodC5yZXBsYWNlKG4sIFwiIFwiKSk7XG4gICAgICB9LFxuICAgICAgICAgIG8gPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKTtmb3IgKDsgZSA9IHMuZXhlYyhvKTspIHtcbiAgICAgICAgaVtyKGVbMV0pXSA9IHIoZVsyXSk7XG4gICAgICB9aWYgKCFpLnRhYikge1xuICAgICAgICB2YXIgX3QzID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoXCIvXCIpLFxuICAgICAgICAgICAgX2U2ID0gX3QzLmluZGV4T2YoXCJib29raWRcIik7X2U2ID4gMCAmJiAoaS5ib29raWQgPSBfdDNbX2U2ICsgMV0pLCAoX2U2ID0gX3QzLmluZGV4T2YoXCJ0eXBcIikpID4gMCAmJiAoaS50eXAgPSBfdDNbX2U2ICsgMV0pO1xuICAgICAgfXJldHVybiBpO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIHZhciBuID0gaSgwKSxcbiAgICAgIHMgPSBpKDMpLFxuICAgICAgciA9IGkoNSksXG4gICAgICBvID0gaSg4KSxcbiAgICAgIGEgPSBpKDEpLmNvbmZpZzt2YXIgbCA9IHsgQXBwcm92ZWQ6IFwiMFwiLCBBdXRob3I6IFwiXCIsIEJvb2tpZDogXCIwXCIsIFRpdGxlOiBcIlwiLCBVc2VyYWdlOiBcIjBcIiwgSGlnaEFnZTogXCIwXCIsIExvd0FnZTogXCIwXCIsIFJldmlldzogXCJcIiwgVGlwdHlwZTogXCIwXCIsIFVzZXJpZDogXCIwXCIsIFVzZXJOYW1lOiBcIlwiLCBDYXRlZ29yeTogXCIwXCIsIFRpcElEOiBcIjBcIiwgSW1nU3JjOiBcIlwiIH07dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQsIGUpIHtcbiAgICAgIHRoaXMuY2FjaGVEb20oKTtcbiAgICB9LCBjYWNoZURvbTogZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICB0aGlzLiRiYl9hal9Gb3JtX3R4dGJva3RpcHNUaXRsZSA9IG4oXCIjdHh0Ym9rdGlwc1RpdGxlXCIpLCB0aGlzLiRiYl9hal9Gb3JtX2xibGJva3RpcHNUaXRsZSA9IG4oXCIjbGJsYm9rdGlwc1RpdGxlXCIpLCB0aGlzLiRiYl9hal9Gb3JtX2xibEFKS3J5cEluV3JpdGVDb250ZW50ID0gbihcIiNsYmxBSktyeXBJbldyaXRlQ29udGVudFwiKSwgdGhpcy4kYmJfYWpfRm9ybV9jbWRTZW5kID0gbihcIiNjbWRTZW5kQm9rdGlwc0Zvcm1cIiksIHRoaXMuJGJiX2FqX0Zvcm1fY21kUmVzZXQgPSBuKFwiI2NtZFJlc2V0Qm9rdGlwc0Zvcm1cIiksIHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YSA9IG4oXCIjYmJfYWpfYm9rdGlwc0Zvcm1NZXRhXCIpLCB0aGlzLiRiYl9hal9ib2t0aXBzRm9ybV9leGVtcGxlSW1nID0gbihcIi5ib2t0aXBzRXhlbXBsZWltZyAuYm9va2l0ZW0taW1hZ2UgaW1nXCIpO1xuICAgIH0sIGdldEJva3RpcHNCeUlkRm9yRWRpdDogZnVuY3Rpb24gZ2V0Qm9rdGlwc0J5SWRGb3JFZGl0KHQsIGUpIHtcbiAgICAgIHZhciBpID0gYS5hcGkuYm9rdGlwc2xpc3Rvci5nZXR1c2VyYm9rdGlwc0J5VGlwSUQsXG4gICAgICAgICAgbiA9IGEuaGFuZGxlYmFydGVtcGxhdGUuaGJfYm9rdGlwc01vZGFsVmlld190bXA7dGhpcy5SZW5kZXIoaSh0LCBlKSwgbiwgZSk7XG4gICAgfSwgdXBkQm9rdGlwc0VkaXRvcjogZnVuY3Rpb24gdXBkQm9rdGlwc0VkaXRvcih0LCBlKSB7XG4gICAgICB2YXIgaSA9IHRoaXMsXG4gICAgICAgICAgciA9IGEuYXBpLmJva3RpcHNsaXN0b3IuZ2V0dXNlcmJva3RpcHNCeVRpcElEO3RoaXMucmVuc2FFZGl0Zm9ybSgpLCBzLmdldGpzb25kYXRhKHIodCwgZSksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG4uZWFjaCh0LkJva3RpcHMsIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgaS5IZWxwZXJVcGRhdGVGb3JtVmFsdWVzKGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sIHJlbnNhRWRpdGZvcm06IGZ1bmN0aW9uIHJlbnNhRWRpdGZvcm0oKSB7XG4gICAgICB0aGlzLiRiYl9hal9Gb3JtX2NtZFNlbmQuYXR0cihcImRhdGEtaWRcIiwgXCIwXCIpLCB0aGlzLiRiYl9hal9Gb3JtX3R4dGJva3RpcHNUaXRsZS52YWwoXCJcIiksIHRpbnlNQ0UuYWN0aXZlRWRpdG9yLnNldENvbnRlbnQoXCJcIiksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycEJva3RpcFN1aXRhYmxlQWdlTWluXCIpLCBcIjFcIiksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycEJva3RpcFN1aXRhYmxlQWdlTWF4XCIpLCBcIjFcIiksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycEJva3RpcEFtbmVuXCIpLCBcIjFcIiksIHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS1hcHByb3ZlZFwiLCBcIjBcIiksIHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS1hdXRob3JcIiwgXCJcIiksIHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS1ib29raWRcIiwgXCIwXCIpLCB0aGlzLiRiYl9hal9ib2t0aXBzRm9ybU1ldGEuYXR0cihcImRhdGEtdXNlcm5hbW5cIiwgXCJcIiksIHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS1Vc2VyYWdlXCIsIFwiMFwiKSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1fZXhlbXBsZUltZy5hdHRyKFwic3JjXCIsIG8uZ2V0aW1hZ2VIZWxwZXIoXCIwXCIpKSwgdGhpcy4kYmJfYWpfRm9ybV9jbWRTZW5kLmF0dHIoXCJkYXRhLWlkXCIsIFwiMFwiKTtcbiAgICB9LCBhZGRCb2t0aXBzSXRlbTogZnVuY3Rpb24gYWRkQm9rdGlwc0l0ZW0odCwgZSkge1xuICAgICAgdmFyIGkgPSBhLmFwaS5ib2t0aXBzbGlzdG9yLmFkZGJva3RpcHNJdGVtO3RoaXMuQXBpUG9zdEhhbmRsZXIoaSgpLCB0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICBlKHQpO1xuICAgICAgfSk7XG4gICAgfSwgZWRpdEJva3RpcHNJdGVtOiBmdW5jdGlvbiBlZGl0Qm9rdGlwc0l0ZW0odCwgZSkge1xuICAgICAgdmFyIGkgPSBhLmFwaS5ib2t0aXBzbGlzdG9yLmVkaXRib2t0aXBzSXRlbTt0aGlzLkFwaVBvc3RIYW5kbGVyKGkoKSwgdCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgZSh0KTtcbiAgICAgIH0pO1xuICAgIH0sIGRlbGV0ZUJva3RpcHNJdGVtOiBmdW5jdGlvbiBkZWxldGVCb2t0aXBzSXRlbSh0LCBlLCBpKSB7XG4gICAgICB2YXIgbiA9IGEuYXBpLmJva3RpcHNsaXN0b3IuZGVsYm9rdGlwc0l0ZW07bC5UaXBJRCA9IHQsIGwuVXNlcmlkID0gZSwgcy5wb3N0anNvbmRhdGEobigpLCBsLCBmdW5jdGlvbiAodCkge1xuICAgICAgICBpKCk7XG4gICAgICB9KTtcbiAgICB9LCB1cGRCb2t0aXBzRWRpdG9yQnlCb29raWQ6IGZ1bmN0aW9uIHVwZEJva3RpcHNFZGl0b3JCeUJvb2tpZCh0KSB7XG4gICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgaSA9IGEuYXBpLmJva3RpcHNsaXN0b3IuZ2V0Ym9va0NvbnRleHRCeUJvb2tJRDtzLmdldGpzb25kYXRhKGkodCksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG4uZWFjaCh0LkJva3RpcHMsIGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgZS5IZWxwZXJVcGRhdGVGb3JtVmFsdWVzKGkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sIEFwaVBvc3RIYW5kbGVyOiBmdW5jdGlvbiBBcGlQb3N0SGFuZGxlcih0LCBlLCBpKSB7XG4gICAgICB2YXIgbiA9IHRoaXMuSGVscGVyY29sbGVjdEZvcm1WYWx1ZXMoZSk7dGhpcy52YWxpZGF0ZVNhdmUobikgPyBzLnBvc3Rqc29uZGF0YSh0LCBuLCBmdW5jdGlvbiAodCkge1xuICAgICAgICBpKCEwKTtcbiAgICAgIH0pIDogaSghMSk7XG4gICAgfSwgUmVuZGVyOiBmdW5jdGlvbiBSZW5kZXIodCwgZSwgaSkge1xuICAgICAgcy5nZXRqc29uZGF0YSh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICByLmluamVjdGh0bWx0ZW1wbGF0ZShcIiNiYl9hal9tb2RhbENvbnRhaW5lclwiLCBlLCB0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJhcGkga8O2cnQhXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sIHZhbGlkYXRlU2F2ZTogZnVuY3Rpb24gdmFsaWRhdGVTYXZlKCkge1xuICAgICAgdmFyIHQgPSAhMDtyZXR1cm4gbC5UaXRsZSB8fCAodGhpcy4kYmJfYWpfRm9ybV9sYmxib2t0aXBzVGl0bGUuYXR0cihcInN0eWxlXCIsIFwiY29sb3I6cmVkOyBmb250LXdlaWdodDpib2xkO1wiKSwgdCA9ICExKSwgbC5SZXZpZXcgfHwgKHRoaXMuJGJiX2FqX0Zvcm1fbGJsQUpLcnlwSW5Xcml0ZUNvbnRlbnQuYXR0cihcInN0eWxlXCIsIFwiY29sb3I6cmVkOyBmb250LXdlaWdodDpib2xkO1wiKSwgdCA9ICExKSwgdCAmJiAodGhpcy4kYmJfYWpfRm9ybV9sYmxib2t0aXBzVGl0bGUucmVtb3ZlQXR0cihcInN0eWxlXCIpLCB0aGlzLiRiYl9hal9Gb3JtX2xibEFKS3J5cEluV3JpdGVDb250ZW50LnJlbW92ZUF0dHIoXCJzdHlsZVwiKSksIHQ7XG4gICAgfSwgSGVscGVyY29sbGVjdEZvcm1WYWx1ZXM6IGZ1bmN0aW9uIEhlbHBlcmNvbGxlY3RGb3JtVmFsdWVzKHQpIHtcbiAgICAgIHJldHVybiBsLkFwcHJvdmVkID0gdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1NZXRhLmF0dHIoXCJkYXRhLWFwcHJvdmVkXCIpLCBsLkF1dGhvciA9IHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS1hdXRob3JcIiksIGwuQm9va2lkID0gdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1NZXRhLmF0dHIoXCJkYXRhLWJvb2tpZFwiKSwgbC5UaXRsZSA9IHRoaXMuJGJiX2FqX0Zvcm1fdHh0Ym9rdGlwc1RpdGxlLnZhbCgpLCBsLlVzZXJhZ2UgPSB0aGlzLiRiYl9hal9ib2t0aXBzRm9ybU1ldGEuYXR0cihcImRhdGEtVXNlcmFnZVwiKSwgbC5IaWdoQWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkcnBCb2t0aXBTdWl0YWJsZUFnZU1heFwiKS52YWx1ZSwgbC5Mb3dBZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycEJva3RpcFN1aXRhYmxlQWdlTWluXCIpLnZhbHVlLCBsLlJldmlldyA9IHRpbnlNQ0UuYWN0aXZlRWRpdG9yLmdldENvbnRlbnQoKSwgbC5UaXB0eXBlID0gXCIwXCIsIGwuVXNlcmlkID0gdCwgbC5Vc2VyTmFtZSA9IHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS11c2VybmFtblwiKSwgbC5DYXRlZ29yeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJwQm9rdGlwQW1uZW5cIikudmFsdWUsIGwuVGlwSUQgPSB0aGlzLiRiYl9hal9Gb3JtX2NtZFNlbmQuYXR0cihcImRhdGEtaWRcIiksIGwuSW1nU3JjID0gdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1fZXhlbXBsZUltZy5hdHRyKFwic3JjXCIpLCBsO1xuICAgIH0sIEhlbHBlclVwZGF0ZUZvcm1WYWx1ZXM6IGZ1bmN0aW9uIEhlbHBlclVwZGF0ZUZvcm1WYWx1ZXModCkge1xuICAgICAgdGhpcy4kYmJfYWpfRm9ybV9jbWRTZW5kLmF0dHIoXCJkYXRhLWlkXCIsIHQuVGlwSUQpLCB0aGlzLiRiYl9hal9Gb3JtX3R4dGJva3RpcHNUaXRsZS52YWwodC5UaXRsZSksIHQuUmV2aWV3IHx8ICh0LlJldmlldyA9IFwiXCIpO3RyeSB7XG4gICAgICAgIHRpbnlNQ0UuYWN0aXZlRWRpdG9yLmV4ZWNDb21tYW5kKFwibWNlSW5zZXJ0Q29udGVudFwiLCAhMSwgdC5SZXZpZXcpO1xuICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRpbnltY2UgbGFkZGFkZXMgaW50ZSBzb20gZGVuIHNrdWxsZVwiKTtcbiAgICAgIH1yZXR1cm4gby5IZWxwZXJzZXRTZWxlY3RlZEluZGV4KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJwQm9rdGlwU3VpdGFibGVBZ2VNaW5cIiksIHQuTG93QWdlKSwgby5IZWxwZXJzZXRTZWxlY3RlZEluZGV4KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHJwQm9rdGlwU3VpdGFibGVBZ2VNYXhcIiksIHQuSGlnaEFnZSksIG8uSGVscGVyc2V0U2VsZWN0ZWRJbmRleChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRycEJva3RpcEFtbmVuXCIpLCB0LkNhdGVnb3J5KSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1NZXRhLmF0dHIoXCJkYXRhLWFwcHJvdmVkXCIsIHQuQXBwcm92ZWQpLCB0aGlzLiRiYl9hal9ib2t0aXBzRm9ybU1ldGEuYXR0cihcImRhdGEtYXV0aG9yXCIsIHQuQXV0aG9yKSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1NZXRhLmF0dHIoXCJkYXRhLWJvb2tpZFwiLCB0LkJvb2tpZCksIHRoaXMuJGJiX2FqX2Jva3RpcHNGb3JtTWV0YS5hdHRyKFwiZGF0YS11c2VybmFtblwiLCB0LlVzZXJOYW1lKSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1NZXRhLmF0dHIoXCJkYXRhLVVzZXJhZ2VcIiwgdC5Vc2VyYWdlKSwgdGhpcy4kYmJfYWpfYm9rdGlwc0Zvcm1fZXhlbXBsZUltZy5hdHRyKFwic3JjXCIsIHQuSW1nU3JjKSwgdDtcbiAgICB9IH07XG59LCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICBpKDIpO3ZhciBuID0gaSgwKSxcbiAgICAgIHMgPSBpKDQpLFxuICAgICAgciA9IGkoNyksXG4gICAgICBvID0gKGkoNiksIGkoMykpLFxuICAgICAgYSA9IGkoNSksXG4gICAgICBsID0gaSgyNyksXG4gICAgICB1ID0gaSgxKS5jb25maWc7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHIuaW5pdChcIlNjb3JlYm9hcmRcIiksIHMuaW5pdChcIlNjb3JlYm9hcmRcIiksIHRoaXMuY2FjaGVEb20oKSwgdGhpcy5CaW5kRXZlbnQodCksIHRoaXMuaW5pdEJhZGdlcyh0KTtcbiAgICB9LCBjYWNoZURvbTogZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICB0aGlzLiRhal9iYl9LcnlwaW5NYWluR3JpZCA9IG4oXCIuYWpfYmJfS3J5cGluTWFpbkdyaWRcIiksIHRoaXMuJGJiX2FqX3Nrcml2Ym9rZW5iYWRnZWJsb2NrID0gbihcIiNiYl9hal9za3JpdmJva2VuYmFkZ2VibG9ja1wiKSwgdGhpcy4kYmJfYWpfYm9rdGlwc2JhZGdlYmxvY2sgPSBuKFwiI2JiX2FqX2Jva3RpcHNiYWRnZWJsb2NrXCIpLCB0aGlzLiRiYl9hal9zcGVjaWFsYmFkZ2VibG9jayA9IG4oXCIjYmJfYWpfc3BlY2lhbGJhZGdlYmxvY2tcIiksIHRoaXMuJGJiX2FqX2hpZ2hzY29yZWJhZGdlYmxvY2sgPSBuKFwiI2JiX2FqX2hpZ2hzY29yZWJhZGdlYmxvY2tcIiksIHRoaXMuJGJiX2FqX3Njb3JlQm94ID0gbihcIi5iYl9hal9zY29yZUJveFwiKTtcbiAgICB9LCBCaW5kRXZlbnQ6IGZ1bmN0aW9uIEJpbmRFdmVudCh0KSB7fSwgaW5pdEJhZGdlczogZnVuY3Rpb24gaW5pdEJhZGdlcyh0KSB7XG4gICAgICB2YXIgZSA9IHUuYXBpLnNjb3JlYm9hcmQuZ2V0dXNlcmJhZGdlc2xpc3QsXG4gICAgICAgICAgaSA9IHUuaGFuZGxlYmFydGVtcGxhdGUuaGJfYm9rdGlwc2xpc3RfdG1wO3RoaXMuUmVuZGVyKGUodCksIGksIHQpO1xuICAgIH0sIFNrcmlib2tlbmJhZGdlc0Jsb2NrX3VwZDogZnVuY3Rpb24gU2tyaWJva2VuYmFkZ2VzQmxvY2tfdXBkKHQpIHtcbiAgICAgIHZhciBlID0gdS5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl9za3JpYm9rZW5iYWRnZXNfdG1wO2EuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX3Nrcml2Ym9rZW5iYWRnZWJsb2NrXCIsIGUsIHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJza3JpdmJva2VuIGJhZGdlc1wiKTtcbiAgICAgIH0pO1xuICAgIH0sIEJva3RpcHNiYWRnZXNCbG9ja191cGQ6IGZ1bmN0aW9uIEJva3RpcHNiYWRnZXNCbG9ja191cGQodCkge1xuICAgICAgdmFyIGUgPSB1LmhhbmRsZWJhcnRlbXBsYXRlLmhiX2Jva3RpcHNiYWRnZXNfdG1wO2EuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX2Jva3RpcHNiYWRnZWJsb2NrXCIsIGUsIHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJib2t0aXBzIGJhZGdlc1wiKTtcbiAgICAgIH0pO1xuICAgIH0sIFNwZWNpYWxiYWRnZXNCbG9ja191cGQ6IGZ1bmN0aW9uIFNwZWNpYWxiYWRnZXNCbG9ja191cGQodCkge1xuICAgICAgdmFyIGUgPSB1LmhhbmRsZWJhcnRlbXBsYXRlLmhiX3NwZWNpYWxiYWRnZXNfdG1wO2EuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX3NwZWNpYWxiYWRnZWJsb2NrXCIsIGUsIHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJza3JpdmJva2VuIGJhZGdlc1wiKTtcbiAgICAgIH0pO1xuICAgIH0sIEhpZ2hzY29yZWJhZGdlc0Jsb2NrX3VwZDogZnVuY3Rpb24gSGlnaHNjb3JlYmFkZ2VzQmxvY2tfdXBkKHQpIHtcbiAgICAgIHZhciBlID0gdS5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl9oaWdoc2NvcmViYWRnZXNfdG1wO2EuaW5qZWN0aHRtbHRlbXBsYXRlKFwiI2JiX2FqX2hpZ2hzY29yZWJhZGdlYmxvY2tcIiwgZSwgdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInNrcml2Ym9rZW4gYmFkZ2VzXCIpO1xuICAgICAgfSk7XG4gICAgfSwgUmVuZGVyOiBmdW5jdGlvbiBSZW5kZXIodCwgZSwgaSkge1xuICAgICAgdmFyIG4gPSB0aGlzO28uZ2V0anNvbmRhdGEodCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgbC5jb2xsZWN0QmFkZ2VibG9jayh0LCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgIG4uU2tyaWJva2VuYmFkZ2VzQmxvY2tfdXBkKHQpLCBuLkJva3RpcHNiYWRnZXNCbG9ja191cGQodCksIG4uU3BlY2lhbGJhZGdlc0Jsb2NrX3VwZCh0KSwgbi5IaWdoc2NvcmViYWRnZXNCbG9ja191cGQodCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSB9O1xufSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcbiAgaSgyKTt2YXIgbiA9IGkoMCk7dC5leHBvcnRzID0geyBjb2xsZWN0QmFkZ2VibG9jazogZnVuY3Rpb24gY29sbGVjdEJhZGdlYmxvY2sodCwgZSkge1xuICAgICAgdmFyIGkgPSB0aGlzLFxuICAgICAgICAgIHIgPSBzO24uZWFjaCh0LkJva21hcmtlbHNlciwgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgc3dpdGNoIChlLkF3YXJkR3JvdXApIHtjYXNlIDE6XG4gICAgICAgICAgICByLnNrcml2Ym9rZW5saXN0ID0gaS5jcmVhdGVza3JpdmJva2VubGlzdChlKTticmVhaztjYXNlIDI6XG4gICAgICAgICAgICByLmJva3RpcHNsaXN0ID0gaS5jcmVhdGVib2t0aXBzbGlzdChlKTticmVhaztkZWZhdWx0OlxuICAgICAgICAgICAgMSA9PSBlLk9jY3VyZXMgPyByLmhpZ2hzY29yZWxpc3QucHVzaChlKSA6IHIuc3BlY2lhbGJhZGdlc2xpc3QucHVzaChlKTt9XG4gICAgICB9KSwgZShyKTtcbiAgICB9LCBjcmVhdGVza3JpdmJva2VubGlzdDogZnVuY3Rpb24gY3JlYXRlc2tyaXZib2tlbmxpc3QodCkge1xuICAgICAgdmFyIGUgPSBzLFxuICAgICAgICAgIGkgPSAxO3JldHVybiBuLmVhY2goZS5za3JpdmJva2VubGlzdCwgZnVuY3Rpb24gKG4sIHMpIHtcbiAgICAgICAgaSA8IHQuVXNlckxldmVsICYmIChlLnNrcml2Ym9rZW5saXN0W25dLkJhZGdlc3JjID0gcy5CYWRnZXNyYy5zdWJzdHJpbmcoMCwgcy5CYWRnZXNyYy5sZW5ndGggLSA5KSArIFwiLnBuZ1wiLCBlLnNrcml2Ym9rZW5saXN0W25dLkJlc2tyaXZuaW5nID0gXCJEdSBpbm5laGFyOiBcIiArIGUuc2tyaXZib2tlbnRpdGVsW25dLnRpdGVsICsgXCIgTGV2ZWwgXCIgKyBpLCBlLnNrcml2Ym9rZW5saXN0W25dLkF3YXJkTmFtZSA9IGUuc2tyaXZib2tlbnRpdGVsW25dLnRpdGVsKSwgaSA9PSB0LlVzZXJMZXZlbCAmJiAoZS5za3JpdmJva2VubGlzdFtuXSA9IHQpLCBpKys7XG4gICAgICB9KSwgZS5za3JpdmJva2VubGlzdDtcbiAgICB9LCBjcmVhdGVib2t0aXBzbGlzdDogZnVuY3Rpb24gY3JlYXRlYm9rdGlwc2xpc3QodCkge1xuICAgICAgdmFyIGUgPSBzLFxuICAgICAgICAgIGkgPSAxO3JldHVybiBuLmVhY2goZS5ib2t0aXBzbGlzdCwgZnVuY3Rpb24gKG4sIHMpIHtcbiAgICAgICAgaSA8IHQuVXNlckxldmVsICYmIChlLmJva3RpcHNsaXN0W25dLkJhZGdlc3JjID0gcy5CYWRnZXNyYy5zdWJzdHJpbmcoMCwgcy5CYWRnZXNyYy5sZW5ndGggLSA5KSArIFwiLnBuZ1wiLCBlLmJva3RpcHNsaXN0W25dLkJlc2tyaXZuaW5nID0gXCJEdSBpbm5laGFyOiBcIiArIGUuYm9rdGlwc3RpdGVsW25dLnRpdGVsICsgXCIgTGV2ZWwgXCIgKyBpLCBlLmJva3RpcHNsaXN0W25dLkF3YXJkTmFtZSA9IGUuYm9rdGlwc3RpdGVsW25dLnRpdGVsKSwgaSA9PSB0LlVzZXJMZXZlbCAmJiAoZS5ib2t0aXBzbGlzdFtuXSA9IHQpLCBpKys7XG4gICAgICB9KSwgZS5ib2t0aXBzbGlzdDtcbiAgICB9IH07dmFyIHMgPSB7IHNrcml2Ym9rZW5saXN0OiBbeyBVc2VyaWQ6IFwiMFwiLCBBd2FyZGlkOiBcIjBcIiwgQ291bnRlcjogXCIwXCIsIFVzZXJMZXZlbDogXCIwXCIsIEF3YXJkTmFtZTogXCJcIiwgQmFkZ2VzcmM6IFwiL1BvcnRhbHMvMC9ib2ttYXJrZWxzZXIvTHYxX0JlcmF0dGFyX2dyZXkucG5nXCIsIEJlc2tyaXZuaW5nOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiZWogdXBwbsOlZGQgYmVyw6R0dGFyZSBMZXZlbCAxXCIpKSwgT2NjdXJlczogXCJcIiwgQXdhcmRHcm91cDogXCJcIiwgVG9sZXZlbFVwOiBcIlwiLCBFYXJuRnVuY0lEOiBcIlwiIH0sIHsgVXNlcmlkOiBcIjBcIiwgQXdhcmRpZDogXCIwXCIsIENvdW50ZXI6IFwiMFwiLCBVc2VyTGV2ZWw6IFwiMFwiLCBBd2FyZE5hbWU6IFwiXCIsIEJhZGdlc3JjOiBcIi9Qb3J0YWxzLzAvYm9rbWFya2Vsc2VyL0x2Ml9CZXJhdHRhcmVfZ3JleS5wbmdcIiwgQmVza3Jpdm5pbmc6IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoXCJlaiB1cHBuw6VkZCBiZXLDpHR0YXJlIExldmVsIDJcIikpLCBPY2N1cmVzOiBcIlwiLCBBd2FyZEdyb3VwOiBcIlwiLCBUb2xldmVsVXA6IFwiXCIsIEVhcm5GdW5jSUQ6IFwiXCIgfSwgeyBVc2VyaWQ6IFwiMFwiLCBBd2FyZGlkOiBcIjBcIiwgQ291bnRlcjogXCIwXCIsIFVzZXJMZXZlbDogXCIwXCIsIEF3YXJkTmFtZTogXCJcIiwgQmFkZ2VzcmM6IFwiL1BvcnRhbHMvMC9ib2ttYXJrZWxzZXIvTHYzX1NrcmliZW50X2dyZXkucG5nXCIsIEJlc2tyaXZuaW5nOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiZWogdXBwbsOlZGQgTGV2ZWwgMyBTa3JpYmVudFwiKSksIE9jY3VyZXM6IFwiXCIsIEF3YXJkR3JvdXA6IFwiXCIsIFRvbGV2ZWxVcDogXCJcIiwgRWFybkZ1bmNJRDogXCJcIiB9LCB7IFVzZXJpZDogXCIwXCIsIEF3YXJkaWQ6IFwiMFwiLCBDb3VudGVyOiBcIjBcIiwgVXNlckxldmVsOiBcIjBcIiwgQXdhcmROYW1lOiBcIlwiLCBCYWRnZXNyYzogXCIvUG9ydGFscy8wL2Jva21hcmtlbHNlci9MdjRfU3RvcnNrcmliZW50X2dyZXkucG5nXCIsIEJlc2tyaXZuaW5nOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiZWogdXBwbsOlZGQgTGV2ZWwgNCBTdG9yc2tyaWJlbnRcIikpLCBPY2N1cmVzOiBcIlwiLCBBd2FyZEdyb3VwOiBcIlwiLCBUb2xldmVsVXA6IFwiXCIsIEVhcm5GdW5jSUQ6IFwiXCIgfSwgeyBVc2VyaWQ6IFwiMFwiLCBBd2FyZGlkOiBcIjBcIiwgQ291bnRlcjogXCIwXCIsIFVzZXJMZXZlbDogXCIwXCIsIEF3YXJkTmFtZTogXCJcIiwgQmFkZ2VzcmM6IFwiL1BvcnRhbHMvMC9ib2ttYXJrZWxzZXIvTHY1X0ZvcmZhdHRhcmVfZ3JleS5wbmdcIiwgQmVza3Jpdm5pbmc6IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoXCJlaiB1cHBuw6VkZCBMZXZlbCA1IEbDtnJmYXR0YXJlXCIpKSwgT2NjdXJlczogXCJcIiwgQXdhcmRHcm91cDogXCJcIiwgVG9sZXZlbFVwOiBcIlwiLCBFYXJuRnVuY0lEOiBcIlwiIH0sIHsgVXNlcmlkOiBcIjBcIiwgQXdhcmRpZDogXCIwXCIsIENvdW50ZXI6IFwiMFwiLCBVc2VyTGV2ZWw6IFwiMFwiLCBBd2FyZE5hbWU6IFwiXCIsIEJhZGdlc3JjOiBcIi9Qb3J0YWxzLzAvYm9rbWFya2Vsc2VyL0x2Nl9HdWxkZm9yZmF0dGFyZV9ncmV5LnBuZ1wiLCBCZXNrcml2bmluZzogZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShcImVqIHVwcG7DpWRkIExldmVsIDYgR3VsZGbDtnJmYXR0YXJlXCIpKSwgT2NjdXJlczogXCJcIiwgQXdhcmRHcm91cDogXCJcIiwgVG9sZXZlbFVwOiBcIlwiLCBFYXJuRnVuY0lEOiBcIlwiIH1dLCBib2t0aXBzbGlzdDogW3sgVXNlcmlkOiBcIjBcIiwgQXdhcmRpZDogXCIwXCIsIENvdW50ZXI6IFwiMFwiLCBVc2VyTGV2ZWw6IFwiMFwiLCBBd2FyZE5hbWU6IFwiXCIsIEJhZGdlc3JjOiBcIi9Qb3J0YWxzLzAvYm9rbWFya2Vsc2VyL2J0THYxX0Jva3RpcHNhcl9ncmV5LnBuZ1wiLCBCZXNrcml2bmluZzogZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShcImVqIHVwcG7DpWRkIExldmVsIDEgQm9rdGlwc2FyXCIpKSwgT2NjdXJlczogXCJcIiwgQXdhcmRHcm91cDogXCJcIiwgVG9sZXZlbFVwOiBcIlwiLCBFYXJuRnVuY0lEOiBcIlwiIH0sIHsgVXNlcmlkOiBcIjBcIiwgQXdhcmRpZDogXCIwXCIsIENvdW50ZXI6IFwiMFwiLCBVc2VyTGV2ZWw6IFwiMFwiLCBBd2FyZE5hbWU6IFwiXCIsIEJhZGdlc3JjOiBcIi9Qb3J0YWxzLzAvYm9rbWFya2Vsc2VyL2J0THYyX0Jva3RpcHNhcmVfZ3JleS5wbmdcIiwgQmVza3Jpdm5pbmc6IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoXCJlaiB1cHBuw6VkZCBMZXZlbCAyIEJva3RpcHNhcmVcIikpLCBPY2N1cmVzOiBcIlwiLCBBd2FyZEdyb3VwOiBcIlwiLCBUb2xldmVsVXA6IFwiXCIsIEVhcm5GdW5jSUQ6IFwiXCIgfSwgeyBVc2VyaWQ6IFwiMFwiLCBBd2FyZGlkOiBcIjBcIiwgQ291bnRlcjogXCIwXCIsIFVzZXJMZXZlbDogXCIwXCIsIEF3YXJkTmFtZTogXCJcIiwgQmFkZ2VzcmM6IFwiL1BvcnRhbHMvMC9ib2ttYXJrZWxzZXIvYnRMdjNfU3RvcmJva3RpcHNhcmVfZ3JleS5wbmdcIiwgQmVza3Jpdm5pbmc6IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoXCJlaiB1cHBuw6VkZCBMZXZlbCAzIFN0b3Jib2t0aXBzYXJlXCIpKSwgT2NjdXJlczogXCJcIiwgQXdhcmRHcm91cDogXCJcIiwgVG9sZXZlbFVwOiBcIlwiLCBFYXJuRnVuY0lEOiBcIlwiIH0sIHsgVXNlcmlkOiBcIjBcIiwgQXdhcmRpZDogXCIwXCIsIENvdW50ZXI6IFwiMFwiLCBVc2VyTGV2ZWw6IFwiMFwiLCBBd2FyZE5hbWU6IFwiXCIsIEJhZGdlc3JjOiBcIi9Qb3J0YWxzLzAvYm9rbWFya2Vsc2VyL2J0THY0X01hc3Nib2t0aXBzYXJlX2dyZXkucG5nXCIsIEJlc2tyaXZuaW5nOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiZWogdXBwbsOlZGQgTGV2ZWwgNCBNYXNzYm9rdGlwc2FyZVwiKSksIE9jY3VyZXM6IFwiXCIsIEF3YXJkR3JvdXA6IFwiXCIsIFRvbGV2ZWxVcDogXCJcIiwgRWFybkZ1bmNJRDogXCJcIiB9LCB7IFVzZXJpZDogXCIwXCIsIEF3YXJkaWQ6IFwiMFwiLCBDb3VudGVyOiBcIjBcIiwgVXNlckxldmVsOiBcIjBcIiwgQXdhcmROYW1lOiBcIlwiLCBCYWRnZXNyYzogXCIvUG9ydGFscy8wL2Jva21hcmtlbHNlci9idEx2NV9Cb2t0b2tUaXBzYXJlX2dyZXkucG5nXCIsIEJlc2tyaXZuaW5nOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiZWogdXBwbsOlZGQgTGV2ZWwgNSBCb2t0b2t0aXBzYXJlXCIpKSwgT2NjdXJlczogXCJcIiwgQXdhcmRHcm91cDogXCJcIiwgVG9sZXZlbFVwOiBcIlwiLCBFYXJuRnVuY0lEOiBcIlwiIH1dLCBzcGVjaWFsYmFkZ2VzbGlzdDogW10sIGhpZ2hzY29yZWxpc3Q6IFtdLCBza3JpdmJva2VudGl0ZWw6IFt7IHRpdGVsOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiQmVyw6R0dGFyXCIpKSB9LCB7IHRpdGVsOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiQmVyw6R0dGFyZVwiKSkgfSwgeyB0aXRlbDogZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShcIlNrcmliZW50XCIpKSB9LCB7IHRpdGVsOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiU3RvcnNrcmliZW50XCIpKSB9LCB7IHRpdGVsOiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKFwiRsO2cmZhdHRhcmVcIikpIH0sIHsgdGl0ZWw6IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoXCJHdWxkZsO2cmZhdHRhcmVcIikpIH1dLCBib2t0aXBzdGl0ZWw6IFt7IHRpdGVsOiBcIkJva3RpcHNhclwiIH0sIHsgdGl0ZWw6IFwiQm9rdGlwc2FyZVwiIH0sIHsgdGl0ZWw6IFwiU3RvcmJva3RpcHNhcmVcIiB9LCB7IHRpdGVsOiBcIk1hc3NCb2t0aXBzYXJlXCIgfSwgeyB0aXRlbDogXCJCb2t0b2tUaXBzYXJlXCIgfV0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIGkoMik7dmFyIG4gPSBpKDApO2koOSk7dmFyIHMgPSBpKDQpLFxuICAgICAgciA9IGkoNyksXG4gICAgICBvID0gaSg2KSxcbiAgICAgIGEgPSBpKDMpLFxuICAgICAgbCA9IGkoNSksXG4gICAgICB1ID0gaSgxKS5jb25maWc7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHIuaW5pdChcIkJpYmJsb21vblwiKSwgcy5pbml0KFwiQmliYmxvbW9uXCIpLCB0aGlzLmNhY2hlRG9tKCksIHRoaXMuQmluZEV2ZW50KHQpLCB0aGlzLmluaXRiaWJibG9tb25MaXN0KHQpO1xuICAgIH0sIGNhY2hlRG9tOiBmdW5jdGlvbiBjYWNoZURvbSgpIHtcbiAgICAgIHRoaXMuJGJiX2JiX2FqX01haW5TY29yZSA9IG4oXCIuYmJfYWpfTWFpblNjb3JlXCIpO1xuICAgIH0sIEJpbmRFdmVudDogZnVuY3Rpb24gQmluZEV2ZW50KHQpIHtcbiAgICAgIHZhciBlID0gdGhpcztvLmNhbGxFdmVudHMub24oXCJ1c2VyU2NvcmV1cGRhdGVcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgZS4kYmJfYmJfYWpfTWFpblNjb3JlLmh0bWwodCArIFwiIHhwXCIpO1xuICAgICAgfSk7XG4gICAgfSwgZ2V0YmliYmxvbW9uTGlzdDogZnVuY3Rpb24gZ2V0YmliYmxvbW9uTGlzdCh0LCBlKSB7XG4gICAgICB2YXIgaSA9IHUuaGFuZGxlYmFydGVtcGxhdGUuaGJfYmliYmxvbW9ubGlzdF90bXA7dGhpcy5SZW5kZXIodCwgaSwgZSk7XG4gICAgfSwgaW5pdGJpYmJsb21vbkxpc3Q6IGZ1bmN0aW9uIGluaXRiaWJibG9tb25MaXN0KHQpIHtcbiAgICAgIHZhciBlID0gdS5hcGkuYmliYmxvbW9ubGlzdG9yLmdldHVzZXJiaWJibG9tb25saXN0O3RoaXMuZ2V0YmliYmxvbW9uTGlzdChlKHQpLCB0KTtcbiAgICB9LCBSZW5kZXI6IGZ1bmN0aW9uIFJlbmRlcih0LCBlLCBpKSB7XG4gICAgICBhLmdldGpzb25kYXRhKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG8uY2FsbEV2ZW50cy5lbWl0KFwidXNlclNjb3JldXBkYXRlXCIsIHQuTW9udmFsdWUpLCBsLmluamVjdGh0bWx0ZW1wbGF0ZShcIiNiYl9hal9iaWJibG9tb25saXN0TWFpblwiLCBlLCB0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAganBsaXN0LmluaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IH07XG59LCBmdW5jdGlvbiAodCwgZSwgaSkge1xuICBpKDIpLCBpKDApO3ZhciBuID0gaSg0KTt0LmV4cG9ydHMgPSB7IGluaXQ6IGZ1bmN0aW9uIGluaXQodCkge1xuICAgICAgbi5pbml0KFwiSW52ZW50b3J5XCIpO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIGkoMiksIGkoMCk7dmFyIG4gPSBpKDQpO3QuZXhwb3J0cyA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdCh0KSB7XG4gICAgICBuLmluaXQoXCJTaG9wXCIpO1xuICAgIH0gfTtcbn0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XG4gIGkoMik7dmFyIG4gPSBpKDApLFxuICAgICAgcyA9IGkoNCksXG4gICAgICByID0gaSgzKSxcbiAgICAgIG8gPSBpKDUpLFxuICAgICAgYSA9IGkoMSksXG4gICAgICBsID0gYS5jb25maWcsXG4gICAgICB1ID0gYS51c2VybWVzc2FnZXM7dC5leHBvcnRzID0geyBpbml0OiBmdW5jdGlvbiBpbml0KHQpIHtcbiAgICAgIHMuaW5pdChcIlNldHVwXCIpLCB0aGlzLmNhY2hlRG9tKCksIHRoaXMuQmluZEV2ZW50KHQpLCB0aGlzLmluaXRTZXR0aW5ncyh0KTtcbiAgICB9LCBjYWNoZURvbTogZnVuY3Rpb24gY2FjaGVEb20oKSB7XG4gICAgICB0aGlzLiRiYl9hal9DdXJyZW50QXZhdGFyID0gbihcIiNia19hal9zZXR1cF9hdmF0YXJcIiksIHRoaXMuJGJiX2FqX0N1cnJlbnRTa2luID0gbihcIiNia19hal9zZXR1cF9za2luXCIpLCB0aGlzLiRiYl9hal9hdmF0YXJfbWFpbmdhbGxlcnkgPSBuKFwiI2F2YXRhcl9tYWluZ2FsbGVyeVwiKSwgdGhpcy4kYmJfYWpfc2tpbl9tYWluZ2FsbGVyeSA9IG4oXCIjc2tpbl9tYWluZ2FsbGVyeVwiKSwgdGhpcy4kYWpfYmJfS3J5cGluU2tpbiA9IG4oXCIuYWpfYmJfS3J5cGluU2tpblwiKSwgdGhpcy4kYmtfYWpfbmF2X2F2YXRhciA9IG4oXCIuYmtfYWpfbmF2X2F2YXRhclwiKSwgdGhpcy4kYmJfYWpfYnRuU2V0dGluZ1NhdmUgPSBuKFwiI2J0blNldHRpbmdTYXZlXCIpLCB0aGlzLiRiYl9hal9idG5TZXR0aW5nVGVtcCA9IG4oXCIjYnRuU2V0dGluZ1RlbXBcIiksIHRoaXMuJGJiX2FqX2J0blNldHRpbmdBYm9ydCA9IG4oXCIjYnRuU2V0dGluZ0Fib3J0XCIpO1xuICAgIH0sIEJpbmRFdmVudDogZnVuY3Rpb24gQmluZEV2ZW50KHQpIHtcbiAgICAgIHZhciBlID0gdGhpczt0aGlzLiRiYl9hal9hdmF0YXJfbWFpbmdhbGxlcnkub24oXCJjbGlja1wiLCBcIi5ia19hal9zZXR1cF9hdmF0YXJfaXRlbVwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgaSA9IG4odGhpcykuZmluZChcImltZ1wiKS5hdHRyKFwic3JjXCIpLFxuICAgICAgICAgICAgcyA9IG4odGhpcykuYXR0cihcImRhdGEtYXZhdGFyaXRtXCIpO3JldHVybiBlLiRiYl9hal9DdXJyZW50QXZhdGFyLmF0dHIoXCJzcmNcIiwgaSksIGwudXNlcmluZm8uYXZhdGFyaWQgPSBzLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9za2luX21haW5nYWxsZXJ5Lm9uKFwiY2xpY2tcIiwgXCIuYmtfYWpfc2V0dXBfc2tpbl9pdGVtXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBpID0gbih0aGlzKS5maW5kKFwiaW1nXCIpLmF0dHIoXCJzcmNcIiksXG4gICAgICAgICAgICBzID0gbih0aGlzKS5hdHRyKFwiZGF0YS1za2luaXRtXCIpLFxuICAgICAgICAgICAgciA9IG4odGhpcykuYXR0cihcImRhdGEtc2tpbmNsYXNzXCIpO3JldHVybiBlLiRiYl9hal9DdXJyZW50U2tpbi5hdHRyKFwic3JjXCIsIGkpLCBsLnVzZXJpbmZvLnNraW5pZCA9IHMsIGUuJGJiX2FqX0N1cnJlbnRTa2luLmF0dHIoXCJkYXRhLXNraW5jbGFzc1wiLCByKSwgITE7XG4gICAgICB9KSwgdGhpcy4kYmJfYWpfYnRuU2V0dGluZ1RlbXAub24oXCJjbGlja1wiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgaSA9IGUuJGJiX2FqX0N1cnJlbnRTa2luLmF0dHIoXCJkYXRhLXNraW5jbGFzc1wiKTtyZXR1cm4gZS50ZW1wdXBkYXRlU2tpbihpKSwgZS50ZW1wdXBkYXRlQXZhdGFyKGUuJGJiX2FqX0N1cnJlbnRBdmF0YXIuYXR0cihcInNyY1wiKSksICExO1xuICAgICAgfSksIHRoaXMuJGJiX2FqX2J0blNldHRpbmdBYm9ydC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBpID0gbih0aGlzKS5hdHRyKFwiZGF0YS1kZWZhdWx0XCIpO3JldHVybiBlLiRiYl9hal9DdXJyZW50QXZhdGFyLmF0dHIoXCJzcmNcIiwgbC51c2VyaW5mby5kZWZhdWx0YXZhdGFyaW1nKSwgZS4kYmJfYWpfQ3VycmVudFNraW4uYXR0cihcInNyY1wiLCBsLnVzZXJpbmZvLmRlZmF1bHRza2luaW1nKSwgZS4kYmJfYWpfQ3VycmVudFNraW4uYXR0cihcImRhdGEtc2tpbmNsYXNzXCIsIGwudXNlcmluZm8uZGVmYXVsdHNraW5jbGFzcyksIGUuJGJrX2FqX25hdl9hdmF0YXIuYXR0cihcInNyY1wiLCBsLmFwaS5pbnN0YWxsbmluZ2FyLmN1ckF2YXRhcnNyYyArIFwibWVueWF2YXRhcnMvbmF2X1wiICsgbC51c2VyaW5mby5hdmF0YXJpbWcpLCBlLnRlbXB1cGRhdGVTa2luKGkpLCAhMTtcbiAgICAgIH0pLCB0aGlzLiRiYl9hal9idG5TZXR0aW5nU2F2ZS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIGNvbmZpcm0odS5pbnN0YWxsbmluZ2FyLmNvbmZpcm1TYXZlKSAmJiAoZS51cGRhdGVzZXR0aW5ncyh0LCAxLCBsLnVzZXJpbmZvLmF2YXRhcmlkLCBmdW5jdGlvbiAodCkge30pLCBlLnVwZGF0ZXNldHRpbmdzKHQsIDIsIGwudXNlcmluZm8uc2tpbmlkLCBmdW5jdGlvbiAodCkge30pKTt2YXIgbiA9IGUuJGJiX2FqX0N1cnJlbnRTa2luLmF0dHIoXCJkYXRhLXNraW5jbGFzc1wiKTtyZXR1cm4gZS50ZW1wdXBkYXRlU2tpbihuKSwgZS50ZW1wdXBkYXRlQXZhdGFyKGUuJGJiX2FqX0N1cnJlbnRBdmF0YXIuYXR0cihcInNyY1wiKSksICExO1xuICAgICAgfSk7XG4gICAgfSwgdXBkYXRlc2V0dGluZ3M6IGZ1bmN0aW9uIHVwZGF0ZXNldHRpbmdzKHQsIGUsIGksIG4pIHtcbiAgICAgIHZhciBzID0gbC5hcGkuaW5zdGFsbG5pbmdhci51cGRhdGVzZXR0aW5ncztyLmdldGpzb25kYXRhKHModCwgZSwgaSksIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG4odCk7XG4gICAgICB9KTtcbiAgICB9LCB0ZW1wdXBkYXRlU2tpbjogZnVuY3Rpb24gdGVtcHVwZGF0ZVNraW4odCkge1xuICAgICAgdGhpcy4kYWpfYmJfS3J5cGluU2tpbi5yZW1vdmVDbGFzcyhmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICByZXR1cm4gKGUubWF0Y2goLyhefFxccylhal9iYl9za2luX1xcUysvZykgfHwgW10pLmpvaW4oXCIgXCIpO1xuICAgICAgfSkuYWRkQ2xhc3ModCk7XG4gICAgfSwgdGVtcHVwZGF0ZUF2YXRhcjogZnVuY3Rpb24gdGVtcHVwZGF0ZUF2YXRhcih0KSB7XG4gICAgICB2YXIgZSA9IHQucmVwbGFjZShsLmFwaS5pbnN0YWxsbmluZ2FyLmF2YXRhcmltZ3NyYywgXCJcIik7dGhpcy4kYmtfYWpfbmF2X2F2YXRhci5hdHRyKFwic3JjXCIsIGwuYXBpLmluc3RhbGxuaW5nYXIuY3VyQXZhdGFyc3JjICsgXCJtZW55YXZhdGFycy9uYXZfXCIgKyBlKTtcbiAgICB9LCBnZXRjdXJyZW50QXZhdGFyaW1nOiBmdW5jdGlvbiBnZXRjdXJyZW50QXZhdGFyaW1nKHQpIHtcbiAgICAgIHZhciBlID0gXCJkZWZhdXRsYXZhdGFyX2d1YmJlR2xhZFwiLFxuICAgICAgICAgIGkgPSBcIjMzXCIsXG4gICAgICAgICAgcyA9IGwuYXBpLmluc3RhbGxuaW5nYXIuY3VyQXZhdGFyc3JjO3JldHVybiBuLmVhY2godC5TZXR0aW5nT3B0aW9uTGlzdCwgZnVuY3Rpb24gKG4sIHMpIHtcbiAgICAgICAgcy5TZXR0aW5nc0lEID09IHQuU2V0dGluZ1ZhbHVlICYmIChlID0gcy5TZXR0aW5nU3JjLCBpID0gcy5TZXR0aW5nc0lEKTtcbiAgICAgIH0pLCBzICs9IGUsIHRoaXMuJGJiX2FqX0N1cnJlbnRBdmF0YXIuYXR0cihcInNyY1wiLCBzKSwgbC51c2VyaW5mby5hdmF0YXJpZCA9IGksIGwudXNlcmluZm8uZGVmYXVsdGF2YXRhcmltZyA9IHMsIGwudXNlcmluZm8uZGVmYXVsdGF2YXRhcmlkID0gaSwgbC51c2VyaW5mby5hdmF0YXJpbWcgPSBlLCAhMDtcbiAgICB9LCBnZXRjdXJyZW50c2tpbmltZzogZnVuY3Rpb24gZ2V0Y3VycmVudHNraW5pbWcodCwgZSkge1xuICAgICAgdmFyIGkgPSBcIkdyZWVuTnlja2xwaWdlU3R5bGVcIixcbiAgICAgICAgICBzID0gXCIyXCIsXG4gICAgICAgICAgciA9IFwiYWpfYmJfZ3JlZW5iZ1wiLFxuICAgICAgICAgIG8gPSBsLmFwaS5pbnN0YWxsbmluZ2FyLmN1clNraW5zcmM7cmV0dXJuIG4uZWFjaCh0LlNldHRpbmdPcHRpb25MaXN0LCBmdW5jdGlvbiAoZSwgbikge1xuICAgICAgICBuLlNldHRpbmdzSUQgPT0gdC5TZXR0aW5nVmFsdWUgJiYgKGkgPSBuLlNldHRpbmdOYW1lLCBzID0gbi5TZXR0aW5nc0lELCByID0gbi5TZXR0aW5nQ2xhc3MpO1xuICAgICAgfSksIG8gKz0gaSArIFwiLmpwZ1wiLCB0aGlzLiRiYl9hal9DdXJyZW50U2tpbi5hdHRyKFwic3JjXCIsIG8pLCB0aGlzLiRiYl9hal9DdXJyZW50U2tpbi5hdHRyKFwiZGF0YS1za2luY2xhc3NcIiwgciksIHRoaXMuJGJiX2FqX2J0blNldHRpbmdBYm9ydC5hdHRyKFwiZGF0YS1kZWZhdWx0XCIsIHIpLCBsLnVzZXJpbmZvLnNraW5pZCA9IHMsIGwudXNlcmluZm8uZGVmYXVsdHNraW5pbWcgPSBvLCBsLnVzZXJpbmZvLmRlZmF1bHRza2luY2xhc3MgPSByLCBsLnVzZXJpbmZvLmRlZmF1bHRza2luaWQgPSBzLCAhMDtcbiAgICB9LCBpbml0U2V0dGluZ3M6IGZ1bmN0aW9uIGluaXRTZXR0aW5ncyh0KSB7XG4gICAgICB2YXIgZSA9IGwuYXBpLmluc3RhbGxuaW5nYXIuc3JjO3RoaXMucmVuZGVyKHQsIGUodCkpO1xuICAgIH0sIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHQsIGUpIHtcbiAgICAgIHZhciBpID0gdGhpcyxcbiAgICAgICAgICBuID0gbC5oYW5kbGViYXJ0ZW1wbGF0ZS5oYl9zZXR0aW5nc0F2YXRhcl90bXAsXG4gICAgICAgICAgcyA9IGwuaGFuZGxlYmFydGVtcGxhdGUuaGJfc2V0dGluZ3NTa2luc190bXA7ci5nZXRqc29uZGF0YShlLCBmdW5jdGlvbiAodCkge1xuICAgICAgICBpLmdldGN1cnJlbnRBdmF0YXJpbWcodC5TZXR0aW5nc0xpc3RbMF0pLCBpLmdldGN1cnJlbnRza2luaW1nKHQuU2V0dGluZ3NMaXN0WzFdKSwgby5pbmplY3RodG1sdGVtcGxhdGUoXCIjYXZhdGFyX21haW5nYWxsZXJ5XCIsIG4sIHQuU2V0dGluZ3NMaXN0WzBdLCBmdW5jdGlvbiAoKSB7fSksIG8uaW5qZWN0aHRtbHRlbXBsYXRlKFwiI3NraW5fbWFpbmdhbGxlcnlcIiwgcywgdC5TZXR0aW5nc0xpc3RbMV0sIGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgIH0pO1xuICAgIH0gfTtcbn1dKTsiXX0=
